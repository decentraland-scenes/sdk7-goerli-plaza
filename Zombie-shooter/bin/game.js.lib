[
  {
    "path": "node_modules/@dcl/amd/dist/amd.js",
    "content": "\"use strict\";\n// A naive attempt at getting the global `this`. Donâ€™t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    const anonymousQueue = [];\n    const cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (const x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports =\n                typeof factory === 'function'\n                    ? factory.apply(globalObject, deps) || exports\n                    : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror === 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        const handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule === toModule || depth === 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            const path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        const from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        const inQueue = {};\n        for (const i in registeredModules) {\n            inQueue[i] = false;\n        }\n        const queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            const element = queue.shift();\n            const dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    const dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    const dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        const dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies +\n                ' has not been defined. Please include it as a dependency in ' +\n                parentModule +\n                \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    const _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, \n            // eslint-disable-next-line prefer-rest-params\n            anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0 || moduleName.indexOf('~') === 0) {\n            const exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (const i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (const i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ === 'require' || $ === 'exports' || $ === 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles\n                    .map(($) => '\\n  - ' + $.join(' -> '))\n                    .join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules\n                    .map(($) => '\\n  - ' + $.name)\n                    .join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern =\n            /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@') && !result.startsWith('~')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "d9cdb9faba00783c78503566a49d83990020276d934b72255b2b4551167819c7"
  },
  {
    "path": "node_modules/@dcl/sdk/dist/ecs7/index.js",
    "content": "(function (exports) {\n\t'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tvar dist$1 = {};\n\n\tvar Quaternion = {};\n\n\tvar Vector3$1 = {};\n\n\tvar types$1 = {};\n\n\tvar hasRequiredTypes$1;\n\n\tfunction requireTypes$1 () {\n\t\tif (hasRequiredTypes$1) return types$1;\n\t\thasRequiredTypes$1 = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;\n\t\t\t(function (Orientation) {\n\t\t\t    /**\n\t\t\t     * Clockwise\n\t\t\t     */\n\t\t\t    Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n\t\t\t    /** Counter clockwise */\n\t\t\t    Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n\t\t\t})(exports.Orientation || (exports.Orientation = {}));\n\t\t\t(function (Space) {\n\t\t\t    /** Local (object) space */\n\t\t\t    Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\n\t\t\t    /** World space */\n\t\t\t    Space[Space[\"WORLD\"] = 1] = \"WORLD\";\n\t\t\t    /** Bone space */\n\t\t\t    Space[Space[\"BONE\"] = 2] = \"BONE\";\n\t\t\t})(exports.Space || (exports.Space = {}));\n\t\t\t/**\n\t\t\t * Constant used to convert a value to gamma space\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.ToGammaSpace = 1 / 2.2;\n\t\t\t/**\n\t\t\t * Constant used to convert a value to linear space\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.ToLinearSpace = 2.2;\n\t\t\t/**\n\t\t\t * Constant used to define the minimal number value in Babylon.js\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.Epsilon = 0.000001;\n\t\t\t/**\n\t\t\t * Constant used to convert from Euler degrees to radians\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.DEG2RAD = Math.PI / 180;\n\t\t\t/**\n\t\t\t * Constant used to convert from radians to Euler degrees\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.RAD2DEG = 360 / (Math.PI * 2);\n\t\t\t\n\t} (types$1));\n\t\treturn types$1;\n\t}\n\n\tvar Scalar = {};\n\n\tvar hasRequiredScalar;\n\n\tfunction requireScalar () {\n\t\tif (hasRequiredScalar) return Scalar;\n\t\thasRequiredScalar = 1;\n\t\tObject.defineProperty(Scalar, \"__esModule\", { value: true });\n\t\tScalar.Scalar = void 0;\n\t\t/**\n\t\t * Two pi constants convenient for computation.\n\t\t */\n\t\tconst TwoPi = Math.PI * 2;\n\t\t/**\n\t\t * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n\t\t * @param a - number\n\t\t * @param b - number\n\t\t * @param epsilon - (default = 1.401298E-45)\n\t\t * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n\t\t */\n\t\tfunction withinEpsilon(a, b, epsilon = 1.401298e-45) {\n\t\t    const num = a - b;\n\t\t    return -epsilon <= num && num <= epsilon;\n\t\t}\n\t\t/**\n\t\t * Returns a string : the upper case translation of the number i to hexadecimal.\n\t\t * @param i - number\n\t\t * @returns the upper case translation of the number i to hexadecimal.\n\t\t */\n\t\tfunction toHex(i) {\n\t\t    const str = i.toString(16);\n\t\t    if (i <= 15) {\n\t\t        return ('0' + str).toUpperCase();\n\t\t    }\n\t\t    return str.toUpperCase();\n\t\t}\n\t\t/**\n\t\t * Returns -1 if value is negative and +1 is value is positive.\n\t\t * @param _value - the value\n\t\t * @returns the value itself if it's equal to zero.\n\t\t */\n\t\tfunction sign(value) {\n\t\t    const _value = +value; // convert to a number\n\t\t    if (_value === 0 || isNaN(_value)) {\n\t\t        return _value;\n\t\t    }\n\t\t    return _value > 0 ? 1 : -1;\n\t\t}\n\t\t/**\n\t\t * Returns the value itself if it's between min and max.\n\t\t * Returns min if the value is lower than min.\n\t\t * Returns max if the value is greater than max.\n\t\t * @param value - the value to clmap\n\t\t * @param min - the min value to clamp to (default: 0)\n\t\t * @param max - the max value to clamp to (default: 1)\n\t\t * @returns the clamped value\n\t\t */\n\t\tfunction clamp(value, min = 0, max = 1) {\n\t\t    return Math.min(max, Math.max(min, value));\n\t\t}\n\t\t/**\n\t\t * the log2 of value.\n\t\t * @param value - the value to compute log2 of\n\t\t * @returns the log2 of value.\n\t\t */\n\t\tfunction log2(value) {\n\t\t    return Math.log(value) * Math.LOG2E;\n\t\t}\n\t\t/**\n\t\t * Loops the value, so that it is never larger than length and never smaller than 0.\n\t\t *\n\t\t * This is similar to the modulo operator but it works with floating point numbers.\n\t\t * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n\t\t * With t = 5 and length = 2.5, the result would be 0.0.\n\t\t * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n\t\t * @param value - the value\n\t\t * @param length - the length\n\t\t * @returns the looped value\n\t\t */\n\t\tfunction repeat(value, length) {\n\t\t    return value - Math.floor(value / length) * length;\n\t\t}\n\t\t/**\n\t\t * Normalize the value between 0.0 and 1.0 using min and max values\n\t\t * @param value - value to normalize\n\t\t * @param min - max to normalize between\n\t\t * @param max - min to normalize between\n\t\t * @returns the normalized value\n\t\t */\n\t\tfunction normalize(value, min, max) {\n\t\t    return (value - min) / (max - min);\n\t\t}\n\t\t/**\n\t\t * Denormalize the value from 0.0 and 1.0 using min and max values\n\t\t * @param normalized - value to denormalize\n\t\t * @param min - max to denormalize between\n\t\t * @param max - min to denormalize between\n\t\t * @returns the denormalized value\n\t\t */\n\t\tfunction denormalize(normalized, min, max) {\n\t\t    return normalized * (max - min) + min;\n\t\t}\n\t\t/**\n\t\t * Calculates the shortest difference between two given angles given in degrees.\n\t\t * @param current - current angle in degrees\n\t\t * @param target - target angle in degrees\n\t\t * @returns the delta\n\t\t */\n\t\tfunction deltaAngle(current, target) {\n\t\t    let num = repeat(target - current, 360.0);\n\t\t    if (num > 180.0) {\n\t\t        num -= 360.0;\n\t\t    }\n\t\t    return num;\n\t\t}\n\t\t/**\n\t\t * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n\t\t * @param tx - value\n\t\t * @param length - length\n\t\t * @returns The returned value will move back and forth between 0 and length\n\t\t */\n\t\tfunction pingPong(tx, length) {\n\t\t    const t = repeat(tx, length * 2.0);\n\t\t    return length - Math.abs(t - length);\n\t\t}\n\t\t/**\n\t\t * Interpolates between min and max with smoothing at the limits.\n\t\t *\n\t\t * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n\t\t * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n\t\t * @param from - from\n\t\t * @param to - to\n\t\t * @param tx - value\n\t\t * @returns the smooth stepped value\n\t\t */\n\t\tfunction smoothStep(from, to, tx) {\n\t\t    let t = clamp(tx);\n\t\t    t = -2.0 * t * t * t + 3.0 * t * t;\n\t\t    return to * t + from * (1.0 - t);\n\t\t}\n\t\t/**\n\t\t * Moves a value current towards target.\n\t\t *\n\t\t * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n\t\t * Negative values of maxDelta pushes the value away from target.\n\t\t * @param current - current value\n\t\t * @param target - target value\n\t\t * @param maxDelta - max distance to move\n\t\t * @returns resulting value\n\t\t */\n\t\tfunction moveTowards(current, target, maxDelta) {\n\t\t    let result = 0;\n\t\t    if (Math.abs(target - current) <= maxDelta) {\n\t\t        result = target;\n\t\t    }\n\t\t    else {\n\t\t        result = current + sign(target - current) * maxDelta;\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n\t\t *\n\t\t * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n\t\t *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n\t\t * @param current - current value\n\t\t * @param target - target value\n\t\t * @param maxDelta - max distance to move\n\t\t * @returns resulting angle\n\t\t */\n\t\tfunction moveTowardsAngle(current, target, maxDelta) {\n\t\t    const num = deltaAngle(current, target);\n\t\t    let result = 0;\n\t\t    if (-maxDelta < num && num < maxDelta) {\n\t\t        result = target;\n\t\t    }\n\t\t    else {\n\t\t        result = moveTowards(current, current + num, maxDelta);\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar\n\t\t * @param start - start value\n\t\t * @param end - target value\n\t\t * @param amount - amount to lerp between\n\t\t * @returns the lerped value\n\t\t */\n\t\tfunction lerp(start, end, amount) {\n\t\t    return start + (end - start) * amount;\n\t\t}\n\t\t/**\n\t\t * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n\t\t * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n\t\t * @param start - start value\n\t\t * @param end - target value\n\t\t * @param amount - amount to lerp between\n\t\t * @returns the lerped value\n\t\t */\n\t\tfunction lerpAngle(start, end, amount) {\n\t\t    let num = repeat(end - start, 360.0);\n\t\t    if (num > 180.0) {\n\t\t        num -= 360.0;\n\t\t    }\n\t\t    return start + num * clamp(amount);\n\t\t}\n\t\t/**\n\t\t * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n\t\t * @param a - start value\n\t\t * @param b - target value\n\t\t * @param value - value between a and b\n\t\t * @returns the inverseLerp value\n\t\t */\n\t\tfunction inverseLerp(a, b, value) {\n\t\t    let result = 0;\n\t\t    if (a !== b) {\n\t\t        result = clamp((value - a) / (b - a));\n\t\t    }\n\t\t    else {\n\t\t        result = 0.0;\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n\t\t * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n\t\t * @param value1 - spline value\n\t\t * @param tangent1 - spline value\n\t\t * @param value2 - spline value\n\t\t * @param tangent2 - spline value\n\t\t * @param amount - input value\n\t\t * @returns hermite result\n\t\t */\n\t\tfunction hermite(value1, tangent1, value2, tangent2, amount) {\n\t\t    const squared = amount * amount;\n\t\t    const cubed = amount * squared;\n\t\t    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n\t\t    const part2 = -2.0 * cubed + 3.0 * squared;\n\t\t    const part3 = cubed - 2.0 * squared + amount;\n\t\t    const part4 = cubed - squared;\n\t\t    return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n\t\t}\n\t\t/**\n\t\t * Returns a random float number between and min and max values\n\t\t * @param min - min value of random\n\t\t * @param max - max value of random\n\t\t * @returns random value\n\t\t */\n\t\tfunction randomRange(min, max) {\n\t\t    if (min === max) {\n\t\t        return min;\n\t\t    }\n\t\t    return Math.random() * (max - min) + min;\n\t\t}\n\t\t/**\n\t\t * This function returns percentage of a number in a given range.\n\t\t *\n\t\t * RangeToPercent(40,20,60) will return 0.5 (50%)\n\t\t * RangeToPercent(34,0,100) will return 0.34 (34%)\n\t\t * @param num - to convert to percentage\n\t\t * @param min - min range\n\t\t * @param max - max range\n\t\t * @returns the percentage\n\t\t */\n\t\tfunction rangeToPercent(num, min, max) {\n\t\t    return (num - min) / (max - min);\n\t\t}\n\t\t/**\n\t\t * This function returns number that corresponds to the percentage in a given range.\n\t\t *\n\t\t * PercentToRange(0.34,0,100) will return 34.\n\t\t * @param percent - to convert to number\n\t\t * @param min - min range\n\t\t * @param max - max range\n\t\t * @returns the number\n\t\t */\n\t\tfunction percentToRange(percent, min, max) {\n\t\t    return (max - min) * percent + min;\n\t\t}\n\t\t/**\n\t\t * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n\t\t * @param angle - The angle to normalize in radian.\n\t\t * @returns The converted angle.\n\t\t */\n\t\tfunction normalizeRadians(angle) {\n\t\t    // More precise but slower version kept for reference.\n\t\t    // tslint:disable:no-commented-out-code\n\t\t    /*\n\t\t      // angle = angle % Tools.TwoPi;\n\t\t      // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n\t\t  \n\t\t      //if (angle > Math.PI) {\n\t\t      //\tangle -= Tools.TwoPi;\n\t\t      //}\n\t\t        */\n\t\t    return angle - TwoPi * Math.floor((angle + Math.PI) / TwoPi);\n\t\t}\n\t\t/**\n\t\t * Scalar computation library\n\t\t * @public\n\t\t */\n\t\tScalar.Scalar = {\n\t\t    withinEpsilon,\n\t\t    toHex,\n\t\t    sign,\n\t\t    clamp,\n\t\t    log2,\n\t\t    repeat,\n\t\t    normalize,\n\t\t    denormalize,\n\t\t    deltaAngle,\n\t\t    pingPong,\n\t\t    smoothStep,\n\t\t    moveTowards,\n\t\t    moveTowardsAngle,\n\t\t    lerp,\n\t\t    lerpAngle,\n\t\t    inverseLerp,\n\t\t    hermite,\n\t\t    randomRange,\n\t\t    rangeToPercent,\n\t\t    percentToRange,\n\t\t    normalizeRadians,\n\t\t    TwoPi\n\t\t};\n\t\t\n\t\treturn Scalar;\n\t}\n\n\tvar hasRequiredVector3;\n\n\tfunction requireVector3 () {\n\t\tif (hasRequiredVector3) return Vector3$1;\n\t\thasRequiredVector3 = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Vector3 = void 0;\n\t\t\tconst types_1 = requireTypes$1();\n\t\t\tconst Quaternion_1 = requireQuaternion();\n\t\t\tconst Scalar_1 = requireScalar();\n\t\t\t(function (Vector3) {\n\t\t\t    /**\n\t\t\t     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n\t\t\t     * @param vector - vector to check\n\t\t\t     */\n\t\t\t    function isNonUniform(vector) {\n\t\t\t        const absX = Math.abs(vector.x);\n\t\t\t        const absY = Math.abs(vector.y);\n\t\t\t        if (absX !== absY) {\n\t\t\t            return true;\n\t\t\t        }\n\t\t\t        const absZ = Math.abs(vector.z);\n\t\t\t        if (absX !== absZ) {\n\t\t\t            return true;\n\t\t\t        }\n\t\t\t        // // These lines will never run\n\t\t\t        // if (absY !== absZ) {\n\t\t\t        //   return true\n\t\t\t        // }\n\t\t\t        return false;\n\t\t\t    }\n\t\t\t    Vector3.isNonUniform = isNonUniform;\n\t\t\t    /**\n\t\t\t     * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n\t\t\t     * @param x - defines the first coordinates (on X axis)\n\t\t\t     * @param y - defines the second coordinates (on Y axis)\n\t\t\t     * @param z - defines the third coordinates (on Z axis)\n\t\t\t     */\n\t\t\t    function create(\n\t\t\t    /**\n\t\t\t     * Defines the first coordinates (on X axis)\n\t\t\t     */\n\t\t\t    x = 0, \n\t\t\t    /**\n\t\t\t     * Defines the second coordinates (on Y axis)\n\t\t\t     */\n\t\t\t    y = 0, \n\t\t\t    /**\n\t\t\t     * Defines the third coordinates (on Z axis)\n\t\t\t     */\n\t\t\t    z = 0) {\n\t\t\t        return { x, y, z };\n\t\t\t    }\n\t\t\t    Vector3.create = create;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the addition of the two given vectors.\n\t\t\t     * @param vector1 - the first vector\n\t\t\t     * @param vector2 - the second vector\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function add(vector1, vector2) {\n\t\t\t        return {\n\t\t\t            x: vector1.x + vector2.x,\n\t\t\t            y: vector1.y + vector2.y,\n\t\t\t            z: vector1.z + vector2.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.add = add;\n\t\t\t    /**\n\t\t\t     * Add component by component the vector2 into dest\n\t\t\t     * @param dest - the first vector and destination of addition\n\t\t\t     * @param vector2 - the second vector\n\t\t\t     */\n\t\t\t    function addToRef(vector1, vector2, result) {\n\t\t\t        result.x = vector1.x + vector2.x;\n\t\t\t        result.y = vector1.y + vector2.y;\n\t\t\t        result.z = vector1.z + vector2.z;\n\t\t\t    }\n\t\t\t    Vector3.addToRef = addToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the substraction of the two given vectors.\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function subtract(vector1, vector2) {\n\t\t\t        return {\n\t\t\t            x: vector1.x - vector2.x,\n\t\t\t            y: vector1.y - vector2.y,\n\t\t\t            z: vector1.z - vector2.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.subtract = subtract;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the substraction of the two given vectors.\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function subtractToRef(vector1, vector2, result) {\n\t\t\t        result.x = vector1.x - vector2.x;\n\t\t\t        result.y = vector1.y - vector2.y;\n\t\t\t        result.z = vector1.z - vector2.z;\n\t\t\t    }\n\t\t\t    Vector3.subtractToRef = subtractToRef;\n\t\t\t    /**\n\t\t\t     * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n\t\t\t     * @param x - defines the x coordinate of the operand\n\t\t\t     * @param y - defines the y coordinate of the operand\n\t\t\t     * @param z - defines the z coordinate of the operand\n\t\t\t     * @param result - defines the Vector3 object where to store the result\n\t\t\t     */\n\t\t\t    function subtractFromFloatsToRef(vector1, x, y, z, result) {\n\t\t\t        result.x = vector1.x - x;\n\t\t\t        result.y = vector1.y - y;\n\t\t\t        result.z = vector1.z - z;\n\t\t\t    }\n\t\t\t    Vector3.subtractFromFloatsToRef = subtractFromFloatsToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 with the other sign\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function negate(value) {\n\t\t\t        return { x: -value.x, y: -value.y, z: -value.z };\n\t\t\t    }\n\t\t\t    Vector3.negate = negate;\n\t\t\t    /**\n\t\t\t     * Copy source into dest\n\t\t\t     *\n\t\t\t     */\n\t\t\t    function copy(source, dest) {\n\t\t\t        dest.x = source.x;\n\t\t\t        dest.y = source.y;\n\t\t\t        dest.z = source.z;\n\t\t\t    }\n\t\t\t    Vector3.copy = copy;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"dest\" with the given floats.\n\t\t\t     * @param x - defines the x coordinate of the source\n\t\t\t     * @param y - defines the y coordinate of the source\n\t\t\t     * @param z - defines the z coordinate of the source\n\t\t\t     * @param dest - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function copyFromFloats(x, y, z, dest) {\n\t\t\t        dest.x = x;\n\t\t\t        dest.y = y;\n\t\t\t        dest.z = z;\n\t\t\t    }\n\t\t\t    Vector3.copyFromFloats = copyFromFloats;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 with the same value\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function clone(source) {\n\t\t\t        return Object.assign({}, source);\n\t\t\t    }\n\t\t\t    Vector3.clone = clone;\n\t\t\t    /**\n\t\t\t     * Get the clip factor between two vectors\n\t\t\t     * @param vector0 - defines the first operand\n\t\t\t     * @param vector1 - defines the second operand\n\t\t\t     * @param axis - defines the axis to use\n\t\t\t     * @param size - defines the size along the axis\n\t\t\t     * @returns the clip factor\n\t\t\t     */\n\t\t\t    function getClipFactor(vector0, vector1, axis, size) {\n\t\t\t        const d0 = dot(vector0, axis) - size;\n\t\t\t        const d1 = dot(vector1, axis) - size;\n\t\t\t        const s = d0 / (d0 - d1);\n\t\t\t        return s;\n\t\t\t    }\n\t\t\t    Vector3.getClipFactor = getClipFactor;\n\t\t\t    /**\n\t\t\t     * Get angle between two vectors\n\t\t\t     * @param vector0 - angle between vector0 and vector1\n\t\t\t     * @param vector1 - angle between vector0 and vector1\n\t\t\t     * @param normal - direction of the normal\n\t\t\t     * @returns the angle between vector0 and vector1\n\t\t\t     */\n\t\t\t    function getAngleBetweenVectors(vector0, vector1, normal) {\n\t\t\t        const v0 = normalize(vector0);\n\t\t\t        const v1 = normalize(vector1);\n\t\t\t        const v0v1dot = dot(v0, v1);\n\t\t\t        const n = create();\n\t\t\t        crossToRef(v0, v1, n);\n\t\t\t        if (dot(n, normal) > 0) {\n\t\t\t            return Math.acos(v0v1dot);\n\t\t\t        }\n\t\t\t        return -Math.acos(v0v1dot);\n\t\t\t    }\n\t\t\t    Vector3.getAngleBetweenVectors = getAngleBetweenVectors;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set from the index \"offset\" of the given array\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines the offset in the source array\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function fromArray(array, offset = 0) {\n\t\t\t        return create(array[offset], array[offset + 1], array[offset + 2]);\n\t\t\t    }\n\t\t\t    Vector3.fromArray = fromArray;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set from the index \"offset\" of the given FloatArray\n\t\t\t     * This function is deprecated.  Use FromArray instead\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines the offset in the source array\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function fromFloatArray(array, offset) {\n\t\t\t        return fromArray(array, offset);\n\t\t\t    }\n\t\t\t    Vector3.fromFloatArray = fromFloatArray;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines the offset in the source array\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function fromArrayToRef(array, offset, result) {\n\t\t\t        result.x = array[offset];\n\t\t\t        result.y = array[offset + 1];\n\t\t\t        result.z = array[offset + 2];\n\t\t\t    }\n\t\t\t    Vector3.fromArrayToRef = fromArrayToRef;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray\n\t\t\t     * This function is deprecated.  Use FromArrayToRef instead.\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines the offset in the source array\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function fromFloatArrayToRef(array, offset, result) {\n\t\t\t        return fromArrayToRef(array, offset, result);\n\t\t\t    }\n\t\t\t    Vector3.fromFloatArrayToRef = fromFloatArrayToRef;\n\t\t\t    // Properties\n\t\t\t    /**\n\t\t\t     * Gets the length of the Vector3\n\t\t\t     * @returns the length of the Vecto3\n\t\t\t     */\n\t\t\t    function length(vector) {\n\t\t\t        return Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n\t\t\t    }\n\t\t\t    Vector3.length = length;\n\t\t\t    /**\n\t\t\t     * Gets the squared length of the Vector3\n\t\t\t     * @returns squared length of the Vector3\n\t\t\t     */\n\t\t\t    function lengthSquared(vector) {\n\t\t\t        return vector.x * vector.x + vector.y * vector.y + vector.z * vector.z;\n\t\t\t    }\n\t\t\t    Vector3.lengthSquared = lengthSquared;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n\t\t\t     * @param scale - defines the multiplier factor\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function scaleToRef(vector, scale, result) {\n\t\t\t        result.x = vector.x * scale;\n\t\t\t        result.y = vector.y * scale;\n\t\t\t        result.z = vector.z * scale;\n\t\t\t    }\n\t\t\t    Vector3.scaleToRef = scaleToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n\t\t\t     * @param scale - defines the multiplier factor\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function scale(vector, scale) {\n\t\t\t        return create(vector.x * scale, vector.y * scale, vector.z * scale);\n\t\t\t    }\n\t\t\t    Vector3.scale = scale;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3 with the given input length.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @param len - the length of the vector\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeFromLength(vector, len) {\n\t\t\t        const result = create(0, 0, 0);\n\t\t\t        normalizeFromLengthToRef(vector, len, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.normalizeFromLength = normalizeFromLength;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3 with the given input length.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @param len - the length of the vector\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeFromLengthToRef(vector, len, result) {\n\t\t\t        if (len === 0 || len === 1.0) {\n\t\t\t            copy(vector, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        scaleToRef(vector, 1.0 / len, result);\n\t\t\t    }\n\t\t\t    Vector3.normalizeFromLengthToRef = normalizeFromLengthToRef;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalize(vector) {\n\t\t\t        return normalizeFromLength(vector, length(vector));\n\t\t\t    }\n\t\t\t    Vector3.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeToRef(vector, result) {\n\t\t\t        normalizeFromLengthToRef(vector, length(vector), result);\n\t\t\t    }\n\t\t\t    Vector3.normalizeToRef = normalizeToRef;\n\t\t\t    /**\n\t\t\t     * Returns the dot product (float) between the vectors \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the dot product\n\t\t\t     */\n\t\t\t    function dot(left, right) {\n\t\t\t        return left.x * right.x + left.y * right.y + left.z * right.z;\n\t\t\t    }\n\t\t\t    Vector3.dot = dot;\n\t\t\t    /**\n\t\t\t     * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n\t\t\t     * @param matrix - The transformation matrix\n\t\t\t     * @returns result Vector3\n\t\t\t     */\n\t\t\t    function applyMatrix4(vector, matrix) {\n\t\t\t        const result = clone(vector);\n\t\t\t        applyMatrix4ToRef(vector, matrix, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.applyMatrix4 = applyMatrix4;\n\t\t\t    /**\n\t\t\t     * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n\t\t\t     * @param matrix - The transformation matrix\n\t\t\t     * @param result - defines the Vector3 object where to store the result\n\t\t\t     */\n\t\t\t    function applyMatrix4ToRef(vector, matrix, result) {\n\t\t\t        const { x, y, z } = vector;\n\t\t\t        const m = matrix._m;\n\t\t\t        const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n\t\t\t        result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n\t\t\t        result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n\t\t\t        result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n\t\t\t    }\n\t\t\t    Vector3.applyMatrix4ToRef = applyMatrix4ToRef;\n\t\t\t    /**\n\t\t\t     * Rotates the current Vector3 based on the given quaternion\n\t\t\t     * @param q - defines the Quaternion\n\t\t\t     * @returns the current Vector3\n\t\t\t     */\n\t\t\t    function rotate(vector, q) {\n\t\t\t        const result = create();\n\t\t\t        rotateToRef(vector, q, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.rotate = rotate;\n\t\t\t    /**\n\t\t\t     * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n\t\t\t     * @param q - defines the Quaternion\n\t\t\t     * @param result - defines the target Vector3\n\t\t\t     * @returns the current Vector3\n\t\t\t     */\n\t\t\t    function rotateToRef(vector, q, result) {\n\t\t\t        const { x, y, z } = vector;\n\t\t\t        const { x: qx, y: qy, z: qz, w: qw } = q;\n\t\t\t        // calculate quat * vector\n\t\t\t        const ix = qw * x + qy * z - qz * y;\n\t\t\t        const iy = qw * y + qz * x - qx * z;\n\t\t\t        const iz = qw * z + qx * y - qy * x;\n\t\t\t        const iw = -qx * x - qy * y - qz * z;\n\t\t\t        // calculate result * inverse quat\n\t\t\t        result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\t        result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\t        result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\t    }\n\t\t\t    Vector3.rotateToRef = rotateToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n\t\t\t     * @param start - defines the start value\n\t\t\t     * @param end - defines the end value\n\t\t\t     * @param amount - max defines amount between both (between 0 and 1)\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function lerp(start, end, amount) {\n\t\t\t        const result = create(0, 0, 0);\n\t\t\t        lerpToRef(start, end, amount, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.lerp = lerp;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n\t\t\t     * @param start - defines the start value\n\t\t\t     * @param end - defines the end value\n\t\t\t     * @param amount - max defines amount between both (between 0 and 1)\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function lerpToRef(start, end, amount, result) {\n\t\t\t        result.x = start.x + (end.x - start.x) * amount;\n\t\t\t        result.y = start.y + (end.y - start.y) * amount;\n\t\t\t        result.z = start.z + (end.z - start.z) * amount;\n\t\t\t    }\n\t\t\t    Vector3.lerpToRef = lerpToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n\t\t\t     * The cross product is then orthogonal to both \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the cross product\n\t\t\t     */\n\t\t\t    function cross(left, right) {\n\t\t\t        const result = Vector3.Zero();\n\t\t\t        Vector3.crossToRef(left, right, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.cross = cross;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n\t\t\t     * The cross product is then orthogonal to both \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function crossToRef(left, right, result) {\n\t\t\t        result.x = left.y * right.z - left.z * right.y;\n\t\t\t        result.y = left.z * right.x - left.x * right.z;\n\t\t\t        result.z = left.x * right.y - left.y * right.x;\n\t\t\t    }\n\t\t\t    Vector3.crossToRef = crossToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n\t\t\t     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n\t\t\t     * @param vector - defines the Vector3 to transform\n\t\t\t     * @param transformation - defines the transformation matrix\n\t\t\t     * @returns the transformed Vector3\n\t\t\t     */\n\t\t\t    function transformCoordinates(vector, transformation) {\n\t\t\t        const result = Vector3.Zero();\n\t\t\t        transformCoordinatesToRef(vector, transformation, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.transformCoordinates = transformCoordinates;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n\t\t\t     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n\t\t\t     * @param vector - defines the Vector3 to transform\n\t\t\t     * @param transformation - defines the transformation matrix\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function transformCoordinatesToRef(vector, transformation, result) {\n\t\t\t        return transformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n\t\t\t    }\n\t\t\t    Vector3.transformCoordinatesToRef = transformCoordinatesToRef;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n\t\t\t     * This method computes tranformed coordinates only, not transformed direction vectors\n\t\t\t     * @param x - define the x coordinate of the source vector\n\t\t\t     * @param y - define the y coordinate of the source vector\n\t\t\t     * @param z - define the z coordinate of the source vector\n\t\t\t     * @param transformation - defines the transformation matrix\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function transformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n\t\t\t        const m = transformation._m;\n\t\t\t        const rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n\t\t\t        const ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n\t\t\t        const rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n\t\t\t        const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n\t\t\t        result.x = rx * rw;\n\t\t\t        result.y = ry * rw;\n\t\t\t        result.z = rz * rw;\n\t\t\t    }\n\t\t\t    Vector3.transformCoordinatesFromFloatsToRef = transformCoordinatesFromFloatsToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n\t\t\t     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n\t\t\t     * @param vector - defines the Vector3 to transform\n\t\t\t     * @param transformation - defines the transformation matrix\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function transformNormal(vector, transformation) {\n\t\t\t        const result = Vector3.Zero();\n\t\t\t        transformNormalToRef(vector, transformation, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.transformNormal = transformNormal;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n\t\t\t     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n\t\t\t     * @param vector - defines the Vector3 to transform\n\t\t\t     * @param transformation - defines the transformation matrix\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function transformNormalToRef(vector, transformation, result) {\n\t\t\t        transformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n\t\t\t    }\n\t\t\t    Vector3.transformNormalToRef = transformNormalToRef;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n\t\t\t     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n\t\t\t     * @param x - define the x coordinate of the source vector\n\t\t\t     * @param y - define the y coordinate of the source vector\n\t\t\t     * @param z - define the z coordinate of the source vector\n\t\t\t     * @param transformation - defines the transformation matrix\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function transformNormalFromFloatsToRef(x, y, z, transformation, result) {\n\t\t\t        const m = transformation._m;\n\t\t\t        result.x = x * m[0] + y * m[4] + z * m[8];\n\t\t\t        result.y = x * m[1] + y * m[5] + z * m[9];\n\t\t\t        result.z = x * m[2] + y * m[6] + z * m[10];\n\t\t\t    }\n\t\t\t    Vector3.transformNormalFromFloatsToRef = transformNormalFromFloatsToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n\t\t\t     * @param value1 - defines the first control point\n\t\t\t     * @param value2 - defines the second control point\n\t\t\t     * @param value3 - defines the third control point\n\t\t\t     * @param value4 - defines the fourth control point\n\t\t\t     * @param amount - defines the amount on the spline to use\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function catmullRom(value1, value2, value3, value4, amount) {\n\t\t\t        const squared = amount * amount;\n\t\t\t        const cubed = amount * squared;\n\t\t\t        const x = 0.5 *\n\t\t\t            (2.0 * value2.x +\n\t\t\t                (-value1.x + value3.x) * amount +\n\t\t\t                (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n\t\t\t                    squared +\n\t\t\t                (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n\t\t\t        const y = 0.5 *\n\t\t\t            (2.0 * value2.y +\n\t\t\t                (-value1.y + value3.y) * amount +\n\t\t\t                (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n\t\t\t                    squared +\n\t\t\t                (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n\t\t\t        const z = 0.5 *\n\t\t\t            (2.0 * value2.z +\n\t\t\t                (-value1.z + value3.z) * amount +\n\t\t\t                (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) *\n\t\t\t                    squared +\n\t\t\t                (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n\t\t\t        return create(x, y, z);\n\t\t\t    }\n\t\t\t    Vector3.catmullRom = catmullRom;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n\t\t\t     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n\t\t\t     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n\t\t\t     * @param value - defines the current value\n\t\t\t     * @param min - defines the lower range value\n\t\t\t     * @param max - defines the upper range value\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function clamp(value, min, max) {\n\t\t\t        const v = create();\n\t\t\t        clampToRef(value, min, max, v);\n\t\t\t        return v;\n\t\t\t    }\n\t\t\t    Vector3.clamp = clamp;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n\t\t\t     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n\t\t\t     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n\t\t\t     * @param value - defines the current value\n\t\t\t     * @param min - defines the lower range value\n\t\t\t     * @param max - defines the upper range value\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function clampToRef(value, min, max, result) {\n\t\t\t        let x = value.x;\n\t\t\t        x = x > max.x ? max.x : x;\n\t\t\t        x = x < min.x ? min.x : x;\n\t\t\t        let y = value.y;\n\t\t\t        y = y > max.y ? max.y : y;\n\t\t\t        y = y < min.y ? min.y : y;\n\t\t\t        let z = value.z;\n\t\t\t        z = z > max.z ? max.z : z;\n\t\t\t        z = z < min.z ? min.z : z;\n\t\t\t        copyFromFloats(x, y, z, result);\n\t\t\t    }\n\t\t\t    Vector3.clampToRef = clampToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n\t\t\t     * @param value1 - defines the first control point\n\t\t\t     * @param tangent1 - defines the first tangent vector\n\t\t\t     * @param value2 - defines the second control point\n\t\t\t     * @param tangent2 - defines the second tangent vector\n\t\t\t     * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function hermite(value1, tangent1, value2, tangent2, amount) {\n\t\t\t        const squared = amount * amount;\n\t\t\t        const cubed = amount * squared;\n\t\t\t        const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n\t\t\t        const part2 = -2.0 * cubed + 3.0 * squared;\n\t\t\t        const part3 = cubed - 2.0 * squared + amount;\n\t\t\t        const part4 = cubed - squared;\n\t\t\t        const x = value1.x * part1 +\n\t\t\t            value2.x * part2 +\n\t\t\t            tangent1.x * part3 +\n\t\t\t            tangent2.x * part4;\n\t\t\t        const y = value1.y * part1 +\n\t\t\t            value2.y * part2 +\n\t\t\t            tangent1.y * part3 +\n\t\t\t            tangent2.y * part4;\n\t\t\t        const z = value1.z * part1 +\n\t\t\t            value2.z * part2 +\n\t\t\t            tangent1.z * part3 +\n\t\t\t            tangent2.z * part4;\n\t\t\t        return create(x, y, z);\n\t\t\t    }\n\t\t\t    Vector3.hermite = hermite;\n\t\t\t    /**\n\t\t\t     * Gets the minimal coordinate values between two Vector3\n\t\t\t     * @param left - defines the first operand\n\t\t\t     * @param right - defines the second operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function minimize(left, right) {\n\t\t\t        const min = create();\n\t\t\t        minimizeInPlaceFromFloatsToRef(right, left.x, left.y, left.z, min);\n\t\t\t        return min;\n\t\t\t    }\n\t\t\t    Vector3.minimize = minimize;\n\t\t\t    /**\n\t\t\t     * Gets the maximal coordinate values between two Vector3\n\t\t\t     * @param left - defines the first operand\n\t\t\t     * @param right - defines the second operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function maximize(left, right) {\n\t\t\t        const max = create();\n\t\t\t        maximizeInPlaceFromFloatsToRef(left, right.x, right.y, right.z, max);\n\t\t\t        return max;\n\t\t\t    }\n\t\t\t    Vector3.maximize = maximize;\n\t\t\t    /**\n\t\t\t     * Returns the distance between the vectors \"value1\" and \"value2\"\n\t\t\t     * @param value1 - defines the first operand\n\t\t\t     * @param value2 - defines the second operand\n\t\t\t     * @returns the distance\n\t\t\t     */\n\t\t\t    function distance(value1, value2) {\n\t\t\t        return Math.sqrt(distanceSquared(value1, value2));\n\t\t\t    }\n\t\t\t    Vector3.distance = distance;\n\t\t\t    /**\n\t\t\t     * Returns the squared distance between the vectors \"value1\" and \"value2\"\n\t\t\t     * @param value1 - defines the first operand\n\t\t\t     * @param value2 - defines the second operand\n\t\t\t     * @returns the squared distance\n\t\t\t     */\n\t\t\t    function distanceSquared(value1, value2) {\n\t\t\t        const x = value1.x - value2.x;\n\t\t\t        const y = value1.y - value2.y;\n\t\t\t        const z = value1.z - value2.z;\n\t\t\t        return x * x + y * y + z * z;\n\t\t\t    }\n\t\t\t    Vector3.distanceSquared = distanceSquared;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n\t\t\t     * @param value1 - defines the first operand\n\t\t\t     * @param value2 - defines the second operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function center(value1, value2) {\n\t\t\t        const center = add(value1, value2);\n\t\t\t        scaleToRef(center, 0.5, center);\n\t\t\t        return center;\n\t\t\t    }\n\t\t\t    Vector3.center = center;\n\t\t\t    /**\n\t\t\t     * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n\t\t\t     * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n\t\t\t     * to something in order to rotate it from its local system to the given target system\n\t\t\t     * Note: axis1, axis2 and axis3 are normalized during this operation\n\t\t\t     * @param axis1 - defines the first axis\n\t\t\t     * @param axis2 - defines the second axis\n\t\t\t     * @param axis3 - defines the third axis\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function rotationFromAxis(axis1, axis2, axis3) {\n\t\t\t        const rotation = Vector3.Zero();\n\t\t\t        rotationFromAxisToRef(axis1, axis2, axis3, rotation);\n\t\t\t        return rotation;\n\t\t\t    }\n\t\t\t    Vector3.rotationFromAxis = rotationFromAxis;\n\t\t\t    /**\n\t\t\t     * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n\t\t\t     * @param axis1 - defines the first axis\n\t\t\t     * @param axis2 - defines the second axis\n\t\t\t     * @param axis3 - defines the third axis\n\t\t\t     * @param ref - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function rotationFromAxisToRef(axis1, axis2, axis3, result) {\n\t\t\t        const quat = Quaternion_1.Quaternion.create();\n\t\t\t        Quaternion_1.Quaternion.rotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n\t\t\t        copy(Quaternion_1.Quaternion.eulerAngles(quat), result);\n\t\t\t    }\n\t\t\t    Vector3.rotationFromAxisToRef = rotationFromAxisToRef;\n\t\t\t    /**\n\t\t\t     * Creates a string representation of the Vector3\n\t\t\t     * @returns a string with the Vector3 coordinates.\n\t\t\t     */\n\t\t\t    function toString(vector) {\n\t\t\t        return `(${vector.x}, ${vector.y}, ${vector.z})`;\n\t\t\t    }\n\t\t\t    Vector3.toString = toString;\n\t\t\t    /**\n\t\t\t     * Creates the Vector3 hash code\n\t\t\t     * @returns a number which tends to be unique between Vector3 instances\n\t\t\t     */\n\t\t\t    function getHashCode(vector) {\n\t\t\t        let hash = vector.x || 0;\n\t\t\t        hash = (hash * 397) ^ (vector.y || 0);\n\t\t\t        hash = (hash * 397) ^ (vector.z || 0);\n\t\t\t        return hash;\n\t\t\t    }\n\t\t\t    Vector3.getHashCode = getHashCode;\n\t\t\t    /**\n\t\t\t     * Returns true if the vector1 and the vector2 coordinates are strictly equal\n\t\t\t     * @param vector1 - defines the first operand\n\t\t\t     * @param vector2 - defines the second operand\n\t\t\t     * @returns true if both vectors are equals\n\t\t\t     */\n\t\t\t    function equals(vector1, vector2) {\n\t\t\t        return (vector1.x === vector2.x &&\n\t\t\t            vector1.y === vector2.y &&\n\t\t\t            vector1.z === vector2.z);\n\t\t\t    }\n\t\t\t    Vector3.equals = equals;\n\t\t\t    /**\n\t\t\t     * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n\t\t\t     * @param otherVector - defines the second operand\n\t\t\t     * @param epsilon - defines the minimal distance to define values as equals\n\t\t\t     * @returns true if both vectors are distant less than epsilon\n\t\t\t     */\n\t\t\t    function equalsWithEpsilon(vector1, vector2, epsilon = types_1.Epsilon) {\n\t\t\t        return (Scalar_1.Scalar.withinEpsilon(vector1.x, vector2.x, epsilon) &&\n\t\t\t            Scalar_1.Scalar.withinEpsilon(vector1.y, vector2.y, epsilon) &&\n\t\t\t            Scalar_1.Scalar.withinEpsilon(vector1.z, vector2.z, epsilon));\n\t\t\t    }\n\t\t\t    Vector3.equalsWithEpsilon = equalsWithEpsilon;\n\t\t\t    /**\n\t\t\t     * Returns true if the current Vector3 coordinates equals the given floats\n\t\t\t     * @param x - defines the x coordinate of the operand\n\t\t\t     * @param y - defines the y coordinate of the operand\n\t\t\t     * @param z - defines the z coordinate of the operand\n\t\t\t     * @returns true if both vectors are equals\n\t\t\t     */\n\t\t\t    function equalsToFloats(vector, x, y, z) {\n\t\t\t        return vector.x === x && vector.y === y && vector.z === z;\n\t\t\t    }\n\t\t\t    Vector3.equalsToFloats = equalsToFloats;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3, result of the multiplication of vector1 by the vector2\n\t\t\t     * @param vector1 - defines the first operand\n\t\t\t     * @param vector2 - defines the second operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function multiply(vector1, vector2) {\n\t\t\t        const result = create();\n\t\t\t        multiplyToRef(vector1, vector2, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.multiply = multiply;\n\t\t\t    /**\n\t\t\t     * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n\t\t\t     * @param otherVector - defines the second operand\n\t\t\t     * @param result - defines the Vector3 object where to store the result\n\t\t\t     * @returns the current Vector3\n\t\t\t     */\n\t\t\t    function multiplyToRef(vector1, vector2, result) {\n\t\t\t        result.x = vector1.x * vector2.x;\n\t\t\t        result.y = vector1.y * vector2.y;\n\t\t\t        result.z = vector1.z * vector2.z;\n\t\t\t    }\n\t\t\t    Vector3.multiplyToRef = multiplyToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n\t\t\t     * @param x - defines the x coordinate of the operand\n\t\t\t     * @param y - defines the y coordinate of the operand\n\t\t\t     * @param z - defines the z coordinate of the operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function multiplyByFloatsToRef(vector1, x, y, z, result) {\n\t\t\t        result.x = vector1.x * x;\n\t\t\t        result.y = vector1.y * y;\n\t\t\t        result.z = vector1.z * z;\n\t\t\t    }\n\t\t\t    Vector3.multiplyByFloatsToRef = multiplyByFloatsToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n\t\t\t     * @param x - defines the x coordinate of the operand\n\t\t\t     * @param y - defines the y coordinate of the operand\n\t\t\t     * @param z - defines the z coordinate of the operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function multiplyByFloats(vector1, x, y, z) {\n\t\t\t        const result = create();\n\t\t\t        multiplyByFloatsToRef(vector1, x, y, z, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.multiplyByFloats = multiplyByFloats;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n\t\t\t     * @param otherVector - defines the second operand\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function divide(vector1, vector2) {\n\t\t\t        return {\n\t\t\t            x: vector1.x / vector2.x,\n\t\t\t            y: vector1.y / vector2.y,\n\t\t\t            z: vector1.z / vector2.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.divide = divide;\n\t\t\t    /**\n\t\t\t     * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n\t\t\t     * @param otherVector - defines the second operand\n\t\t\t     * @param result - defines the Vector3 object where to store the result\n\t\t\t     * @returns the current Vector3\n\t\t\t     */\n\t\t\t    function divideToRef(vector1, vector2, result) {\n\t\t\t        result.x = vector1.x / vector2.x;\n\t\t\t        result.y = vector1.y / vector2.y;\n\t\t\t        result.z = vector1.z / vector2.z;\n\t\t\t    }\n\t\t\t    Vector3.divideToRef = divideToRef;\n\t\t\t    /**\n\t\t\t     * Set result Vector3 with the maximal coordinate values between vector1 and the given coordinates\n\t\t\t     * @param x - defines the x coordinate of the operand\n\t\t\t     * @param y - defines the y coordinate of the operand\n\t\t\t     * @param z - defines the z coordinate of the operand\n\t\t\t     * @param result - the set Vector3\n\t\t\t     */\n\t\t\t    function maximizeInPlaceFromFloatsToRef(vector1, x, y, z, result) {\n\t\t\t        if (x > vector1.x) {\n\t\t\t            result.x = x;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            result.x = vector1.x;\n\t\t\t        }\n\t\t\t        if (y > vector1.y) {\n\t\t\t            result.y = y;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            result.y = vector1.y;\n\t\t\t        }\n\t\t\t        if (z > vector1.z) {\n\t\t\t            result.z = z;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            result.z = vector1.z;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Vector3.maximizeInPlaceFromFloatsToRef = maximizeInPlaceFromFloatsToRef;\n\t\t\t    /**\n\t\t\t     * Set result Vector3 with the minimal coordinate values between vector1 and the given coordinates\n\t\t\t     * @param x - defines the x coordinate of the operand\n\t\t\t     * @param y - defines the y coordinate of the operand\n\t\t\t     * @param z - defines the z coordinate of the operand\n\t\t\t     * @param result - the set Vector3\n\t\t\t     */\n\t\t\t    function minimizeInPlaceFromFloatsToRef(vector1, x, y, z, result) {\n\t\t\t        if (x < vector1.x) {\n\t\t\t            result.x = x;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            result.x = vector1.x;\n\t\t\t        }\n\t\t\t        if (y < vector1.y) {\n\t\t\t            result.y = y;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            result.y = vector1.y;\n\t\t\t        }\n\t\t\t        if (z < vector1.z) {\n\t\t\t            result.z = z;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            result.z = vector1.z;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Vector3.minimizeInPlaceFromFloatsToRef = minimizeInPlaceFromFloatsToRef;\n\t\t\t    /**\n\t\t\t     * Gets a new Vector3 from vector1 floored values\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function floor(vector1) {\n\t\t\t        return create(Math.floor(vector1.x), Math.floor(vector1.y), Math.floor(vector1.z));\n\t\t\t    }\n\t\t\t    Vector3.floor = floor;\n\t\t\t    /**\n\t\t\t     * Gets a new Vector3 from vector1 floored values\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function fract(vector1) {\n\t\t\t        return create(vector1.x - Math.floor(vector1.x), vector1.y - Math.floor(vector1.y), vector1.z - Math.floor(vector1.z));\n\t\t\t    }\n\t\t\t    Vector3.fract = fract;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n\t\t\t     * @returns a new empty Vector3\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        return create(0.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Zero = Zero;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n\t\t\t     * @returns a new unit Vector3\n\t\t\t     */\n\t\t\t    function One() {\n\t\t\t        return create(1.0, 1.0, 1.0);\n\t\t\t    }\n\t\t\t    Vector3.One = One;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set tolengthSquared (0.0, 1.0, 0.0)\n\t\t\t     * @returns a new up Vector3\n\t\t\t     */\n\t\t\t    function Up() {\n\t\t\t        return create(0.0, 1.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Up = Up;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n\t\t\t     * @returns a new down Vector3\n\t\t\t     */\n\t\t\t    function Down() {\n\t\t\t        return create(0.0, -1.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Down = Down;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n\t\t\t     * @returns a new forward Vector3\n\t\t\t     */\n\t\t\t    function Forward() {\n\t\t\t        return create(0.0, 0.0, 1.0);\n\t\t\t    }\n\t\t\t    Vector3.Forward = Forward;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n\t\t\t     * @returns a new forward Vector3\n\t\t\t     */\n\t\t\t    function Backward() {\n\t\t\t        return create(0.0, 0.0, -1.0);\n\t\t\t    }\n\t\t\t    Vector3.Backward = Backward;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n\t\t\t     * @returns a new right Vector3\n\t\t\t     */\n\t\t\t    function Right() {\n\t\t\t        return create(1.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Right = Right;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n\t\t\t     * @returns a new left Vector3\n\t\t\t     */\n\t\t\t    function Left() {\n\t\t\t        return create(-1.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Left = Left;\n\t\t\t    /**\n\t\t\t     * Returns a new random Vector3\n\t\t\t     * @returns a random Vector3\n\t\t\t     */\n\t\t\t    function Random() {\n\t\t\t        return create(Math.random(), Math.random(), Math.random());\n\t\t\t    }\n\t\t\t    Vector3.Random = Random;\n\t\t\t})(exports.Vector3 || (exports.Vector3 = {}));\n\t\t\t\n\t} (Vector3$1));\n\t\treturn Vector3$1;\n\t}\n\n\tvar Matrix = {};\n\n\tvar Plane = {};\n\n\tvar hasRequiredPlane;\n\n\tfunction requirePlane () {\n\t\tif (hasRequiredPlane) return Plane;\n\t\thasRequiredPlane = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Plane = void 0;\n\t\t\tconst Vector3_1 = requireVector3();\n\t\t\tconst Matrix_1 = requireMatrix();\n\t\t\t(function (Plane) {\n\t\t\t    /**\n\t\t\t     * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n\t\t\t     * @param a - a component of the plane\n\t\t\t     * @param b - b component of the plane\n\t\t\t     * @param c - c component of the plane\n\t\t\t     * @param d - d component of the plane\n\t\t\t     */\n\t\t\t    function create(a, b, c, d) {\n\t\t\t        return {\n\t\t\t            normal: Vector3_1.Vector3.create(a, b, c),\n\t\t\t            d: d\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Plane.create = create;\n\t\t\t    // Statics\n\t\t\t    /**\n\t\t\t     * Creates a plane from an  array\n\t\t\t     * @param array - the array to create a plane from\n\t\t\t     * @returns a new Plane from the given array.\n\t\t\t     */\n\t\t\t    function fromArray(array) {\n\t\t\t        return create(array[0], array[1], array[2], array[3]);\n\t\t\t    }\n\t\t\t    Plane.fromArray = fromArray;\n\t\t\t    /**\n\t\t\t     * Creates a plane from three points\n\t\t\t     * @param point1 - point used to create the plane\n\t\t\t     * @param point2 - point used to create the plane\n\t\t\t     * @param point3 - point used to create the plane\n\t\t\t     * @returns a new Plane defined by the three given points.\n\t\t\t     */\n\t\t\t    function fromPoints(_point1, _point2, _point3) {\n\t\t\t        const result = create(0.0, 0.0, 0.0, 0.0);\n\t\t\t        // TODO\n\t\t\t        // result.copyFromPoints(point1, point2, point3)\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Plane.fromPoints = fromPoints;\n\t\t\t    /**\n\t\t\t     * Creates a plane from an origin point and a normal\n\t\t\t     * @param origin - origin of the plane to be constructed\n\t\t\t     * @param normal - normal of the plane to be constructed\n\t\t\t     * @returns a new Plane the normal vector to this plane at the given origin point.\n\t\t\t     * Note : the vector \"normal\" is updated because normalized.\n\t\t\t     */\n\t\t\t    function romPositionAndNormal(origin, normal) {\n\t\t\t        const result = create(0.0, 0.0, 0.0, 0.0);\n\t\t\t        result.normal = Vector3_1.Vector3.normalize(normal);\n\t\t\t        result.d = -(normal.x * origin.x +\n\t\t\t            normal.y * origin.y +\n\t\t\t            normal.z * origin.z);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Plane.romPositionAndNormal = romPositionAndNormal;\n\t\t\t    /**\n\t\t\t     * Calculates the distance from a plane and a point\n\t\t\t     * @param origin - origin of the plane to be constructed\n\t\t\t     * @param normal - normal of the plane to be constructed\n\t\t\t     * @param point - point to calculate distance to\n\t\t\t     * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n\t\t\t     */\n\t\t\t    function signedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {\n\t\t\t        const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n\t\t\t        return Vector3_1.Vector3.dot(point, normal) + d;\n\t\t\t    }\n\t\t\t    Plane.signedDistanceToPlaneFromPositionAndNormal = signedDistanceToPlaneFromPositionAndNormal;\n\t\t\t    /**\n\t\t\t     * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n\t\t\t     */\n\t\t\t    function asArray(plane) {\n\t\t\t        return [plane.normal.x, plane.normal.y, plane.normal.z, plane.d];\n\t\t\t    }\n\t\t\t    Plane.asArray = asArray;\n\t\t\t    // Methods\n\t\t\t    /**\n\t\t\t     * @returns a new plane copied from the current Plane.\n\t\t\t     */\n\t\t\t    function clone(plane) {\n\t\t\t        return create(plane.normal.x, plane.normal.y, plane.normal.z, plane.d);\n\t\t\t    }\n\t\t\t    Plane.clone = clone;\n\t\t\t    /**\n\t\t\t     * @returns the Plane hash code.\n\t\t\t     */\n\t\t\t    function getHashCode(_plane) {\n\t\t\t        // TODO\n\t\t\t        // let hash = plane.normal.getHashCode()\n\t\t\t        // hash = (hash * 397) ^ (plane.d || 0)\n\t\t\t        // return hash\n\t\t\t        return 0;\n\t\t\t    }\n\t\t\t    Plane.getHashCode = getHashCode;\n\t\t\t    /**\n\t\t\t     * Normalize the current Plane in place.\n\t\t\t     * @returns the updated Plane.\n\t\t\t     */\n\t\t\t    function normalize(plane) {\n\t\t\t        const result = create(0, 0, 0, 0);\n\t\t\t        const norm = Math.sqrt(plane.normal.x * plane.normal.x +\n\t\t\t            plane.normal.y * plane.normal.y +\n\t\t\t            plane.normal.z * plane.normal.z);\n\t\t\t        let magnitude = 0.0;\n\t\t\t        if (norm !== 0) {\n\t\t\t            magnitude = 1.0 / norm;\n\t\t\t        }\n\t\t\t        result.normal.x = plane.normal.x * magnitude;\n\t\t\t        result.normal.y = plane.normal.y * magnitude;\n\t\t\t        result.normal.z = plane.normal.z * magnitude;\n\t\t\t        result.d *= magnitude;\n\t\t\t        return plane;\n\t\t\t    }\n\t\t\t    Plane.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Applies a transformation the plane and returns the result\n\t\t\t     * @param transformation - the transformation matrix to be applied to the plane\n\t\t\t     * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n\t\t\t     */\n\t\t\t    function transform(plane, transformation) {\n\t\t\t        const transposedMatrix = Matrix_1.Matrix.create();\n\t\t\t        Matrix_1.Matrix.transposeToRef(transformation, transposedMatrix);\n\t\t\t        const m = transposedMatrix._m;\n\t\t\t        const x = plane.normal.x;\n\t\t\t        const y = plane.normal.y;\n\t\t\t        const z = plane.normal.z;\n\t\t\t        const d = plane.d;\n\t\t\t        const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n\t\t\t        const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n\t\t\t        const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n\t\t\t        const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n\t\t\t        return create(normalX, normalY, normalZ, finalD);\n\t\t\t    }\n\t\t\t    Plane.transform = transform;\n\t\t\t    /**\n\t\t\t     * Calcualtte the dot product between the point and the plane normal\n\t\t\t     * @param point - point to calculate the dot product with\n\t\t\t     * @returns the dot product (float) of the point coordinates and the plane normal.\n\t\t\t     */\n\t\t\t    function dotCoordinate(plane, point) {\n\t\t\t        return (plane.normal.x * point.x +\n\t\t\t            plane.normal.y * point.y +\n\t\t\t            plane.normal.z * point.z +\n\t\t\t            plane.d);\n\t\t\t    }\n\t\t\t    Plane.dotCoordinate = dotCoordinate;\n\t\t\t    /**\n\t\t\t     * Updates the current Plane from the plane defined by the three given points.\n\t\t\t     * @param point1 - one of the points used to contruct the plane\n\t\t\t     * @param point2 - one of the points used to contruct the plane\n\t\t\t     * @param point3 - one of the points used to contruct the plane\n\t\t\t     * @returns the updated Plane.\n\t\t\t     */\n\t\t\t    function copyFromPoints(point1, point2, point3) {\n\t\t\t        const x1 = point2.x - point1.x;\n\t\t\t        const y1 = point2.y - point1.y;\n\t\t\t        const z1 = point2.z - point1.z;\n\t\t\t        const x2 = point3.x - point1.x;\n\t\t\t        const y2 = point3.y - point1.y;\n\t\t\t        const z2 = point3.z - point1.z;\n\t\t\t        const yz = y1 * z2 - z1 * y2;\n\t\t\t        const xz = z1 * x2 - x1 * z2;\n\t\t\t        const xy = x1 * y2 - y1 * x2;\n\t\t\t        const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n\t\t\t        let invPyth;\n\t\t\t        if (pyth !== 0) {\n\t\t\t            invPyth = 1.0 / pyth;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            invPyth = 0.0;\n\t\t\t        }\n\t\t\t        const normal = Vector3_1.Vector3.create(yz * invPyth, xz * invPyth, xy * invPyth);\n\t\t\t        return {\n\t\t\t            normal,\n\t\t\t            d: -(normal.x * point1.x + normal.y * point1.y + normal.z * point1.z)\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Plane.copyFromPoints = copyFromPoints;\n\t\t\t    /**\n\t\t\t     * Checks if the plane is facing a given direction\n\t\t\t     * @param direction - the direction to check if the plane is facing\n\t\t\t     * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n\t\t\t     * @returns True is the vector \"direction\"  is the same side than the plane normal.\n\t\t\t     */\n\t\t\t    function isFrontFacingTo(plane, direction, epsilon) {\n\t\t\t        const dot = Vector3_1.Vector3.dot(plane.normal, direction);\n\t\t\t        return dot <= epsilon;\n\t\t\t    }\n\t\t\t    Plane.isFrontFacingTo = isFrontFacingTo;\n\t\t\t    /**\n\t\t\t     * Calculates the distance to a point\n\t\t\t     * @param point - point to calculate distance to\n\t\t\t     * @returns the signed distance (float) from the given point to the Plane.\n\t\t\t     */\n\t\t\t    function signedDistanceTo(plane, point) {\n\t\t\t        return Vector3_1.Vector3.dot(point, plane.normal) + plane.d;\n\t\t\t    }\n\t\t\t    Plane.signedDistanceTo = signedDistanceTo;\n\t\t\t})(exports.Plane || (exports.Plane = {}));\n\t\t\t\n\t} (Plane));\n\t\treturn Plane;\n\t}\n\n\tvar hasRequiredMatrix;\n\n\tfunction requireMatrix () {\n\t\tif (hasRequiredMatrix) return Matrix;\n\t\thasRequiredMatrix = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Matrix = void 0;\n\t\t\tconst Vector3_1 = requireVector3();\n\t\t\tconst Quaternion_1 = requireQuaternion();\n\t\t\tconst Plane_1 = requirePlane();\n\t\t\t(function (Matrix) {\n\t\t\t    /**\n\t\t\t     * Gets the internal data of the matrix\n\t\t\t     */\n\t\t\t    function m(self) {\n\t\t\t        return self._m;\n\t\t\t    }\n\t\t\t    Matrix.m = m;\n\t\t\t    let _updateFlagSeed = 0;\n\t\t\t    const _identityReadOnly = {};\n\t\t\t    /**\n\t\t\t     * Gets an identity matrix that must not be updated\n\t\t\t     */\n\t\t\t    function IdentityReadOnly() {\n\t\t\t        return _identityReadOnly;\n\t\t\t    }\n\t\t\t    Matrix.IdentityReadOnly = IdentityReadOnly;\n\t\t\t    /**\n\t\t\t     * Creates an empty matrix (filled with zeros)\n\t\t\t     */\n\t\t\t    function create() {\n\t\t\t        const newMatrix = {\n\t\t\t            updateFlag: 0,\n\t\t\t            isIdentity: false,\n\t\t\t            isIdentity3x2: true,\n\t\t\t            _isIdentityDirty: true,\n\t\t\t            _isIdentity3x2Dirty: true,\n\t\t\t            _m: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\t\t\t        };\n\t\t\t        _updateIdentityStatus(newMatrix, false);\n\t\t\t        return newMatrix;\n\t\t\t    }\n\t\t\t    Matrix.create = create;\n\t\t\t    // Statics\n\t\t\t    /**\n\t\t\t     * Creates a matrix from an array\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines an offset in the source array\n\t\t\t     * @returns a new Matrix set from the starting index of the given array\n\t\t\t     */\n\t\t\t    function fromArray(array, offset = 0) {\n\t\t\t        const result = create();\n\t\t\t        fromArrayToRef(array, offset, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.fromArray = fromArray;\n\t\t\t    /**\n\t\t\t     * Copy the content of an array into a given matrix\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines an offset in the source array\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function fromArrayToRef(array, offset, result) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            result._m[index] = array[index + offset];\n\t\t\t        }\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.fromArrayToRef = fromArrayToRef;\n\t\t\t    /**\n\t\t\t     * Stores an array into a matrix after having multiplied each component by a given factor\n\t\t\t     * @param array - defines the source array\n\t\t\t     * @param offset - defines the offset in the source array\n\t\t\t     * @param scale - defines the scaling factor\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function fromFloatArrayToRefScaled(array, offset, scale, result) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            result._m[index] = array[index + offset] * scale;\n\t\t\t        }\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.fromFloatArrayToRefScaled = fromFloatArrayToRefScaled;\n\t\t\t    /**\n\t\t\t     * Stores a list of values (16) inside a given matrix\n\t\t\t     * @param initialM11 - defines 1st value of 1st row\n\t\t\t     * @param initialM12 - defines 2nd value of 1st row\n\t\t\t     * @param initialM13 - defines 3rd value of 1st row\n\t\t\t     * @param initialM14 - defines 4th value of 1st row\n\t\t\t     * @param initialM21 - defines 1st value of 2nd row\n\t\t\t     * @param initialM22 - defines 2nd value of 2nd row\n\t\t\t     * @param initialM23 - defines 3rd value of 2nd row\n\t\t\t     * @param initialM24 - defines 4th value of 2nd row\n\t\t\t     * @param initialM31 - defines 1st value of 3rd row\n\t\t\t     * @param initialM32 - defines 2nd value of 3rd row\n\t\t\t     * @param initialM33 - defines 3rd value of 3rd row\n\t\t\t     * @param initialM34 - defines 4th value of 3rd row\n\t\t\t     * @param initialM41 - defines 1st value of 4th row\n\t\t\t     * @param initialM42 - defines 2nd value of 4th row\n\t\t\t     * @param initialM43 - defines 3rd value of 4th row\n\t\t\t     * @param initialM44 - defines 4th value of 4th row\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function fromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n\t\t\t        const m = result._m;\n\t\t\t        m[0] = initialM11;\n\t\t\t        m[1] = initialM12;\n\t\t\t        m[2] = initialM13;\n\t\t\t        m[3] = initialM14;\n\t\t\t        m[4] = initialM21;\n\t\t\t        m[5] = initialM22;\n\t\t\t        m[6] = initialM23;\n\t\t\t        m[7] = initialM24;\n\t\t\t        m[8] = initialM31;\n\t\t\t        m[9] = initialM32;\n\t\t\t        m[10] = initialM33;\n\t\t\t        m[11] = initialM34;\n\t\t\t        m[12] = initialM41;\n\t\t\t        m[13] = initialM42;\n\t\t\t        m[14] = initialM43;\n\t\t\t        m[15] = initialM44;\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.fromValuesToRef = fromValuesToRef;\n\t\t\t    /**\n\t\t\t     * Creates new matrix from a list of values (16)\n\t\t\t     * @param initialM11 - defines 1st value of 1st row\n\t\t\t     * @param initialM12 - defines 2nd value of 1st row\n\t\t\t     * @param initialM13 - defines 3rd value of 1st row\n\t\t\t     * @param initialM14 - defines 4th value of 1st row\n\t\t\t     * @param initialM21 - defines 1st value of 2nd row\n\t\t\t     * @param initialM22 - defines 2nd value of 2nd row\n\t\t\t     * @param initialM23 - defines 3rd value of 2nd row\n\t\t\t     * @param initialM24 - defines 4th value of 2nd row\n\t\t\t     * @param initialM31 - defines 1st value of 3rd row\n\t\t\t     * @param initialM32 - defines 2nd value of 3rd row\n\t\t\t     * @param initialM33 - defines 3rd value of 3rd row\n\t\t\t     * @param initialM34 - defines 4th value of 3rd row\n\t\t\t     * @param initialM41 - defines 1st value of 4th row\n\t\t\t     * @param initialM42 - defines 2nd value of 4th row\n\t\t\t     * @param initialM43 - defines 3rd value of 4th row\n\t\t\t     * @param initialM44 - defines 4th value of 4th row\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function fromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n\t\t\t        const result = create();\n\t\t\t        const m = result._m;\n\t\t\t        m[0] = initialM11;\n\t\t\t        m[1] = initialM12;\n\t\t\t        m[2] = initialM13;\n\t\t\t        m[3] = initialM14;\n\t\t\t        m[4] = initialM21;\n\t\t\t        m[5] = initialM22;\n\t\t\t        m[6] = initialM23;\n\t\t\t        m[7] = initialM24;\n\t\t\t        m[8] = initialM31;\n\t\t\t        m[9] = initialM32;\n\t\t\t        m[10] = initialM33;\n\t\t\t        m[11] = initialM34;\n\t\t\t        m[12] = initialM41;\n\t\t\t        m[13] = initialM42;\n\t\t\t        m[14] = initialM43;\n\t\t\t        m[15] = initialM44;\n\t\t\t        _markAsUpdated(result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.fromValues = fromValues;\n\t\t\t    /**\n\t\t\t     * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n\t\t\t     * @param scale - defines the scale vector3\n\t\t\t     * @param rotation - defines the rotation quaternion\n\t\t\t     * @param translation - defines the translation vector3\n\t\t\t     * @returns a new matrix\n\t\t\t     */\n\t\t\t    function compose(scale, rotation, translation) {\n\t\t\t        const result = create();\n\t\t\t        composeToRef(scale, rotation, translation, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.compose = compose;\n\t\t\t    /**\n\t\t\t     * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n\t\t\t     * @param scale - defines the scale vector3\n\t\t\t     * @param rotation - defines the rotation quaternion\n\t\t\t     * @param translation - defines the translation vector3\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function composeToRef(scale, rotation, translation, result) {\n\t\t\t        const tmpMatrix = [create(), create(), create()];\n\t\t\t        scalingToRef(scale.x, scale.y, scale.z, tmpMatrix[1]);\n\t\t\t        fromQuaternionToRef(rotation, tmpMatrix[0]);\n\t\t\t        multiplyToRef(tmpMatrix[1], tmpMatrix[0], result);\n\t\t\t        setTranslation(result, translation);\n\t\t\t    }\n\t\t\t    Matrix.composeToRef = composeToRef;\n\t\t\t    /**\n\t\t\t     * Creates a new identity matrix\n\t\t\t     * @returns a new identity matrix\n\t\t\t     */\n\t\t\t    function Identity() {\n\t\t\t        const identity = fromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n\t\t\t        _updateIdentityStatus(identity, true);\n\t\t\t        return identity;\n\t\t\t    }\n\t\t\t    Matrix.Identity = Identity;\n\t\t\t    /**\n\t\t\t     * Creates a new identity matrix and stores the result in a given matrix\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function IdentityToRef(result) {\n\t\t\t        fromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, true);\n\t\t\t    }\n\t\t\t    Matrix.IdentityToRef = IdentityToRef;\n\t\t\t    /**\n\t\t\t     * Creates a new zero matrix\n\t\t\t     * @returns a new zero matrix\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        const zero = fromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\t\t\t        _updateIdentityStatus(zero, false);\n\t\t\t        return zero;\n\t\t\t    }\n\t\t\t    Matrix.Zero = Zero;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the X axis\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function RotationX(angle) {\n\t\t\t        const result = create();\n\t\t\t        rotationXToRef(angle, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.RotationX = RotationX;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function rotationXToRef(angle, result) {\n\t\t\t        const s = Math.sin(angle);\n\t\t\t        const c = Math.cos(angle);\n\t\t\t        fromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, c === 1 && s === 0);\n\t\t\t    }\n\t\t\t    Matrix.rotationXToRef = rotationXToRef;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the Y axis\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function rotationY(angle) {\n\t\t\t        const result = create();\n\t\t\t        rotationYToRef(angle, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.rotationY = rotationY;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function rotationYToRef(angle, result) {\n\t\t\t        const s = Math.sin(angle);\n\t\t\t        const c = Math.cos(angle);\n\t\t\t        fromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, c === 1 && s === 0);\n\t\t\t    }\n\t\t\t    Matrix.rotationYToRef = rotationYToRef;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the Z axis\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function rotationZ(angle) {\n\t\t\t        const result = create();\n\t\t\t        rotationZToRef(angle, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.rotationZ = rotationZ;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function rotationZToRef(angle, result) {\n\t\t\t        const s = Math.sin(angle);\n\t\t\t        const c = Math.cos(angle);\n\t\t\t        fromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, c === 1 && s === 0);\n\t\t\t    }\n\t\t\t    Matrix.rotationZToRef = rotationZToRef;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the given axis\n\t\t\t     * @param axis - defines the axis to use\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function rotationAxis(axis, angle) {\n\t\t\t        const result = create();\n\t\t\t        rotationAxisToRef(axis, angle, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.rotationAxis = rotationAxis;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n\t\t\t     * @param axis - defines the axis to use\n\t\t\t     * @param angle - defines the angle (in radians) to use\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function rotationAxisToRef(_axis, angle, result) {\n\t\t\t        const s = Math.sin(-angle);\n\t\t\t        const c = Math.cos(-angle);\n\t\t\t        const c1 = 1 - c;\n\t\t\t        const axis = Vector3_1.Vector3.normalize(_axis);\n\t\t\t        const m = result._m;\n\t\t\t        m[0] = axis.x * axis.x * c1 + c;\n\t\t\t        m[1] = axis.x * axis.y * c1 - axis.z * s;\n\t\t\t        m[2] = axis.x * axis.z * c1 + axis.y * s;\n\t\t\t        m[3] = 0.0;\n\t\t\t        m[4] = axis.y * axis.x * c1 + axis.z * s;\n\t\t\t        m[5] = axis.y * axis.y * c1 + c;\n\t\t\t        m[6] = axis.y * axis.z * c1 - axis.x * s;\n\t\t\t        m[7] = 0.0;\n\t\t\t        m[8] = axis.z * axis.x * c1 - axis.y * s;\n\t\t\t        m[9] = axis.z * axis.y * c1 + axis.x * s;\n\t\t\t        m[10] = axis.z * axis.z * c1 + c;\n\t\t\t        m[11] = 0.0;\n\t\t\t        m[12] = 0.0;\n\t\t\t        m[13] = 0.0;\n\t\t\t        m[14] = 0.0;\n\t\t\t        m[15] = 1.0;\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.rotationAxisToRef = rotationAxisToRef;\n\t\t\t    /**\n\t\t\t     * Creates a rotation matrix\n\t\t\t     * @param yaw - defines the yaw angle in radians (Y axis)\n\t\t\t     * @param pitch - defines the pitch angle in radians (X axis)\n\t\t\t     * @param roll - defines the roll angle in radians (X axis)\n\t\t\t     * @returns the new rotation matrix\n\t\t\t     */\n\t\t\t    function rotationYawPitchRoll(yaw, pitch, roll) {\n\t\t\t        const result = create();\n\t\t\t        rotationYawPitchRollToRef(yaw, pitch, roll, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.rotationYawPitchRoll = rotationYawPitchRoll;\n\t\t\t    /**\n\t\t\t     * Creates a rotation matrix and stores it in a given matrix\n\t\t\t     * @param yaw - defines the yaw angle in radians (Y axis)\n\t\t\t     * @param pitch - defines the pitch angle in radians (X axis)\n\t\t\t     * @param roll - defines the roll angle in radians (X axis)\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function rotationYawPitchRollToRef(yaw, pitch, roll, result) {\n\t\t\t        const quaternionResult = Quaternion_1.Quaternion.Zero();\n\t\t\t        Quaternion_1.Quaternion.rotationYawPitchRollToRef(yaw, pitch, roll, quaternionResult);\n\t\t\t        fromQuaternionToRef(quaternionResult, result);\n\t\t\t    }\n\t\t\t    Matrix.rotationYawPitchRollToRef = rotationYawPitchRollToRef;\n\t\t\t    /**\n\t\t\t     * Creates a scaling matrix\n\t\t\t     * @param x - defines the scale factor on X axis\n\t\t\t     * @param y - defines the scale factor on Y axis\n\t\t\t     * @param z - defines the scale factor on Z axis\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function scaling(x, y, z) {\n\t\t\t        const result = create();\n\t\t\t        scalingToRef(x, y, z, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.scaling = scaling;\n\t\t\t    /**\n\t\t\t     * Creates a scaling matrix and stores it in a given matrix\n\t\t\t     * @param x - defines the scale factor on X axis\n\t\t\t     * @param y - defines the scale factor on Y axis\n\t\t\t     * @param z - defines the scale factor on Z axis\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function scalingToRef(x, y, z, result) {\n\t\t\t        fromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, x === 1 && y === 1 && z === 1);\n\t\t\t    }\n\t\t\t    Matrix.scalingToRef = scalingToRef;\n\t\t\t    /**\n\t\t\t     * Creates a translation matrix\n\t\t\t     * @param x - defines the translation on X axis\n\t\t\t     * @param y - defines the translation on Y axis\n\t\t\t     * @param z - defines the translationon Z axis\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function translation(x, y, z) {\n\t\t\t        const result = create();\n\t\t\t        translationToRef(x, y, z, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.translation = translation;\n\t\t\t    /**\n\t\t\t     * Creates a translation matrix and stores it in a given matrix\n\t\t\t     * @param x - defines the translation on X axis\n\t\t\t     * @param y - defines the translation on Y axis\n\t\t\t     * @param z - defines the translationon Z axis\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function translationToRef(x, y, z, result) {\n\t\t\t        fromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, x === 0 && y === 0 && z === 0);\n\t\t\t    }\n\t\t\t    Matrix.translationToRef = translationToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n\t\t\t     * @param startValue - defines the start value\n\t\t\t     * @param endValue - defines the end value\n\t\t\t     * @param gradient - defines the gradient factor\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function lerp(startValue, endValue, gradient) {\n\t\t\t        const result = create();\n\t\t\t        lerpToRef(startValue, endValue, gradient, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.lerp = lerp;\n\t\t\t    /**\n\t\t\t     * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n\t\t\t     * @param startValue - defines the start value\n\t\t\t     * @param endValue - defines the end value\n\t\t\t     * @param gradient - defines the gradient factor\n\t\t\t     * @param result - defines the Matrix object where to store data\n\t\t\t     */\n\t\t\t    function lerpToRef(startValue, endValue, gradient, result) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            result._m[index] =\n\t\t\t                startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\n\t\t\t        }\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.lerpToRef = lerpToRef;\n\t\t\t    /**\n\t\t\t     * Builds a new matrix whose values are computed by:\n\t\t\t     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n\t\t\t     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n\t\t\t     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n\t\t\t     * @param startValue - defines the first matrix\n\t\t\t     * @param endValue - defines the second matrix\n\t\t\t     * @param gradient - defines the gradient between the two matrices\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function decomposeLerp(startValue, endValue, gradient) {\n\t\t\t        const result = create();\n\t\t\t        decomposeLerpToRef(startValue, endValue, gradient, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.decomposeLerp = decomposeLerp;\n\t\t\t    /**\n\t\t\t     * Update a matrix to values which are computed by:\n\t\t\t     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n\t\t\t     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n\t\t\t     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n\t\t\t     * @param startValue - defines the first matrix\n\t\t\t     * @param endValue - defines the second matrix\n\t\t\t     * @param gradient - defines the gradient between the two matrices\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function decomposeLerpToRef(startValue, endValue, gradient, result) {\n\t\t\t        const startScale = Vector3_1.Vector3.Zero();\n\t\t\t        const startRotation = Quaternion_1.Quaternion.Zero();\n\t\t\t        const startTranslation = Vector3_1.Vector3.Zero();\n\t\t\t        decompose(startValue, startScale, startRotation, startTranslation);\n\t\t\t        const endScale = Vector3_1.Vector3.Zero();\n\t\t\t        const endRotation = Quaternion_1.Quaternion.Zero();\n\t\t\t        const endTranslation = Vector3_1.Vector3.Zero();\n\t\t\t        decompose(endValue, endScale, endRotation, endTranslation);\n\t\t\t        const resultScale = Vector3_1.Vector3.Zero();\n\t\t\t        Vector3_1.Vector3.lerpToRef(startScale, endScale, gradient, resultScale);\n\t\t\t        const resultRotation = Quaternion_1.Quaternion.Zero();\n\t\t\t        Quaternion_1.Quaternion.slerpToRef(startRotation, endRotation, gradient, resultRotation);\n\t\t\t        const resultTranslation = Vector3_1.Vector3.Zero();\n\t\t\t        Vector3_1.Vector3.lerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n\t\t\t        composeToRef(resultScale, resultRotation, resultTranslation, result);\n\t\t\t    }\n\t\t\t    Matrix.decomposeLerpToRef = decomposeLerpToRef;\n\t\t\t    /**\n\t\t\t     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n\t\t\t     * self function works in left handed mode\n\t\t\t     * @param eye - defines the final position of the entity\n\t\t\t     * @param target - defines where the entity should look at\n\t\t\t     * @param up - defines the up vector for the entity\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function LookAtLH(eye, target, up) {\n\t\t\t        const result = create();\n\t\t\t        lookAtLHToRef(eye, target, up, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.LookAtLH = LookAtLH;\n\t\t\t    /**\n\t\t\t     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n\t\t\t     * self function works in left handed mode\n\t\t\t     * @param eye - defines the final position of the entity\n\t\t\t     * @param target - defines where the entity should look at\n\t\t\t     * @param up - defines the up vector for the entity\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function lookAtLHToRef(eye, target, up, result) {\n\t\t\t        const xAxis = Vector3_1.Vector3.Zero();\n\t\t\t        const yAxis = Vector3_1.Vector3.Zero();\n\t\t\t        const zAxis = Vector3_1.Vector3.Zero();\n\t\t\t        // Z axis\n\t\t\t        Vector3_1.Vector3.subtractToRef(target, eye, zAxis);\n\t\t\t        Vector3_1.Vector3.normalizeToRef(zAxis, zAxis);\n\t\t\t        // X axis\n\t\t\t        Vector3_1.Vector3.crossToRef(up, zAxis, xAxis);\n\t\t\t        const xSquareLength = Vector3_1.Vector3.lengthSquared(xAxis);\n\t\t\t        if (xSquareLength === 0) {\n\t\t\t            xAxis.x = 1.0;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            Vector3_1.Vector3.normalizeFromLengthToRef(xAxis, Math.sqrt(xSquareLength), xAxis);\n\t\t\t        }\n\t\t\t        // Y axis\n\t\t\t        Vector3_1.Vector3.crossToRef(zAxis, xAxis, yAxis);\n\t\t\t        Vector3_1.Vector3.normalizeToRef(yAxis, yAxis);\n\t\t\t        // Eye angles\n\t\t\t        const ex = -Vector3_1.Vector3.dot(xAxis, eye);\n\t\t\t        const ey = -Vector3_1.Vector3.dot(yAxis, eye);\n\t\t\t        const ez = -Vector3_1.Vector3.dot(zAxis, eye);\n\t\t\t        fromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n\t\t\t    }\n\t\t\t    Matrix.lookAtLHToRef = lookAtLHToRef;\n\t\t\t    /**\n\t\t\t     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n\t\t\t     * self function works in right handed mode\n\t\t\t     * @param eye - defines the final position of the entity\n\t\t\t     * @param target - defines where the entity should look at\n\t\t\t     * @param up - defines the up vector for the entity\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function lookAtRH(eye, target, up) {\n\t\t\t        const result = create();\n\t\t\t        lookAtRHToRef(eye, target, up, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.lookAtRH = lookAtRH;\n\t\t\t    /**\n\t\t\t     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n\t\t\t     * self function works in right handed mode\n\t\t\t     * @param eye - defines the final position of the entity\n\t\t\t     * @param target - defines where the entity should look at\n\t\t\t     * @param up - defines the up vector for the entity\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function lookAtRHToRef(eye, target, up, result) {\n\t\t\t        const xAxis = Vector3_1.Vector3.Zero();\n\t\t\t        const yAxis = Vector3_1.Vector3.Zero();\n\t\t\t        const zAxis = Vector3_1.Vector3.Zero();\n\t\t\t        // Z axis\n\t\t\t        Vector3_1.Vector3.subtractToRef(eye, target, zAxis);\n\t\t\t        Vector3_1.Vector3.normalizeToRef(zAxis, zAxis);\n\t\t\t        // X axis\n\t\t\t        Vector3_1.Vector3.crossToRef(up, zAxis, xAxis);\n\t\t\t        const xSquareLength = Vector3_1.Vector3.lengthSquared(xAxis);\n\t\t\t        if (xSquareLength === 0) {\n\t\t\t            xAxis.x = 1.0;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            Vector3_1.Vector3.normalizeFromLengthToRef(xAxis, Math.sqrt(xSquareLength), xAxis);\n\t\t\t        }\n\t\t\t        // Y axis\n\t\t\t        Vector3_1.Vector3.crossToRef(zAxis, xAxis, yAxis);\n\t\t\t        Vector3_1.Vector3.normalizeToRef(yAxis, yAxis);\n\t\t\t        // Eye angles\n\t\t\t        const ex = -Vector3_1.Vector3.dot(xAxis, eye);\n\t\t\t        const ey = -Vector3_1.Vector3.dot(yAxis, eye);\n\t\t\t        const ez = -Vector3_1.Vector3.dot(zAxis, eye);\n\t\t\t        fromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n\t\t\t    }\n\t\t\t    Matrix.lookAtRHToRef = lookAtRHToRef;\n\t\t\t    /**\n\t\t\t     * Create a left-handed orthographic projection matrix\n\t\t\t     * @param width - defines the viewport width\n\t\t\t     * @param height - defines the viewport height\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @returns a new matrix as a left-handed orthographic projection matrix\n\t\t\t     */\n\t\t\t    function orthoLH(width, height, znear, zfar) {\n\t\t\t        const matrix = create();\n\t\t\t        orthoLHToRef(width, height, znear, zfar, matrix);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.orthoLH = orthoLH;\n\t\t\t    /**\n\t\t\t     * Store a left-handed orthographic projection to a given matrix\n\t\t\t     * @param width - defines the viewport width\n\t\t\t     * @param height - defines the viewport height\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function orthoLHToRef(width, height, znear, zfar, result) {\n\t\t\t        const n = znear;\n\t\t\t        const f = zfar;\n\t\t\t        const a = 2.0 / width;\n\t\t\t        const b = 2.0 / height;\n\t\t\t        const c = 2.0 / (f - n);\n\t\t\t        const d = -(f + n) / (f - n);\n\t\t\t        fromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n\t\t\t        _updateIdentityStatus(result, a === 1 && b === 1 && c === 1 && d === 0);\n\t\t\t    }\n\t\t\t    Matrix.orthoLHToRef = orthoLHToRef;\n\t\t\t    /**\n\t\t\t     * Create a left-handed orthographic projection matrix\n\t\t\t     * @param left - defines the viewport left coordinate\n\t\t\t     * @param right - defines the viewport right coordinate\n\t\t\t     * @param bottom - defines the viewport bottom coordinate\n\t\t\t     * @param top - defines the viewport top coordinate\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @returns a new matrix as a left-handed orthographic projection matrix\n\t\t\t     */\n\t\t\t    function OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {\n\t\t\t        const matrix = create();\n\t\t\t        orthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.OrthoOffCenterLH = OrthoOffCenterLH;\n\t\t\t    /**\n\t\t\t     * Stores a left-handed orthographic projection into a given matrix\n\t\t\t     * @param left - defines the viewport left coordinate\n\t\t\t     * @param right - defines the viewport right coordinate\n\t\t\t     * @param bottom - defines the viewport bottom coordinate\n\t\t\t     * @param top - defines the viewport top coordinate\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function orthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {\n\t\t\t        const n = znear;\n\t\t\t        const f = zfar;\n\t\t\t        const a = 2.0 / (right - left);\n\t\t\t        const b = 2.0 / (top - bottom);\n\t\t\t        const c = 2.0 / (f - n);\n\t\t\t        const d = -(f + n) / (f - n);\n\t\t\t        const i0 = (left + right) / (left - right);\n\t\t\t        const i1 = (top + bottom) / (bottom - top);\n\t\t\t        fromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.orthoOffCenterLHToRef = orthoOffCenterLHToRef;\n\t\t\t    /**\n\t\t\t     * Creates a right-handed orthographic projection matrix\n\t\t\t     * @param left - defines the viewport left coordinate\n\t\t\t     * @param right - defines the viewport right coordinate\n\t\t\t     * @param bottom - defines the viewport bottom coordinate\n\t\t\t     * @param top - defines the viewport top coordinate\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @returns a new matrix as a right-handed orthographic projection matrix\n\t\t\t     */\n\t\t\t    function orthoOffCenterRH(left, right, bottom, top, znear, zfar) {\n\t\t\t        const matrix = create();\n\t\t\t        orthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.orthoOffCenterRH = orthoOffCenterRH;\n\t\t\t    /**\n\t\t\t     * Stores a right-handed orthographic projection into a given matrix\n\t\t\t     * @param left - defines the viewport left coordinate\n\t\t\t     * @param right - defines the viewport right coordinate\n\t\t\t     * @param bottom - defines the viewport bottom coordinate\n\t\t\t     * @param top - defines the viewport top coordinate\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function orthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {\n\t\t\t        orthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n\t\t\t        result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n\t\t\t    }\n\t\t\t    Matrix.orthoOffCenterRHToRef = orthoOffCenterRHToRef;\n\t\t\t    /**\n\t\t\t     * Creates a left-handed perspective projection matrix\n\t\t\t     * @param width - defines the viewport width\n\t\t\t     * @param height - defines the viewport height\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @returns a new matrix as a left-handed perspective projection matrix\n\t\t\t     */\n\t\t\t    function perspectiveLH(width, height, znear, zfar) {\n\t\t\t        const matrix = create();\n\t\t\t        const n = znear;\n\t\t\t        const f = zfar;\n\t\t\t        const a = (2.0 * n) / width;\n\t\t\t        const b = (2.0 * n) / height;\n\t\t\t        const c = (f + n) / (f - n);\n\t\t\t        const d = (-2.0 * f * n) / (f - n);\n\t\t\t        fromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n\t\t\t        _updateIdentityStatus(matrix, false);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.perspectiveLH = perspectiveLH;\n\t\t\t    /**\n\t\t\t     * Creates a left-handed perspective projection matrix\n\t\t\t     * @param fov - defines the horizontal field of view\n\t\t\t     * @param aspect - defines the aspect ratio\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @returns a new matrix as a left-handed perspective projection matrix\n\t\t\t     */\n\t\t\t    function perspectiveFovLH(fov, aspect, znear, zfar) {\n\t\t\t        const matrix = create();\n\t\t\t        perspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.perspectiveFovLH = perspectiveFovLH;\n\t\t\t    /**\n\t\t\t     * Stores a left-handed perspective projection into a given matrix\n\t\t\t     * @param fov - defines the horizontal field of view\n\t\t\t     * @param aspect - defines the aspect ratio\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n\t\t\t     */\n\t\t\t    function perspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n\t\t\t        const n = znear;\n\t\t\t        const f = zfar;\n\t\t\t        const t = 1.0 / Math.tan(fov * 0.5);\n\t\t\t        const a = isVerticalFovFixed ? t / aspect : t;\n\t\t\t        const b = isVerticalFovFixed ? t : t * aspect;\n\t\t\t        const c = (f + n) / (f - n);\n\t\t\t        const d = (-2.0 * f * n) / (f - n);\n\t\t\t        fromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n\t\t\t        _updateIdentityStatus(result, false);\n\t\t\t    }\n\t\t\t    Matrix.perspectiveFovLHToRef = perspectiveFovLHToRef;\n\t\t\t    /**\n\t\t\t     * Creates a right-handed perspective projection matrix\n\t\t\t     * @param fov - defines the horizontal field of view\n\t\t\t     * @param aspect - defines the aspect ratio\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @returns a new matrix as a right-handed perspective projection matrix\n\t\t\t     */\n\t\t\t    function PerspectiveFovRH(fov, aspect, znear, zfar) {\n\t\t\t        const matrix = create();\n\t\t\t        perspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.PerspectiveFovRH = PerspectiveFovRH;\n\t\t\t    /**\n\t\t\t     * Stores a right-handed perspective projection into a given matrix\n\t\t\t     * @param fov - defines the horizontal field of view\n\t\t\t     * @param aspect - defines the aspect ratio\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n\t\t\t     */\n\t\t\t    function perspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n\t\t\t        /* alternatively self could be expressed as:\n\t\t\t        //    m = PerspectiveFovLHToRef\n\t\t\t        //    m[10] *= -1.0;\n\t\t\t        //    m[11] *= -1.0;\n\t\t\t        */\n\t\t\t        const n = znear;\n\t\t\t        const f = zfar;\n\t\t\t        const t = 1.0 / Math.tan(fov * 0.5);\n\t\t\t        const a = isVerticalFovFixed ? t / aspect : t;\n\t\t\t        const b = isVerticalFovFixed ? t : t * aspect;\n\t\t\t        const c = -(f + n) / (f - n);\n\t\t\t        const d = (-2 * f * n) / (f - n);\n\t\t\t        fromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n\t\t\t        _updateIdentityStatus(result, false);\n\t\t\t    }\n\t\t\t    Matrix.perspectiveFovRHToRef = perspectiveFovRHToRef;\n\t\t\t    /**\n\t\t\t     * Stores a perspective projection for WebVR info a given matrix\n\t\t\t     * @param fov - defines the field of view\n\t\t\t     * @param znear - defines the near clip plane\n\t\t\t     * @param zfar - defines the far clip plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n\t\t\t     */\n\t\t\t    function perspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {\n\t\t\t        const rightHandedFactor = rightHanded ? -1 : 1;\n\t\t\t        const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n\t\t\t        const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n\t\t\t        const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n\t\t\t        const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n\t\t\t        const xScale = 2.0 / (leftTan + rightTan);\n\t\t\t        const yScale = 2.0 / (upTan + downTan);\n\t\t\t        const m = result._m;\n\t\t\t        m[0] = xScale;\n\t\t\t        m[1] = m[2] = m[3] = m[4] = 0.0;\n\t\t\t        m[5] = yScale;\n\t\t\t        m[6] = m[7] = 0.0;\n\t\t\t        m[8] = (leftTan - rightTan) * xScale * 0.5;\n\t\t\t        m[9] = -((upTan - downTan) * yScale * 0.5);\n\t\t\t        m[10] = -zfar / (znear - zfar);\n\t\t\t        m[11] = 1.0 * rightHandedFactor;\n\t\t\t        m[12] = m[13] = m[15] = 0.0;\n\t\t\t        m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.perspectiveFovWebVRToRef = perspectiveFovWebVRToRef;\n\t\t\t    /**\n\t\t\t     * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n\t\t\t     * @param matrix - defines the matrix to use\n\t\t\t     * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n\t\t\t     */\n\t\t\t    function GetAsMatrix2x2(matrix) {\n\t\t\t        return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\n\t\t\t    }\n\t\t\t    Matrix.GetAsMatrix2x2 = GetAsMatrix2x2;\n\t\t\t    /**\n\t\t\t     * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n\t\t\t     * @param matrix - defines the matrix to use\n\t\t\t     * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n\t\t\t     */\n\t\t\t    function GetAsMatrix3x3(matrix) {\n\t\t\t        return [\n\t\t\t            matrix._m[0],\n\t\t\t            matrix._m[1],\n\t\t\t            matrix._m[2],\n\t\t\t            matrix._m[4],\n\t\t\t            matrix._m[5],\n\t\t\t            matrix._m[6],\n\t\t\t            matrix._m[8],\n\t\t\t            matrix._m[9],\n\t\t\t            matrix._m[10]\n\t\t\t        ];\n\t\t\t    }\n\t\t\t    Matrix.GetAsMatrix3x3 = GetAsMatrix3x3;\n\t\t\t    /**\n\t\t\t     * Compute the transpose of a given matrix\n\t\t\t     * @param matrix - defines the matrix to transpose\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function transpose(matrix) {\n\t\t\t        const result = create();\n\t\t\t        transposeToRef(matrix, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.transpose = transpose;\n\t\t\t    /**\n\t\t\t     * Compute the transpose of a matrix and store it in a target matrix\n\t\t\t     * @param matrix - defines the matrix to transpose\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function transposeToRef(matrix, result) {\n\t\t\t        const rm = result._m;\n\t\t\t        const mm = matrix._m;\n\t\t\t        rm[0] = mm[0];\n\t\t\t        rm[1] = mm[4];\n\t\t\t        rm[2] = mm[8];\n\t\t\t        rm[3] = mm[12];\n\t\t\t        rm[4] = mm[1];\n\t\t\t        rm[5] = mm[5];\n\t\t\t        rm[6] = mm[9];\n\t\t\t        rm[7] = mm[13];\n\t\t\t        rm[8] = mm[2];\n\t\t\t        rm[9] = mm[6];\n\t\t\t        rm[10] = mm[10];\n\t\t\t        rm[11] = mm[14];\n\t\t\t        rm[12] = mm[3];\n\t\t\t        rm[13] = mm[7];\n\t\t\t        rm[14] = mm[11];\n\t\t\t        rm[15] = mm[15];\n\t\t\t        // identity-ness does not change when transposing\n\t\t\t        _updateIdentityStatus(result, matrix.isIdentity, matrix._isIdentityDirty);\n\t\t\t    }\n\t\t\t    Matrix.transposeToRef = transposeToRef;\n\t\t\t    /**\n\t\t\t     * Computes a reflection matrix from a plane\n\t\t\t     * @param plane - defines the reflection plane\n\t\t\t     * @returns a new matrix\n\t\t\t     */\n\t\t\t    function reflection(plane) {\n\t\t\t        const matrix = create();\n\t\t\t        reflectionToRef(plane, matrix);\n\t\t\t        return matrix;\n\t\t\t    }\n\t\t\t    Matrix.reflection = reflection;\n\t\t\t    /**\n\t\t\t     * Computes a reflection matrix from a plane\n\t\t\t     * @param plane - defines the reflection plane\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function reflectionToRef(_plane, result) {\n\t\t\t        const plane = Plane_1.Plane.normalize(_plane);\n\t\t\t        const x = plane.normal.x;\n\t\t\t        const y = plane.normal.y;\n\t\t\t        const z = plane.normal.z;\n\t\t\t        const temp = -2 * x;\n\t\t\t        const temp2 = -2 * y;\n\t\t\t        const temp3 = -2 * z;\n\t\t\t        fromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n\t\t\t    }\n\t\t\t    Matrix.reflectionToRef = reflectionToRef;\n\t\t\t    /**\n\t\t\t     * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n\t\t\t     * @param xaxis - defines the value of the 1st axis\n\t\t\t     * @param yaxis - defines the value of the 2nd axis\n\t\t\t     * @param zaxis - defines the value of the 3rd axis\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function fromXYZAxesToRef(xaxis, yaxis, zaxis, result) {\n\t\t\t        fromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t    }\n\t\t\t    Matrix.fromXYZAxesToRef = fromXYZAxesToRef;\n\t\t\t    /**\n\t\t\t     * Creates a rotation matrix from a quaternion and stores it in a target matrix\n\t\t\t     * @param quat - defines the quaternion to use\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     */\n\t\t\t    function fromQuaternionToRef(quat, result) {\n\t\t\t        const xx = quat.x * quat.x;\n\t\t\t        const yy = quat.y * quat.y;\n\t\t\t        const zz = quat.z * quat.z;\n\t\t\t        const xy = quat.x * quat.y;\n\t\t\t        const zw = quat.z * quat.w;\n\t\t\t        const zx = quat.z * quat.x;\n\t\t\t        const yw = quat.y * quat.w;\n\t\t\t        const yz = quat.y * quat.z;\n\t\t\t        const xw = quat.x * quat.w;\n\t\t\t        result._m[0] = 1.0 - 2.0 * (yy + zz);\n\t\t\t        result._m[1] = 2.0 * (xy + zw);\n\t\t\t        result._m[2] = 2.0 * (zx - yw);\n\t\t\t        result._m[3] = 0.0;\n\t\t\t        result._m[4] = 2.0 * (xy - zw);\n\t\t\t        result._m[5] = 1.0 - 2.0 * (zz + xx);\n\t\t\t        result._m[6] = 2.0 * (yz + xw);\n\t\t\t        result._m[7] = 0.0;\n\t\t\t        result._m[8] = 2.0 * (zx + yw);\n\t\t\t        result._m[9] = 2.0 * (yz - xw);\n\t\t\t        result._m[10] = 1.0 - 2.0 * (yy + xx);\n\t\t\t        result._m[11] = 0.0;\n\t\t\t        result._m[12] = 0.0;\n\t\t\t        result._m[13] = 0.0;\n\t\t\t        result._m[14] = 0.0;\n\t\t\t        result._m[15] = 1.0;\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.fromQuaternionToRef = fromQuaternionToRef;\n\t\t\t    /** @internal */\n\t\t\t    function _markAsUpdated(self) {\n\t\t\t        self.updateFlag = _updateFlagSeed++;\n\t\t\t        self.isIdentity = false;\n\t\t\t        self.isIdentity3x2 = false;\n\t\t\t        self._isIdentityDirty = true;\n\t\t\t        self._isIdentity3x2Dirty = true;\n\t\t\t    }\n\t\t\t    // Properties\n\t\t\t    /**\n\t\t\t     * Check if the current matrix is identity\n\t\t\t     * @returns true is the matrix is the identity matrix\n\t\t\t     */\n\t\t\t    function isIdentityUpdate(self) {\n\t\t\t        if (self._isIdentityDirty) {\n\t\t\t            self._isIdentityDirty = false;\n\t\t\t            const m = self._m;\n\t\t\t            self.isIdentity =\n\t\t\t                m[0] === 1.0 &&\n\t\t\t                    m[1] === 0.0 &&\n\t\t\t                    m[2] === 0.0 &&\n\t\t\t                    m[3] === 0.0 &&\n\t\t\t                    m[4] === 0.0 &&\n\t\t\t                    m[5] === 1.0 &&\n\t\t\t                    m[6] === 0.0 &&\n\t\t\t                    m[7] === 0.0 &&\n\t\t\t                    m[8] === 0.0 &&\n\t\t\t                    m[9] === 0.0 &&\n\t\t\t                    m[10] === 1.0 &&\n\t\t\t                    m[11] === 0.0 &&\n\t\t\t                    m[12] === 0.0 &&\n\t\t\t                    m[13] === 0.0 &&\n\t\t\t                    m[14] === 0.0 &&\n\t\t\t                    m[15] === 1.0;\n\t\t\t        }\n\t\t\t        return self.isIdentity;\n\t\t\t    }\n\t\t\t    Matrix.isIdentityUpdate = isIdentityUpdate;\n\t\t\t    /**\n\t\t\t     * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n\t\t\t     * @returns true is the matrix is the identity matrix\n\t\t\t     */\n\t\t\t    function isIdentityAs3x2Update(self) {\n\t\t\t        if (self._isIdentity3x2Dirty) {\n\t\t\t            self._isIdentity3x2Dirty = false;\n\t\t\t            if (self._m[0] !== 1.0 || self._m[5] !== 1.0 || self._m[15] !== 1.0) {\n\t\t\t                self.isIdentity3x2 = false;\n\t\t\t            }\n\t\t\t            else if (self._m[1] !== 0.0 ||\n\t\t\t                self._m[2] !== 0.0 ||\n\t\t\t                self._m[3] !== 0.0 ||\n\t\t\t                self._m[4] !== 0.0 ||\n\t\t\t                self._m[6] !== 0.0 ||\n\t\t\t                self._m[7] !== 0.0 ||\n\t\t\t                self._m[8] !== 0.0 ||\n\t\t\t                self._m[9] !== 0.0 ||\n\t\t\t                self._m[10] !== 0.0 ||\n\t\t\t                self._m[11] !== 0.0 ||\n\t\t\t                self._m[12] !== 0.0 ||\n\t\t\t                self._m[13] !== 0.0 ||\n\t\t\t                self._m[14] !== 0.0) {\n\t\t\t                self.isIdentity3x2 = false;\n\t\t\t            }\n\t\t\t            else {\n\t\t\t                self.isIdentity3x2 = true;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return self.isIdentity3x2;\n\t\t\t    }\n\t\t\t    Matrix.isIdentityAs3x2Update = isIdentityAs3x2Update;\n\t\t\t    /**\n\t\t\t     * Gets the determinant of the matrix\n\t\t\t     * @returns the matrix determinant\n\t\t\t     */\n\t\t\t    function determinant(self) {\n\t\t\t        if (self.isIdentity === true) {\n\t\t\t            return 1;\n\t\t\t        }\n\t\t\t        const m = self._m;\n\t\t\t        // tslint:disable-next-line:one-variable-per-declaration\n\t\t\t        const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n\t\t\t        // tslint:disable-next-line:one-variable-per-declaration\n\t\t\t        const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n\t\t\t        // tslint:disable-next-line:one-variable-per-declaration\n\t\t\t        const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n\t\t\t        // tslint:disable-next-line:one-variable-per-declaration\n\t\t\t        const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n\t\t\t        /*\n\t\t\t        // https://en.wikipedia.org/wiki/Laplace_expansion\n\t\t\t        // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n\t\t\t        // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n\t\t\t        // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n\t\t\t        // where\n\t\t\t        //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n\t\t\t        //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n\t\t\t        //\n\t\t\t        // Here we do that for the 1st row.\n\t\t\t        */\n\t\t\t        // tslint:disable:variable-name\n\t\t\t        const det_22_33 = m22 * m33 - m32 * m23;\n\t\t\t        const det_21_33 = m21 * m33 - m31 * m23;\n\t\t\t        const det_21_32 = m21 * m32 - m31 * m22;\n\t\t\t        const det_20_33 = m20 * m33 - m30 * m23;\n\t\t\t        const det_20_32 = m20 * m32 - m22 * m30;\n\t\t\t        const det_20_31 = m20 * m31 - m30 * m21;\n\t\t\t        const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n\t\t\t        const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n\t\t\t        const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n\t\t\t        const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n\t\t\t        // tslint:enable:variable-name\n\t\t\t        return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n\t\t\t    }\n\t\t\t    Matrix.determinant = determinant;\n\t\t\t    // Methods\n\t\t\t    /**\n\t\t\t     * Returns the matrix as a FloatArray\n\t\t\t     * @returns the matrix underlying array\n\t\t\t     */\n\t\t\t    function toArray(self) {\n\t\t\t        return self._m;\n\t\t\t    }\n\t\t\t    Matrix.toArray = toArray;\n\t\t\t    /**\n\t\t\t     * Returns the matrix as a FloatArray\n\t\t\t     * @returns the matrix underlying array.\n\t\t\t     */\n\t\t\t    function asArray(self) {\n\t\t\t        return self._m;\n\t\t\t    }\n\t\t\t    Matrix.asArray = asArray;\n\t\t\t    /**\n\t\t\t     * Sets all the matrix elements to zero\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function reset(self) {\n\t\t\t        fromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, self);\n\t\t\t        _updateIdentityStatus(self, false);\n\t\t\t    }\n\t\t\t    Matrix.reset = reset;\n\t\t\t    /**\n\t\t\t     * Adds the current matrix with a second one\n\t\t\t     * @param other - defines the matrix to add\n\t\t\t     * @returns a new matrix as the addition of the current matrix and the given one\n\t\t\t     */\n\t\t\t    function add(self, other) {\n\t\t\t        const result = create();\n\t\t\t        addToRef(self, other, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.add = add;\n\t\t\t    /**\n\t\t\t     * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n\t\t\t     * @param other - defines the matrix to add\n\t\t\t     * @param result - defines the target matrix\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function addToRef(self, other, result) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            result._m[index] = self._m[index] + other._m[index];\n\t\t\t        }\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.addToRef = addToRef;\n\t\t\t    /**\n\t\t\t     * Adds in place the given matrix to the current matrix\n\t\t\t     * @param other - defines the second operand\n\t\t\t     * @returns the current updated matrix\n\t\t\t     */\n\t\t\t    function addToSelf(self, other) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            self._m[index] += other._m[index];\n\t\t\t        }\n\t\t\t        _markAsUpdated(self);\n\t\t\t    }\n\t\t\t    Matrix.addToSelf = addToSelf;\n\t\t\t    /**\n\t\t\t     * Creates a new matrix as the invert of a given matrix\n\t\t\t     * @param source - defines the source matrix\n\t\t\t     * @returns the new matrix\n\t\t\t     */\n\t\t\t    function invert(source) {\n\t\t\t        const result = create();\n\t\t\t        invertToRef(source, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.invert = invert;\n\t\t\t    /**\n\t\t\t     * Sets the given matrix to the current inverted Matrix\n\t\t\t     * @param other - defines the target matrix\n\t\t\t     * @returns the unmodified current matrix\n\t\t\t     */\n\t\t\t    function invertToRef(source, result) {\n\t\t\t        if (source.isIdentity === true) {\n\t\t\t            copy(source, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n\t\t\t        const m = source._m;\n\t\t\t        // tslint:disable:one-variable-per-declaration\n\t\t\t        const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n\t\t\t        const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n\t\t\t        const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n\t\t\t        const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n\t\t\t        // tslint:enable:one-variable-per-declaration\n\t\t\t        // tslint:disable:variable-name\n\t\t\t        const det_22_33 = m22 * m33 - m32 * m23;\n\t\t\t        const det_21_33 = m21 * m33 - m31 * m23;\n\t\t\t        const det_21_32 = m21 * m32 - m31 * m22;\n\t\t\t        const det_20_33 = m20 * m33 - m30 * m23;\n\t\t\t        const det_20_32 = m20 * m32 - m22 * m30;\n\t\t\t        const det_20_31 = m20 * m31 - m30 * m21;\n\t\t\t        const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n\t\t\t        const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n\t\t\t        const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n\t\t\t        const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n\t\t\t        const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n\t\t\t        if (det === 0) {\n\t\t\t            copy(source, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        const detInv = 1 / det;\n\t\t\t        const det_12_33 = m12 * m33 - m32 * m13;\n\t\t\t        const det_11_33 = m11 * m33 - m31 * m13;\n\t\t\t        const det_11_32 = m11 * m32 - m31 * m12;\n\t\t\t        const det_10_33 = m10 * m33 - m30 * m13;\n\t\t\t        const det_10_32 = m10 * m32 - m30 * m12;\n\t\t\t        const det_10_31 = m10 * m31 - m30 * m11;\n\t\t\t        const det_12_23 = m12 * m23 - m22 * m13;\n\t\t\t        const det_11_23 = m11 * m23 - m21 * m13;\n\t\t\t        const det_11_22 = m11 * m22 - m21 * m12;\n\t\t\t        const det_10_23 = m10 * m23 - m20 * m13;\n\t\t\t        const det_10_22 = m10 * m22 - m20 * m12;\n\t\t\t        const det_10_21 = m10 * m21 - m20 * m11;\n\t\t\t        const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n\t\t\t        const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n\t\t\t        const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n\t\t\t        const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n\t\t\t        const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n\t\t\t        const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n\t\t\t        const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n\t\t\t        const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n\t\t\t        const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n\t\t\t        const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n\t\t\t        const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n\t\t\t        const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n\t\t\t        fromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, result);\n\t\t\t        // tslint:enable:variable-name\n\t\t\t    }\n\t\t\t    Matrix.invertToRef = invertToRef;\n\t\t\t    /**\n\t\t\t     * add a value at the specified position in the current Matrix\n\t\t\t     * @param index - the index of the value within the matrix. between 0 and 15.\n\t\t\t     * @param value - the value to be added\n\t\t\t     * @returns the current updated matrix\n\t\t\t     */\n\t\t\t    function addAtIndex(self, index, value) {\n\t\t\t        self._m[index] += value;\n\t\t\t        _markAsUpdated(self);\n\t\t\t    }\n\t\t\t    Matrix.addAtIndex = addAtIndex;\n\t\t\t    /**\n\t\t\t     * mutiply the specified position in the current Matrix by a value\n\t\t\t     * @param index - the index of the value within the matrix. between 0 and 15.\n\t\t\t     * @param value - the value to be added\n\t\t\t     * @returns the current updated matrix\n\t\t\t     */\n\t\t\t    function multiplyAtIndex(self, index, value) {\n\t\t\t        self._m[index] *= value;\n\t\t\t        _markAsUpdated(self);\n\t\t\t        return self;\n\t\t\t    }\n\t\t\t    Matrix.multiplyAtIndex = multiplyAtIndex;\n\t\t\t    /**\n\t\t\t     * Inserts the translation vector (using 3 floats) in the current matrix\n\t\t\t     * @param x - defines the 1st component of the translation\n\t\t\t     * @param y - defines the 2nd component of the translation\n\t\t\t     * @param z - defines the 3rd component of the translation\n\t\t\t     * @returns the current updated matrix\n\t\t\t     */\n\t\t\t    function setTranslationFromFloats(self, x, y, z) {\n\t\t\t        self._m[12] = x;\n\t\t\t        self._m[13] = y;\n\t\t\t        self._m[14] = z;\n\t\t\t        _markAsUpdated(self);\n\t\t\t    }\n\t\t\t    Matrix.setTranslationFromFloats = setTranslationFromFloats;\n\t\t\t    /**\n\t\t\t     * Inserts the translation vector in the current matrix\n\t\t\t     * @param vector3 - defines the translation to insert\n\t\t\t     * @returns the current updated matrix\n\t\t\t     */\n\t\t\t    function setTranslation(self, vector3) {\n\t\t\t        setTranslationFromFloats(self, vector3.x, vector3.y, vector3.z);\n\t\t\t    }\n\t\t\t    Matrix.setTranslation = setTranslation;\n\t\t\t    /**\n\t\t\t     * Gets the translation value of the current matrix\n\t\t\t     * @returns a new Vector3 as the extracted translation from the matrix\n\t\t\t     */\n\t\t\t    function getTranslation(self) {\n\t\t\t        return Vector3_1.Vector3.create(self._m[12], self._m[13], self._m[14]);\n\t\t\t    }\n\t\t\t    Matrix.getTranslation = getTranslation;\n\t\t\t    /**\n\t\t\t     * Fill a Vector3 with the extracted translation from the matrix\n\t\t\t     * @param result - defines the Vector3 where to store the translation\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function getTranslationToRef(self, result) {\n\t\t\t        result.x = self._m[12];\n\t\t\t        result.y = self._m[13];\n\t\t\t        result.z = self._m[14];\n\t\t\t    }\n\t\t\t    Matrix.getTranslationToRef = getTranslationToRef;\n\t\t\t    /**\n\t\t\t     * Remove rotation and scaling part from the matrix\n\t\t\t     * @returns the updated matrix\n\t\t\t     */\n\t\t\t    function removeRotationAndScaling(self) {\n\t\t\t        const m = self._m;\n\t\t\t        fromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], self);\n\t\t\t        _updateIdentityStatus(self, m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n\t\t\t        return self;\n\t\t\t    }\n\t\t\t    Matrix.removeRotationAndScaling = removeRotationAndScaling;\n\t\t\t    /**\n\t\t\t     * Multiply two matrices\n\t\t\t     * @param other - defines the second operand\n\t\t\t     * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n\t\t\t     */\n\t\t\t    function multiply(self, other) {\n\t\t\t        const result = create();\n\t\t\t        multiplyToRef(self, other, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.multiply = multiply;\n\t\t\t    /**\n\t\t\t     * Copy the current matrix from the given one\n\t\t\t     * @param other - defines the source matrix\n\t\t\t     * @returns the current updated matrix\n\t\t\t     */\n\t\t\t    function copy(from, dest) {\n\t\t\t        copyToArray(from, dest._m);\n\t\t\t        _updateIdentityStatus(dest, from.isIdentity, from._isIdentityDirty, from.isIdentity3x2, from._isIdentity3x2Dirty);\n\t\t\t    }\n\t\t\t    Matrix.copy = copy;\n\t\t\t    /**\n\t\t\t     * Populates the given array from the starting index with the current matrix values\n\t\t\t     * @param array - defines the target array\n\t\t\t     * @param offset - defines the offset in the target array where to start storing values\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function copyToArray(self, arrayDest, offsetDest = 0) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            arrayDest[offsetDest + index] = self._m[index];\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Matrix.copyToArray = copyToArray;\n\t\t\t    /**\n\t\t\t     * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n\t\t\t     * @param other - defines the second operand\n\t\t\t     * @param result - defines the matrix where to store the multiplication\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function multiplyToRef(self, other, result) {\n\t\t\t        if (self.isIdentity) {\n\t\t\t            copy(other, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        if (other.isIdentity) {\n\t\t\t            copy(self, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        multiplyToArray(self, other, result._m, 0);\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.multiplyToRef = multiplyToRef;\n\t\t\t    /**\n\t\t\t     * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n\t\t\t     * @param other - defines the second operand\n\t\t\t     * @param result - defines the array where to store the multiplication\n\t\t\t     * @param offset - defines the offset in the target array where to start storing values\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function multiplyToArray(self, other, result, offset) {\n\t\t\t        const m = self._m;\n\t\t\t        const otherM = other._m;\n\t\t\t        // tslint:disable:one-variable-per-declaration\n\t\t\t        const tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\n\t\t\t        const tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\n\t\t\t        const tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\n\t\t\t        const tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\n\t\t\t        const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\n\t\t\t        const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\n\t\t\t        const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\n\t\t\t        const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\n\t\t\t        // tslint:enable:one-variable-per-declaration\n\t\t\t        result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n\t\t\t        result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n\t\t\t        result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n\t\t\t        result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n\t\t\t        result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n\t\t\t        result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n\t\t\t        result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n\t\t\t        result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n\t\t\t        result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n\t\t\t        result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n\t\t\t        result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n\t\t\t        result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n\t\t\t        result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n\t\t\t        result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n\t\t\t        result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n\t\t\t        result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n\t\t\t    }\n\t\t\t    Matrix.multiplyToArray = multiplyToArray;\n\t\t\t    /**\n\t\t\t     * Check equality between self matrix and a second one\n\t\t\t     * @param value - defines the second matrix to compare\n\t\t\t     * @returns true is the current matrix and the given one values are strictly equal\n\t\t\t     */\n\t\t\t    function equals(self, value) {\n\t\t\t        const other = value;\n\t\t\t        if (!other) {\n\t\t\t            return false;\n\t\t\t        }\n\t\t\t        if (self.isIdentity || other.isIdentity) {\n\t\t\t            if (!self._isIdentityDirty && !other._isIdentityDirty) {\n\t\t\t                return self.isIdentity && other.isIdentity;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        const m = self._m;\n\t\t\t        const om = other._m;\n\t\t\t        return (m[0] === om[0] &&\n\t\t\t            m[1] === om[1] &&\n\t\t\t            m[2] === om[2] &&\n\t\t\t            m[3] === om[3] &&\n\t\t\t            m[4] === om[4] &&\n\t\t\t            m[5] === om[5] &&\n\t\t\t            m[6] === om[6] &&\n\t\t\t            m[7] === om[7] &&\n\t\t\t            m[8] === om[8] &&\n\t\t\t            m[9] === om[9] &&\n\t\t\t            m[10] === om[10] &&\n\t\t\t            m[11] === om[11] &&\n\t\t\t            m[12] === om[12] &&\n\t\t\t            m[13] === om[13] &&\n\t\t\t            m[14] === om[14] &&\n\t\t\t            m[15] === om[15]);\n\t\t\t    }\n\t\t\t    Matrix.equals = equals;\n\t\t\t    /**\n\t\t\t     * Clone the current matrix\n\t\t\t     * @returns a new matrix from the current matrix\n\t\t\t     */\n\t\t\t    function clone(self) {\n\t\t\t        const result = create();\n\t\t\t        copy(self, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.clone = clone;\n\t\t\t    /**\n\t\t\t     * Gets the hash code of the current matrix\n\t\t\t     * @returns the hash code\n\t\t\t     */\n\t\t\t    function getHashCode(self) {\n\t\t\t        let hash = self._m[0] || 0;\n\t\t\t        for (let i = 1; i < 16; i++) {\n\t\t\t            hash = (hash * 397) ^ (self._m[i] || 0);\n\t\t\t        }\n\t\t\t        return hash;\n\t\t\t    }\n\t\t\t    Matrix.getHashCode = getHashCode;\n\t\t\t    /**\n\t\t\t     * Decomposes the current Matrix into a translation, rotation and scaling components\n\t\t\t     * @param scale - defines the scale vector3 given as a reference to update\n\t\t\t     * @param rotation - defines the rotation quaternion given as a reference to update\n\t\t\t     * @param translation - defines the translation vector3 given as a reference to update\n\t\t\t     * @returns true if operation was successful\n\t\t\t     */\n\t\t\t    function decompose(self, scale, rotation, translation) {\n\t\t\t        if (self.isIdentity) {\n\t\t\t            if (translation) {\n\t\t\t                translation = Vector3_1.Vector3.create(0, 0, 0);\n\t\t\t            }\n\t\t\t            if (scale) {\n\t\t\t                scale = Vector3_1.Vector3.create(0, 0, 0);\n\t\t\t            }\n\t\t\t            if (rotation) {\n\t\t\t                rotation = Quaternion_1.Quaternion.create(0, 0, 0, 1);\n\t\t\t            }\n\t\t\t            return true;\n\t\t\t        }\n\t\t\t        const m = self._m;\n\t\t\t        if (translation) {\n\t\t\t            translation = Vector3_1.Vector3.create(m[12], m[13], m[14]);\n\t\t\t        }\n\t\t\t        const usedScale = scale || Vector3_1.Vector3.Zero();\n\t\t\t        usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n\t\t\t        usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n\t\t\t        usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n\t\t\t        if (determinant(self) <= 0) {\n\t\t\t            usedScale.y *= -1;\n\t\t\t        }\n\t\t\t        if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n\t\t\t            if (rotation) {\n\t\t\t                rotation = Quaternion_1.Quaternion.create(0, 0, 0, 1);\n\t\t\t            }\n\t\t\t            return false;\n\t\t\t        }\n\t\t\t        if (rotation) {\n\t\t\t            // tslint:disable-next-line:one-variable-per-declaration\n\t\t\t            const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\n\t\t\t            const tmpMatrix = create();\n\t\t\t            fromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, tmpMatrix);\n\t\t\t            Quaternion_1.Quaternion.fromRotationMatrixToRef(tmpMatrix, rotation);\n\t\t\t        }\n\t\t\t        return true;\n\t\t\t    }\n\t\t\t    Matrix.decompose = decompose;\n\t\t\t    /**\n\t\t\t     * Gets specific row of the matrix\n\t\t\t     * @param index - defines the number of the row to get\n\t\t\t     * @returns the index-th row of the current matrix as a new Vector4\n\t\t\t     */\n\t\t\t    // TODO\n\t\t\t    // export function getRow(index: number): Nullable<Vector4> {\n\t\t\t    //   if (index < 0 || index > 3) {\n\t\t\t    //     return null\n\t\t\t    //   }\n\t\t\t    //   const i = index * 4\n\t\t\t    //   return new Vector4(\n\t\t\t    //     self._m[i + 0],\n\t\t\t    //     self._m[i + 1],\n\t\t\t    //     self._m[i + 2],\n\t\t\t    //     self._m[i + 3]\n\t\t\t    //   )\n\t\t\t    // }\n\t\t\t    /**\n\t\t\t     * Sets the index-th row of the current matrix to the vector4 values\n\t\t\t     * @param index - defines the number of the row to set\n\t\t\t     * @param row - defines the target vector4\n\t\t\t     * @returns the updated current matrix\n\t\t\t     */\n\t\t\t    // TODO\n\t\t\t    // export function setRow(index: number, row: Vector4): MutableMatrix {\n\t\t\t    //   return setRowFromFloats(index, row.x, row.y, row.z, row.w)\n\t\t\t    // }\n\t\t\t    /**\n\t\t\t     * Sets the index-th row of the current matrix with the given 4 x float values\n\t\t\t     * @param index - defines the row index\n\t\t\t     * @param x - defines the x component to set\n\t\t\t     * @param y - defines the y component to set\n\t\t\t     * @param z - defines the z component to set\n\t\t\t     * @param w - defines the w component to set\n\t\t\t     * @returns the updated current matrix\n\t\t\t     */\n\t\t\t    function setRowFromFloats(self, index, x, y, z, w) {\n\t\t\t        if (index < 0 || index > 3) {\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        const i = index * 4;\n\t\t\t        self._m[i + 0] = x;\n\t\t\t        self._m[i + 1] = y;\n\t\t\t        self._m[i + 2] = z;\n\t\t\t        self._m[i + 3] = w;\n\t\t\t        _markAsUpdated(self);\n\t\t\t    }\n\t\t\t    Matrix.setRowFromFloats = setRowFromFloats;\n\t\t\t    /**\n\t\t\t     * Compute a new matrix set with the current matrix values multiplied by scale (float)\n\t\t\t     * @param scale - defines the scale factor\n\t\t\t     * @returns a new matrix\n\t\t\t     */\n\t\t\t    function scale(self, scale) {\n\t\t\t        const result = create();\n\t\t\t        scaleToRef(self, scale, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.scale = scale;\n\t\t\t    /**\n\t\t\t     * Scale the current matrix values by a factor to a given result matrix\n\t\t\t     * @param scale - defines the scale factor\n\t\t\t     * @param result - defines the matrix to store the result\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function scaleToRef(self, scale, result) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            result._m[index] = self._m[index] * scale;\n\t\t\t        }\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.scaleToRef = scaleToRef;\n\t\t\t    /**\n\t\t\t     * Scale the current matrix values by a factor and add the result to a given matrix\n\t\t\t     * @param scale - defines the scale factor\n\t\t\t     * @param result - defines the Matrix to store the result\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function scaleAndAddToRef(self, scale, result) {\n\t\t\t        for (let index = 0; index < 16; index++) {\n\t\t\t            result._m[index] += self._m[index] * scale;\n\t\t\t        }\n\t\t\t        _markAsUpdated(result);\n\t\t\t    }\n\t\t\t    Matrix.scaleAndAddToRef = scaleAndAddToRef;\n\t\t\t    /**\n\t\t\t     * Writes to the given matrix a normal matrix, computed from self one (using values from identity matrix for fourth row and column).\n\t\t\t     * @param ref - matrix to store the result\n\t\t\t     */\n\t\t\t    function normalMatrixToRef(self, ref) {\n\t\t\t        const tmp = create();\n\t\t\t        invertToRef(self, tmp);\n\t\t\t        transposeToRef(tmp, ref);\n\t\t\t        const m = ref._m;\n\t\t\t        fromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n\t\t\t    }\n\t\t\t    Matrix.normalMatrixToRef = normalMatrixToRef;\n\t\t\t    /**\n\t\t\t     * Gets only rotation part of the current matrix\n\t\t\t     * @returns a new matrix sets to the extracted rotation matrix from the current one\n\t\t\t     */\n\t\t\t    function getRotationMatrix(self) {\n\t\t\t        const result = create();\n\t\t\t        getRotationMatrixToRef(self, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Matrix.getRotationMatrix = getRotationMatrix;\n\t\t\t    /**\n\t\t\t     * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n\t\t\t     * @param result - defines the target matrix to store data to\n\t\t\t     * @returns the current matrix\n\t\t\t     */\n\t\t\t    function getRotationMatrixToRef(self, result) {\n\t\t\t        const scale = Vector3_1.Vector3.Zero();\n\t\t\t        if (!decompose(self, scale)) {\n\t\t\t            result = Identity();\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        const m = self._m;\n\t\t\t        // tslint:disable-next-line:one-variable-per-declaration\n\t\t\t        const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\n\t\t\t        fromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\t\t\t    }\n\t\t\t    Matrix.getRotationMatrixToRef = getRotationMatrixToRef;\n\t\t\t    /**\n\t\t\t     * Toggles model matrix from being right handed to left handed in place and vice versa\n\t\t\t     */\n\t\t\t    function toggleModelMatrixHandInPlace(self) {\n\t\t\t        self._m[2] *= -1;\n\t\t\t        self._m[6] *= -1;\n\t\t\t        self._m[8] *= -1;\n\t\t\t        self._m[9] *= -1;\n\t\t\t        self._m[14] *= -1;\n\t\t\t        _markAsUpdated(self);\n\t\t\t    }\n\t\t\t    Matrix.toggleModelMatrixHandInPlace = toggleModelMatrixHandInPlace;\n\t\t\t    /**\n\t\t\t     * Toggles projection matrix from being right handed to left handed in place and vice versa\n\t\t\t     */\n\t\t\t    function toggleProjectionMatrixHandInPlace(self) {\n\t\t\t        self._m[8] *= -1;\n\t\t\t        self._m[9] *= -1;\n\t\t\t        self._m[10] *= -1;\n\t\t\t        self._m[11] *= -1;\n\t\t\t        _markAsUpdated(self);\n\t\t\t    }\n\t\t\t    Matrix.toggleProjectionMatrixHandInPlace = toggleProjectionMatrixHandInPlace;\n\t\t\t    /** @internal */\n\t\t\t    function _updateIdentityStatus(self, isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {\n\t\t\t        self.updateFlag = _updateFlagSeed++;\n\t\t\t        self.isIdentity = isIdentity;\n\t\t\t        self.isIdentity3x2 = isIdentity || isIdentity3x2;\n\t\t\t        self._isIdentityDirty = self.isIdentity ? false : isIdentityDirty;\n\t\t\t        self._isIdentity3x2Dirty = self.isIdentity3x2 ? false : isIdentity3x2Dirty;\n\t\t\t    }\n\t\t\t})(exports.Matrix || (exports.Matrix = {}));\n\t\t\t\n\t} (Matrix));\n\t\treturn Matrix;\n\t}\n\n\tvar hasRequiredQuaternion;\n\n\tfunction requireQuaternion () {\n\t\tif (hasRequiredQuaternion) return Quaternion;\n\t\thasRequiredQuaternion = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Quaternion = void 0;\n\t\t\tconst Vector3_1 = requireVector3();\n\t\t\tconst Scalar_1 = requireScalar();\n\t\t\tconst types_1 = requireTypes$1();\n\t\t\tconst Matrix_1 = requireMatrix();\n\t\t\t(function (Quaternion) {\n\t\t\t    /**\n\t\t\t     * Creates a new Quaternion from the given floats\n\t\t\t     * @param x - defines the first component (0 by default)\n\t\t\t     * @param y - defines the second component (0 by default)\n\t\t\t     * @param z - defines the third component (0 by default)\n\t\t\t     * @param w - defines the fourth component (1.0 by default)\n\t\t\t     */\n\t\t\t    function create(\n\t\t\t    /** defines the first component (0 by default) */\n\t\t\t    x = 0.0, \n\t\t\t    /** defines the second component (0 by default) */\n\t\t\t    y = 0.0, \n\t\t\t    /** defines the third component (0 by default) */\n\t\t\t    z = 0.0, \n\t\t\t    /** defines the fourth component (1.0 by default) */\n\t\t\t    w = 1.0) {\n\t\t\t        return { x, y, z, w };\n\t\t\t    }\n\t\t\t    Quaternion.create = create;\n\t\t\t    /**\n\t\t\t     * Returns a new Quaternion as the result of the addition of the two given quaternions.\n\t\t\t     * @param q1 - the first quaternion\n\t\t\t     * @param q2 - the second quaternion\n\t\t\t     * @returns the resulting quaternion\n\t\t\t     */\n\t\t\t    function add(q1, q2) {\n\t\t\t        return { x: q1.x + q2.x, y: q1.y + q2.y, z: q1.z + q2.z, w: q1.w + q2.w };\n\t\t\t    }\n\t\t\t    Quaternion.add = add;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n\t\t\t     * @param yaw - defines the rotation around Y axis\n\t\t\t     * @param pitch - defines the rotation around X axis\n\t\t\t     * @param roll - defines the rotation around Z axis\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationYawPitchRoll(yaw, pitch, roll) {\n\t\t\t        // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t        const halfPitch = pitch * 0.5;\n\t\t\t        const halfYaw = yaw * 0.5;\n\t\t\t        const halfRoll = roll * 0.5;\n\t\t\t        const c1 = Math.cos(halfPitch);\n\t\t\t        const c2 = Math.cos(halfYaw);\n\t\t\t        const c3 = Math.cos(halfRoll);\n\t\t\t        const s1 = Math.sin(halfPitch);\n\t\t\t        const s2 = Math.sin(halfYaw);\n\t\t\t        const s3 = Math.sin(halfRoll);\n\t\t\t        return create(c2 * s1 * c3 + s2 * c1 * s3, s2 * c1 * c3 - c2 * s1 * s3, c2 * c1 * s3 - s2 * s1 * c3, c2 * c1 * c3 + s2 * s1 * s3);\n\t\t\t    }\n\t\t\t    Quaternion.rotationYawPitchRoll = rotationYawPitchRoll;\n\t\t\t    /**\n\t\t\t     * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n\t\t\t     * @param x - the rotation on the x axis in euler degrees\n\t\t\t     * @param y - the rotation on the y axis in euler degrees\n\t\t\t     * @param z - the rotation on the z axis in euler degrees\n\t\t\t     */\n\t\t\t    function euler(x, y, z) {\n\t\t\t        return rotationYawPitchRoll(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD);\n\t\t\t    }\n\t\t\t    Quaternion.euler = euler;\n\t\t\t    /**\n\t\t\t     * Gets length of current quaternion\n\t\t\t     * @returns the quaternion length (float)\n\t\t\t     */\n\t\t\t    function length(q) {\n\t\t\t        return Math.sqrt(lengthSquared(q));\n\t\t\t    }\n\t\t\t    Quaternion.length = length;\n\t\t\t    /**\n\t\t\t     * Gets length of current quaternion\n\t\t\t     * @returns the quaternion length (float)\n\t\t\t     */\n\t\t\t    function lengthSquared(q) {\n\t\t\t        return q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;\n\t\t\t    }\n\t\t\t    Quaternion.lengthSquared = lengthSquared;\n\t\t\t    /**\n\t\t\t     * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the dot product\n\t\t\t     */\n\t\t\t    function dot(left, right) {\n\t\t\t        return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\n\t\t\t    }\n\t\t\t    Quaternion.dot = dot;\n\t\t\t    /**\n\t\t\t     * Returns the angle in degrees between two rotations a and b.\n\t\t\t     * @param quat1 - defines the first quaternion\n\t\t\t     * @param quat2 - defines the second quaternion\n\t\t\t     */\n\t\t\t    function angle(quat1, quat2) {\n\t\t\t        const dotVal = dot(quat1, quat2);\n\t\t\t        return Math.acos(Math.min(Math.abs(dotVal), 1)) * 2 * types_1.RAD2DEG;\n\t\t\t    }\n\t\t\t    Quaternion.angle = angle;\n\t\t\t    /**\n\t\t\t     * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n\t\t\t     * @param from - defines the first quaternion\n\t\t\t     * @param to - defines the second quaternion\n\t\t\t     * @param maxDegreesDelta - the interval step\n\t\t\t     */\n\t\t\t    function rotateTowards(from, to, maxDegreesDelta) {\n\t\t\t        const num = angle(from, to);\n\t\t\t        if (num === 0) {\n\t\t\t            return to;\n\t\t\t        }\n\t\t\t        const t = Math.min(1, maxDegreesDelta / num);\n\t\t\t        return slerp(from, to, t);\n\t\t\t    }\n\t\t\t    Quaternion.rotateTowards = rotateTowards;\n\t\t\t    /**\n\t\t\t     * Creates a rotation with the specified forward and upwards directions.\n\t\t\t     * @param forward - the direction to look in\n\t\t\t     * @param up - the vector that defines in which direction up is\n\t\t\t     */\n\t\t\t    function lookRotation(forward, up = { x: 0.0, y: 1.0, z: 0.0 }) {\n\t\t\t        const forwardNew = Vector3_1.Vector3.normalize(forward);\n\t\t\t        const right = Vector3_1.Vector3.normalize(Vector3_1.Vector3.cross(up, forwardNew));\n\t\t\t        const upNew = Vector3_1.Vector3.cross(forwardNew, right);\n\t\t\t        const m00 = right.x;\n\t\t\t        const m01 = right.y;\n\t\t\t        const m02 = right.z;\n\t\t\t        const m10 = upNew.x;\n\t\t\t        const m11 = upNew.y;\n\t\t\t        const m12 = upNew.z;\n\t\t\t        const m20 = forwardNew.x;\n\t\t\t        const m21 = forwardNew.y;\n\t\t\t        const m22 = forwardNew.z;\n\t\t\t        const num8 = m00 + m11 + m22;\n\t\t\t        const quaternion = create();\n\t\t\t        if (num8 > 0) {\n\t\t\t            let num = Math.sqrt(num8 + 1);\n\t\t\t            quaternion.w = num * 0.5;\n\t\t\t            num = 0.5 / num;\n\t\t\t            quaternion.x = (m12 - m21) * num;\n\t\t\t            quaternion.y = (m20 - m02) * num;\n\t\t\t            quaternion.z = (m01 - m10) * num;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        if (m00 >= m11 && m00 >= m22) {\n\t\t\t            const num7 = Math.sqrt(1 + m00 - m11 - m22);\n\t\t\t            const num4 = 0.5 / num7;\n\t\t\t            quaternion.x = 0.5 * num7;\n\t\t\t            quaternion.y = (m01 + m10) * num4;\n\t\t\t            quaternion.z = (m02 + m20) * num4;\n\t\t\t            quaternion.w = (m12 - m21) * num4;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        if (m11 > m22) {\n\t\t\t            const num6 = Math.sqrt(1 + m11 - m00 - m22);\n\t\t\t            const num3 = 0.5 / num6;\n\t\t\t            quaternion.x = (m10 + m01) * num3;\n\t\t\t            quaternion.y = 0.5 * num6;\n\t\t\t            quaternion.z = (m21 + m12) * num3;\n\t\t\t            quaternion.w = (m20 - m02) * num3;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        const num5 = Math.sqrt(1 + m22 - m00 - m11);\n\t\t\t        const num2 = 0.5 / num5;\n\t\t\t        quaternion.x = (m20 + m02) * num2;\n\t\t\t        quaternion.y = (m21 + m12) * num2;\n\t\t\t        quaternion.z = 0.5 * num5;\n\t\t\t        quaternion.w = (m01 - m10) * num2;\n\t\t\t        return quaternion;\n\t\t\t    }\n\t\t\t    Quaternion.lookRotation = lookRotation;\n\t\t\t    /**\n\t\t\t     * Normalize in place the current quaternion\n\t\t\t     * @returns the current updated quaternion\n\t\t\t     */\n\t\t\t    function normalize(q) {\n\t\t\t        const qLength = 1.0 / length(q);\n\t\t\t        return create(q.x * qLength, q.y * qLength, q.z * qLength, q.w * qLength);\n\t\t\t    }\n\t\t\t    Quaternion.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Creates a rotation which rotates from fromDirection to toDirection.\n\t\t\t     * @param from - defines the first direction Vector\n\t\t\t     * @param to - defines the target direction Vector\n\t\t\t     */\n\t\t\t    function fromToRotation(from, to, up = Vector3_1.Vector3.Up()) {\n\t\t\t        // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n\t\t\t        const v0 = Vector3_1.Vector3.normalize(from);\n\t\t\t        const v1 = Vector3_1.Vector3.normalize(to);\n\t\t\t        const a = Vector3_1.Vector3.cross(v0, v1);\n\t\t\t        const w = Math.sqrt(Vector3_1.Vector3.lengthSquared(v0) * Vector3_1.Vector3.lengthSquared(v1)) +\n\t\t\t            Vector3_1.Vector3.dot(v0, v1);\n\t\t\t        if (Vector3_1.Vector3.lengthSquared(a) < 0.0001) {\n\t\t\t            // the vectors are parallel, check w to find direction\n\t\t\t            // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n\t\t\t            // otherwise the vectors in the same direction and no rotation should occur\n\t\t\t            return Math.abs(w) < 0.0001\n\t\t\t                ? normalize(create(up.x, up.y, up.z, 0))\n\t\t\t                : Identity();\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            return normalize(create(a.x, a.y, a.z, w));\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Quaternion.fromToRotation = fromToRotation;\n\t\t\t    /**\n\t\t\t     * Creates an identity quaternion\n\t\t\t     * @returns - the identity quaternion\n\t\t\t     */\n\t\t\t    function Identity() {\n\t\t\t        return create(0.0, 0.0, 0.0, 1.0);\n\t\t\t    }\n\t\t\t    Quaternion.Identity = Identity;\n\t\t\t    /**\n\t\t\t     * Gets or sets the euler angle representation of the rotation.\n\t\t\t     * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t     */\n\t\t\t    function eulerAngles(q) {\n\t\t\t        const out = Vector3_1.Vector3.create();\n\t\t\t        // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n\t\t\t        const unit = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;\n\t\t\t        // q will have a magnitude of 0.5 or greater if and only if q is a singularity case\n\t\t\t        const test = q.x * q.w - q.y * q.z;\n\t\t\t        if (test > 0.4995 * unit) {\n\t\t\t            // singularity at north pole\n\t\t\t            out.x = Math.PI / 2;\n\t\t\t            out.y = 2 * Math.atan2(q.y, q.x);\n\t\t\t            out.z = 0;\n\t\t\t        }\n\t\t\t        else if (test < -0.4995 * unit) {\n\t\t\t            // singularity at south pole\n\t\t\t            out.x = -Math.PI / 2;\n\t\t\t            out.y = -2 * Math.atan2(q.y, q.x);\n\t\t\t            out.z = 0;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            // no singularity - q is the majority of cases\n\t\t\t            out.x = Math.asin(2 * (q.w * q.x - q.y * q.z));\n\t\t\t            out.y = Math.atan2(2 * q.w * q.y + 2 * q.z * q.x, 1 - 2 * (q.x * q.x + q.y * q.y));\n\t\t\t            out.z = Math.atan2(2 * q.w * q.z + 2 * q.x * q.y, 1 - 2 * (q.z * q.z + q.x * q.x));\n\t\t\t        }\n\t\t\t        out.x *= types_1.RAD2DEG;\n\t\t\t        out.y *= types_1.RAD2DEG;\n\t\t\t        out.z *= types_1.RAD2DEG;\n\t\t\t        // ensure the degree values are between 0 and 360\n\t\t\t        out.x = Scalar_1.Scalar.repeat(out.x, 360);\n\t\t\t        out.y = Scalar_1.Scalar.repeat(out.y, 360);\n\t\t\t        out.z = Scalar_1.Scalar.repeat(out.z, 360);\n\t\t\t        return out;\n\t\t\t    }\n\t\t\t    Quaternion.eulerAngles = eulerAngles;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n\t\t\t     * @param yaw - defines the rotation around Y axis\n\t\t\t     * @param pitch - defines the rotation around X axis\n\t\t\t     * @param roll - defines the rotation around Z axis\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationYawPitchRollToRef(yaw, pitch, roll, result) {\n\t\t\t        // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t        const halfPitch = pitch * 0.5;\n\t\t\t        const halfYaw = yaw * 0.5;\n\t\t\t        const halfRoll = roll * 0.5;\n\t\t\t        const c1 = Math.cos(halfPitch);\n\t\t\t        const c2 = Math.cos(halfYaw);\n\t\t\t        const c3 = Math.cos(halfRoll);\n\t\t\t        const s1 = Math.sin(halfPitch);\n\t\t\t        const s2 = Math.sin(halfYaw);\n\t\t\t        const s3 = Math.sin(halfRoll);\n\t\t\t        result.x = c2 * s1 * c3 + s2 * c1 * s3;\n\t\t\t        result.y = s2 * c1 * c3 - c2 * s1 * s3;\n\t\t\t        result.z = c2 * c1 * s3 - s2 * s1 * c3;\n\t\t\t        result.w = c2 * c1 * c3 + s2 * s1 * s3;\n\t\t\t    }\n\t\t\t    Quaternion.rotationYawPitchRollToRef = rotationYawPitchRollToRef;\n\t\t\t    /**\n\t\t\t     * Updates the given quaternion with the given rotation matrix values\n\t\t\t     * @param matrix - defines the source matrix\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function fromRotationMatrixToRef(matrix, result) {\n\t\t\t        const data = matrix._m;\n\t\t\t        // tslint:disable:one-variable-per-declaration\n\t\t\t        const m11 = data[0], m12 = data[4], m13 = data[8];\n\t\t\t        const m21 = data[1], m22 = data[5], m23 = data[9];\n\t\t\t        const m31 = data[2], m32 = data[6], m33 = data[10];\n\t\t\t        // tslint:enable:one-variable-per-declaration\n\t\t\t        const trace = m11 + m22 + m33;\n\t\t\t        let s;\n\t\t\t        if (trace > 0) {\n\t\t\t            s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t            result.w = 0.25 / s;\n\t\t\t            result.x = (m32 - m23) * s;\n\t\t\t            result.y = (m13 - m31) * s;\n\t\t\t            result.z = (m21 - m12) * s;\n\t\t\t        }\n\t\t\t        else if (m11 > m22 && m11 > m33) {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t            result.w = (m32 - m23) / s;\n\t\t\t            result.x = 0.25 * s;\n\t\t\t            result.y = (m12 + m21) / s;\n\t\t\t            result.z = (m13 + m31) / s;\n\t\t\t        }\n\t\t\t        else if (m22 > m33) {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t            result.w = (m13 - m31) / s;\n\t\t\t            result.x = (m12 + m21) / s;\n\t\t\t            result.y = 0.25 * s;\n\t\t\t            result.z = (m23 + m32) / s;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t            result.w = (m21 - m12) / s;\n\t\t\t            result.x = (m13 + m31) / s;\n\t\t\t            result.y = (m23 + m32) / s;\n\t\t\t            result.z = 0.25 * s;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Quaternion.fromRotationMatrixToRef = fromRotationMatrixToRef;\n\t\t\t    /**\n\t\t\t     * Interpolates between two quaternions\n\t\t\t     * @param left - defines first quaternion\n\t\t\t     * @param right - defines second quaternion\n\t\t\t     * @param amount - defines the gradient to use\n\t\t\t     * @returns the new interpolated quaternion\n\t\t\t     */\n\t\t\t    function slerp(left, right, amount) {\n\t\t\t        const result = Quaternion.Identity();\n\t\t\t        Quaternion.slerpToRef(left, right, amount, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Quaternion.slerp = slerp;\n\t\t\t    /**\n\t\t\t     * Interpolates between two quaternions and stores it into a target quaternion\n\t\t\t     * @param left - defines first quaternion\n\t\t\t     * @param right - defines second quaternion\n\t\t\t     * @param amount - defines the gradient to use\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function slerpToRef(left, right, amount, result) {\n\t\t\t        let num2;\n\t\t\t        let num3;\n\t\t\t        let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n\t\t\t        let flag = false;\n\t\t\t        if (num4 < 0) {\n\t\t\t            flag = true;\n\t\t\t            num4 = -num4;\n\t\t\t        }\n\t\t\t        if (num4 > 0.999999) {\n\t\t\t            num3 = 1 - amount;\n\t\t\t            num2 = flag ? -amount : amount;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            const num5 = Math.acos(num4);\n\t\t\t            const num6 = 1.0 / Math.sin(num5);\n\t\t\t            num3 = Math.sin((1.0 - amount) * num5) * num6;\n\t\t\t            num2 = flag\n\t\t\t                ? -Math.sin(amount * num5) * num6\n\t\t\t                : Math.sin(amount * num5) * num6;\n\t\t\t        }\n\t\t\t        result.x = num3 * left.x + num2 * right.x;\n\t\t\t        result.y = num3 * left.y + num2 * right.y;\n\t\t\t        result.z = num3 * left.z + num2 * right.z;\n\t\t\t        result.w = num3 * left.w + num2 * right.w;\n\t\t\t    }\n\t\t\t    Quaternion.slerpToRef = slerpToRef;\n\t\t\t    /**\n\t\t\t     * Multiplies two quaternions\n\t\t\t     * @param self - defines the first operand\n\t\t\t     * @param q1 - defines the second operand\n\t\t\t     * @returns a new quaternion set as the multiplication result of the self one with the given one \"q1\"\n\t\t\t     */\n\t\t\t    function multiply(self, q1) {\n\t\t\t        const result = create(0, 0, 0, 1.0);\n\t\t\t        multiplyToRef(self, q1, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Quaternion.multiply = multiply;\n\t\t\t    /**\n\t\t\t     * Sets the given \"result\" as the the multiplication result of the self one with the given one \"q1\"\n\t\t\t     * @param self - defines the first operand\n\t\t\t     * @param q1 - defines the second operand\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     * @returns the current quaternion\n\t\t\t     */\n\t\t\t    function multiplyToRef(self, q1, result) {\n\t\t\t        result.x = self.x * q1.w + self.y * q1.z - self.z * q1.y + self.w * q1.x;\n\t\t\t        result.y = -self.x * q1.z + self.y * q1.w + self.z * q1.x + self.w * q1.y;\n\t\t\t        result.z = self.x * q1.y - self.y * q1.x + self.z * q1.w + self.w * q1.z;\n\t\t\t        result.w = -self.x * q1.x - self.y * q1.y - self.z * q1.z + self.w * q1.w;\n\t\t\t    }\n\t\t\t    Quaternion.multiplyToRef = multiplyToRef;\n\t\t\t    function angleAxis(degress, axis) {\n\t\t\t        if (Vector3_1.Vector3.lengthSquared(axis) === 0) {\n\t\t\t            return Quaternion.Identity();\n\t\t\t        }\n\t\t\t        const result = Identity();\n\t\t\t        let radians = degress * types_1.DEG2RAD;\n\t\t\t        radians *= 0.5;\n\t\t\t        const a2 = Vector3_1.Vector3.normalize(axis);\n\t\t\t        Vector3_1.Vector3.scaleToRef(a2, Math.sin(radians), a2);\n\t\t\t        result.x = a2.x;\n\t\t\t        result.y = a2.y;\n\t\t\t        result.z = a2.z;\n\t\t\t        result.w = Math.cos(radians);\n\t\t\t        return normalize(result);\n\t\t\t    }\n\t\t\t    Quaternion.angleAxis = angleAxis;\n\t\t\t    /**\n\t\t\t     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n\t\t\t     * @param axis1 - defines the first axis\n\t\t\t     * @param axis2 - defines the second axis\n\t\t\t     * @param axis3 - defines the third axis\n\t\t\t     * @returns the new quaternion\n\t\t\t     */\n\t\t\t    function rotationQuaternionFromAxis(axis1, axis2, axis3) {\n\t\t\t        const quat = Quaternion.create(0.0, 0.0, 0.0, 0.0);\n\t\t\t        rotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n\t\t\t        return quat;\n\t\t\t    }\n\t\t\t    Quaternion.rotationQuaternionFromAxis = rotationQuaternionFromAxis;\n\t\t\t    /**\n\t\t\t     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n\t\t\t     * @param axis1 - defines the first axis\n\t\t\t     * @param axis2 - defines the second axis\n\t\t\t     * @param axis3 - defines the third axis\n\t\t\t     * @param ref - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {\n\t\t\t        const rotMat = Matrix_1.Matrix.create();\n\t\t\t        Matrix_1.Matrix.fromXYZAxesToRef(Vector3_1.Vector3.normalize(axis1), Vector3_1.Vector3.normalize(axis2), Vector3_1.Vector3.normalize(axis3), rotMat);\n\t\t\t        Quaternion.fromRotationMatrixToRef(rotMat, ref);\n\t\t\t    }\n\t\t\t    Quaternion.rotationQuaternionFromAxisToRef = rotationQuaternionFromAxisToRef;\n\t\t\t    /**\n\t\t\t     * Returns a zero filled quaternion\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        return create(0.0, 0.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Quaternion.Zero = Zero;\n\t\t\t})(exports.Quaternion || (exports.Quaternion = {}));\n\t\t\t\n\t} (Quaternion));\n\t\treturn Quaternion;\n\t}\n\n\tvar hasRequiredDist$1;\n\n\tfunction requireDist$1 () {\n\t\tif (hasRequiredDist$1) return dist$1;\n\t\thasRequiredDist$1 = 1;\n\t\t(function (exports) {\n\t\t\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t\t\t}) : (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    o[k2] = m[k];\n\t\t\t}));\n\t\t\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t\t\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\t__exportStar(requireQuaternion(), exports);\n\t\t\t__exportStar(requireVector3(), exports);\n\t\t\t__exportStar(requireTypes$1(), exports);\n\t\t\t__exportStar(requireDist$1(), exports);\n\t\t\t\n\t} (dist$1));\n\t\treturn dist$1;\n\t}\n\n\tvar distExports$1 = requireDist$1();\n\n\tvar minimal$1 = {exports: {}};\n\n\tvar indexMinimal = {};\n\n\tvar minimal = {};\n\n\tvar aspromise;\n\tvar hasRequiredAspromise;\n\n\tfunction requireAspromise () {\n\t\tif (hasRequiredAspromise) return aspromise;\n\t\thasRequiredAspromise = 1;\n\t\taspromise = asPromise;\r\n\r\n\t\t/**\r\n\t\t * Callback as used by {@link util.asPromise}.\r\n\t\t * @typedef asPromiseCallback\r\n\t\t * @type {function}\r\n\t\t * @param {Error|null} error Error, if any\r\n\t\t * @param {...*} params Additional arguments\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Returns a promise from a node-style callback function.\r\n\t\t * @memberof util\r\n\t\t * @param {asPromiseCallback} fn Function to call\r\n\t\t * @param {*} ctx Function context\r\n\t\t * @param {...*} params Function arguments\r\n\t\t * @returns {Promise<*>} Promisified function\r\n\t\t */\r\n\t\tfunction asPromise(fn, ctx/*, varargs */) {\r\n\t\t    var params  = new Array(arguments.length - 1),\r\n\t\t        offset  = 0,\r\n\t\t        index   = 2,\r\n\t\t        pending = true;\r\n\t\t    while (index < arguments.length)\r\n\t\t        params[offset++] = arguments[index++];\r\n\t\t    return new Promise(function executor(resolve, reject) {\r\n\t\t        params[offset] = function callback(err/*, varargs */) {\r\n\t\t            if (pending) {\r\n\t\t                pending = false;\r\n\t\t                if (err)\r\n\t\t                    reject(err);\r\n\t\t                else {\r\n\t\t                    var params = new Array(arguments.length - 1),\r\n\t\t                        offset = 0;\r\n\t\t                    while (offset < params.length)\r\n\t\t                        params[offset++] = arguments[offset];\r\n\t\t                    resolve.apply(null, params);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        };\r\n\t\t        try {\r\n\t\t            fn.apply(ctx || null, params);\r\n\t\t        } catch (err) {\r\n\t\t            if (pending) {\r\n\t\t                pending = false;\r\n\t\t                reject(err);\r\n\t\t            }\r\n\t\t        }\r\n\t\t    });\r\n\t\t}\n\t\treturn aspromise;\n\t}\n\n\tvar base64 = {};\n\n\tvar hasRequiredBase64;\n\n\tfunction requireBase64 () {\n\t\tif (hasRequiredBase64) return base64;\n\t\thasRequiredBase64 = 1;\n\t\t(function (exports) {\n\r\n\t\t\t/**\r\n\t\t\t * A minimal base64 implementation for number arrays.\r\n\t\t\t * @memberof util\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\tvar base64 = exports;\r\n\r\n\t\t\t/**\r\n\t\t\t * Calculates the byte length of a base64 encoded string.\r\n\t\t\t * @param {string} string Base64 encoded string\r\n\t\t\t * @returns {number} Byte length\r\n\t\t\t */\r\n\t\t\tbase64.length = function length(string) {\r\n\t\t\t    var p = string.length;\r\n\t\t\t    if (!p)\r\n\t\t\t        return 0;\r\n\t\t\t    var n = 0;\r\n\t\t\t    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n\t\t\t        ++n;\r\n\t\t\t    return Math.ceil(string.length * 3) / 4 - n;\r\n\t\t\t};\r\n\r\n\t\t\t// Base64 encoding table\r\n\t\t\tvar b64 = new Array(64);\r\n\r\n\t\t\t// Base64 decoding table\r\n\t\t\tvar s64 = new Array(123);\r\n\r\n\t\t\t// 65..90, 97..122, 48..57, 43, 47\r\n\t\t\tfor (var i = 0; i < 64;)\r\n\t\t\t    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n\t\t\t/**\r\n\t\t\t * Encodes a buffer to a base64 encoded string.\r\n\t\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t\t * @param {number} start Source start\r\n\t\t\t * @param {number} end Source end\r\n\t\t\t * @returns {string} Base64 encoded string\r\n\t\t\t */\r\n\t\t\tbase64.encode = function encode(buffer, start, end) {\r\n\t\t\t    var parts = null,\r\n\t\t\t        chunk = [];\r\n\t\t\t    var i = 0, // output index\r\n\t\t\t        j = 0, // goto index\r\n\t\t\t        t;     // temporary\r\n\t\t\t    while (start < end) {\r\n\t\t\t        var b = buffer[start++];\r\n\t\t\t        switch (j) {\r\n\t\t\t            case 0:\r\n\t\t\t                chunk[i++] = b64[b >> 2];\r\n\t\t\t                t = (b & 3) << 4;\r\n\t\t\t                j = 1;\r\n\t\t\t                break;\r\n\t\t\t            case 1:\r\n\t\t\t                chunk[i++] = b64[t | b >> 4];\r\n\t\t\t                t = (b & 15) << 2;\r\n\t\t\t                j = 2;\r\n\t\t\t                break;\r\n\t\t\t            case 2:\r\n\t\t\t                chunk[i++] = b64[t | b >> 6];\r\n\t\t\t                chunk[i++] = b64[b & 63];\r\n\t\t\t                j = 0;\r\n\t\t\t                break;\r\n\t\t\t        }\r\n\t\t\t        if (i > 8191) {\r\n\t\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t\t            i = 0;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (j) {\r\n\t\t\t        chunk[i++] = b64[t];\r\n\t\t\t        chunk[i++] = 61;\r\n\t\t\t        if (j === 1)\r\n\t\t\t            chunk[i++] = 61;\r\n\t\t\t    }\r\n\t\t\t    if (parts) {\r\n\t\t\t        if (i)\r\n\t\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t\t        return parts.join(\"\");\r\n\t\t\t    }\r\n\t\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t\t};\r\n\r\n\t\t\tvar invalidEncoding = \"invalid encoding\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Decodes a base64 encoded string to a buffer.\r\n\t\t\t * @param {string} string Source string\r\n\t\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t\t * @param {number} offset Destination offset\r\n\t\t\t * @returns {number} Number of bytes written\r\n\t\t\t * @throws {Error} If encoding is invalid\r\n\t\t\t */\r\n\t\t\tbase64.decode = function decode(string, buffer, offset) {\r\n\t\t\t    var start = offset;\r\n\t\t\t    var j = 0, // goto index\r\n\t\t\t        t;     // temporary\r\n\t\t\t    for (var i = 0; i < string.length;) {\r\n\t\t\t        var c = string.charCodeAt(i++);\r\n\t\t\t        if (c === 61 && j > 1)\r\n\t\t\t            break;\r\n\t\t\t        if ((c = s64[c]) === undefined)\r\n\t\t\t            throw Error(invalidEncoding);\r\n\t\t\t        switch (j) {\r\n\t\t\t            case 0:\r\n\t\t\t                t = c;\r\n\t\t\t                j = 1;\r\n\t\t\t                break;\r\n\t\t\t            case 1:\r\n\t\t\t                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n\t\t\t                t = c;\r\n\t\t\t                j = 2;\r\n\t\t\t                break;\r\n\t\t\t            case 2:\r\n\t\t\t                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n\t\t\t                t = c;\r\n\t\t\t                j = 3;\r\n\t\t\t                break;\r\n\t\t\t            case 3:\r\n\t\t\t                buffer[offset++] = (t & 3) << 6 | c;\r\n\t\t\t                j = 0;\r\n\t\t\t                break;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (j === 1)\r\n\t\t\t        throw Error(invalidEncoding);\r\n\t\t\t    return offset - start;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Tests if the specified string appears to be base64 encoded.\r\n\t\t\t * @param {string} string String to test\r\n\t\t\t * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n\t\t\t */\r\n\t\t\tbase64.test = function test(string) {\r\n\t\t\t    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n\t\t\t};\n\t} (base64));\n\t\treturn base64;\n\t}\n\n\tvar eventemitter;\n\tvar hasRequiredEventemitter;\n\n\tfunction requireEventemitter () {\n\t\tif (hasRequiredEventemitter) return eventemitter;\n\t\thasRequiredEventemitter = 1;\n\t\teventemitter = EventEmitter;\r\n\r\n\t\t/**\r\n\t\t * Constructs a new event emitter instance.\r\n\t\t * @classdesc A minimal event emitter.\r\n\t\t * @memberof util\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction EventEmitter() {\r\n\r\n\t\t    /**\r\n\t\t     * Registered listeners.\r\n\t\t     * @type {Object.<string,*>}\r\n\t\t     * @private\r\n\t\t     */\r\n\t\t    this._listeners = {};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Registers an event listener.\r\n\t\t * @param {string} evt Event name\r\n\t\t * @param {function} fn Listener\r\n\t\t * @param {*} [ctx] Listener context\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n\t\t    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n\t\t        fn  : fn,\r\n\t\t        ctx : ctx || this\r\n\t\t    });\r\n\t\t    return this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes an event listener or any matching listeners if arguments are omitted.\r\n\t\t * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n\t\t * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.off = function off(evt, fn) {\r\n\t\t    if (evt === undefined)\r\n\t\t        this._listeners = {};\r\n\t\t    else {\r\n\t\t        if (fn === undefined)\r\n\t\t            this._listeners[evt] = [];\r\n\t\t        else {\r\n\t\t            var listeners = this._listeners[evt];\r\n\t\t            for (var i = 0; i < listeners.length;)\r\n\t\t                if (listeners[i].fn === fn)\r\n\t\t                    listeners.splice(i, 1);\r\n\t\t                else\r\n\t\t                    ++i;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    return this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Emits an event by calling its listeners with the specified arguments.\r\n\t\t * @param {string} evt Event name\r\n\t\t * @param {...*} args Arguments\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.emit = function emit(evt) {\r\n\t\t    var listeners = this._listeners[evt];\r\n\t\t    if (listeners) {\r\n\t\t        var args = [],\r\n\t\t            i = 1;\r\n\t\t        for (; i < arguments.length;)\r\n\t\t            args.push(arguments[i++]);\r\n\t\t        for (i = 0; i < listeners.length;)\r\n\t\t            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n\t\t    }\r\n\t\t    return this;\r\n\t\t};\n\t\treturn eventemitter;\n\t}\n\n\tvar float;\n\tvar hasRequiredFloat;\n\n\tfunction requireFloat () {\n\t\tif (hasRequiredFloat) return float;\n\t\thasRequiredFloat = 1;\n\r\n\t\tfloat = factory(factory);\r\n\r\n\t\t/**\r\n\t\t * Reads / writes floats / doubles from / to buffers.\r\n\t\t * @name util.float\r\n\t\t * @namespace\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 32 bit float to a buffer using little endian byte order.\r\n\t\t * @name util.float.writeFloatLE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 32 bit float to a buffer using big endian byte order.\r\n\t\t * @name util.float.writeFloatBE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 32 bit float from a buffer using little endian byte order.\r\n\t\t * @name util.float.readFloatLE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 32 bit float from a buffer using big endian byte order.\r\n\t\t * @name util.float.readFloatBE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 64 bit double to a buffer using little endian byte order.\r\n\t\t * @name util.float.writeDoubleLE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 64 bit double to a buffer using big endian byte order.\r\n\t\t * @name util.float.writeDoubleBE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 64 bit double from a buffer using little endian byte order.\r\n\t\t * @name util.float.readDoubleLE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 64 bit double from a buffer using big endian byte order.\r\n\t\t * @name util.float.readDoubleBE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t// Factory function for the purpose of node-based testing in modified global environments\r\n\t\tfunction factory(exports) {\r\n\r\n\t\t    // float: typed array\r\n\t\t    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n\t\t        var f32 = new Float32Array([ -0 ]),\r\n\t\t            f8b = new Uint8Array(f32.buffer),\r\n\t\t            le  = f8b[3] === 128;\r\n\r\n\t\t        function writeFloat_f32_cpy(val, buf, pos) {\r\n\t\t            f32[0] = val;\r\n\t\t            buf[pos    ] = f8b[0];\r\n\t\t            buf[pos + 1] = f8b[1];\r\n\t\t            buf[pos + 2] = f8b[2];\r\n\t\t            buf[pos + 3] = f8b[3];\r\n\t\t        }\r\n\r\n\t\t        function writeFloat_f32_rev(val, buf, pos) {\r\n\t\t            f32[0] = val;\r\n\t\t            buf[pos    ] = f8b[3];\r\n\t\t            buf[pos + 1] = f8b[2];\r\n\t\t            buf[pos + 2] = f8b[1];\r\n\t\t            buf[pos + 3] = f8b[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n\t\t        function readFloat_f32_cpy(buf, pos) {\r\n\t\t            f8b[0] = buf[pos    ];\r\n\t\t            f8b[1] = buf[pos + 1];\r\n\t\t            f8b[2] = buf[pos + 2];\r\n\t\t            f8b[3] = buf[pos + 3];\r\n\t\t            return f32[0];\r\n\t\t        }\r\n\r\n\t\t        function readFloat_f32_rev(buf, pos) {\r\n\t\t            f8b[3] = buf[pos    ];\r\n\t\t            f8b[2] = buf[pos + 1];\r\n\t\t            f8b[1] = buf[pos + 2];\r\n\t\t            f8b[0] = buf[pos + 3];\r\n\t\t            return f32[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n\t\t    // float: ieee754\r\n\t\t    })(); else (function() {\r\n\r\n\t\t        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n\t\t            var sign = val < 0 ? 1 : 0;\r\n\t\t            if (sign)\r\n\t\t                val = -val;\r\n\t\t            if (val === 0)\r\n\t\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n\t\t            else if (isNaN(val))\r\n\t\t                writeUint(2143289344, buf, pos);\r\n\t\t            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n\t\t                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n\t\t            else if (val < 1.1754943508222875e-38) // denormal\r\n\t\t                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n\t\t            else {\r\n\t\t                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n\t\t                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n\t\t                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n\t\t            }\r\n\t\t        }\r\n\r\n\t\t        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n\t\t        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n\t\t        function readFloat_ieee754(readUint, buf, pos) {\r\n\t\t            var uint = readUint(buf, pos),\r\n\t\t                sign = (uint >> 31) * 2 + 1,\r\n\t\t                exponent = uint >>> 23 & 255,\r\n\t\t                mantissa = uint & 8388607;\r\n\t\t            return exponent === 255\r\n\t\t                ? mantissa\r\n\t\t                ? NaN\r\n\t\t                : sign * Infinity\r\n\t\t                : exponent === 0 // denormal\r\n\t\t                ? sign * 1.401298464324817e-45 * mantissa\r\n\t\t                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n\t\t        }\r\n\r\n\t\t        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n\t\t        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n\t\t    })();\r\n\r\n\t\t    // double: typed array\r\n\t\t    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n\t\t        var f64 = new Float64Array([-0]),\r\n\t\t            f8b = new Uint8Array(f64.buffer),\r\n\t\t            le  = f8b[7] === 128;\r\n\r\n\t\t        function writeDouble_f64_cpy(val, buf, pos) {\r\n\t\t            f64[0] = val;\r\n\t\t            buf[pos    ] = f8b[0];\r\n\t\t            buf[pos + 1] = f8b[1];\r\n\t\t            buf[pos + 2] = f8b[2];\r\n\t\t            buf[pos + 3] = f8b[3];\r\n\t\t            buf[pos + 4] = f8b[4];\r\n\t\t            buf[pos + 5] = f8b[5];\r\n\t\t            buf[pos + 6] = f8b[6];\r\n\t\t            buf[pos + 7] = f8b[7];\r\n\t\t        }\r\n\r\n\t\t        function writeDouble_f64_rev(val, buf, pos) {\r\n\t\t            f64[0] = val;\r\n\t\t            buf[pos    ] = f8b[7];\r\n\t\t            buf[pos + 1] = f8b[6];\r\n\t\t            buf[pos + 2] = f8b[5];\r\n\t\t            buf[pos + 3] = f8b[4];\r\n\t\t            buf[pos + 4] = f8b[3];\r\n\t\t            buf[pos + 5] = f8b[2];\r\n\t\t            buf[pos + 6] = f8b[1];\r\n\t\t            buf[pos + 7] = f8b[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n\t\t        function readDouble_f64_cpy(buf, pos) {\r\n\t\t            f8b[0] = buf[pos    ];\r\n\t\t            f8b[1] = buf[pos + 1];\r\n\t\t            f8b[2] = buf[pos + 2];\r\n\t\t            f8b[3] = buf[pos + 3];\r\n\t\t            f8b[4] = buf[pos + 4];\r\n\t\t            f8b[5] = buf[pos + 5];\r\n\t\t            f8b[6] = buf[pos + 6];\r\n\t\t            f8b[7] = buf[pos + 7];\r\n\t\t            return f64[0];\r\n\t\t        }\r\n\r\n\t\t        function readDouble_f64_rev(buf, pos) {\r\n\t\t            f8b[7] = buf[pos    ];\r\n\t\t            f8b[6] = buf[pos + 1];\r\n\t\t            f8b[5] = buf[pos + 2];\r\n\t\t            f8b[4] = buf[pos + 3];\r\n\t\t            f8b[3] = buf[pos + 4];\r\n\t\t            f8b[2] = buf[pos + 5];\r\n\t\t            f8b[1] = buf[pos + 6];\r\n\t\t            f8b[0] = buf[pos + 7];\r\n\t\t            return f64[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n\t\t    // double: ieee754\r\n\t\t    })(); else (function() {\r\n\r\n\t\t        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n\t\t            var sign = val < 0 ? 1 : 0;\r\n\t\t            if (sign)\r\n\t\t                val = -val;\r\n\t\t            if (val === 0) {\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n\t\t            } else if (isNaN(val)) {\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint(2146959360, buf, pos + off1);\r\n\t\t            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n\t\t            } else {\r\n\t\t                var mantissa;\r\n\t\t                if (val < 2.2250738585072014e-308) { // denormal\r\n\t\t                    mantissa = val / 5e-324;\r\n\t\t                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n\t\t                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n\t\t                } else {\r\n\t\t                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n\t\t                    if (exponent === 1024)\r\n\t\t                        exponent = 1023;\r\n\t\t                    mantissa = val * Math.pow(2, -exponent);\r\n\t\t                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n\t\t                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\r\n\t\t        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n\t\t        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n\t\t        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n\t\t            var lo = readUint(buf, pos + off0),\r\n\t\t                hi = readUint(buf, pos + off1);\r\n\t\t            var sign = (hi >> 31) * 2 + 1,\r\n\t\t                exponent = hi >>> 20 & 2047,\r\n\t\t                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n\t\t            return exponent === 2047\r\n\t\t                ? mantissa\r\n\t\t                ? NaN\r\n\t\t                : sign * Infinity\r\n\t\t                : exponent === 0 // denormal\r\n\t\t                ? sign * 5e-324 * mantissa\r\n\t\t                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n\t\t        }\r\n\r\n\t\t        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n\t\t        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n\t\t    })();\r\n\r\n\t\t    return exports;\r\n\t\t}\r\n\r\n\t\t// uint helpers\r\n\r\n\t\tfunction writeUintLE(val, buf, pos) {\r\n\t\t    buf[pos    ] =  val        & 255;\r\n\t\t    buf[pos + 1] =  val >>> 8  & 255;\r\n\t\t    buf[pos + 2] =  val >>> 16 & 255;\r\n\t\t    buf[pos + 3] =  val >>> 24;\r\n\t\t}\r\n\r\n\t\tfunction writeUintBE(val, buf, pos) {\r\n\t\t    buf[pos    ] =  val >>> 24;\r\n\t\t    buf[pos + 1] =  val >>> 16 & 255;\r\n\t\t    buf[pos + 2] =  val >>> 8  & 255;\r\n\t\t    buf[pos + 3] =  val        & 255;\r\n\t\t}\r\n\r\n\t\tfunction readUintLE(buf, pos) {\r\n\t\t    return (buf[pos    ]\r\n\t\t          | buf[pos + 1] << 8\r\n\t\t          | buf[pos + 2] << 16\r\n\t\t          | buf[pos + 3] << 24) >>> 0;\r\n\t\t}\r\n\r\n\t\tfunction readUintBE(buf, pos) {\r\n\t\t    return (buf[pos    ] << 24\r\n\t\t          | buf[pos + 1] << 16\r\n\t\t          | buf[pos + 2] << 8\r\n\t\t          | buf[pos + 3]) >>> 0;\r\n\t\t}\n\t\treturn float;\n\t}\n\n\tvar inquire_1;\n\tvar hasRequiredInquire;\n\n\tfunction requireInquire () {\n\t\tif (hasRequiredInquire) return inquire_1;\n\t\thasRequiredInquire = 1;\n\t\tinquire_1 = inquire;\r\n\r\n\t\t/**\r\n\t\t * Requires a module only if available.\r\n\t\t * @memberof util\r\n\t\t * @param {string} moduleName Module to require\r\n\t\t * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n\t\t */\r\n\t\tfunction inquire(moduleName) {\r\n\t\t    try {\r\n\t\t        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n\t\t        if (mod && (mod.length || Object.keys(mod).length))\r\n\t\t            return mod;\r\n\t\t    } catch (e) {} // eslint-disable-line no-empty\r\n\t\t    return null;\r\n\t\t}\n\t\treturn inquire_1;\n\t}\n\n\tvar utf8 = {};\n\n\tvar hasRequiredUtf8;\n\n\tfunction requireUtf8 () {\n\t\tif (hasRequiredUtf8) return utf8;\n\t\thasRequiredUtf8 = 1;\n\t\t(function (exports) {\n\r\n\t\t\t/**\r\n\t\t\t * A minimal UTF8 implementation for number arrays.\r\n\t\t\t * @memberof util\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\tvar utf8 = exports;\r\n\r\n\t\t\t/**\r\n\t\t\t * Calculates the UTF8 byte length of a string.\r\n\t\t\t * @param {string} string String\r\n\t\t\t * @returns {number} Byte length\r\n\t\t\t */\r\n\t\t\tutf8.length = function utf8_length(string) {\r\n\t\t\t    var len = 0,\r\n\t\t\t        c = 0;\r\n\t\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t\t        c = string.charCodeAt(i);\r\n\t\t\t        if (c < 128)\r\n\t\t\t            len += 1;\r\n\t\t\t        else if (c < 2048)\r\n\t\t\t            len += 2;\r\n\t\t\t        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n\t\t\t            ++i;\r\n\t\t\t            len += 4;\r\n\t\t\t        } else\r\n\t\t\t            len += 3;\r\n\t\t\t    }\r\n\t\t\t    return len;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Reads UTF8 bytes as a string.\r\n\t\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t\t * @param {number} start Source start\r\n\t\t\t * @param {number} end Source end\r\n\t\t\t * @returns {string} String read\r\n\t\t\t */\r\n\t\t\tutf8.read = function utf8_read(buffer, start, end) {\r\n\t\t\t    var len = end - start;\r\n\t\t\t    if (len < 1)\r\n\t\t\t        return \"\";\r\n\t\t\t    var parts = null,\r\n\t\t\t        chunk = [],\r\n\t\t\t        i = 0, // char offset\r\n\t\t\t        t;     // temporary\r\n\t\t\t    while (start < end) {\r\n\t\t\t        t = buffer[start++];\r\n\t\t\t        if (t < 128)\r\n\t\t\t            chunk[i++] = t;\r\n\t\t\t        else if (t > 191 && t < 224)\r\n\t\t\t            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n\t\t\t        else if (t > 239 && t < 365) {\r\n\t\t\t            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n\t\t\t            chunk[i++] = 0xD800 + (t >> 10);\r\n\t\t\t            chunk[i++] = 0xDC00 + (t & 1023);\r\n\t\t\t        } else\r\n\t\t\t            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n\t\t\t        if (i > 8191) {\r\n\t\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t\t            i = 0;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (parts) {\r\n\t\t\t        if (i)\r\n\t\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t\t        return parts.join(\"\");\r\n\t\t\t    }\r\n\t\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Writes a string as UTF8 bytes.\r\n\t\t\t * @param {string} string Source string\r\n\t\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t\t * @param {number} offset Destination offset\r\n\t\t\t * @returns {number} Bytes written\r\n\t\t\t */\r\n\t\t\tutf8.write = function utf8_write(string, buffer, offset) {\r\n\t\t\t    var start = offset,\r\n\t\t\t        c1, // character 1\r\n\t\t\t        c2; // character 2\r\n\t\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t\t        c1 = string.charCodeAt(i);\r\n\t\t\t        if (c1 < 128) {\r\n\t\t\t            buffer[offset++] = c1;\r\n\t\t\t        } else if (c1 < 2048) {\r\n\t\t\t            buffer[offset++] = c1 >> 6       | 192;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n\t\t\t            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n\t\t\t            ++i;\r\n\t\t\t            buffer[offset++] = c1 >> 18      | 240;\r\n\t\t\t            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        } else {\r\n\t\t\t            buffer[offset++] = c1 >> 12      | 224;\r\n\t\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    return offset - start;\r\n\t\t\t};\n\t} (utf8));\n\t\treturn utf8;\n\t}\n\n\tvar pool_1;\n\tvar hasRequiredPool;\n\n\tfunction requirePool () {\n\t\tif (hasRequiredPool) return pool_1;\n\t\thasRequiredPool = 1;\n\t\tpool_1 = pool;\r\n\r\n\t\t/**\r\n\t\t * An allocator as used by {@link util.pool}.\r\n\t\t * @typedef PoolAllocator\r\n\t\t * @type {function}\r\n\t\t * @param {number} size Buffer size\r\n\t\t * @returns {Uint8Array} Buffer\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * A slicer as used by {@link util.pool}.\r\n\t\t * @typedef PoolSlicer\r\n\t\t * @type {function}\r\n\t\t * @param {number} start Start offset\r\n\t\t * @param {number} end End offset\r\n\t\t * @returns {Uint8Array} Buffer slice\r\n\t\t * @this {Uint8Array}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * A general purpose buffer pool.\r\n\t\t * @memberof util\r\n\t\t * @function\r\n\t\t * @param {PoolAllocator} alloc Allocator\r\n\t\t * @param {PoolSlicer} slice Slicer\r\n\t\t * @param {number} [size=8192] Slab size\r\n\t\t * @returns {PoolAllocator} Pooled allocator\r\n\t\t */\r\n\t\tfunction pool(alloc, slice, size) {\r\n\t\t    var SIZE   = size || 8192;\r\n\t\t    var MAX    = SIZE >>> 1;\r\n\t\t    var slab   = null;\r\n\t\t    var offset = SIZE;\r\n\t\t    return function pool_alloc(size) {\r\n\t\t        if (size < 1 || size > MAX)\r\n\t\t            return alloc(size);\r\n\t\t        if (offset + size > SIZE) {\r\n\t\t            slab = alloc(SIZE);\r\n\t\t            offset = 0;\r\n\t\t        }\r\n\t\t        var buf = slice.call(slab, offset, offset += size);\r\n\t\t        if (offset & 7) // align to 32 bit\r\n\t\t            offset = (offset | 7) + 1;\r\n\t\t        return buf;\r\n\t\t    };\r\n\t\t}\n\t\treturn pool_1;\n\t}\n\n\tvar longbits;\n\tvar hasRequiredLongbits;\n\n\tfunction requireLongbits () {\n\t\tif (hasRequiredLongbits) return longbits;\n\t\thasRequiredLongbits = 1;\n\t\tlongbits = LongBits;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs new long bits.\n\t\t * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n\t\t * @memberof util\n\t\t * @constructor\n\t\t * @param {number} lo Low 32 bits, unsigned\n\t\t * @param {number} hi High 32 bits, unsigned\n\t\t */\n\t\tfunction LongBits(lo, hi) {\n\n\t\t    // note that the casts below are theoretically unnecessary as of today, but older statically\n\t\t    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n\t\t    /**\n\t\t     * Low bits.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.lo = lo >>> 0;\n\n\t\t    /**\n\t\t     * High bits.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.hi = hi >>> 0;\n\t\t}\n\n\t\t/**\n\t\t * Zero bits.\n\t\t * @memberof util.LongBits\n\t\t * @type {util.LongBits}\n\t\t */\n\t\tvar zero = LongBits.zero = new LongBits(0, 0);\n\n\t\tzero.toNumber = function() { return 0; };\n\t\tzero.zzEncode = zero.zzDecode = function() { return this; };\n\t\tzero.length = function() { return 1; };\n\n\t\t/**\n\t\t * Zero hash.\n\t\t * @memberof util.LongBits\n\t\t * @type {string}\n\t\t */\n\t\tvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n\t\t/**\n\t\t * Constructs new long bits from the specified number.\n\t\t * @param {number} value Value\n\t\t * @returns {util.LongBits} Instance\n\t\t */\n\t\tLongBits.fromNumber = function fromNumber(value) {\n\t\t    if (value === 0)\n\t\t        return zero;\n\t\t    var sign = value < 0;\n\t\t    if (sign)\n\t\t        value = -value;\n\t\t    var lo = value >>> 0,\n\t\t        hi = (value - lo) / 4294967296 >>> 0;\n\t\t    if (sign) {\n\t\t        hi = ~hi >>> 0;\n\t\t        lo = ~lo >>> 0;\n\t\t        if (++lo > 4294967295) {\n\t\t            lo = 0;\n\t\t            if (++hi > 4294967295)\n\t\t                hi = 0;\n\t\t        }\n\t\t    }\n\t\t    return new LongBits(lo, hi);\n\t\t};\n\n\t\t/**\n\t\t * Constructs new long bits from a number, long or string.\n\t\t * @param {Long|number|string} value Value\n\t\t * @returns {util.LongBits} Instance\n\t\t */\n\t\tLongBits.from = function from(value) {\n\t\t    if (typeof value === \"number\")\n\t\t        return LongBits.fromNumber(value);\n\t\t    if (util.isString(value)) {\n\t\t        /* istanbul ignore else */\n\t\t        if (util.Long)\n\t\t            value = util.Long.fromString(value);\n\t\t        else\n\t\t            return LongBits.fromNumber(parseInt(value, 10));\n\t\t    }\n\t\t    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a possibly unsafe JavaScript number.\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {number} Possibly unsafe number\n\t\t */\n\t\tLongBits.prototype.toNumber = function toNumber(unsigned) {\n\t\t    if (!unsigned && this.hi >>> 31) {\n\t\t        var lo = ~this.lo + 1 >>> 0,\n\t\t            hi = ~this.hi     >>> 0;\n\t\t        if (!lo)\n\t\t            hi = hi + 1 >>> 0;\n\t\t        return -(lo + hi * 4294967296);\n\t\t    }\n\t\t    return this.lo + this.hi * 4294967296;\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a long.\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {Long} Long\n\t\t */\n\t\tLongBits.prototype.toLong = function toLong(unsigned) {\n\t\t    return util.Long\n\t\t        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n\t\t        /* istanbul ignore next */\n\t\t        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n\t\t};\n\n\t\tvar charCodeAt = String.prototype.charCodeAt;\n\n\t\t/**\n\t\t * Constructs new long bits from the specified 8 characters long hash.\n\t\t * @param {string} hash Hash\n\t\t * @returns {util.LongBits} Bits\n\t\t */\n\t\tLongBits.fromHash = function fromHash(hash) {\n\t\t    if (hash === zeroHash)\n\t\t        return zero;\n\t\t    return new LongBits(\n\t\t        ( charCodeAt.call(hash, 0)\n\t\t        | charCodeAt.call(hash, 1) << 8\n\t\t        | charCodeAt.call(hash, 2) << 16\n\t\t        | charCodeAt.call(hash, 3) << 24) >>> 0\n\t\t    ,\n\t\t        ( charCodeAt.call(hash, 4)\n\t\t        | charCodeAt.call(hash, 5) << 8\n\t\t        | charCodeAt.call(hash, 6) << 16\n\t\t        | charCodeAt.call(hash, 7) << 24) >>> 0\n\t\t    );\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a 8 characters long hash.\n\t\t * @returns {string} Hash\n\t\t */\n\t\tLongBits.prototype.toHash = function toHash() {\n\t\t    return String.fromCharCode(\n\t\t        this.lo        & 255,\n\t\t        this.lo >>> 8  & 255,\n\t\t        this.lo >>> 16 & 255,\n\t\t        this.lo >>> 24      ,\n\t\t        this.hi        & 255,\n\t\t        this.hi >>> 8  & 255,\n\t\t        this.hi >>> 16 & 255,\n\t\t        this.hi >>> 24\n\t\t    );\n\t\t};\n\n\t\t/**\n\t\t * Zig-zag encodes this long bits.\n\t\t * @returns {util.LongBits} `this`\n\t\t */\n\t\tLongBits.prototype.zzEncode = function zzEncode() {\n\t\t    var mask =   this.hi >> 31;\n\t\t    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n\t\t    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Zig-zag decodes this long bits.\n\t\t * @returns {util.LongBits} `this`\n\t\t */\n\t\tLongBits.prototype.zzDecode = function zzDecode() {\n\t\t    var mask = -(this.lo & 1);\n\t\t    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n\t\t    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Calculates the length of this longbits when encoded as a varint.\n\t\t * @returns {number} Length\n\t\t */\n\t\tLongBits.prototype.length = function length() {\n\t\t    var part0 =  this.lo,\n\t\t        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n\t\t        part2 =  this.hi >>> 24;\n\t\t    return part2 === 0\n\t\t         ? part1 === 0\n\t\t           ? part0 < 16384\n\t\t             ? part0 < 128 ? 1 : 2\n\t\t             : part0 < 2097152 ? 3 : 4\n\t\t           : part1 < 16384\n\t\t             ? part1 < 128 ? 5 : 6\n\t\t             : part1 < 2097152 ? 7 : 8\n\t\t         : part2 < 128 ? 9 : 10;\n\t\t};\n\t\treturn longbits;\n\t}\n\n\tvar hasRequiredMinimal$1;\n\n\tfunction requireMinimal$1 () {\n\t\tif (hasRequiredMinimal$1) return minimal;\n\t\thasRequiredMinimal$1 = 1;\n\t\t(function (exports) {\n\t\t\tvar util = exports;\n\n\t\t\t// used to return a Promise where callback is omitted\n\t\t\tutil.asPromise = requireAspromise();\n\n\t\t\t// converts to / from base64 encoded strings\n\t\t\tutil.base64 = requireBase64();\n\n\t\t\t// base class of rpc.Service\n\t\t\tutil.EventEmitter = requireEventemitter();\n\n\t\t\t// float handling accross browsers\n\t\t\tutil.float = requireFloat();\n\n\t\t\t// requires modules optionally and hides the call from bundlers\n\t\t\tutil.inquire = requireInquire();\n\n\t\t\t// converts to / from utf8 encoded strings\n\t\t\tutil.utf8 = requireUtf8();\n\n\t\t\t// provides a node-like buffer pool in the browser\n\t\t\tutil.pool = requirePool();\n\n\t\t\t// utility to work with the low and high bits of a 64 bit value\n\t\t\tutil.LongBits = requireLongbits();\n\n\t\t\t/**\n\t\t\t * Whether running within node or not.\n\t\t\t * @memberof util\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tutil.isNode = Boolean(typeof commonjsGlobal !== \"undefined\"\n\t\t\t                   && commonjsGlobal\n\t\t\t                   && commonjsGlobal.process\n\t\t\t                   && commonjsGlobal.process.versions\n\t\t\t                   && commonjsGlobal.process.versions.node);\n\n\t\t\t/**\n\t\t\t * Global object reference.\n\t\t\t * @memberof util\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t\tutil.global = util.isNode && commonjsGlobal\n\t\t\t           || typeof window !== \"undefined\" && window\n\t\t\t           || typeof self   !== \"undefined\" && self\n\t\t\t           || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n\t\t\t/**\n\t\t\t * An immuable empty array.\n\t\t\t * @memberof util\n\t\t\t * @type {Array.<*>}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n\t\t\t/**\n\t\t\t * An immutable empty object.\n\t\t\t * @type {Object}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is an integer.\n\t\t\t * @function\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is an integer\n\t\t\t */\n\t\t\tutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n\t\t\t    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is a string.\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is a string\n\t\t\t */\n\t\t\tutil.isString = function isString(value) {\n\t\t\t    return typeof value === \"string\" || value instanceof String;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is a non-null object.\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is a non-null object\n\t\t\t */\n\t\t\tutil.isObject = function isObject(value) {\n\t\t\t    return value && typeof value === \"object\";\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Checks if a property on a message is considered to be present.\n\t\t\t * This is an alias of {@link util.isSet}.\n\t\t\t * @function\n\t\t\t * @param {Object} obj Plain object or message instance\n\t\t\t * @param {string} prop Property name\n\t\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t\t */\n\t\t\tutil.isset =\n\n\t\t\t/**\n\t\t\t * Checks if a property on a message is considered to be present.\n\t\t\t * @param {Object} obj Plain object or message instance\n\t\t\t * @param {string} prop Property name\n\t\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t\t */\n\t\t\tutil.isSet = function isSet(obj, prop) {\n\t\t\t    var value = obj[prop];\n\t\t\t    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n\t\t\t        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n\t\t\t    return false;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Any compatible Buffer instance.\n\t\t\t * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n\t\t\t * @interface Buffer\n\t\t\t * @extends Uint8Array\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Node's Buffer class if available.\n\t\t\t * @type {Constructor<Buffer>}\n\t\t\t */\n\t\t\tutil.Buffer = (function() {\n\t\t\t    try {\n\t\t\t        var Buffer = util.inquire(\"buffer\").Buffer;\n\t\t\t        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n\t\t\t        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n\t\t\t    } catch (e) {\n\t\t\t        /* istanbul ignore next */\n\t\t\t        return null;\n\t\t\t    }\n\t\t\t})();\n\n\t\t\t// Internal alias of or polyfull for Buffer.from.\n\t\t\tutil._Buffer_from = null;\n\n\t\t\t// Internal alias of or polyfill for Buffer.allocUnsafe.\n\t\t\tutil._Buffer_allocUnsafe = null;\n\n\t\t\t/**\n\t\t\t * Creates a new buffer of whatever type supported by the environment.\n\t\t\t * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n\t\t\t * @returns {Uint8Array|Buffer} Buffer\n\t\t\t */\n\t\t\tutil.newBuffer = function newBuffer(sizeOrArray) {\n\t\t\t    /* istanbul ignore next */\n\t\t\t    return typeof sizeOrArray === \"number\"\n\t\t\t        ? util.Buffer\n\t\t\t            ? util._Buffer_allocUnsafe(sizeOrArray)\n\t\t\t            : new util.Array(sizeOrArray)\n\t\t\t        : util.Buffer\n\t\t\t            ? util._Buffer_from(sizeOrArray)\n\t\t\t            : typeof Uint8Array === \"undefined\"\n\t\t\t                ? sizeOrArray\n\t\t\t                : new Uint8Array(sizeOrArray);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n\t\t\t * @type {Constructor<Uint8Array>}\n\t\t\t */\n\t\t\tutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n\t\t\t/**\n\t\t\t * Any compatible Long instance.\n\t\t\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t\t\t * @interface Long\n\t\t\t * @property {number} low Low bits\n\t\t\t * @property {number} high High bits\n\t\t\t * @property {boolean} unsigned Whether unsigned or not\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Long.js's Long class if available.\n\t\t\t * @type {Constructor<Long>}\n\t\t\t */\n\t\t\tutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n\t\t\t         || /* istanbul ignore next */ util.global.Long\n\t\t\t         || util.inquire(\"long\");\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 2 bit (`bool`) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key2Re = /^true|false|0|1$/;\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\t\t\t/**\n\t\t\t * Converts a number or long to an 8 characters long hash string.\n\t\t\t * @param {Long|number} value Value to convert\n\t\t\t * @returns {string} Hash\n\t\t\t */\n\t\t\tutil.longToHash = function longToHash(value) {\n\t\t\t    return value\n\t\t\t        ? util.LongBits.from(value).toHash()\n\t\t\t        : util.LongBits.zeroHash;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Converts an 8 characters long hash string to a long or number.\n\t\t\t * @param {string} hash Hash\n\t\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t\t * @returns {Long|number} Original value\n\t\t\t */\n\t\t\tutil.longFromHash = function longFromHash(hash, unsigned) {\n\t\t\t    var bits = util.LongBits.fromHash(hash);\n\t\t\t    if (util.Long)\n\t\t\t        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n\t\t\t    return bits.toNumber(Boolean(unsigned));\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Merges the properties of the source object into the destination object.\n\t\t\t * @memberof util\n\t\t\t * @param {Object.<string,*>} dst Destination object\n\t\t\t * @param {Object.<string,*>} src Source object\n\t\t\t * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n\t\t\t * @returns {Object.<string,*>} Destination object\n\t\t\t */\n\t\t\tfunction merge(dst, src, ifNotSet) { // used by converters\n\t\t\t    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n\t\t\t        if (dst[keys[i]] === undefined || !ifNotSet)\n\t\t\t            dst[keys[i]] = src[keys[i]];\n\t\t\t    return dst;\n\t\t\t}\n\n\t\t\tutil.merge = merge;\n\n\t\t\t/**\n\t\t\t * Converts the first character of a string to lower case.\n\t\t\t * @param {string} str String to convert\n\t\t\t * @returns {string} Converted string\n\t\t\t */\n\t\t\tutil.lcFirst = function lcFirst(str) {\n\t\t\t    return str.charAt(0).toLowerCase() + str.substring(1);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates a custom error constructor.\n\t\t\t * @memberof util\n\t\t\t * @param {string} name Error name\n\t\t\t * @returns {Constructor<Error>} Custom error constructor\n\t\t\t */\n\t\t\tfunction newError(name) {\n\n\t\t\t    function CustomError(message, properties) {\n\n\t\t\t        if (!(this instanceof CustomError))\n\t\t\t            return new CustomError(message, properties);\n\n\t\t\t        // Error.call(this, message);\n\t\t\t        // ^ just returns a new error instance because the ctor can be called as a function\n\n\t\t\t        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n\t\t\t        /* istanbul ignore next */\n\t\t\t        if (Error.captureStackTrace) // node\n\t\t\t            Error.captureStackTrace(this, CustomError);\n\t\t\t        else\n\t\t\t            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n\t\t\t        if (properties)\n\t\t\t            merge(this, properties);\n\t\t\t    }\n\n\t\t\t    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n\t\t\t    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n\t\t\t    CustomError.prototype.toString = function toString() {\n\t\t\t        return this.name + \": \" + this.message;\n\t\t\t    };\n\n\t\t\t    return CustomError;\n\t\t\t}\n\n\t\t\tutil.newError = newError;\n\n\t\t\t/**\n\t\t\t * Constructs a new protocol error.\n\t\t\t * @classdesc Error subclass indicating a protocol specifc error.\n\t\t\t * @memberof util\n\t\t\t * @extends Error\n\t\t\t * @template T extends Message<T>\n\t\t\t * @constructor\n\t\t\t * @param {string} message Error message\n\t\t\t * @param {Object.<string,*>} [properties] Additional properties\n\t\t\t * @example\n\t\t\t * try {\n\t\t\t *     MyMessage.decode(someBuffer); // throws if required fields are missing\n\t\t\t * } catch (e) {\n\t\t\t *     if (e instanceof ProtocolError && e.instance)\n\t\t\t *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n\t\t\t * }\n\t\t\t */\n\t\t\tutil.ProtocolError = newError(\"ProtocolError\");\n\n\t\t\t/**\n\t\t\t * So far decoded message instance.\n\t\t\t * @name util.ProtocolError#instance\n\t\t\t * @type {Message<T>}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A OneOf getter as returned by {@link util.oneOfGetter}.\n\t\t\t * @typedef OneOfGetter\n\t\t\t * @type {function}\n\t\t\t * @returns {string|undefined} Set field name, if any\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Builds a getter for a oneof's present field name.\n\t\t\t * @param {string[]} fieldNames Field names\n\t\t\t * @returns {OneOfGetter} Unbound getter\n\t\t\t */\n\t\t\tutil.oneOfGetter = function getOneOf(fieldNames) {\n\t\t\t    var fieldMap = {};\n\t\t\t    for (var i = 0; i < fieldNames.length; ++i)\n\t\t\t        fieldMap[fieldNames[i]] = 1;\n\n\t\t\t    /**\n\t\t\t     * @returns {string|undefined} Set field name, if any\n\t\t\t     * @this Object\n\t\t\t     * @ignore\n\t\t\t     */\n\t\t\t    return function() { // eslint-disable-line consistent-return\n\t\t\t        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n\t\t\t            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n\t\t\t                return keys[i];\n\t\t\t    };\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * A OneOf setter as returned by {@link util.oneOfSetter}.\n\t\t\t * @typedef OneOfSetter\n\t\t\t * @type {function}\n\t\t\t * @param {string|undefined} value Field name\n\t\t\t * @returns {undefined}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Builds a setter for a oneof's present field name.\n\t\t\t * @param {string[]} fieldNames Field names\n\t\t\t * @returns {OneOfSetter} Unbound setter\n\t\t\t */\n\t\t\tutil.oneOfSetter = function setOneOf(fieldNames) {\n\n\t\t\t    /**\n\t\t\t     * @param {string} name Field name\n\t\t\t     * @returns {undefined}\n\t\t\t     * @this Object\n\t\t\t     * @ignore\n\t\t\t     */\n\t\t\t    return function(name) {\n\t\t\t        for (var i = 0; i < fieldNames.length; ++i)\n\t\t\t            if (fieldNames[i] !== name)\n\t\t\t                delete this[fieldNames[i]];\n\t\t\t    };\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Default conversion options used for {@link Message#toJSON} implementations.\n\t\t\t *\n\t\t\t * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n\t\t\t *\n\t\t\t * - Longs become strings\n\t\t\t * - Enums become string keys\n\t\t\t * - Bytes become base64 encoded strings\n\t\t\t * - (Sub-)Messages become plain objects\n\t\t\t * - Maps become plain objects with all string keys\n\t\t\t * - Repeated fields become arrays\n\t\t\t * - NaN and Infinity for float and double fields become strings\n\t\t\t *\n\t\t\t * @type {IConversionOptions}\n\t\t\t * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n\t\t\t */\n\t\t\tutil.toJSONOptions = {\n\t\t\t    longs: String,\n\t\t\t    enums: String,\n\t\t\t    bytes: String,\n\t\t\t    json: true\n\t\t\t};\n\n\t\t\t// Sets up buffer utility according to the environment (called in index-minimal)\n\t\t\tutil._configure = function() {\n\t\t\t    var Buffer = util.Buffer;\n\t\t\t    /* istanbul ignore if */\n\t\t\t    if (!Buffer) {\n\t\t\t        util._Buffer_from = util._Buffer_allocUnsafe = null;\n\t\t\t        return;\n\t\t\t    }\n\t\t\t    // because node 4.x buffers are incompatible & immutable\n\t\t\t    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n\t\t\t    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n\t\t\t        /* istanbul ignore next */\n\t\t\t        function Buffer_from(value, encoding) {\n\t\t\t            return new Buffer(value, encoding);\n\t\t\t        };\n\t\t\t    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n\t\t\t        /* istanbul ignore next */\n\t\t\t        function Buffer_allocUnsafe(size) {\n\t\t\t            return new Buffer(size);\n\t\t\t        };\n\t\t\t};\n\t} (minimal));\n\t\treturn minimal;\n\t}\n\n\tvar writer;\n\tvar hasRequiredWriter;\n\n\tfunction requireWriter () {\n\t\tif (hasRequiredWriter) return writer;\n\t\thasRequiredWriter = 1;\n\t\twriter = Writer;\n\n\t\tvar util      = requireMinimal$1();\n\n\t\tvar BufferWriter; // cyclic\n\n\t\tvar LongBits  = util.LongBits,\n\t\t    base64    = util.base64,\n\t\t    utf8      = util.utf8;\n\n\t\t/**\n\t\t * Constructs a new writer operation instance.\n\t\t * @classdesc Scheduled writer operation.\n\t\t * @constructor\n\t\t * @param {function(*, Uint8Array, number)} fn Function to call\n\t\t * @param {number} len Value byte length\n\t\t * @param {*} val Value to write\n\t\t * @ignore\n\t\t */\n\t\tfunction Op(fn, len, val) {\n\n\t\t    /**\n\t\t     * Function to call.\n\t\t     * @type {function(Uint8Array, number, *)}\n\t\t     */\n\t\t    this.fn = fn;\n\n\t\t    /**\n\t\t     * Value byte length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = len;\n\n\t\t    /**\n\t\t     * Next operation.\n\t\t     * @type {Writer.Op|undefined}\n\t\t     */\n\t\t    this.next = undefined;\n\n\t\t    /**\n\t\t     * Value to write.\n\t\t     * @type {*}\n\t\t     */\n\t\t    this.val = val; // type varies\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tfunction noop() {} // eslint-disable-line no-empty-function\n\n\t\t/**\n\t\t * Constructs a new writer state instance.\n\t\t * @classdesc Copied writer state.\n\t\t * @memberof Writer\n\t\t * @constructor\n\t\t * @param {Writer} writer Writer to copy state from\n\t\t * @ignore\n\t\t */\n\t\tfunction State(writer) {\n\n\t\t    /**\n\t\t     * Current head.\n\t\t     * @type {Writer.Op}\n\t\t     */\n\t\t    this.head = writer.head;\n\n\t\t    /**\n\t\t     * Current tail.\n\t\t     * @type {Writer.Op}\n\t\t     */\n\t\t    this.tail = writer.tail;\n\n\t\t    /**\n\t\t     * Current buffer length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = writer.len;\n\n\t\t    /**\n\t\t     * Next state.\n\t\t     * @type {State|null}\n\t\t     */\n\t\t    this.next = writer.states;\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new writer instance.\n\t\t * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n\t\t * @constructor\n\t\t */\n\t\tfunction Writer() {\n\n\t\t    /**\n\t\t     * Current length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = 0;\n\n\t\t    /**\n\t\t     * Operations head.\n\t\t     * @type {Object}\n\t\t     */\n\t\t    this.head = new Op(noop, 0, 0);\n\n\t\t    /**\n\t\t     * Operations tail\n\t\t     * @type {Object}\n\t\t     */\n\t\t    this.tail = this.head;\n\n\t\t    /**\n\t\t     * Linked forked states.\n\t\t     * @type {Object|null}\n\t\t     */\n\t\t    this.states = null;\n\n\t\t    // When a value is written, the writer calculates its byte length and puts it into a linked\n\t\t    // list of operations to perform when finish() is called. This both allows us to allocate\n\t\t    // buffers of the exact required size and reduces the amount of work we have to do compared\n\t\t    // to first calculating over objects and then encoding over objects. In our case, the encoding\n\t\t    // part is just a linked list walk calling operations with already prepared values.\n\t\t}\n\n\t\tvar create = function create() {\n\t\t    return util.Buffer\n\t\t        ? function create_buffer_setup() {\n\t\t            return (Writer.create = function create_buffer() {\n\t\t                return new BufferWriter();\n\t\t            })();\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : function create_array() {\n\t\t            return new Writer();\n\t\t        };\n\t\t};\n\n\t\t/**\n\t\t * Creates a new writer.\n\t\t * @function\n\t\t * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n\t\t */\n\t\tWriter.create = create();\n\n\t\t/**\n\t\t * Allocates a buffer of the specified size.\n\t\t * @param {number} size Buffer size\n\t\t * @returns {Uint8Array} Buffer\n\t\t */\n\t\tWriter.alloc = function alloc(size) {\n\t\t    return new util.Array(size);\n\t\t};\n\n\t\t// Use Uint8Array buffer pool in the browser, just like node does with buffers\n\t\t/* istanbul ignore else */\n\t\tif (util.Array !== Array)\n\t\t    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n\t\t/**\n\t\t * Pushes a new operation to the queue.\n\t\t * @param {function(Uint8Array, number, *)} fn Function to call\n\t\t * @param {number} len Value byte length\n\t\t * @param {number} val Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @private\n\t\t */\n\t\tWriter.prototype._push = function push(fn, len, val) {\n\t\t    this.tail = this.tail.next = new Op(fn, len, val);\n\t\t    this.len += len;\n\t\t    return this;\n\t\t};\n\n\t\tfunction writeByte(val, buf, pos) {\n\t\t    buf[pos] = val & 255;\n\t\t}\n\n\t\tfunction writeVarint32(val, buf, pos) {\n\t\t    while (val > 127) {\n\t\t        buf[pos++] = val & 127 | 128;\n\t\t        val >>>= 7;\n\t\t    }\n\t\t    buf[pos] = val;\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new varint writer operation instance.\n\t\t * @classdesc Scheduled varint writer operation.\n\t\t * @extends Op\n\t\t * @constructor\n\t\t * @param {number} len Value byte length\n\t\t * @param {number} val Value to write\n\t\t * @ignore\n\t\t */\n\t\tfunction VarintOp(len, val) {\n\t\t    this.len = len;\n\t\t    this.next = undefined;\n\t\t    this.val = val;\n\t\t}\n\n\t\tVarintOp.prototype = Object.create(Op.prototype);\n\t\tVarintOp.prototype.fn = writeVarint32;\n\n\t\t/**\n\t\t * Writes an unsigned 32 bit value as a varint.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.uint32 = function write_uint32(value) {\n\t\t    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n\t\t    // uint32 is by far the most frequently used operation and benefits significantly from this.\n\t\t    this.len += (this.tail = this.tail.next = new VarintOp(\n\t\t        (value = value >>> 0)\n\t\t                < 128       ? 1\n\t\t        : value < 16384     ? 2\n\t\t        : value < 2097152   ? 3\n\t\t        : value < 268435456 ? 4\n\t\t        :                     5,\n\t\t    value)).len;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 32 bit value as a varint.\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.int32 = function write_int32(value) {\n\t\t    return value < 0\n\t\t        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n\t\t        : this.uint32(value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a 32 bit value as a varint, zig-zag encoded.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.sint32 = function write_sint32(value) {\n\t\t    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n\t\t};\n\n\t\tfunction writeVarint64(val, buf, pos) {\n\t\t    while (val.hi) {\n\t\t        buf[pos++] = val.lo & 127 | 128;\n\t\t        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n\t\t        val.hi >>>= 7;\n\t\t    }\n\t\t    while (val.lo > 127) {\n\t\t        buf[pos++] = val.lo & 127 | 128;\n\t\t        val.lo = val.lo >>> 7;\n\t\t    }\n\t\t    buf[pos++] = val.lo;\n\t\t}\n\n\t\t/**\n\t\t * Writes an unsigned 64 bit value as a varint.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.uint64 = function write_uint64(value) {\n\t\t    var bits = LongBits.from(value);\n\t\t    return this._push(writeVarint64, bits.length(), bits);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as a varint.\n\t\t * @function\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.int64 = Writer.prototype.uint64;\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as a varint, zig-zag encoded.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.sint64 = function write_sint64(value) {\n\t\t    var bits = LongBits.from(value).zzEncode();\n\t\t    return this._push(writeVarint64, bits.length(), bits);\n\t\t};\n\n\t\t/**\n\t\t * Writes a boolish value as a varint.\n\t\t * @param {boolean} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.bool = function write_bool(value) {\n\t\t    return this._push(writeByte, 1, value ? 1 : 0);\n\t\t};\n\n\t\tfunction writeFixed32(val, buf, pos) {\n\t\t    buf[pos    ] =  val         & 255;\n\t\t    buf[pos + 1] =  val >>> 8   & 255;\n\t\t    buf[pos + 2] =  val >>> 16  & 255;\n\t\t    buf[pos + 3] =  val >>> 24;\n\t\t}\n\n\t\t/**\n\t\t * Writes an unsigned 32 bit value as fixed 32 bits.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.fixed32 = function write_fixed32(value) {\n\t\t    return this._push(writeFixed32, 4, value >>> 0);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 32 bit value as fixed 32 bits.\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n\t\t/**\n\t\t * Writes an unsigned 64 bit value as fixed 64 bits.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.fixed64 = function write_fixed64(value) {\n\t\t    var bits = LongBits.from(value);\n\t\t    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as fixed 64 bits.\n\t\t * @function\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n\t\t/**\n\t\t * Writes a float (32 bit).\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.float = function write_float(value) {\n\t\t    return this._push(util.float.writeFloatLE, 4, value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a double (64 bit float).\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.double = function write_double(value) {\n\t\t    return this._push(util.float.writeDoubleLE, 8, value);\n\t\t};\n\n\t\tvar writeBytes = util.Array.prototype.set\n\t\t    ? function writeBytes_set(val, buf, pos) {\n\t\t        buf.set(val, pos); // also works for plain array values\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    : function writeBytes_for(val, buf, pos) {\n\t\t        for (var i = 0; i < val.length; ++i)\n\t\t            buf[pos + i] = val[i];\n\t\t    };\n\n\t\t/**\n\t\t * Writes a sequence of bytes.\n\t\t * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.bytes = function write_bytes(value) {\n\t\t    var len = value.length >>> 0;\n\t\t    if (!len)\n\t\t        return this._push(writeByte, 1, 0);\n\t\t    if (util.isString(value)) {\n\t\t        var buf = Writer.alloc(len = base64.length(value));\n\t\t        base64.decode(value, buf, 0);\n\t\t        value = buf;\n\t\t    }\n\t\t    return this.uint32(len)._push(writeBytes, len, value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a string.\n\t\t * @param {string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.string = function write_string(value) {\n\t\t    var len = utf8.length(value);\n\t\t    return len\n\t\t        ? this.uint32(len)._push(utf8.write, len, value)\n\t\t        : this._push(writeByte, 1, 0);\n\t\t};\n\n\t\t/**\n\t\t * Forks this writer's state by pushing it to a stack.\n\t\t * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.fork = function fork() {\n\t\t    this.states = new State(this);\n\t\t    this.head = this.tail = new Op(noop, 0, 0);\n\t\t    this.len = 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Resets this instance to the last state.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.reset = function reset() {\n\t\t    if (this.states) {\n\t\t        this.head   = this.states.head;\n\t\t        this.tail   = this.states.tail;\n\t\t        this.len    = this.states.len;\n\t\t        this.states = this.states.next;\n\t\t    } else {\n\t\t        this.head = this.tail = new Op(noop, 0, 0);\n\t\t        this.len  = 0;\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.ldelim = function ldelim() {\n\t\t    var head = this.head,\n\t\t        tail = this.tail,\n\t\t        len  = this.len;\n\t\t    this.reset().uint32(len);\n\t\t    if (len) {\n\t\t        this.tail.next = head.next; // skip noop\n\t\t        this.tail = tail;\n\t\t        this.len += len;\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Finishes the write operation.\n\t\t * @returns {Uint8Array} Finished buffer\n\t\t */\n\t\tWriter.prototype.finish = function finish() {\n\t\t    var head = this.head.next, // skip noop\n\t\t        buf  = this.constructor.alloc(this.len),\n\t\t        pos  = 0;\n\t\t    while (head) {\n\t\t        head.fn(head.val, buf, pos);\n\t\t        pos += head.len;\n\t\t        head = head.next;\n\t\t    }\n\t\t    // this.head = this.tail = null;\n\t\t    return buf;\n\t\t};\n\n\t\tWriter._configure = function(BufferWriter_) {\n\t\t    BufferWriter = BufferWriter_;\n\t\t    Writer.create = create();\n\t\t    BufferWriter._configure();\n\t\t};\n\t\treturn writer;\n\t}\n\n\tvar writer_buffer;\n\tvar hasRequiredWriter_buffer;\n\n\tfunction requireWriter_buffer () {\n\t\tif (hasRequiredWriter_buffer) return writer_buffer;\n\t\thasRequiredWriter_buffer = 1;\n\t\twriter_buffer = BufferWriter;\n\n\t\t// extends Writer\n\t\tvar Writer = requireWriter();\n\t\t(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs a new buffer writer instance.\n\t\t * @classdesc Wire format writer using node buffers.\n\t\t * @extends Writer\n\t\t * @constructor\n\t\t */\n\t\tfunction BufferWriter() {\n\t\t    Writer.call(this);\n\t\t}\n\n\t\tBufferWriter._configure = function () {\n\t\t    /**\n\t\t     * Allocates a buffer of the specified size.\n\t\t     * @function\n\t\t     * @param {number} size Buffer size\n\t\t     * @returns {Buffer} Buffer\n\t\t     */\n\t\t    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n\t\t    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n\t\t        ? function writeBytesBuffer_set(val, buf, pos) {\n\t\t          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n\t\t          // also works for plain array values\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : function writeBytesBuffer_copy(val, buf, pos) {\n\t\t          if (val.copy) // Buffer values\n\t\t            val.copy(buf, pos, 0, val.length);\n\t\t          else for (var i = 0; i < val.length;) // plain array values\n\t\t            buf[pos++] = val[i++];\n\t\t        };\n\t\t};\n\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n\t\t    if (util.isString(value))\n\t\t        value = util._Buffer_from(value, \"base64\");\n\t\t    var len = value.length >>> 0;\n\t\t    this.uint32(len);\n\t\t    if (len)\n\t\t        this._push(BufferWriter.writeBytesBuffer, len, value);\n\t\t    return this;\n\t\t};\n\n\t\tfunction writeStringBuffer(val, buf, pos) {\n\t\t    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n\t\t        util.utf8.write(val, buf, pos);\n\t\t    else if (buf.utf8Write)\n\t\t        buf.utf8Write(val, pos);\n\t\t    else\n\t\t        buf.write(val, pos);\n\t\t}\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferWriter.prototype.string = function write_string_buffer(value) {\n\t\t    var len = util.Buffer.byteLength(value);\n\t\t    this.uint32(len);\n\t\t    if (len)\n\t\t        this._push(writeStringBuffer, len, value);\n\t\t    return this;\n\t\t};\n\n\n\t\t/**\n\t\t * Finishes the write operation.\n\t\t * @name BufferWriter#finish\n\t\t * @function\n\t\t * @returns {Buffer} Finished buffer\n\t\t */\n\n\t\tBufferWriter._configure();\n\t\treturn writer_buffer;\n\t}\n\n\tvar reader;\n\tvar hasRequiredReader;\n\n\tfunction requireReader () {\n\t\tif (hasRequiredReader) return reader;\n\t\thasRequiredReader = 1;\n\t\treader = Reader;\n\n\t\tvar util      = requireMinimal$1();\n\n\t\tvar BufferReader; // cyclic\n\n\t\tvar LongBits  = util.LongBits,\n\t\t    utf8      = util.utf8;\n\n\t\t/* istanbul ignore next */\n\t\tfunction indexOutOfRange(reader, writeLength) {\n\t\t    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new reader instance using the specified buffer.\n\t\t * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n\t\t * @constructor\n\t\t * @param {Uint8Array} buffer Buffer to read from\n\t\t */\n\t\tfunction Reader(buffer) {\n\n\t\t    /**\n\t\t     * Read buffer.\n\t\t     * @type {Uint8Array}\n\t\t     */\n\t\t    this.buf = buffer;\n\n\t\t    /**\n\t\t     * Read buffer position.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.pos = 0;\n\n\t\t    /**\n\t\t     * Read buffer length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = buffer.length;\n\t\t}\n\n\t\tvar create_array = typeof Uint8Array !== \"undefined\"\n\t\t    ? function create_typed_array(buffer) {\n\t\t        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n\t\t            return new Reader(buffer);\n\t\t        throw Error(\"illegal buffer\");\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    : function create_array(buffer) {\n\t\t        if (Array.isArray(buffer))\n\t\t            return new Reader(buffer);\n\t\t        throw Error(\"illegal buffer\");\n\t\t    };\n\n\t\tvar create = function create() {\n\t\t    return util.Buffer\n\t\t        ? function create_buffer_setup(buffer) {\n\t\t            return (Reader.create = function create_buffer(buffer) {\n\t\t                return util.Buffer.isBuffer(buffer)\n\t\t                    ? new BufferReader(buffer)\n\t\t                    /* istanbul ignore next */\n\t\t                    : create_array(buffer);\n\t\t            })(buffer);\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : create_array;\n\t\t};\n\n\t\t/**\n\t\t * Creates a new reader using the specified buffer.\n\t\t * @function\n\t\t * @param {Uint8Array|Buffer} buffer Buffer to read from\n\t\t * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n\t\t * @throws {Error} If `buffer` is not a valid buffer\n\t\t */\n\t\tReader.create = create();\n\n\t\tReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n\t\t/**\n\t\t * Reads a varint as an unsigned 32 bit value.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.uint32 = (function read_uint32_setup() {\n\t\t    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n\t\t    return function read_uint32() {\n\t\t        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n\t\t        /* istanbul ignore if */\n\t\t        if ((this.pos += 5) > this.len) {\n\t\t            this.pos = this.len;\n\t\t            throw indexOutOfRange(this, 10);\n\t\t        }\n\t\t        return value;\n\t\t    };\n\t\t})();\n\n\t\t/**\n\t\t * Reads a varint as a signed 32 bit value.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.int32 = function read_int32() {\n\t\t    return this.uint32() | 0;\n\t\t};\n\n\t\t/**\n\t\t * Reads a zig-zag encoded varint as a signed 32 bit value.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.sint32 = function read_sint32() {\n\t\t    var value = this.uint32();\n\t\t    return value >>> 1 ^ -(value & 1) | 0;\n\t\t};\n\n\t\t/* eslint-disable no-invalid-this */\n\n\t\tfunction readLongVarint() {\n\t\t    // tends to deopt with local vars for octet etc.\n\t\t    var bits = new LongBits(0, 0);\n\t\t    var i = 0;\n\t\t    if (this.len - this.pos > 4) { // fast route (lo)\n\t\t        for (; i < 4; ++i) {\n\t\t            // 1st..4th\n\t\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t        // 5th\n\t\t        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n\t\t        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n\t\t        if (this.buf[this.pos++] < 128)\n\t\t            return bits;\n\t\t        i = 0;\n\t\t    } else {\n\t\t        for (; i < 3; ++i) {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t            // 1st..3th\n\t\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t        // 4th\n\t\t        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n\t\t        return bits;\n\t\t    }\n\t\t    if (this.len - this.pos > 4) { // fast route (hi)\n\t\t        for (; i < 5; ++i) {\n\t\t            // 6th..10th\n\t\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t    } else {\n\t\t        for (; i < 5; ++i) {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t            // 6th..10th\n\t\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    throw Error(\"invalid varint encoding\");\n\t\t}\n\n\t\t/* eslint-enable no-invalid-this */\n\n\t\t/**\n\t\t * Reads a varint as a signed 64 bit value.\n\t\t * @name Reader#int64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a varint as an unsigned 64 bit value.\n\t\t * @name Reader#uint64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a zig-zag encoded varint as a signed 64 bit value.\n\t\t * @name Reader#sint64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a varint as a boolean.\n\t\t * @returns {boolean} Value read\n\t\t */\n\t\tReader.prototype.bool = function read_bool() {\n\t\t    return this.uint32() !== 0;\n\t\t};\n\n\t\tfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n\t\t    return (buf[end - 4]\n\t\t          | buf[end - 3] << 8\n\t\t          | buf[end - 2] << 16\n\t\t          | buf[end - 1] << 24) >>> 0;\n\t\t}\n\n\t\t/**\n\t\t * Reads fixed 32 bits as an unsigned 32 bit integer.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.fixed32 = function read_fixed32() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    return readFixed32_end(this.buf, this.pos += 4);\n\t\t};\n\n\t\t/**\n\t\t * Reads fixed 32 bits as a signed 32 bit integer.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.sfixed32 = function read_sfixed32() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    return readFixed32_end(this.buf, this.pos += 4) | 0;\n\t\t};\n\n\t\t/* eslint-disable no-invalid-this */\n\n\t\tfunction readFixed64(/* this: Reader */) {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 8 > this.len)\n\t\t        throw indexOutOfRange(this, 8);\n\n\t\t    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n\t\t}\n\n\t\t/* eslint-enable no-invalid-this */\n\n\t\t/**\n\t\t * Reads fixed 64 bits.\n\t\t * @name Reader#fixed64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads zig-zag encoded fixed 64 bits.\n\t\t * @name Reader#sfixed64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a float (32 bit) as a number.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.float = function read_float() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    var value = util.float.readFloatLE(this.buf, this.pos);\n\t\t    this.pos += 4;\n\t\t    return value;\n\t\t};\n\n\t\t/**\n\t\t * Reads a double (64 bit float) as a number.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.double = function read_double() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 8 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    var value = util.float.readDoubleLE(this.buf, this.pos);\n\t\t    this.pos += 8;\n\t\t    return value;\n\t\t};\n\n\t\t/**\n\t\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t\t * @returns {Uint8Array} Value read\n\t\t */\n\t\tReader.prototype.bytes = function read_bytes() {\n\t\t    var length = this.uint32(),\n\t\t        start  = this.pos,\n\t\t        end    = this.pos + length;\n\n\t\t    /* istanbul ignore if */\n\t\t    if (end > this.len)\n\t\t        throw indexOutOfRange(this, length);\n\n\t\t    this.pos += length;\n\t\t    if (Array.isArray(this.buf)) // plain array\n\t\t        return this.buf.slice(start, end);\n\t\t    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n\t\t        ? new this.buf.constructor(0)\n\t\t        : this._slice.call(this.buf, start, end);\n\t\t};\n\n\t\t/**\n\t\t * Reads a string preceeded by its byte length as a varint.\n\t\t * @returns {string} Value read\n\t\t */\n\t\tReader.prototype.string = function read_string() {\n\t\t    var bytes = this.bytes();\n\t\t    return utf8.read(bytes, 0, bytes.length);\n\t\t};\n\n\t\t/**\n\t\t * Skips the specified number of bytes if specified, otherwise skips a varint.\n\t\t * @param {number} [length] Length if known, otherwise a varint is assumed\n\t\t * @returns {Reader} `this`\n\t\t */\n\t\tReader.prototype.skip = function skip(length) {\n\t\t    if (typeof length === \"number\") {\n\t\t        /* istanbul ignore if */\n\t\t        if (this.pos + length > this.len)\n\t\t            throw indexOutOfRange(this, length);\n\t\t        this.pos += length;\n\t\t    } else {\n\t\t        do {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t        } while (this.buf[this.pos++] & 128);\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Skips the next element of the specified wire type.\n\t\t * @param {number} wireType Wire type received\n\t\t * @returns {Reader} `this`\n\t\t */\n\t\tReader.prototype.skipType = function(wireType) {\n\t\t    switch (wireType) {\n\t\t        case 0:\n\t\t            this.skip();\n\t\t            break;\n\t\t        case 1:\n\t\t            this.skip(8);\n\t\t            break;\n\t\t        case 2:\n\t\t            this.skip(this.uint32());\n\t\t            break;\n\t\t        case 3:\n\t\t            while ((wireType = this.uint32() & 7) !== 4) {\n\t\t                this.skipType(wireType);\n\t\t            }\n\t\t            break;\n\t\t        case 5:\n\t\t            this.skip(4);\n\t\t            break;\n\n\t\t        /* istanbul ignore next */\n\t\t        default:\n\t\t            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\tReader._configure = function(BufferReader_) {\n\t\t    BufferReader = BufferReader_;\n\t\t    Reader.create = create();\n\t\t    BufferReader._configure();\n\n\t\t    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n\t\t    util.merge(Reader.prototype, {\n\n\t\t        int64: function read_int64() {\n\t\t            return readLongVarint.call(this)[fn](false);\n\t\t        },\n\n\t\t        uint64: function read_uint64() {\n\t\t            return readLongVarint.call(this)[fn](true);\n\t\t        },\n\n\t\t        sint64: function read_sint64() {\n\t\t            return readLongVarint.call(this).zzDecode()[fn](false);\n\t\t        },\n\n\t\t        fixed64: function read_fixed64() {\n\t\t            return readFixed64.call(this)[fn](true);\n\t\t        },\n\n\t\t        sfixed64: function read_sfixed64() {\n\t\t            return readFixed64.call(this)[fn](false);\n\t\t        }\n\n\t\t    });\n\t\t};\n\t\treturn reader;\n\t}\n\n\tvar reader_buffer;\n\tvar hasRequiredReader_buffer;\n\n\tfunction requireReader_buffer () {\n\t\tif (hasRequiredReader_buffer) return reader_buffer;\n\t\thasRequiredReader_buffer = 1;\n\t\treader_buffer = BufferReader;\n\n\t\t// extends Reader\n\t\tvar Reader = requireReader();\n\t\t(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs a new buffer reader instance.\n\t\t * @classdesc Wire format reader using node buffers.\n\t\t * @extends Reader\n\t\t * @constructor\n\t\t * @param {Buffer} buffer Buffer to read from\n\t\t */\n\t\tfunction BufferReader(buffer) {\n\t\t    Reader.call(this, buffer);\n\n\t\t    /**\n\t\t     * Read buffer.\n\t\t     * @name BufferReader#buf\n\t\t     * @type {Buffer}\n\t\t     */\n\t\t}\n\n\t\tBufferReader._configure = function () {\n\t\t    /* istanbul ignore else */\n\t\t    if (util.Buffer)\n\t\t        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\t\t};\n\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferReader.prototype.string = function read_string_buffer() {\n\t\t    var len = this.uint32(); // modifies pos\n\t\t    return this.buf.utf8Slice\n\t\t        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n\t\t        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n\t\t};\n\n\t\t/**\n\t\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t\t * @name BufferReader#bytes\n\t\t * @function\n\t\t * @returns {Buffer} Value read\n\t\t */\n\n\t\tBufferReader._configure();\n\t\treturn reader_buffer;\n\t}\n\n\tvar rpc = {};\n\n\tvar service;\n\tvar hasRequiredService;\n\n\tfunction requireService () {\n\t\tif (hasRequiredService) return service;\n\t\thasRequiredService = 1;\n\t\tservice = Service;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t// Extends EventEmitter\n\t\t(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n\t\t/**\n\t\t * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n\t\t *\n\t\t * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n\t\t * @typedef rpc.ServiceMethodCallback\n\t\t * @template TRes extends Message<TRes>\n\t\t * @type {function}\n\t\t * @param {Error|null} error Error, if any\n\t\t * @param {TRes} [response] Response message\n\t\t * @returns {undefined}\n\t\t */\n\n\t\t/**\n\t\t * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n\t\t * @typedef rpc.ServiceMethod\n\t\t * @template TReq extends Message<TReq>\n\t\t * @template TRes extends Message<TRes>\n\t\t * @type {function}\n\t\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t\t * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n\t\t * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n\t\t */\n\n\t\t/**\n\t\t * Constructs a new RPC service instance.\n\t\t * @classdesc An RPC service as returned by {@link Service#create}.\n\t\t * @exports rpc.Service\n\t\t * @extends util.EventEmitter\n\t\t * @constructor\n\t\t * @param {RPCImpl} rpcImpl RPC implementation\n\t\t * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n\t\t * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n\t\t */\n\t\tfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n\t\t    if (typeof rpcImpl !== \"function\")\n\t\t        throw TypeError(\"rpcImpl must be a function\");\n\n\t\t    util.EventEmitter.call(this);\n\n\t\t    /**\n\t\t     * RPC implementation. Becomes `null` once the service is ended.\n\t\t     * @type {RPCImpl|null}\n\t\t     */\n\t\t    this.rpcImpl = rpcImpl;\n\n\t\t    /**\n\t\t     * Whether requests are length-delimited.\n\t\t     * @type {boolean}\n\t\t     */\n\t\t    this.requestDelimited = Boolean(requestDelimited);\n\n\t\t    /**\n\t\t     * Whether responses are length-delimited.\n\t\t     * @type {boolean}\n\t\t     */\n\t\t    this.responseDelimited = Boolean(responseDelimited);\n\t\t}\n\n\t\t/**\n\t\t * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n\t\t * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n\t\t * @param {Constructor<TReq>} requestCtor Request constructor\n\t\t * @param {Constructor<TRes>} responseCtor Response constructor\n\t\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t\t * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n\t\t * @returns {undefined}\n\t\t * @template TReq extends Message<TReq>\n\t\t * @template TRes extends Message<TRes>\n\t\t */\n\t\tService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n\t\t    if (!request)\n\t\t        throw TypeError(\"request must be specified\");\n\n\t\t    var self = this;\n\t\t    if (!callback)\n\t\t        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n\t\t    if (!self.rpcImpl) {\n\t\t        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n\t\t        return undefined;\n\t\t    }\n\n\t\t    try {\n\t\t        return self.rpcImpl(\n\t\t            method,\n\t\t            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n\t\t            function rpcCallback(err, response) {\n\n\t\t                if (err) {\n\t\t                    self.emit(\"error\", err, method);\n\t\t                    return callback(err);\n\t\t                }\n\n\t\t                if (response === null) {\n\t\t                    self.end(/* endedByRPC */ true);\n\t\t                    return undefined;\n\t\t                }\n\n\t\t                if (!(response instanceof responseCtor)) {\n\t\t                    try {\n\t\t                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n\t\t                    } catch (err) {\n\t\t                        self.emit(\"error\", err, method);\n\t\t                        return callback(err);\n\t\t                    }\n\t\t                }\n\n\t\t                self.emit(\"data\", response, method);\n\t\t                return callback(null, response);\n\t\t            }\n\t\t        );\n\t\t    } catch (err) {\n\t\t        self.emit(\"error\", err, method);\n\t\t        setTimeout(function() { callback(err); }, 0);\n\t\t        return undefined;\n\t\t    }\n\t\t};\n\n\t\t/**\n\t\t * Ends this service and emits the `end` event.\n\t\t * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n\t\t * @returns {rpc.Service} `this`\n\t\t */\n\t\tService.prototype.end = function end(endedByRPC) {\n\t\t    if (this.rpcImpl) {\n\t\t        if (!endedByRPC) // signal end to rpcImpl\n\t\t            this.rpcImpl(null, null, null);\n\t\t        this.rpcImpl = null;\n\t\t        this.emit(\"end\").off();\n\t\t    }\n\t\t    return this;\n\t\t};\n\t\treturn service;\n\t}\n\n\tvar hasRequiredRpc;\n\n\tfunction requireRpc () {\n\t\tif (hasRequiredRpc) return rpc;\n\t\thasRequiredRpc = 1;\n\t\t(function (exports) {\n\n\t\t\t/**\n\t\t\t * Streaming RPC helpers.\n\t\t\t * @namespace\n\t\t\t */\n\t\t\tvar rpc = exports;\n\n\t\t\t/**\n\t\t\t * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n\t\t\t * @typedef RPCImpl\n\t\t\t * @type {function}\n\t\t\t * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n\t\t\t * @param {Uint8Array} requestData Request data\n\t\t\t * @param {RPCImplCallback} callback Callback function\n\t\t\t * @returns {undefined}\n\t\t\t * @example\n\t\t\t * function rpcImpl(method, requestData, callback) {\n\t\t\t *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n\t\t\t *         throw Error(\"no such method\");\n\t\t\t *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n\t\t\t *         callback(err, responseData);\n\t\t\t *     });\n\t\t\t * }\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Node-style callback as used by {@link RPCImpl}.\n\t\t\t * @typedef RPCImplCallback\n\t\t\t * @type {function}\n\t\t\t * @param {Error|null} error Error, if any, otherwise `null`\n\t\t\t * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n\t\t\t * @returns {undefined}\n\t\t\t */\n\n\t\t\trpc.Service = requireService();\n\t} (rpc));\n\t\treturn rpc;\n\t}\n\n\tvar roots;\n\tvar hasRequiredRoots;\n\n\tfunction requireRoots () {\n\t\tif (hasRequiredRoots) return roots;\n\t\thasRequiredRoots = 1;\n\t\troots = {};\n\n\t\t/**\n\t\t * Named roots.\n\t\t * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n\t\t * Can also be used manually to make roots available accross modules.\n\t\t * @name roots\n\t\t * @type {Object.<string,Root>}\n\t\t * @example\n\t\t * // pbjs -r myroot -o compiled.js ...\n\t\t *\n\t\t * // in another module:\n\t\t * require(\"./compiled.js\");\n\t\t *\n\t\t * // in any subsequent module:\n\t\t * var root = protobuf.roots[\"myroot\"];\n\t\t */\n\t\treturn roots;\n\t}\n\n\tvar hasRequiredIndexMinimal;\n\n\tfunction requireIndexMinimal () {\n\t\tif (hasRequiredIndexMinimal) return indexMinimal;\n\t\thasRequiredIndexMinimal = 1;\n\t\t(function (exports) {\n\t\t\tvar protobuf = exports;\n\n\t\t\t/**\n\t\t\t * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n\t\t\t * @name build\n\t\t\t * @type {string}\n\t\t\t * @const\n\t\t\t */\n\t\t\tprotobuf.build = \"minimal\";\n\n\t\t\t// Serialization\n\t\t\tprotobuf.Writer       = requireWriter();\n\t\t\tprotobuf.BufferWriter = requireWriter_buffer();\n\t\t\tprotobuf.Reader       = requireReader();\n\t\t\tprotobuf.BufferReader = requireReader_buffer();\n\n\t\t\t// Utility\n\t\t\tprotobuf.util         = requireMinimal$1();\n\t\t\tprotobuf.rpc          = requireRpc();\n\t\t\tprotobuf.roots        = requireRoots();\n\t\t\tprotobuf.configure    = configure;\n\n\t\t\t/* istanbul ignore next */\n\t\t\t/**\n\t\t\t * Reconfigures the library according to the environment.\n\t\t\t * @returns {undefined}\n\t\t\t */\n\t\t\tfunction configure() {\n\t\t\t    protobuf.util._configure();\n\t\t\t    protobuf.Writer._configure(protobuf.BufferWriter);\n\t\t\t    protobuf.Reader._configure(protobuf.BufferReader);\n\t\t\t}\n\n\t\t\t// Set up buffer utility according to the environment\n\t\t\tconfigure();\n\t} (indexMinimal));\n\t\treturn indexMinimal;\n\t}\n\n\tvar hasRequiredMinimal;\n\n\tfunction requireMinimal () {\n\t\tif (hasRequiredMinimal) return minimal$1.exports;\n\t\thasRequiredMinimal = 1;\n\t\t(function (module) {\n\t\t\tmodule.exports = requireIndexMinimal();\n\t} (minimal$1));\n\t\treturn minimal$1.exports;\n\t}\n\n\tvar minimalExports = requireMinimal();\n\n\t/* eslint-disable */\n\tfunction createBasePBAnimator() {\n\t    return { states: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAnimator = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        for (const v of message.states) {\n\t            PBAnimationState.encode(v, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAnimator();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.states.push(PBAnimationState.decode(reader, reader.uint32()));\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBAnimationState() {\n\t    return {\n\t        name: '',\n\t        clip: '',\n\t        playing: undefined,\n\t        weight: undefined,\n\t        speed: undefined,\n\t        loop: undefined,\n\t        shouldReset: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAnimationState = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.name !== '') {\n\t            writer.uint32(10).string(message.name);\n\t        }\n\t        if (message.clip !== '') {\n\t            writer.uint32(18).string(message.clip);\n\t        }\n\t        if (message.playing !== undefined) {\n\t            writer.uint32(24).bool(message.playing);\n\t        }\n\t        if (message.weight !== undefined) {\n\t            writer.uint32(37).float(message.weight);\n\t        }\n\t        if (message.speed !== undefined) {\n\t            writer.uint32(45).float(message.speed);\n\t        }\n\t        if (message.loop !== undefined) {\n\t            writer.uint32(48).bool(message.loop);\n\t        }\n\t        if (message.shouldReset !== undefined) {\n\t            writer.uint32(56).bool(message.shouldReset);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAnimationState();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.name = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.clip = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.playing = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.weight = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.speed = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.loop = reader.bool();\n\t                    break;\n\t                case 7:\n\t                    message.shouldReset = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$w = 1042;\n\t/**\n\t * @internal\n\t */\n\tconst AnimatorSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAnimator.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAnimator.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAnimator.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBAudioSource() {\n\t    return { playing: undefined, volume: undefined, loop: undefined, pitch: undefined, audioClipUrl: '' };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAudioSource = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.playing !== undefined) {\n\t            writer.uint32(8).bool(message.playing);\n\t        }\n\t        if (message.volume !== undefined) {\n\t            writer.uint32(21).float(message.volume);\n\t        }\n\t        if (message.loop !== undefined) {\n\t            writer.uint32(24).bool(message.loop);\n\t        }\n\t        if (message.pitch !== undefined) {\n\t            writer.uint32(37).float(message.pitch);\n\t        }\n\t        if (message.audioClipUrl !== '') {\n\t            writer.uint32(42).string(message.audioClipUrl);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAudioSource();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.playing = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.volume = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.loop = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.pitch = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.audioClipUrl = reader.string();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$v = 1020;\n\t/**\n\t * @internal\n\t */\n\tconst AudioSourceSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAudioSource.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAudioSource.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAudioSource.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar AvatarAnchorPoint;\n\t(function (AvatarAnchorPoint) {\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"POSITION\"] = 0] = \"POSITION\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"NAME_TAG\"] = 1] = \"NAME_TAG\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"LEFT_HAND\"] = 2] = \"LEFT_HAND\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"RIGHT_HAND\"] = 3] = \"RIGHT_HAND\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(AvatarAnchorPoint || (AvatarAnchorPoint = {}));\n\tfunction createBasePBAvatarAttach() {\n\t    return { avatarId: '', anchorPointId: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarAttach = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.avatarId !== '') {\n\t            writer.uint32(10).string(message.avatarId);\n\t        }\n\t        if (message.anchorPointId !== 0) {\n\t            writer.uint32(16).int32(message.anchorPointId);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarAttach();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.avatarId = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.anchorPointId = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$u = 1073;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarAttachSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarAttach.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarAttach.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarAttach.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBaseVector3() {\n\t    return { x: 0, y: 0, z: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Vector3 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.x !== 0) {\n\t            writer.uint32(13).float(message.x);\n\t        }\n\t        if (message.y !== 0) {\n\t            writer.uint32(21).float(message.y);\n\t        }\n\t        if (message.z !== 0) {\n\t            writer.uint32(29).float(message.z);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseVector3();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.x = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.y = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.z = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar AvatarModifier;\n\t(function (AvatarModifier) {\n\t    AvatarModifier[AvatarModifier[\"HIDE_AVATARS\"] = 0] = \"HIDE_AVATARS\";\n\t    AvatarModifier[AvatarModifier[\"DISABLE_PASSPORTS\"] = 1] = \"DISABLE_PASSPORTS\";\n\t    AvatarModifier[AvatarModifier[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(AvatarModifier || (AvatarModifier = {}));\n\tfunction createBasePBAvatarModifierArea() {\n\t    return { area: undefined, excludeIds: [], modifiers: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarModifierArea = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.area !== undefined) {\n\t            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        for (const v of message.excludeIds) {\n\t            writer.uint32(18).string(v);\n\t        }\n\t        writer.uint32(26).fork();\n\t        for (const v of message.modifiers) {\n\t            writer.int32(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarModifierArea();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.area = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.excludeIds.push(reader.string());\n\t                    break;\n\t                case 3:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.modifiers.push(reader.int32());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.modifiers.push(reader.int32());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$t = 1070;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarModifierAreaSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarModifierArea.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarModifierArea.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarModifierArea.decode(new Uint8Array());\n\t    }\n\t};\n\n\tvar long;\n\tvar hasRequiredLong;\n\n\tfunction requireLong () {\n\t\tif (hasRequiredLong) return long;\n\t\thasRequiredLong = 1;\n\t\tlong = Long;\r\n\r\n\t\t/**\r\n\t\t * wasm optimizations, to do native i64 multiplication and divide\r\n\t\t */\r\n\t\tvar wasm = null;\r\n\r\n\t\ttry {\r\n\t\t  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n\t\t    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n\t\t  ])), {}).exports;\r\n\t\t} catch (e) {\r\n\t\t  // no wasm support :(\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n\t\t *  See the from* functions below for more convenient ways of constructing Longs.\r\n\t\t * @exports Long\r\n\t\t * @class A Long class for representing a 64 bit two's-complement integer value.\r\n\t\t * @param {number} low The low (signed) 32 bits of the long\r\n\t\t * @param {number} high The high (signed) 32 bits of the long\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction Long(low, high, unsigned) {\r\n\r\n\t\t    /**\r\n\t\t     * The low 32 bits as a signed value.\r\n\t\t     * @type {number}\r\n\t\t     */\r\n\t\t    this.low = low | 0;\r\n\r\n\t\t    /**\r\n\t\t     * The high 32 bits as a signed value.\r\n\t\t     * @type {number}\r\n\t\t     */\r\n\t\t    this.high = high | 0;\r\n\r\n\t\t    /**\r\n\t\t     * Whether unsigned or not.\r\n\t\t     * @type {boolean}\r\n\t\t     */\r\n\t\t    this.unsigned = !!unsigned;\r\n\t\t}\r\n\r\n\t\t// The internal representation of a long is the two given signed, 32-bit values.\r\n\t\t// We use 32-bit pieces because these are the size of integers on which\r\n\t\t// Javascript performs bit-operations.  For operations like addition and\r\n\t\t// multiplication, we split each number into 16 bit pieces, which can easily be\r\n\t\t// multiplied within Javascript's floating-point representation without overflow\r\n\t\t// or change in sign.\r\n\t\t//\r\n\t\t// In the algorithms below, we frequently reduce the negative case to the\r\n\t\t// positive case by negating the input(s) and then post-processing the result.\r\n\t\t// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n\t\t// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n\t\t// a positive number, it overflows back into a negative).  Not handling this\r\n\t\t// case would often result in infinite recursion.\r\n\t\t//\r\n\t\t// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n\t\t// methods on which they depend.\r\n\r\n\t\t/**\r\n\t\t * An indicator used to reliably determine if an object is a Long or not.\r\n\t\t * @type {boolean}\r\n\t\t * @const\r\n\t\t * @private\r\n\t\t */\r\n\t\tLong.prototype.__isLong__;\r\n\r\n\t\tObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n\t\t/**\r\n\t\t * @function\r\n\t\t * @param {*} obj Object\r\n\t\t * @returns {boolean}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction isLong(obj) {\r\n\t\t    return (obj && obj[\"__isLong__\"]) === true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Tests if the specified object is a Long.\r\n\t\t * @function\r\n\t\t * @param {*} obj Object\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLong.isLong = isLong;\r\n\r\n\t\t/**\r\n\t\t * A cache of the Long representations of small integer values.\r\n\t\t * @type {!Object}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar INT_CACHE = {};\r\n\r\n\t\t/**\r\n\t\t * A cache of the Long representations of small unsigned integer values.\r\n\t\t * @type {!Object}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar UINT_CACHE = {};\r\n\r\n\t\t/**\r\n\t\t * @param {number} value\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromInt(value, unsigned) {\r\n\t\t    var obj, cachedObj, cache;\r\n\t\t    if (unsigned) {\r\n\t\t        value >>>= 0;\r\n\t\t        if (cache = (0 <= value && value < 256)) {\r\n\t\t            cachedObj = UINT_CACHE[value];\r\n\t\t            if (cachedObj)\r\n\t\t                return cachedObj;\r\n\t\t        }\r\n\t\t        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n\t\t        if (cache)\r\n\t\t            UINT_CACHE[value] = obj;\r\n\t\t        return obj;\r\n\t\t    } else {\r\n\t\t        value |= 0;\r\n\t\t        if (cache = (-128 <= value && value < 128)) {\r\n\t\t            cachedObj = INT_CACHE[value];\r\n\t\t            if (cachedObj)\r\n\t\t                return cachedObj;\r\n\t\t        }\r\n\t\t        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n\t\t        if (cache)\r\n\t\t            INT_CACHE[value] = obj;\r\n\t\t        return obj;\r\n\t\t    }\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representing the given 32 bit integer value.\r\n\t\t * @function\r\n\t\t * @param {number} value The 32 bit integer in question\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromInt = fromInt;\r\n\r\n\t\t/**\r\n\t\t * @param {number} value\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromNumber(value, unsigned) {\r\n\t\t    if (isNaN(value))\r\n\t\t        return unsigned ? UZERO : ZERO;\r\n\t\t    if (unsigned) {\r\n\t\t        if (value < 0)\r\n\t\t            return UZERO;\r\n\t\t        if (value >= TWO_PWR_64_DBL)\r\n\t\t            return MAX_UNSIGNED_VALUE;\r\n\t\t    } else {\r\n\t\t        if (value <= -TWO_PWR_63_DBL)\r\n\t\t            return MIN_VALUE;\r\n\t\t        if (value + 1 >= TWO_PWR_63_DBL)\r\n\t\t            return MAX_VALUE;\r\n\t\t    }\r\n\t\t    if (value < 0)\r\n\t\t        return fromNumber(-value, unsigned).neg();\r\n\t\t    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n\t\t * @function\r\n\t\t * @param {number} value The number in question\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromNumber = fromNumber;\r\n\r\n\t\t/**\r\n\t\t * @param {number} lowBits\r\n\t\t * @param {number} highBits\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromBits(lowBits, highBits, unsigned) {\r\n\t\t    return new Long(lowBits, highBits, unsigned);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n\t\t *  assumed to use 32 bits.\r\n\t\t * @function\r\n\t\t * @param {number} lowBits The low 32 bits\r\n\t\t * @param {number} highBits The high 32 bits\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBits = fromBits;\r\n\r\n\t\t/**\r\n\t\t * @function\r\n\t\t * @param {number} base\r\n\t\t * @param {number} exponent\r\n\t\t * @returns {number}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n\t\t/**\r\n\t\t * @param {string} str\r\n\t\t * @param {(boolean|number)=} unsigned\r\n\t\t * @param {number=} radix\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromString(str, unsigned, radix) {\r\n\t\t    if (str.length === 0)\r\n\t\t        throw Error('empty string');\r\n\t\t    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n\t\t        return ZERO;\r\n\t\t    if (typeof unsigned === 'number') {\r\n\t\t        // For goog.math.long compatibility\r\n\t\t        radix = unsigned,\r\n\t\t        unsigned = false;\r\n\t\t    } else {\r\n\t\t        unsigned = !! unsigned;\r\n\t\t    }\r\n\t\t    radix = radix || 10;\r\n\t\t    if (radix < 2 || 36 < radix)\r\n\t\t        throw RangeError('radix');\r\n\r\n\t\t    var p;\r\n\t\t    if ((p = str.indexOf('-')) > 0)\r\n\t\t        throw Error('interior hyphen');\r\n\t\t    else if (p === 0) {\r\n\t\t        return fromString(str.substring(1), unsigned, radix).neg();\r\n\t\t    }\r\n\r\n\t\t    // Do several (8) digits each time through the loop, so as to\r\n\t\t    // minimize the calls to the very expensive emulated div.\r\n\t\t    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n\t\t    var result = ZERO;\r\n\t\t    for (var i = 0; i < str.length; i += 8) {\r\n\t\t        var size = Math.min(8, str.length - i),\r\n\t\t            value = parseInt(str.substring(i, i + size), radix);\r\n\t\t        if (size < 8) {\r\n\t\t            var power = fromNumber(pow_dbl(radix, size));\r\n\t\t            result = result.mul(power).add(fromNumber(value));\r\n\t\t        } else {\r\n\t\t            result = result.mul(radixToPower);\r\n\t\t            result = result.add(fromNumber(value));\r\n\t\t        }\r\n\t\t    }\r\n\t\t    result.unsigned = unsigned;\r\n\t\t    return result;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representation of the given string, written using the specified radix.\r\n\t\t * @function\r\n\t\t * @param {string} str The textual representation of the Long\r\n\t\t * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromString = fromString;\r\n\r\n\t\t/**\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromValue(val, unsigned) {\r\n\t\t    if (typeof val === 'number')\r\n\t\t        return fromNumber(val, unsigned);\r\n\t\t    if (typeof val === 'string')\r\n\t\t        return fromString(val, unsigned);\r\n\t\t    // Throws for non-objects, converts non-instanceof Long:\r\n\t\t    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Converts the specified value to a Long using the appropriate from* function for its type.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLong.fromValue = fromValue;\r\n\r\n\t\t// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n\t\t// no runtime penalty for these.\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar ZERO = fromInt(0);\r\n\r\n\t\t/**\r\n\t\t * Signed zero.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.ZERO = ZERO;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar UZERO = fromInt(0, true);\r\n\r\n\t\t/**\r\n\t\t * Unsigned zero.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.UZERO = UZERO;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar ONE = fromInt(1);\r\n\r\n\t\t/**\r\n\t\t * Signed one.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.ONE = ONE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar UONE = fromInt(1, true);\r\n\r\n\t\t/**\r\n\t\t * Unsigned one.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.UONE = UONE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar NEG_ONE = fromInt(-1);\r\n\r\n\t\t/**\r\n\t\t * Signed negative one.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.NEG_ONE = NEG_ONE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n\t\t/**\r\n\t\t * Maximum signed value.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.MAX_VALUE = MAX_VALUE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n\t\t/**\r\n\t\t * Maximum unsigned value.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n\t\t/**\r\n\t\t * Minimum signed value.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.MIN_VALUE = MIN_VALUE;\r\n\r\n\t\t/**\r\n\t\t * @alias Long.prototype\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar LongPrototype = Long.prototype;\r\n\r\n\t\t/**\r\n\t\t * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tLongPrototype.toInt = function toInt() {\r\n\t\t    return this.unsigned ? this.low >>> 0 : this.low;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tLongPrototype.toNumber = function toNumber() {\r\n\t\t    if (this.unsigned)\r\n\t\t        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n\t\t    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts the Long to a string written in the specified radix.\r\n\t\t * @param {number=} radix Radix (2-36), defaults to 10\r\n\t\t * @returns {string}\r\n\t\t * @override\r\n\t\t * @throws {RangeError} If `radix` is out of range\r\n\t\t */\r\n\t\tLongPrototype.toString = function toString(radix) {\r\n\t\t    radix = radix || 10;\r\n\t\t    if (radix < 2 || 36 < radix)\r\n\t\t        throw RangeError('radix');\r\n\t\t    if (this.isZero())\r\n\t\t        return '0';\r\n\t\t    if (this.isNegative()) { // Unsigned Longs are never negative\r\n\t\t        if (this.eq(MIN_VALUE)) {\r\n\t\t            // We need to change the Long value before it can be negated, so we remove\r\n\t\t            // the bottom-most digit in this base and then recurse to do the rest.\r\n\t\t            var radixLong = fromNumber(radix),\r\n\t\t                div = this.div(radixLong),\r\n\t\t                rem1 = div.mul(radixLong).sub(this);\r\n\t\t            return div.toString(radix) + rem1.toInt().toString(radix);\r\n\t\t        } else\r\n\t\t            return '-' + this.neg().toString(radix);\r\n\t\t    }\r\n\r\n\t\t    // Do several (6) digits each time through the loop, so as to\r\n\t\t    // minimize the calls to the very expensive emulated div.\r\n\t\t    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n\t\t        rem = this;\r\n\t\t    var result = '';\r\n\t\t    while (true) {\r\n\t\t        var remDiv = rem.div(radixToPower),\r\n\t\t            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n\t\t            digits = intval.toString(radix);\r\n\t\t        rem = remDiv;\r\n\t\t        if (rem.isZero())\r\n\t\t            return digits + result;\r\n\t\t        else {\r\n\t\t            while (digits.length < 6)\r\n\t\t                digits = '0' + digits;\r\n\t\t            result = '' + digits + result;\r\n\t\t        }\r\n\t\t    }\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the high 32 bits as a signed integer.\r\n\t\t * @returns {number} Signed high bits\r\n\t\t */\r\n\t\tLongPrototype.getHighBits = function getHighBits() {\r\n\t\t    return this.high;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the high 32 bits as an unsigned integer.\r\n\t\t * @returns {number} Unsigned high bits\r\n\t\t */\r\n\t\tLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n\t\t    return this.high >>> 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the low 32 bits as a signed integer.\r\n\t\t * @returns {number} Signed low bits\r\n\t\t */\r\n\t\tLongPrototype.getLowBits = function getLowBits() {\r\n\t\t    return this.low;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the low 32 bits as an unsigned integer.\r\n\t\t * @returns {number} Unsigned low bits\r\n\t\t */\r\n\t\tLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n\t\t    return this.low >>> 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the number of bits needed to represent the absolute value of this Long.\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n\t\t    if (this.isNegative()) // Unsigned Longs are never negative\r\n\t\t        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n\t\t    var val = this.high != 0 ? this.high : this.low;\r\n\t\t    for (var bit = 31; bit > 0; bit--)\r\n\t\t        if ((val & (1 << bit)) != 0)\r\n\t\t            break;\r\n\t\t    return this.high != 0 ? bit + 33 : bit + 1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals zero.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isZero = function isZero() {\r\n\t\t    return this.high === 0 && this.low === 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is negative.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isNegative = function isNegative() {\r\n\t\t    return !this.unsigned && this.high < 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is positive.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isPositive = function isPositive() {\r\n\t\t    return this.unsigned || this.high >= 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is odd.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isOdd = function isOdd() {\r\n\t\t    return (this.low & 1) === 1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is even.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isEven = function isEven() {\r\n\t\t    return (this.low & 1) === 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.equals = function equals(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n\t\t        return false;\r\n\t\t    return this.high === other.high && this.low === other.low;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.eq = LongPrototype.equals;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value differs from the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.notEquals = function notEquals(other) {\r\n\t\t    return !this.eq(/* validates */ other);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lessThan = function lessThan(other) {\r\n\t\t    return this.comp(/* validates */ other) < 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than or equal the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n\t\t    return this.comp(/* validates */ other) <= 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.greaterThan = function greaterThan(other) {\r\n\t\t    return this.comp(/* validates */ other) > 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than or equal the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n\t\t    return this.comp(/* validates */ other) >= 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Compares this Long's value with the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n\t\t *  if the given one is greater\r\n\t\t */\r\n\t\tLongPrototype.compare = function compare(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    if (this.eq(other))\r\n\t\t        return 0;\r\n\t\t    var thisNeg = this.isNegative(),\r\n\t\t        otherNeg = other.isNegative();\r\n\t\t    if (thisNeg && !otherNeg)\r\n\t\t        return -1;\r\n\t\t    if (!thisNeg && otherNeg)\r\n\t\t        return 1;\r\n\t\t    // At this point the sign bits are the same\r\n\t\t    if (!this.unsigned)\r\n\t\t        return this.sub(other).isNegative() ? -1 : 1;\r\n\t\t    // Both are positive if at least one is unsigned\r\n\t\t    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n\t\t *  if the given one is greater\r\n\t\t */\r\n\t\tLongPrototype.comp = LongPrototype.compare;\r\n\r\n\t\t/**\r\n\t\t * Negates this Long's value.\r\n\t\t * @returns {!Long} Negated Long\r\n\t\t */\r\n\t\tLongPrototype.negate = function negate() {\r\n\t\t    if (!this.unsigned && this.eq(MIN_VALUE))\r\n\t\t        return MIN_VALUE;\r\n\t\t    return this.not().add(ONE);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n\t\t * @function\r\n\t\t * @returns {!Long} Negated Long\r\n\t\t */\r\n\t\tLongPrototype.neg = LongPrototype.negate;\r\n\r\n\t\t/**\r\n\t\t * Returns the sum of this and the specified Long.\r\n\t\t * @param {!Long|number|string} addend Addend\r\n\t\t * @returns {!Long} Sum\r\n\t\t */\r\n\t\tLongPrototype.add = function add(addend) {\r\n\t\t    if (!isLong(addend))\r\n\t\t        addend = fromValue(addend);\r\n\r\n\t\t    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n\t\t    var a48 = this.high >>> 16;\r\n\t\t    var a32 = this.high & 0xFFFF;\r\n\t\t    var a16 = this.low >>> 16;\r\n\t\t    var a00 = this.low & 0xFFFF;\r\n\r\n\t\t    var b48 = addend.high >>> 16;\r\n\t\t    var b32 = addend.high & 0xFFFF;\r\n\t\t    var b16 = addend.low >>> 16;\r\n\t\t    var b00 = addend.low & 0xFFFF;\r\n\r\n\t\t    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n\t\t    c00 += a00 + b00;\r\n\t\t    c16 += c00 >>> 16;\r\n\t\t    c00 &= 0xFFFF;\r\n\t\t    c16 += a16 + b16;\r\n\t\t    c32 += c16 >>> 16;\r\n\t\t    c16 &= 0xFFFF;\r\n\t\t    c32 += a32 + b32;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c48 += a48 + b48;\r\n\t\t    c48 &= 0xFFFF;\r\n\t\t    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the difference of this and the specified Long.\r\n\t\t * @param {!Long|number|string} subtrahend Subtrahend\r\n\t\t * @returns {!Long} Difference\r\n\t\t */\r\n\t\tLongPrototype.subtract = function subtract(subtrahend) {\r\n\t\t    if (!isLong(subtrahend))\r\n\t\t        subtrahend = fromValue(subtrahend);\r\n\t\t    return this.add(subtrahend.neg());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} subtrahend Subtrahend\r\n\t\t * @returns {!Long} Difference\r\n\t\t */\r\n\t\tLongPrototype.sub = LongPrototype.subtract;\r\n\r\n\t\t/**\r\n\t\t * Returns the product of this and the specified Long.\r\n\t\t * @param {!Long|number|string} multiplier Multiplier\r\n\t\t * @returns {!Long} Product\r\n\t\t */\r\n\t\tLongPrototype.multiply = function multiply(multiplier) {\r\n\t\t    if (this.isZero())\r\n\t\t        return ZERO;\r\n\t\t    if (!isLong(multiplier))\r\n\t\t        multiplier = fromValue(multiplier);\r\n\r\n\t\t    // use wasm support if present\r\n\t\t    if (wasm) {\r\n\t\t        var low = wasm.mul(this.low,\r\n\t\t                           this.high,\r\n\t\t                           multiplier.low,\r\n\t\t                           multiplier.high);\r\n\t\t        return fromBits(low, wasm.get_high(), this.unsigned);\r\n\t\t    }\r\n\r\n\t\t    if (multiplier.isZero())\r\n\t\t        return ZERO;\r\n\t\t    if (this.eq(MIN_VALUE))\r\n\t\t        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n\t\t    if (multiplier.eq(MIN_VALUE))\r\n\t\t        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n\t\t    if (this.isNegative()) {\r\n\t\t        if (multiplier.isNegative())\r\n\t\t            return this.neg().mul(multiplier.neg());\r\n\t\t        else\r\n\t\t            return this.neg().mul(multiplier).neg();\r\n\t\t    } else if (multiplier.isNegative())\r\n\t\t        return this.mul(multiplier.neg()).neg();\r\n\r\n\t\t    // If both longs are small, use float multiplication\r\n\t\t    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n\t\t        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n\t\t    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n\t\t    // We can skip products that would overflow.\r\n\r\n\t\t    var a48 = this.high >>> 16;\r\n\t\t    var a32 = this.high & 0xFFFF;\r\n\t\t    var a16 = this.low >>> 16;\r\n\t\t    var a00 = this.low & 0xFFFF;\r\n\r\n\t\t    var b48 = multiplier.high >>> 16;\r\n\t\t    var b32 = multiplier.high & 0xFFFF;\r\n\t\t    var b16 = multiplier.low >>> 16;\r\n\t\t    var b00 = multiplier.low & 0xFFFF;\r\n\r\n\t\t    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n\t\t    c00 += a00 * b00;\r\n\t\t    c16 += c00 >>> 16;\r\n\t\t    c00 &= 0xFFFF;\r\n\t\t    c16 += a16 * b00;\r\n\t\t    c32 += c16 >>> 16;\r\n\t\t    c16 &= 0xFFFF;\r\n\t\t    c16 += a00 * b16;\r\n\t\t    c32 += c16 >>> 16;\r\n\t\t    c16 &= 0xFFFF;\r\n\t\t    c32 += a32 * b00;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c32 += a16 * b16;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c32 += a00 * b32;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n\t\t    c48 &= 0xFFFF;\r\n\t\t    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} multiplier Multiplier\r\n\t\t * @returns {!Long} Product\r\n\t\t */\r\n\t\tLongPrototype.mul = LongPrototype.multiply;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n\t\t *  unsigned if this Long is unsigned.\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Quotient\r\n\t\t */\r\n\t\tLongPrototype.divide = function divide(divisor) {\r\n\t\t    if (!isLong(divisor))\r\n\t\t        divisor = fromValue(divisor);\r\n\t\t    if (divisor.isZero())\r\n\t\t        throw Error('division by zero');\r\n\r\n\t\t    // use wasm support if present\r\n\t\t    if (wasm) {\r\n\t\t        // guard against signed division overflow: the largest\r\n\t\t        // negative number / -1 would be 1 larger than the largest\r\n\t\t        // positive number, due to two's complement.\r\n\t\t        if (!this.unsigned &&\r\n\t\t            this.high === -0x80000000 &&\r\n\t\t            divisor.low === -1 && divisor.high === -1) {\r\n\t\t            // be consistent with non-wasm code path\r\n\t\t            return this;\r\n\t\t        }\r\n\t\t        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n\t\t            this.low,\r\n\t\t            this.high,\r\n\t\t            divisor.low,\r\n\t\t            divisor.high\r\n\t\t        );\r\n\t\t        return fromBits(low, wasm.get_high(), this.unsigned);\r\n\t\t    }\r\n\r\n\t\t    if (this.isZero())\r\n\t\t        return this.unsigned ? UZERO : ZERO;\r\n\t\t    var approx, rem, res;\r\n\t\t    if (!this.unsigned) {\r\n\t\t        // This section is only relevant for signed longs and is derived from the\r\n\t\t        // closure library as a whole.\r\n\t\t        if (this.eq(MIN_VALUE)) {\r\n\t\t            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n\t\t                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n\t\t            else if (divisor.eq(MIN_VALUE))\r\n\t\t                return ONE;\r\n\t\t            else {\r\n\t\t                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n\t\t                var halfThis = this.shr(1);\r\n\t\t                approx = halfThis.div(divisor).shl(1);\r\n\t\t                if (approx.eq(ZERO)) {\r\n\t\t                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n\t\t                } else {\r\n\t\t                    rem = this.sub(divisor.mul(approx));\r\n\t\t                    res = approx.add(rem.div(divisor));\r\n\t\t                    return res;\r\n\t\t                }\r\n\t\t            }\r\n\t\t        } else if (divisor.eq(MIN_VALUE))\r\n\t\t            return this.unsigned ? UZERO : ZERO;\r\n\t\t        if (this.isNegative()) {\r\n\t\t            if (divisor.isNegative())\r\n\t\t                return this.neg().div(divisor.neg());\r\n\t\t            return this.neg().div(divisor).neg();\r\n\t\t        } else if (divisor.isNegative())\r\n\t\t            return this.div(divisor.neg()).neg();\r\n\t\t        res = ZERO;\r\n\t\t    } else {\r\n\t\t        // The algorithm below has not been made for unsigned longs. It's therefore\r\n\t\t        // required to take special care of the MSB prior to running it.\r\n\t\t        if (!divisor.unsigned)\r\n\t\t            divisor = divisor.toUnsigned();\r\n\t\t        if (divisor.gt(this))\r\n\t\t            return UZERO;\r\n\t\t        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n\t\t            return UONE;\r\n\t\t        res = UZERO;\r\n\t\t    }\r\n\r\n\t\t    // Repeat the following until the remainder is less than other:  find a\r\n\t\t    // floating-point that approximates remainder / other *from below*, add this\r\n\t\t    // into the result, and subtract it from the remainder.  It is critical that\r\n\t\t    // the approximate value is less than or equal to the real value so that the\r\n\t\t    // remainder never becomes negative.\r\n\t\t    rem = this;\r\n\t\t    while (rem.gte(divisor)) {\r\n\t\t        // Approximate the result of division. This may be a little greater or\r\n\t\t        // smaller than the actual value.\r\n\t\t        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n\t\t        // We will tweak the approximate result by changing it in the 48-th digit or\r\n\t\t        // the smallest non-fractional digit, whichever is larger.\r\n\t\t        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n\t\t            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n\t\t        // Decrease the approximation until it is smaller than the remainder.  Note\r\n\t\t        // that if it is too large, the product overflows and is negative.\r\n\t\t            approxRes = fromNumber(approx),\r\n\t\t            approxRem = approxRes.mul(divisor);\r\n\t\t        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n\t\t            approx -= delta;\r\n\t\t            approxRes = fromNumber(approx, this.unsigned);\r\n\t\t            approxRem = approxRes.mul(divisor);\r\n\t\t        }\r\n\r\n\t\t        // We know the answer can't be zero... and actually, zero would cause\r\n\t\t        // infinite recursion since we would make no progress.\r\n\t\t        if (approxRes.isZero())\r\n\t\t            approxRes = ONE;\r\n\r\n\t\t        res = res.add(approxRes);\r\n\t\t        rem = rem.sub(approxRem);\r\n\t\t    }\r\n\t\t    return res;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Quotient\r\n\t\t */\r\n\t\tLongPrototype.div = LongPrototype.divide;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long modulo the specified.\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Remainder\r\n\t\t */\r\n\t\tLongPrototype.modulo = function modulo(divisor) {\r\n\t\t    if (!isLong(divisor))\r\n\t\t        divisor = fromValue(divisor);\r\n\r\n\t\t    // use wasm support if present\r\n\t\t    if (wasm) {\r\n\t\t        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n\t\t            this.low,\r\n\t\t            this.high,\r\n\t\t            divisor.low,\r\n\t\t            divisor.high\r\n\t\t        );\r\n\t\t        return fromBits(low, wasm.get_high(), this.unsigned);\r\n\t\t    }\r\n\r\n\t\t    return this.sub(this.div(divisor).mul(divisor));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Remainder\r\n\t\t */\r\n\t\tLongPrototype.mod = LongPrototype.modulo;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Remainder\r\n\t\t */\r\n\t\tLongPrototype.rem = LongPrototype.modulo;\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise NOT of this Long.\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.not = function not() {\r\n\t\t    return fromBits(~this.low, ~this.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise AND of this Long and the specified.\r\n\t\t * @param {!Long|number|string} other Other Long\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.and = function and(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise OR of this Long and the specified.\r\n\t\t * @param {!Long|number|string} other Other Long\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.or = function or(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise XOR of this Long and the given one.\r\n\t\t * @param {!Long|number|string} other Other Long\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.xor = function xor(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits shifted to the left by the given amount.\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n\t\t    if (isLong(numBits))\r\n\t\t        numBits = numBits.toInt();\r\n\t\t    if ((numBits &= 63) === 0)\r\n\t\t        return this;\r\n\t\t    else if (numBits < 32)\r\n\t\t        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n\t\t    else\r\n\t\t        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shiftRight = function shiftRight(numBits) {\r\n\t\t    if (isLong(numBits))\r\n\t\t        numBits = numBits.toInt();\r\n\t\t    if ((numBits &= 63) === 0)\r\n\t\t        return this;\r\n\t\t    else if (numBits < 32)\r\n\t\t        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n\t\t    else\r\n\t\t        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits logically shifted to the right by the given amount.\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n\t\t    if (isLong(numBits))\r\n\t\t        numBits = numBits.toInt();\r\n\t\t    numBits &= 63;\r\n\t\t    if (numBits === 0)\r\n\t\t        return this;\r\n\t\t    else {\r\n\t\t        var high = this.high;\r\n\t\t        if (numBits < 32) {\r\n\t\t            var low = this.low;\r\n\t\t            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n\t\t        } else if (numBits === 32)\r\n\t\t            return fromBits(high, 0, this.unsigned);\r\n\t\t        else\r\n\t\t            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n\t\t    }\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to signed.\r\n\t\t * @returns {!Long} Signed long\r\n\t\t */\r\n\t\tLongPrototype.toSigned = function toSigned() {\r\n\t\t    if (!this.unsigned)\r\n\t\t        return this;\r\n\t\t    return fromBits(this.low, this.high, false);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to unsigned.\r\n\t\t * @returns {!Long} Unsigned long\r\n\t\t */\r\n\t\tLongPrototype.toUnsigned = function toUnsigned() {\r\n\t\t    if (this.unsigned)\r\n\t\t        return this;\r\n\t\t    return fromBits(this.low, this.high, true);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to its byte representation.\r\n\t\t * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n\t\t * @returns {!Array.<number>} Byte representation\r\n\t\t */\r\n\t\tLongPrototype.toBytes = function toBytes(le) {\r\n\t\t    return le ? this.toBytesLE() : this.toBytesBE();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to its little endian byte representation.\r\n\t\t * @returns {!Array.<number>} Little endian byte representation\r\n\t\t */\r\n\t\tLongPrototype.toBytesLE = function toBytesLE() {\r\n\t\t    var hi = this.high,\r\n\t\t        lo = this.low;\r\n\t\t    return [\r\n\t\t        lo        & 0xff,\r\n\t\t        lo >>>  8 & 0xff,\r\n\t\t        lo >>> 16 & 0xff,\r\n\t\t        lo >>> 24       ,\r\n\t\t        hi        & 0xff,\r\n\t\t        hi >>>  8 & 0xff,\r\n\t\t        hi >>> 16 & 0xff,\r\n\t\t        hi >>> 24\r\n\t\t    ];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to its big endian byte representation.\r\n\t\t * @returns {!Array.<number>} Big endian byte representation\r\n\t\t */\r\n\t\tLongPrototype.toBytesBE = function toBytesBE() {\r\n\t\t    var hi = this.high,\r\n\t\t        lo = this.low;\r\n\t\t    return [\r\n\t\t        hi >>> 24       ,\r\n\t\t        hi >>> 16 & 0xff,\r\n\t\t        hi >>>  8 & 0xff,\r\n\t\t        hi        & 0xff,\r\n\t\t        lo >>> 24       ,\r\n\t\t        lo >>> 16 & 0xff,\r\n\t\t        lo >>>  8 & 0xff,\r\n\t\t        lo        & 0xff\r\n\t\t    ];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Creates a Long from its byte representation.\r\n\t\t * @param {!Array.<number>} bytes Byte representation\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n\t\t * @returns {Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n\t\t    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Creates a Long from its little endian byte representation.\r\n\t\t * @param {!Array.<number>} bytes Little endian byte representation\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n\t\t    return new Long(\r\n\t\t        bytes[0]       |\r\n\t\t        bytes[1] <<  8 |\r\n\t\t        bytes[2] << 16 |\r\n\t\t        bytes[3] << 24,\r\n\t\t        bytes[4]       |\r\n\t\t        bytes[5] <<  8 |\r\n\t\t        bytes[6] << 16 |\r\n\t\t        bytes[7] << 24,\r\n\t\t        unsigned\r\n\t\t    );\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Creates a Long from its big endian byte representation.\r\n\t\t * @param {!Array.<number>} bytes Big endian byte representation\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n\t\t    return new Long(\r\n\t\t        bytes[4] << 24 |\r\n\t\t        bytes[5] << 16 |\r\n\t\t        bytes[6] <<  8 |\r\n\t\t        bytes[7],\r\n\t\t        bytes[0] << 24 |\r\n\t\t        bytes[1] << 16 |\r\n\t\t        bytes[2] <<  8 |\r\n\t\t        bytes[3],\r\n\t\t        unsigned\r\n\t\t    );\r\n\t\t};\n\t\treturn long;\n\t}\n\n\tvar longExports = requireLong();\n\n\t/* eslint-disable */\n\tfunction createBaseColor3() {\n\t    return { r: 0, g: 0, b: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Color3 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.r !== 0) {\n\t            writer.uint32(13).float(message.r);\n\t        }\n\t        if (message.g !== 0) {\n\t            writer.uint32(21).float(message.g);\n\t        }\n\t        if (message.b !== 0) {\n\t            writer.uint32(29).float(message.b);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseColor3();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.r = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.g = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.b = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBAvatarShape() {\n\t    return {\n\t        id: '',\n\t        name: undefined,\n\t        bodyShape: undefined,\n\t        skinColor: undefined,\n\t        hairColor: undefined,\n\t        eyeColor: undefined,\n\t        expressionTriggerId: undefined,\n\t        expressionTriggerTimestamp: undefined,\n\t        talking: undefined,\n\t        wearables: [],\n\t        emotes: []\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.id !== '') {\n\t            writer.uint32(10).string(message.id);\n\t        }\n\t        if (message.name !== undefined) {\n\t            writer.uint32(18).string(message.name);\n\t        }\n\t        if (message.bodyShape !== undefined) {\n\t            writer.uint32(26).string(message.bodyShape);\n\t        }\n\t        if (message.skinColor !== undefined) {\n\t            Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.hairColor !== undefined) {\n\t            Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.eyeColor !== undefined) {\n\t            Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.expressionTriggerId !== undefined) {\n\t            writer.uint32(58).string(message.expressionTriggerId);\n\t        }\n\t        if (message.expressionTriggerTimestamp !== undefined) {\n\t            writer.uint32(64).int64(message.expressionTriggerTimestamp);\n\t        }\n\t        if (message.talking !== undefined) {\n\t            writer.uint32(72).bool(message.talking);\n\t        }\n\t        for (const v of message.wearables) {\n\t            writer.uint32(82).string(v);\n\t        }\n\t        for (const v of message.emotes) {\n\t            writer.uint32(90).string(v);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.id = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.name = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.bodyShape = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.skinColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.hairColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.eyeColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.expressionTriggerId = reader.string();\n\t                    break;\n\t                case 8:\n\t                    message.expressionTriggerTimestamp = longToNumber$1(reader.int64());\n\t                    break;\n\t                case 9:\n\t                    message.talking = reader.bool();\n\t                    break;\n\t                case 10:\n\t                    message.wearables.push(reader.string());\n\t                    break;\n\t                case 11:\n\t                    message.emotes.push(reader.string());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tvar globalThis$2 = (() => {\n\t    if (typeof globalThis$2 !== 'undefined')\n\t        return globalThis$2;\n\t    if (typeof self !== 'undefined')\n\t        return self;\n\t    if (typeof window !== 'undefined')\n\t        return window;\n\t    if (typeof global !== 'undefined')\n\t        return global;\n\t    throw 'Unable to locate global object';\n\t})();\n\tfunction longToNumber$1(long) {\n\t    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n\t        throw new globalThis$2.Error('Value is larger than Number.MAX_SAFE_INTEGER');\n\t    }\n\t    return long.toNumber();\n\t}\n\tif (minimalExports.util.Long !== longExports) {\n\t    minimalExports.util.Long = longExports;\n\t    minimalExports.configure();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$s = 1080;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBBillboard() {\n\t    return { x: undefined, y: undefined, z: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBBillboard = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.x !== undefined) {\n\t            writer.uint32(8).bool(message.x);\n\t        }\n\t        if (message.y !== undefined) {\n\t            writer.uint32(16).bool(message.y);\n\t        }\n\t        if (message.z !== undefined) {\n\t            writer.uint32(24).bool(message.z);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBBillboard();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.x = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.y = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.z = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$r = 1090;\n\t/**\n\t * @internal\n\t */\n\tconst BillboardSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBBillboard.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBBillboard.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBBillboard.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBBoxShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBBoxShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        writer.uint32(34).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBBoxShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$q = 1013;\n\t/**\n\t * @internal\n\t */\n\tconst BoxShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBBoxShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBBoxShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBBoxShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBCameraMode() {\n\t    return { mode: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCameraMode = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.mode !== 0) {\n\t            writer.uint32(8).int32(message.mode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCameraMode();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.mode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$p = 1072;\n\t/**\n\t * @internal\n\t */\n\tconst CameraModeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCameraMode.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCameraMode.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCameraMode.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBCameraModeArea() {\n\t    return { area: undefined, mode: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCameraModeArea = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.area !== undefined) {\n\t            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.mode !== 0) {\n\t            writer.uint32(16).int32(message.mode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCameraModeArea();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.area = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.mode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$o = 1071;\n\t/**\n\t * @internal\n\t */\n\tconst CameraModeAreaSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCameraModeArea.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCameraModeArea.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCameraModeArea.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBCylinderShape() {\n\t    return {\n\t        withCollisions: undefined,\n\t        isPointerBlocker: undefined,\n\t        visible: undefined,\n\t        radiusTop: undefined,\n\t        radiusBottom: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCylinderShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.radiusTop !== undefined) {\n\t            writer.uint32(37).float(message.radiusTop);\n\t        }\n\t        if (message.radiusBottom !== undefined) {\n\t            writer.uint32(45).float(message.radiusBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCylinderShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.radiusTop = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.radiusBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$n = 1016;\n\t/**\n\t * @internal\n\t */\n\tconst CylinderShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCylinderShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCylinderShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCylinderShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBGltfContainer() {\n\t    return { src: '' };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBGltfContainer = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.src !== '') {\n\t            writer.uint32(10).string(message.src);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBGltfContainer();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.src = reader.string();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$m = 1041;\n\t/**\n\t * @internal\n\t */\n\tconst GltfContainerSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBGltfContainer.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBGltfContainer.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBGltfContainer.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar TextureWrapMode;\n\t(function (TextureWrapMode) {\n\t    TextureWrapMode[TextureWrapMode[\"Repeat\"] = 0] = \"Repeat\";\n\t    TextureWrapMode[TextureWrapMode[\"Clamp\"] = 1] = \"Clamp\";\n\t    TextureWrapMode[TextureWrapMode[\"Mirror\"] = 2] = \"Mirror\";\n\t    TextureWrapMode[TextureWrapMode[\"MirrorOnce\"] = 3] = \"MirrorOnce\";\n\t    TextureWrapMode[TextureWrapMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(TextureWrapMode || (TextureWrapMode = {}));\n\tvar FilterMode;\n\t(function (FilterMode) {\n\t    FilterMode[FilterMode[\"Point\"] = 0] = \"Point\";\n\t    FilterMode[FilterMode[\"Bilinear\"] = 1] = \"Bilinear\";\n\t    FilterMode[FilterMode[\"Trilinear\"] = 2] = \"Trilinear\";\n\t    FilterMode[FilterMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(FilterMode || (FilterMode = {}));\n\tvar TransparencyMode;\n\t(function (TransparencyMode) {\n\t    TransparencyMode[TransparencyMode[\"Opaque\"] = 0] = \"Opaque\";\n\t    TransparencyMode[TransparencyMode[\"AlphaTest\"] = 1] = \"AlphaTest\";\n\t    TransparencyMode[TransparencyMode[\"AlphaBlend\"] = 2] = \"AlphaBlend\";\n\t    TransparencyMode[TransparencyMode[\"AlphaTestAndAlphaBlend\"] = 3] = \"AlphaTestAndAlphaBlend\";\n\t    TransparencyMode[TransparencyMode[\"Auto\"] = 4] = \"Auto\";\n\t    TransparencyMode[TransparencyMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(TransparencyMode || (TransparencyMode = {}));\n\tfunction createBasePBMaterial() {\n\t    return {\n\t        texture: undefined,\n\t        alphaTest: undefined,\n\t        castShadows: undefined,\n\t        alphaTexture: undefined,\n\t        emissiveTexture: undefined,\n\t        bumpTexture: undefined,\n\t        albedoColor: undefined,\n\t        emissiveColor: undefined,\n\t        reflectivityColor: undefined,\n\t        transparencyMode: undefined,\n\t        metallic: undefined,\n\t        roughness: undefined,\n\t        glossiness: undefined,\n\t        specularIntensity: undefined,\n\t        emissiveIntensity: undefined,\n\t        directIntensity: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMaterial = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.texture !== undefined) {\n\t            PBMaterial_Texture.encode(message.texture, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.alphaTest !== undefined) {\n\t            writer.uint32(21).float(message.alphaTest);\n\t        }\n\t        if (message.castShadows !== undefined) {\n\t            writer.uint32(24).bool(message.castShadows);\n\t        }\n\t        if (message.alphaTexture !== undefined) {\n\t            PBMaterial_Texture.encode(message.alphaTexture, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.emissiveTexture !== undefined) {\n\t            PBMaterial_Texture.encode(message.emissiveTexture, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.bumpTexture !== undefined) {\n\t            PBMaterial_Texture.encode(message.bumpTexture, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.albedoColor !== undefined) {\n\t            Color3.encode(message.albedoColor, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.emissiveColor !== undefined) {\n\t            Color3.encode(message.emissiveColor, writer.uint32(66).fork()).ldelim();\n\t        }\n\t        if (message.reflectivityColor !== undefined) {\n\t            Color3.encode(message.reflectivityColor, writer.uint32(74).fork()).ldelim();\n\t        }\n\t        if (message.transparencyMode !== undefined) {\n\t            writer.uint32(80).int32(message.transparencyMode);\n\t        }\n\t        if (message.metallic !== undefined) {\n\t            writer.uint32(93).float(message.metallic);\n\t        }\n\t        if (message.roughness !== undefined) {\n\t            writer.uint32(101).float(message.roughness);\n\t        }\n\t        if (message.glossiness !== undefined) {\n\t            writer.uint32(109).float(message.glossiness);\n\t        }\n\t        if (message.specularIntensity !== undefined) {\n\t            writer.uint32(117).float(message.specularIntensity);\n\t        }\n\t        if (message.emissiveIntensity !== undefined) {\n\t            writer.uint32(125).float(message.emissiveIntensity);\n\t        }\n\t        if (message.directIntensity !== undefined) {\n\t            writer.uint32(133).float(message.directIntensity);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMaterial();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.texture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.alphaTest = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.castShadows = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.alphaTexture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.emissiveTexture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.bumpTexture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.albedoColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.emissiveColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 9:\n\t                    message.reflectivityColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 10:\n\t                    message.transparencyMode = reader.int32();\n\t                    break;\n\t                case 11:\n\t                    message.metallic = reader.float();\n\t                    break;\n\t                case 12:\n\t                    message.roughness = reader.float();\n\t                    break;\n\t                case 13:\n\t                    message.glossiness = reader.float();\n\t                    break;\n\t                case 14:\n\t                    message.specularIntensity = reader.float();\n\t                    break;\n\t                case 15:\n\t                    message.emissiveIntensity = reader.float();\n\t                    break;\n\t                case 16:\n\t                    message.directIntensity = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMaterial_Texture() {\n\t    return { src: '', wrapMode: undefined, filterMode: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMaterial_Texture = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.src !== '') {\n\t            writer.uint32(10).string(message.src);\n\t        }\n\t        if (message.wrapMode !== undefined) {\n\t            writer.uint32(16).int32(message.wrapMode);\n\t        }\n\t        if (message.filterMode !== undefined) {\n\t            writer.uint32(24).int32(message.filterMode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMaterial_Texture();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.src = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.wrapMode = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.filterMode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$l = 1017;\n\t/**\n\t * @internal\n\t */\n\tconst MaterialSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBMaterial.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBMaterial.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBMaterial.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar ColliderLayer;\n\t(function (ColliderLayer) {\n\t    ColliderLayer[ColliderLayer[\"None\"] = 0] = \"None\";\n\t    ColliderLayer[ColliderLayer[\"Pointer\"] = 1] = \"Pointer\";\n\t    ColliderLayer[ColliderLayer[\"Physics\"] = 2] = \"Physics\";\n\t    ColliderLayer[ColliderLayer[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(ColliderLayer || (ColliderLayer = {}));\n\tfunction createBasePBMeshCollider() {\n\t    return { collisionMask: undefined, box: undefined, sphere: undefined, cylinder: undefined, plane: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshCollider = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.collisionMask !== undefined) {\n\t            writer.uint32(8).int32(message.collisionMask);\n\t        }\n\t        if (message.box !== undefined) {\n\t            PBMeshCollider_BoxMesh.encode(message.box, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.sphere !== undefined) {\n\t            PBMeshCollider_SphereMesh.encode(message.sphere, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        if (message.cylinder !== undefined) {\n\t            PBMeshCollider_CylinderMesh.encode(message.cylinder, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.plane !== undefined) {\n\t            PBMeshCollider_PlaneMesh.encode(message.plane, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshCollider();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.collisionMask = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.box = PBMeshCollider_BoxMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.sphere = PBMeshCollider_SphereMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.cylinder = PBMeshCollider_CylinderMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.plane = PBMeshCollider_PlaneMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshCollider_BoxMesh() {\n\t    return {};\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshCollider_BoxMesh = {\n\t    encode(_, writer = minimalExports.Writer.create()) {\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshCollider_BoxMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshCollider_CylinderMesh() {\n\t    return { radiusTop: undefined, radiusBottom: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshCollider_CylinderMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.radiusTop !== undefined) {\n\t            writer.uint32(13).float(message.radiusTop);\n\t        }\n\t        if (message.radiusBottom !== undefined) {\n\t            writer.uint32(21).float(message.radiusBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshCollider_CylinderMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.radiusTop = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.radiusBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshCollider_PlaneMesh() {\n\t    return {};\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshCollider_PlaneMesh = {\n\t    encode(_, writer = minimalExports.Writer.create()) {\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshCollider_PlaneMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshCollider_SphereMesh() {\n\t    return {};\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshCollider_SphereMesh = {\n\t    encode(_, writer = minimalExports.Writer.create()) {\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshCollider_SphereMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$k = 1019;\n\t/**\n\t * @internal\n\t */\n\tconst MeshColliderSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBMeshCollider.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBMeshCollider.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBMeshCollider.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBMeshRenderer() {\n\t    return { box: undefined, sphere: undefined, cylinder: undefined, plane: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.box !== undefined) {\n\t            PBMeshRenderer_BoxMesh.encode(message.box, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.sphere !== undefined) {\n\t            PBMeshRenderer_SphereMesh.encode(message.sphere, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.cylinder !== undefined) {\n\t            PBMeshRenderer_CylinderMesh.encode(message.cylinder, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        if (message.plane !== undefined) {\n\t            PBMeshRenderer_PlaneMesh.encode(message.plane, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.box = PBMeshRenderer_BoxMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.sphere = PBMeshRenderer_SphereMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.cylinder = PBMeshRenderer_CylinderMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.plane = PBMeshRenderer_PlaneMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_BoxMesh() {\n\t    return { uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_BoxMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        writer.uint32(10).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_BoxMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_CylinderMesh() {\n\t    return { radiusTop: undefined, radiusBottom: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_CylinderMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.radiusTop !== undefined) {\n\t            writer.uint32(13).float(message.radiusTop);\n\t        }\n\t        if (message.radiusBottom !== undefined) {\n\t            writer.uint32(21).float(message.radiusBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_CylinderMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.radiusTop = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.radiusBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_PlaneMesh() {\n\t    return { uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_PlaneMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        writer.uint32(10).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_PlaneMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_SphereMesh() {\n\t    return {};\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_SphereMesh = {\n\t    encode(_, writer = minimalExports.Writer.create()) {\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_SphereMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$j = 1018;\n\t/**\n\t * @internal\n\t */\n\tconst MeshRendererSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBMeshRenderer.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBMeshRenderer.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBMeshRenderer.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar PBNFTShape_PictureFrameStyle;\n\t(function (PBNFTShape_PictureFrameStyle) {\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Classic\"] = 0] = \"Classic\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Baroque_Ornament\"] = 1] = \"Baroque_Ornament\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Diamond_Ornament\"] = 2] = \"Diamond_Ornament\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Minimal_Wide\"] = 3] = \"Minimal_Wide\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Minimal_Grey\"] = 4] = \"Minimal_Grey\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Blocky\"] = 5] = \"Blocky\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Gold_Edges\"] = 6] = \"Gold_Edges\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Gold_Carved\"] = 7] = \"Gold_Carved\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Gold_Wide\"] = 8] = \"Gold_Wide\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Gold_Rounded\"] = 9] = \"Gold_Rounded\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Metal_Medium\"] = 10] = \"Metal_Medium\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Metal_Wide\"] = 11] = \"Metal_Wide\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Metal_Slim\"] = 12] = \"Metal_Slim\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Metal_Rounded\"] = 13] = \"Metal_Rounded\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Pins\"] = 14] = \"Pins\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Minimal_Black\"] = 15] = \"Minimal_Black\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Minimal_White\"] = 16] = \"Minimal_White\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Tape\"] = 17] = \"Tape\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Wood_Slim\"] = 18] = \"Wood_Slim\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Wood_Wide\"] = 19] = \"Wood_Wide\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Wood_Twigs\"] = 20] = \"Wood_Twigs\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"Canvas\"] = 21] = \"Canvas\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"None\"] = 22] = \"None\";\n\t    PBNFTShape_PictureFrameStyle[PBNFTShape_PictureFrameStyle[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(PBNFTShape_PictureFrameStyle || (PBNFTShape_PictureFrameStyle = {}));\n\tfunction createBasePBNFTShape() {\n\t    return { src: '', style: undefined, color: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBNFTShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.src !== '') {\n\t            writer.uint32(10).string(message.src);\n\t        }\n\t        if (message.style !== undefined) {\n\t            writer.uint32(16).int32(message.style);\n\t        }\n\t        if (message.color !== undefined) {\n\t            Color3.encode(message.color, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBNFTShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.src = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.style = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.color = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$i = 1040;\n\t/**\n\t * @internal\n\t */\n\tconst NFTShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBNFTShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBNFTShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBNFTShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerDown() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerDown = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerDown();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$h = 1060;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerDownSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerDown.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerDown.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerDown.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerDownResult() {\n\t    return {\n\t        button: 0,\n\t        meshName: '',\n\t        origin: undefined,\n\t        direction: undefined,\n\t        point: undefined,\n\t        normal: undefined,\n\t        distance: 0,\n\t        timestamp: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerDownResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(16).int32(message.button);\n\t        }\n\t        if (message.meshName !== '') {\n\t            writer.uint32(26).string(message.meshName);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.point !== undefined) {\n\t            Vector3.encode(message.point, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.normal !== undefined) {\n\t            Vector3.encode(message.normal, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.distance !== 0) {\n\t            writer.uint32(69).float(message.distance);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(72).int32(message.timestamp);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerDownResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 2:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.point = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.normal = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.distance = reader.float();\n\t                    break;\n\t                case 9:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$g = 1066;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerDownResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerDownResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerDownResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerDownResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerUp() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerUp = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerUp();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$f = 1061;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerUpSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerUp.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerUp.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerUp.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerUpResult() {\n\t    return {\n\t        button: 0,\n\t        meshName: '',\n\t        origin: undefined,\n\t        direction: undefined,\n\t        point: undefined,\n\t        normal: undefined,\n\t        distance: 0,\n\t        timestamp: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerUpResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(16).int32(message.button);\n\t        }\n\t        if (message.meshName !== '') {\n\t            writer.uint32(26).string(message.meshName);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.point !== undefined) {\n\t            Vector3.encode(message.point, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.normal !== undefined) {\n\t            Vector3.encode(message.normal, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.distance !== 0) {\n\t            writer.uint32(69).float(message.distance);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(72).int32(message.timestamp);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerUpResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 2:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.point = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.normal = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.distance = reader.float();\n\t                    break;\n\t                case 9:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$e = 1065;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerUpResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerUpResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerUpResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerUpResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBPlaneShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPlaneShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        writer.uint32(34).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPlaneShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$d = 1014;\n\t/**\n\t * @internal\n\t */\n\tconst PlaneShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPlaneShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPlaneShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPlaneShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tvar PointerEventType;\n\t(function (PointerEventType) {\n\t    PointerEventType[PointerEventType[\"UP\"] = 0] = \"UP\";\n\t    PointerEventType[PointerEventType[\"DOWN\"] = 1] = \"DOWN\";\n\t    PointerEventType[PointerEventType[\"HOVER_ENTER\"] = 2] = \"HOVER_ENTER\";\n\t    PointerEventType[PointerEventType[\"HOVER_LEAVE\"] = 3] = \"HOVER_LEAVE\";\n\t    PointerEventType[PointerEventType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(PointerEventType || (PointerEventType = {}));\n\tfunction createBasePBPointerEvents() {\n\t    return { pointerEvents: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerEvents = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        for (const v of message.pointerEvents) {\n\t            PBPointerEvents_Entry.encode(v, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerEvents();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.pointerEvents.push(PBPointerEvents_Entry.decode(reader, reader.uint32()));\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBPointerEvents_Info() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerEvents_Info = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerEvents_Info();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBPointerEvents_Entry() {\n\t    return { eventType: 0, eventInfo: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerEvents_Entry = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.eventType !== 0) {\n\t            writer.uint32(8).int32(message.eventType);\n\t        }\n\t        if (message.eventInfo !== undefined) {\n\t            PBPointerEvents_Info.encode(message.eventInfo, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerEvents_Entry();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.eventType = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.eventInfo = PBPointerEvents_Info.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$c = 1062;\n\t/**\n\t * @internal\n\t */\n\tconst PointerEventsSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPointerEvents.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPointerEvents.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPointerEvents.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBRaycastResult() {\n\t    return { timestamp: 0, origin: undefined, direction: undefined, hits: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBRaycastResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(8).int32(message.timestamp);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        for (const v of message.hits) {\n\t            RaycastHit.encode(v, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBRaycastResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.hits.push(RaycastHit.decode(reader, reader.uint32()));\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBaseRaycastHit() {\n\t    return {\n\t        position: undefined,\n\t        origin: undefined,\n\t        direction: undefined,\n\t        normalHit: undefined,\n\t        length: 0,\n\t        meshName: undefined,\n\t        entityId: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst RaycastHit = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.position !== undefined) {\n\t            Vector3.encode(message.position, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        if (message.normalHit !== undefined) {\n\t            Vector3.encode(message.normalHit, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.length !== 0) {\n\t            writer.uint32(45).float(message.length);\n\t        }\n\t        if (message.meshName !== undefined) {\n\t            writer.uint32(50).string(message.meshName);\n\t        }\n\t        if (message.entityId !== undefined) {\n\t            writer.uint32(56).int64(message.entityId);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseRaycastHit();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.position = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.normalHit = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.length = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 7:\n\t                    message.entityId = longToNumber(reader.int64());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tvar globalThis$1 = (() => {\n\t    if (typeof globalThis$1 !== 'undefined')\n\t        return globalThis$1;\n\t    if (typeof self !== 'undefined')\n\t        return self;\n\t    if (typeof window !== 'undefined')\n\t        return window;\n\t    if (typeof global !== 'undefined')\n\t        return global;\n\t    throw 'Unable to locate global object';\n\t})();\n\tfunction longToNumber(long) {\n\t    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n\t        throw new globalThis$1.Error('Value is larger than Number.MAX_SAFE_INTEGER');\n\t    }\n\t    return long.toNumber();\n\t}\n\tif (minimalExports.util.Long !== longExports) {\n\t    minimalExports.util.Long = longExports;\n\t    minimalExports.configure();\n\t}\n\n\tfunction createBasePBPointerEventsResult() {\n\t    return { commands: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerEventsResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        for (const v of message.commands) {\n\t            PBPointerEventsResult_PointerCommand.encode(v, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerEventsResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.commands.push(PBPointerEventsResult_PointerCommand.decode(reader, reader.uint32()));\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBPointerEventsResult_PointerCommand() {\n\t    return { button: 0, hit: undefined, state: 0, timestamp: 0, analog: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerEventsResult_PointerCommand = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hit !== undefined) {\n\t            RaycastHit.encode(message.hit, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.state !== 0) {\n\t            writer.uint32(32).int32(message.state);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(40).int32(message.timestamp);\n\t        }\n\t        if (message.analog !== undefined) {\n\t            writer.uint32(53).float(message.analog);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerEventsResult_PointerCommand();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hit = RaycastHit.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.state = reader.int32();\n\t                    break;\n\t                case 5:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                case 6:\n\t                    message.analog = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$b = 1063;\n\t/**\n\t * @internal\n\t */\n\tconst PointerEventsResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPointerEventsResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPointerEventsResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPointerEventsResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBPointerLock() {\n\t    return { isPointerLocked: false };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerLock = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.isPointerLocked === true) {\n\t            writer.uint32(8).bool(message.isPointerLocked);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerLock();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.isPointerLocked = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$a = 1074;\n\t/**\n\t * @internal\n\t */\n\tconst PointerLockSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPointerLock.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPointerLock.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPointerLock.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar RaycastQueryType;\n\t(function (RaycastQueryType) {\n\t    RaycastQueryType[RaycastQueryType[\"HIT_FIRST\"] = 0] = \"HIT_FIRST\";\n\t    RaycastQueryType[RaycastQueryType[\"QUERY_ALL\"] = 1] = \"QUERY_ALL\";\n\t    RaycastQueryType[RaycastQueryType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(RaycastQueryType || (RaycastQueryType = {}));\n\tfunction createBasePBRaycast() {\n\t    return { timestamp: 0, origin: undefined, direction: undefined, maxDistance: 0, queryType: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBRaycast = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(8).int32(message.timestamp);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        if (message.maxDistance !== 0) {\n\t            writer.uint32(37).float(message.maxDistance);\n\t        }\n\t        if (message.queryType !== 0) {\n\t            writer.uint32(40).int32(message.queryType);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBRaycast();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.queryType = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$9 = 1067;\n\t/**\n\t * @internal\n\t */\n\tconst RaycastSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBRaycast.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBRaycast.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBRaycast.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$8 = 1068;\n\t/**\n\t * @internal\n\t */\n\tconst RaycastResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBRaycastResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBRaycastResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBRaycastResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBSphereShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBSphereShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBSphereShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$7 = 1015;\n\t/**\n\t * @internal\n\t */\n\tconst SphereShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBSphereShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBSphereShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBSphereShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBTextShape() {\n\t    return {\n\t        text: '',\n\t        visible: undefined,\n\t        font: undefined,\n\t        opacity: undefined,\n\t        fontSize: undefined,\n\t        fontAutoSize: undefined,\n\t        hTextAlign: undefined,\n\t        vTextAlign: undefined,\n\t        width: undefined,\n\t        height: undefined,\n\t        paddingTop: undefined,\n\t        paddingRight: undefined,\n\t        paddingBottom: undefined,\n\t        paddingLeft: undefined,\n\t        lineSpacing: undefined,\n\t        lineCount: undefined,\n\t        textWrapping: undefined,\n\t        shadowBlur: undefined,\n\t        shadowOffsetX: undefined,\n\t        shadowOffsetY: undefined,\n\t        outlineWidth: undefined,\n\t        shadowColor: undefined,\n\t        outlineColor: undefined,\n\t        textColor: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBTextShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.text !== '') {\n\t            writer.uint32(10).string(message.text);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(16).bool(message.visible);\n\t        }\n\t        if (message.font !== undefined) {\n\t            writer.uint32(26).string(message.font);\n\t        }\n\t        if (message.opacity !== undefined) {\n\t            writer.uint32(37).float(message.opacity);\n\t        }\n\t        if (message.fontSize !== undefined) {\n\t            writer.uint32(45).float(message.fontSize);\n\t        }\n\t        if (message.fontAutoSize !== undefined) {\n\t            writer.uint32(48).bool(message.fontAutoSize);\n\t        }\n\t        if (message.hTextAlign !== undefined) {\n\t            writer.uint32(58).string(message.hTextAlign);\n\t        }\n\t        if (message.vTextAlign !== undefined) {\n\t            writer.uint32(66).string(message.vTextAlign);\n\t        }\n\t        if (message.width !== undefined) {\n\t            writer.uint32(77).float(message.width);\n\t        }\n\t        if (message.height !== undefined) {\n\t            writer.uint32(85).float(message.height);\n\t        }\n\t        if (message.paddingTop !== undefined) {\n\t            writer.uint32(93).float(message.paddingTop);\n\t        }\n\t        if (message.paddingRight !== undefined) {\n\t            writer.uint32(101).float(message.paddingRight);\n\t        }\n\t        if (message.paddingBottom !== undefined) {\n\t            writer.uint32(109).float(message.paddingBottom);\n\t        }\n\t        if (message.paddingLeft !== undefined) {\n\t            writer.uint32(117).float(message.paddingLeft);\n\t        }\n\t        if (message.lineSpacing !== undefined) {\n\t            writer.uint32(125).float(message.lineSpacing);\n\t        }\n\t        if (message.lineCount !== undefined) {\n\t            writer.uint32(128).int32(message.lineCount);\n\t        }\n\t        if (message.textWrapping !== undefined) {\n\t            writer.uint32(136).bool(message.textWrapping);\n\t        }\n\t        if (message.shadowBlur !== undefined) {\n\t            writer.uint32(149).float(message.shadowBlur);\n\t        }\n\t        if (message.shadowOffsetX !== undefined) {\n\t            writer.uint32(157).float(message.shadowOffsetX);\n\t        }\n\t        if (message.shadowOffsetY !== undefined) {\n\t            writer.uint32(165).float(message.shadowOffsetY);\n\t        }\n\t        if (message.outlineWidth !== undefined) {\n\t            writer.uint32(173).float(message.outlineWidth);\n\t        }\n\t        if (message.shadowColor !== undefined) {\n\t            Color3.encode(message.shadowColor, writer.uint32(178).fork()).ldelim();\n\t        }\n\t        if (message.outlineColor !== undefined) {\n\t            Color3.encode(message.outlineColor, writer.uint32(186).fork()).ldelim();\n\t        }\n\t        if (message.textColor !== undefined) {\n\t            Color3.encode(message.textColor, writer.uint32(194).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBTextShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.text = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.font = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.opacity = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.fontSize = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.fontAutoSize = reader.bool();\n\t                    break;\n\t                case 7:\n\t                    message.hTextAlign = reader.string();\n\t                    break;\n\t                case 8:\n\t                    message.vTextAlign = reader.string();\n\t                    break;\n\t                case 9:\n\t                    message.width = reader.float();\n\t                    break;\n\t                case 10:\n\t                    message.height = reader.float();\n\t                    break;\n\t                case 11:\n\t                    message.paddingTop = reader.float();\n\t                    break;\n\t                case 12:\n\t                    message.paddingRight = reader.float();\n\t                    break;\n\t                case 13:\n\t                    message.paddingBottom = reader.float();\n\t                    break;\n\t                case 14:\n\t                    message.paddingLeft = reader.float();\n\t                    break;\n\t                case 15:\n\t                    message.lineSpacing = reader.float();\n\t                    break;\n\t                case 16:\n\t                    message.lineCount = reader.int32();\n\t                    break;\n\t                case 17:\n\t                    message.textWrapping = reader.bool();\n\t                    break;\n\t                case 18:\n\t                    message.shadowBlur = reader.float();\n\t                    break;\n\t                case 19:\n\t                    message.shadowOffsetX = reader.float();\n\t                    break;\n\t                case 20:\n\t                    message.shadowOffsetY = reader.float();\n\t                    break;\n\t                case 21:\n\t                    message.outlineWidth = reader.float();\n\t                    break;\n\t                case 22:\n\t                    message.shadowColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 23:\n\t                    message.outlineColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 24:\n\t                    message.textColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$6 = 1030;\n\t/**\n\t * @internal\n\t */\n\tconst TextShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBTextShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBTextShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBTextShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBaseColor4() {\n\t    return { r: 0, g: 0, b: 0, a: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Color4 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.r !== 0) {\n\t            writer.uint32(13).float(message.r);\n\t        }\n\t        if (message.g !== 0) {\n\t            writer.uint32(21).float(message.g);\n\t        }\n\t        if (message.b !== 0) {\n\t            writer.uint32(29).float(message.b);\n\t        }\n\t        if (message.a !== 0) {\n\t            writer.uint32(37).float(message.a);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseColor4();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.r = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.g = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.b = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.a = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBUiStyles() {\n\t    return { backgroundColor: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBUiStyles = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.backgroundColor !== undefined) {\n\t            Color4.encode(message.backgroundColor, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBUiStyles();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.backgroundColor = Color4.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$5 = 1053;\n\t/**\n\t * @internal\n\t */\n\tconst UiStylesSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBUiStyles.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBUiStyles.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBUiStyles.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar TextAlign;\n\t(function (TextAlign) {\n\t    TextAlign[TextAlign[\"Center\"] = 0] = \"Center\";\n\t    TextAlign[TextAlign[\"Left\"] = 1] = \"Left\";\n\t    TextAlign[TextAlign[\"Right\"] = 2] = \"Right\";\n\t    TextAlign[TextAlign[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(TextAlign || (TextAlign = {}));\n\tvar Font;\n\t(function (Font) {\n\t    Font[Font[\"LiberationSans\"] = 0] = \"LiberationSans\";\n\t    Font[Font[\"SansSerif\"] = 1] = \"SansSerif\";\n\t    Font[Font[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(Font || (Font = {}));\n\tfunction createBasePBUiText() {\n\t    return { value: '', color: undefined, textAlign: undefined, font: undefined, fontSize: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBUiText = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.value !== '') {\n\t            writer.uint32(10).string(message.value);\n\t        }\n\t        if (message.color !== undefined) {\n\t            Color3.encode(message.color, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.textAlign !== undefined) {\n\t            writer.uint32(24).int32(message.textAlign);\n\t        }\n\t        if (message.font !== undefined) {\n\t            writer.uint32(32).int32(message.font);\n\t        }\n\t        if (message.fontSize !== undefined) {\n\t            writer.uint32(40).int32(message.fontSize);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBUiText();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.value = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.color = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.textAlign = reader.int32();\n\t                    break;\n\t                case 4:\n\t                    message.font = reader.int32();\n\t                    break;\n\t                case 5:\n\t                    message.fontSize = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$4 = 1052;\n\t/**\n\t * @internal\n\t */\n\tconst UiTextSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBUiText.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBUiText.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBUiText.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar YGPositionType;\n\t(function (YGPositionType) {\n\t    YGPositionType[YGPositionType[\"YGPositionTypeStatic\"] = 0] = \"YGPositionTypeStatic\";\n\t    YGPositionType[YGPositionType[\"YGPositionTypeRelative\"] = 1] = \"YGPositionTypeRelative\";\n\t    YGPositionType[YGPositionType[\"YGPositionTypeAbsolute\"] = 2] = \"YGPositionTypeAbsolute\";\n\t    YGPositionType[YGPositionType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGPositionType || (YGPositionType = {}));\n\tvar YGAlign;\n\t(function (YGAlign) {\n\t    YGAlign[YGAlign[\"YGAlignAuto\"] = 0] = \"YGAlignAuto\";\n\t    YGAlign[YGAlign[\"YGAlignFlexStart\"] = 1] = \"YGAlignFlexStart\";\n\t    YGAlign[YGAlign[\"YGAlignCenter\"] = 2] = \"YGAlignCenter\";\n\t    YGAlign[YGAlign[\"YGAlignFlexEnd\"] = 3] = \"YGAlignFlexEnd\";\n\t    YGAlign[YGAlign[\"YGAlignStretch\"] = 4] = \"YGAlignStretch\";\n\t    YGAlign[YGAlign[\"YGAlignBaseline\"] = 5] = \"YGAlignBaseline\";\n\t    YGAlign[YGAlign[\"YGAlignSpaceBetween\"] = 6] = \"YGAlignSpaceBetween\";\n\t    YGAlign[YGAlign[\"YGAlignSpaceAround\"] = 7] = \"YGAlignSpaceAround\";\n\t    YGAlign[YGAlign[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGAlign || (YGAlign = {}));\n\tvar YGUnit;\n\t(function (YGUnit) {\n\t    YGUnit[YGUnit[\"YGUnitUndefined\"] = 0] = \"YGUnitUndefined\";\n\t    YGUnit[YGUnit[\"YGUnitPoint\"] = 1] = \"YGUnitPoint\";\n\t    YGUnit[YGUnit[\"YGUnitPercent\"] = 2] = \"YGUnitPercent\";\n\t    YGUnit[YGUnit[\"YGUnitAuto\"] = 3] = \"YGUnitAuto\";\n\t    YGUnit[YGUnit[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGUnit || (YGUnit = {}));\n\tvar YGDirection;\n\t(function (YGDirection) {\n\t    YGDirection[YGDirection[\"YGDirectionInherit\"] = 0] = \"YGDirectionInherit\";\n\t    YGDirection[YGDirection[\"YGDirectionLTR\"] = 1] = \"YGDirectionLTR\";\n\t    YGDirection[YGDirection[\"YGDirectionRTL\"] = 2] = \"YGDirectionRTL\";\n\t    YGDirection[YGDirection[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGDirection || (YGDirection = {}));\n\tvar YGFlexDirection;\n\t(function (YGFlexDirection) {\n\t    YGFlexDirection[YGFlexDirection[\"YGFlexDirectionColumn\"] = 0] = \"YGFlexDirectionColumn\";\n\t    YGFlexDirection[YGFlexDirection[\"YGFlexDirectionColumnReverse\"] = 1] = \"YGFlexDirectionColumnReverse\";\n\t    YGFlexDirection[YGFlexDirection[\"YGFlexDirectionRow\"] = 2] = \"YGFlexDirectionRow\";\n\t    YGFlexDirection[YGFlexDirection[\"YGFlexDirectionRowReverse\"] = 3] = \"YGFlexDirectionRowReverse\";\n\t    YGFlexDirection[YGFlexDirection[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGFlexDirection || (YGFlexDirection = {}));\n\tvar YGWrap;\n\t(function (YGWrap) {\n\t    YGWrap[YGWrap[\"YGWrapNoWrap\"] = 0] = \"YGWrapNoWrap\";\n\t    YGWrap[YGWrap[\"YGWrapWrap\"] = 1] = \"YGWrapWrap\";\n\t    YGWrap[YGWrap[\"YGWrapWrapReverse\"] = 2] = \"YGWrapWrapReverse\";\n\t    YGWrap[YGWrap[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGWrap || (YGWrap = {}));\n\tvar YGJustify;\n\t(function (YGJustify) {\n\t    YGJustify[YGJustify[\"YGJustifyFlexStart\"] = 0] = \"YGJustifyFlexStart\";\n\t    YGJustify[YGJustify[\"YGJustifyCenter\"] = 1] = \"YGJustifyCenter\";\n\t    YGJustify[YGJustify[\"YGJustifyFlexEnd\"] = 2] = \"YGJustifyFlexEnd\";\n\t    YGJustify[YGJustify[\"YGJustifySpaceBetween\"] = 3] = \"YGJustifySpaceBetween\";\n\t    YGJustify[YGJustify[\"YGJustifySpaceAround\"] = 4] = \"YGJustifySpaceAround\";\n\t    YGJustify[YGJustify[\"YGJustifySpaceEvenly\"] = 5] = \"YGJustifySpaceEvenly\";\n\t    YGJustify[YGJustify[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGJustify || (YGJustify = {}));\n\tvar YGOverflow;\n\t(function (YGOverflow) {\n\t    YGOverflow[YGOverflow[\"YGOverflowVisible\"] = 0] = \"YGOverflowVisible\";\n\t    YGOverflow[YGOverflow[\"YGOverflowHidden\"] = 1] = \"YGOverflowHidden\";\n\t    YGOverflow[YGOverflow[\"YGOverflowScroll\"] = 2] = \"YGOverflowScroll\";\n\t    YGOverflow[YGOverflow[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGOverflow || (YGOverflow = {}));\n\tvar YGDisplay;\n\t(function (YGDisplay) {\n\t    YGDisplay[YGDisplay[\"YGDisplayFlex\"] = 0] = \"YGDisplayFlex\";\n\t    YGDisplay[YGDisplay[\"YGDisplayNone\"] = 1] = \"YGDisplayNone\";\n\t    YGDisplay[YGDisplay[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGDisplay || (YGDisplay = {}));\n\tvar YGEdge;\n\t(function (YGEdge) {\n\t    YGEdge[YGEdge[\"YGEdgeLeft\"] = 0] = \"YGEdgeLeft\";\n\t    YGEdge[YGEdge[\"YGEdgeTop\"] = 1] = \"YGEdgeTop\";\n\t    YGEdge[YGEdge[\"YGEdgeRight\"] = 2] = \"YGEdgeRight\";\n\t    YGEdge[YGEdge[\"YGEdgeBottom\"] = 3] = \"YGEdgeBottom\";\n\t    YGEdge[YGEdge[\"YGEdgeStart\"] = 4] = \"YGEdgeStart\";\n\t    YGEdge[YGEdge[\"YGEdgeEnd\"] = 5] = \"YGEdgeEnd\";\n\t    YGEdge[YGEdge[\"YGEdgeHorizontal\"] = 6] = \"YGEdgeHorizontal\";\n\t    YGEdge[YGEdge[\"YGEdgeVertical\"] = 7] = \"YGEdgeVertical\";\n\t    YGEdge[YGEdge[\"YGEdgeAll\"] = 8] = \"YGEdgeAll\";\n\t    YGEdge[YGEdge[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(YGEdge || (YGEdge = {}));\n\tfunction createBasePBUiTransform() {\n\t    return {\n\t        parent: 0,\n\t        rightOf: 0,\n\t        positionType: 0,\n\t        alignContent: 0,\n\t        alignItems: 0,\n\t        alignSelf: 0,\n\t        flexDirection: 0,\n\t        flexWrap: 0,\n\t        justifyContent: 0,\n\t        overflow: 0,\n\t        display: 0,\n\t        direction: 0,\n\t        flex: 0,\n\t        flexBasisUnit: 0,\n\t        flexBasis: 0,\n\t        flexGrow: 0,\n\t        flexShrink: 0,\n\t        widthUnit: 0,\n\t        width: 0,\n\t        heightUnit: 0,\n\t        height: 0,\n\t        minWidthUnit: 0,\n\t        minWidth: 0,\n\t        minHeightUnit: 0,\n\t        minHeight: 0,\n\t        maxWidthUnit: 0,\n\t        maxWidth: 0,\n\t        maxHeightUnit: 0,\n\t        maxHeight: 0,\n\t        positionLeftUnit: 0,\n\t        positionLeft: 0,\n\t        positionTopUnit: 0,\n\t        positionTop: 0,\n\t        positionRightUnit: 0,\n\t        positionRight: 0,\n\t        positionBottomUnit: 0,\n\t        positionBottom: 0,\n\t        marginLeftUnit: 0,\n\t        marginLeft: 0,\n\t        marginTopUnit: 0,\n\t        marginTop: 0,\n\t        marginRightUnit: 0,\n\t        marginRight: 0,\n\t        marginBottomUnit: 0,\n\t        marginBottom: 0,\n\t        paddingLeftUnit: 0,\n\t        paddingLeft: 0,\n\t        paddingTopUnit: 0,\n\t        paddingTop: 0,\n\t        paddingRightUnit: 0,\n\t        paddingRight: 0,\n\t        paddingBottomUnit: 0,\n\t        paddingBottom: 0,\n\t        borderLeft: 0,\n\t        borderTop: 0,\n\t        borderRight: 0,\n\t        borderBottom: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBUiTransform = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.parent !== 0) {\n\t            writer.uint32(632).int32(message.parent);\n\t        }\n\t        if (message.rightOf !== 0) {\n\t            writer.uint32(640).int32(message.rightOf);\n\t        }\n\t        if (message.positionType !== 0) {\n\t            writer.uint32(8).int32(message.positionType);\n\t        }\n\t        if (message.alignContent !== 0) {\n\t            writer.uint32(16).int32(message.alignContent);\n\t        }\n\t        if (message.alignItems !== 0) {\n\t            writer.uint32(24).int32(message.alignItems);\n\t        }\n\t        if (message.alignSelf !== 0) {\n\t            writer.uint32(32).int32(message.alignSelf);\n\t        }\n\t        if (message.flexDirection !== 0) {\n\t            writer.uint32(40).int32(message.flexDirection);\n\t        }\n\t        if (message.flexWrap !== 0) {\n\t            writer.uint32(48).int32(message.flexWrap);\n\t        }\n\t        if (message.justifyContent !== 0) {\n\t            writer.uint32(56).int32(message.justifyContent);\n\t        }\n\t        if (message.overflow !== 0) {\n\t            writer.uint32(64).int32(message.overflow);\n\t        }\n\t        if (message.display !== 0) {\n\t            writer.uint32(72).int32(message.display);\n\t        }\n\t        if (message.direction !== 0) {\n\t            writer.uint32(80).int32(message.direction);\n\t        }\n\t        if (message.flex !== 0) {\n\t            writer.uint32(93).float(message.flex);\n\t        }\n\t        if (message.flexBasisUnit !== 0) {\n\t            writer.uint32(104).int32(message.flexBasisUnit);\n\t        }\n\t        if (message.flexBasis !== 0) {\n\t            writer.uint32(117).float(message.flexBasis);\n\t        }\n\t        if (message.flexGrow !== 0) {\n\t            writer.uint32(125).float(message.flexGrow);\n\t        }\n\t        if (message.flexShrink !== 0) {\n\t            writer.uint32(133).float(message.flexShrink);\n\t        }\n\t        if (message.widthUnit !== 0) {\n\t            writer.uint32(136).int32(message.widthUnit);\n\t        }\n\t        if (message.width !== 0) {\n\t            writer.uint32(149).float(message.width);\n\t        }\n\t        if (message.heightUnit !== 0) {\n\t            writer.uint32(152).int32(message.heightUnit);\n\t        }\n\t        if (message.height !== 0) {\n\t            writer.uint32(165).float(message.height);\n\t        }\n\t        if (message.minWidthUnit !== 0) {\n\t            writer.uint32(168).int32(message.minWidthUnit);\n\t        }\n\t        if (message.minWidth !== 0) {\n\t            writer.uint32(181).float(message.minWidth);\n\t        }\n\t        if (message.minHeightUnit !== 0) {\n\t            writer.uint32(184).int32(message.minHeightUnit);\n\t        }\n\t        if (message.minHeight !== 0) {\n\t            writer.uint32(197).float(message.minHeight);\n\t        }\n\t        if (message.maxWidthUnit !== 0) {\n\t            writer.uint32(248).int32(message.maxWidthUnit);\n\t        }\n\t        if (message.maxWidth !== 0) {\n\t            writer.uint32(261).float(message.maxWidth);\n\t        }\n\t        if (message.maxHeightUnit !== 0) {\n\t            writer.uint32(264).int32(message.maxHeightUnit);\n\t        }\n\t        if (message.maxHeight !== 0) {\n\t            writer.uint32(277).float(message.maxHeight);\n\t        }\n\t        if (message.positionLeftUnit !== 0) {\n\t            writer.uint32(328).int32(message.positionLeftUnit);\n\t        }\n\t        if (message.positionLeft !== 0) {\n\t            writer.uint32(341).float(message.positionLeft);\n\t        }\n\t        if (message.positionTopUnit !== 0) {\n\t            writer.uint32(344).int32(message.positionTopUnit);\n\t        }\n\t        if (message.positionTop !== 0) {\n\t            writer.uint32(357).float(message.positionTop);\n\t        }\n\t        if (message.positionRightUnit !== 0) {\n\t            writer.uint32(360).int32(message.positionRightUnit);\n\t        }\n\t        if (message.positionRight !== 0) {\n\t            writer.uint32(373).float(message.positionRight);\n\t        }\n\t        if (message.positionBottomUnit !== 0) {\n\t            writer.uint32(376).int32(message.positionBottomUnit);\n\t        }\n\t        if (message.positionBottom !== 0) {\n\t            writer.uint32(389).float(message.positionBottom);\n\t        }\n\t        if (message.marginLeftUnit !== 0) {\n\t            writer.uint32(408).int32(message.marginLeftUnit);\n\t        }\n\t        if (message.marginLeft !== 0) {\n\t            writer.uint32(421).float(message.marginLeft);\n\t        }\n\t        if (message.marginTopUnit !== 0) {\n\t            writer.uint32(424).int32(message.marginTopUnit);\n\t        }\n\t        if (message.marginTop !== 0) {\n\t            writer.uint32(437).float(message.marginTop);\n\t        }\n\t        if (message.marginRightUnit !== 0) {\n\t            writer.uint32(440).int32(message.marginRightUnit);\n\t        }\n\t        if (message.marginRight !== 0) {\n\t            writer.uint32(453).float(message.marginRight);\n\t        }\n\t        if (message.marginBottomUnit !== 0) {\n\t            writer.uint32(456).int32(message.marginBottomUnit);\n\t        }\n\t        if (message.marginBottom !== 0) {\n\t            writer.uint32(469).float(message.marginBottom);\n\t        }\n\t        if (message.paddingLeftUnit !== 0) {\n\t            writer.uint32(488).int32(message.paddingLeftUnit);\n\t        }\n\t        if (message.paddingLeft !== 0) {\n\t            writer.uint32(501).float(message.paddingLeft);\n\t        }\n\t        if (message.paddingTopUnit !== 0) {\n\t            writer.uint32(504).int32(message.paddingTopUnit);\n\t        }\n\t        if (message.paddingTop !== 0) {\n\t            writer.uint32(517).float(message.paddingTop);\n\t        }\n\t        if (message.paddingRightUnit !== 0) {\n\t            writer.uint32(520).int32(message.paddingRightUnit);\n\t        }\n\t        if (message.paddingRight !== 0) {\n\t            writer.uint32(533).float(message.paddingRight);\n\t        }\n\t        if (message.paddingBottomUnit !== 0) {\n\t            writer.uint32(536).int32(message.paddingBottomUnit);\n\t        }\n\t        if (message.paddingBottom !== 0) {\n\t            writer.uint32(549).float(message.paddingBottom);\n\t        }\n\t        if (message.borderLeft !== 0) {\n\t            writer.uint32(581).float(message.borderLeft);\n\t        }\n\t        if (message.borderTop !== 0) {\n\t            writer.uint32(597).float(message.borderTop);\n\t        }\n\t        if (message.borderRight !== 0) {\n\t            writer.uint32(613).float(message.borderRight);\n\t        }\n\t        if (message.borderBottom !== 0) {\n\t            writer.uint32(629).float(message.borderBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBUiTransform();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 79:\n\t                    message.parent = reader.int32();\n\t                    break;\n\t                case 80:\n\t                    message.rightOf = reader.int32();\n\t                    break;\n\t                case 1:\n\t                    message.positionType = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.alignContent = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.alignItems = reader.int32();\n\t                    break;\n\t                case 4:\n\t                    message.alignSelf = reader.int32();\n\t                    break;\n\t                case 5:\n\t                    message.flexDirection = reader.int32();\n\t                    break;\n\t                case 6:\n\t                    message.flexWrap = reader.int32();\n\t                    break;\n\t                case 7:\n\t                    message.justifyContent = reader.int32();\n\t                    break;\n\t                case 8:\n\t                    message.overflow = reader.int32();\n\t                    break;\n\t                case 9:\n\t                    message.display = reader.int32();\n\t                    break;\n\t                case 10:\n\t                    message.direction = reader.int32();\n\t                    break;\n\t                case 11:\n\t                    message.flex = reader.float();\n\t                    break;\n\t                case 13:\n\t                    message.flexBasisUnit = reader.int32();\n\t                    break;\n\t                case 14:\n\t                    message.flexBasis = reader.float();\n\t                    break;\n\t                case 15:\n\t                    message.flexGrow = reader.float();\n\t                    break;\n\t                case 16:\n\t                    message.flexShrink = reader.float();\n\t                    break;\n\t                case 17:\n\t                    message.widthUnit = reader.int32();\n\t                    break;\n\t                case 18:\n\t                    message.width = reader.float();\n\t                    break;\n\t                case 19:\n\t                    message.heightUnit = reader.int32();\n\t                    break;\n\t                case 20:\n\t                    message.height = reader.float();\n\t                    break;\n\t                case 21:\n\t                    message.minWidthUnit = reader.int32();\n\t                    break;\n\t                case 22:\n\t                    message.minWidth = reader.float();\n\t                    break;\n\t                case 23:\n\t                    message.minHeightUnit = reader.int32();\n\t                    break;\n\t                case 24:\n\t                    message.minHeight = reader.float();\n\t                    break;\n\t                case 31:\n\t                    message.maxWidthUnit = reader.int32();\n\t                    break;\n\t                case 32:\n\t                    message.maxWidth = reader.float();\n\t                    break;\n\t                case 33:\n\t                    message.maxHeightUnit = reader.int32();\n\t                    break;\n\t                case 34:\n\t                    message.maxHeight = reader.float();\n\t                    break;\n\t                case 41:\n\t                    message.positionLeftUnit = reader.int32();\n\t                    break;\n\t                case 42:\n\t                    message.positionLeft = reader.float();\n\t                    break;\n\t                case 43:\n\t                    message.positionTopUnit = reader.int32();\n\t                    break;\n\t                case 44:\n\t                    message.positionTop = reader.float();\n\t                    break;\n\t                case 45:\n\t                    message.positionRightUnit = reader.int32();\n\t                    break;\n\t                case 46:\n\t                    message.positionRight = reader.float();\n\t                    break;\n\t                case 47:\n\t                    message.positionBottomUnit = reader.int32();\n\t                    break;\n\t                case 48:\n\t                    message.positionBottom = reader.float();\n\t                    break;\n\t                case 51:\n\t                    message.marginLeftUnit = reader.int32();\n\t                    break;\n\t                case 52:\n\t                    message.marginLeft = reader.float();\n\t                    break;\n\t                case 53:\n\t                    message.marginTopUnit = reader.int32();\n\t                    break;\n\t                case 54:\n\t                    message.marginTop = reader.float();\n\t                    break;\n\t                case 55:\n\t                    message.marginRightUnit = reader.int32();\n\t                    break;\n\t                case 56:\n\t                    message.marginRight = reader.float();\n\t                    break;\n\t                case 57:\n\t                    message.marginBottomUnit = reader.int32();\n\t                    break;\n\t                case 58:\n\t                    message.marginBottom = reader.float();\n\t                    break;\n\t                case 61:\n\t                    message.paddingLeftUnit = reader.int32();\n\t                    break;\n\t                case 62:\n\t                    message.paddingLeft = reader.float();\n\t                    break;\n\t                case 63:\n\t                    message.paddingTopUnit = reader.int32();\n\t                    break;\n\t                case 64:\n\t                    message.paddingTop = reader.float();\n\t                    break;\n\t                case 65:\n\t                    message.paddingRightUnit = reader.int32();\n\t                    break;\n\t                case 66:\n\t                    message.paddingRight = reader.float();\n\t                    break;\n\t                case 67:\n\t                    message.paddingBottomUnit = reader.int32();\n\t                    break;\n\t                case 68:\n\t                    message.paddingBottom = reader.float();\n\t                    break;\n\t                case 72:\n\t                    message.borderLeft = reader.float();\n\t                    break;\n\t                case 74:\n\t                    message.borderTop = reader.float();\n\t                    break;\n\t                case 76:\n\t                    message.borderRight = reader.float();\n\t                    break;\n\t                case 78:\n\t                    message.borderBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$3 = 1050;\n\t/**\n\t * @internal\n\t */\n\tconst UiTransformSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBUiTransform.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBUiTransform.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBUiTransform.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBVisibilityComponent() {\n\t    return { visible: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBVisibilityComponent = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(8).bool(message.visible);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBVisibilityComponent();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$2 = 1081;\n\t/**\n\t * @internal\n\t */\n\tconst VisibilityComponentSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBVisibilityComponent.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBVisibilityComponent.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBVisibilityComponent.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction defineLibraryComponents({ defineComponentFromSchema }) {\n\t    return {\n\t        Animator: defineComponentFromSchema(AnimatorSchema, COMPONENT_ID$w),\n\t        AudioSource: defineComponentFromSchema(AudioSourceSchema, COMPONENT_ID$v),\n\t        AvatarAttach: defineComponentFromSchema(AvatarAttachSchema, COMPONENT_ID$u),\n\t        AvatarModifierArea: defineComponentFromSchema(AvatarModifierAreaSchema, COMPONENT_ID$t),\n\t        AvatarShape: defineComponentFromSchema(AvatarShapeSchema, COMPONENT_ID$s),\n\t        Billboard: defineComponentFromSchema(BillboardSchema, COMPONENT_ID$r),\n\t        BoxShape: defineComponentFromSchema(BoxShapeSchema, COMPONENT_ID$q),\n\t        CameraMode: defineComponentFromSchema(CameraModeSchema, COMPONENT_ID$p),\n\t        CameraModeArea: defineComponentFromSchema(CameraModeAreaSchema, COMPONENT_ID$o),\n\t        CylinderShape: defineComponentFromSchema(CylinderShapeSchema, COMPONENT_ID$n),\n\t        GltfContainer: defineComponentFromSchema(GltfContainerSchema, COMPONENT_ID$m),\n\t        Material: defineComponentFromSchema(MaterialSchema, COMPONENT_ID$l),\n\t        MeshCollider: defineComponentFromSchema(MeshColliderSchema, COMPONENT_ID$k),\n\t        MeshRenderer: defineComponentFromSchema(MeshRendererSchema, COMPONENT_ID$j),\n\t        NFTShape: defineComponentFromSchema(NFTShapeSchema, COMPONENT_ID$i),\n\t        OnPointerDown: defineComponentFromSchema(OnPointerDownSchema, COMPONENT_ID$h),\n\t        OnPointerDownResult: defineComponentFromSchema(OnPointerDownResultSchema, COMPONENT_ID$g),\n\t        OnPointerUp: defineComponentFromSchema(OnPointerUpSchema, COMPONENT_ID$f),\n\t        OnPointerUpResult: defineComponentFromSchema(OnPointerUpResultSchema, COMPONENT_ID$e),\n\t        PlaneShape: defineComponentFromSchema(PlaneShapeSchema, COMPONENT_ID$d),\n\t        PointerEvents: defineComponentFromSchema(PointerEventsSchema, COMPONENT_ID$c),\n\t        PointerEventsResult: defineComponentFromSchema(PointerEventsResultSchema, COMPONENT_ID$b),\n\t        PointerLock: defineComponentFromSchema(PointerLockSchema, COMPONENT_ID$a),\n\t        Raycast: defineComponentFromSchema(RaycastSchema, COMPONENT_ID$9),\n\t        RaycastResult: defineComponentFromSchema(RaycastResultSchema, COMPONENT_ID$8),\n\t        SphereShape: defineComponentFromSchema(SphereShapeSchema, COMPONENT_ID$7),\n\t        TextShape: defineComponentFromSchema(TextShapeSchema, COMPONENT_ID$6),\n\t        UiStyles: defineComponentFromSchema(UiStylesSchema, COMPONENT_ID$5),\n\t        UiText: defineComponentFromSchema(UiTextSchema, COMPONENT_ID$4),\n\t        UiTransform: defineComponentFromSchema(UiTransformSchema, COMPONENT_ID$3),\n\t        VisibilityComponent: defineComponentFromSchema(VisibilityComponentSchema, COMPONENT_ID$2),\n\t    };\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$1 = 1;\n\t/** @internal */\n\tconst TRANSFORM_LENGTH = 44;\n\t/** @internal */\n\tconst TransformSchema = {\n\t    serialize(value, builder) {\n\t        const ptr = builder.incrementWriteOffset(TRANSFORM_LENGTH);\n\t        builder.setFloat32(ptr, value.position.x);\n\t        builder.setFloat32(ptr + 4, value.position.y);\n\t        builder.setFloat32(ptr + 8, value.position.z);\n\t        builder.setFloat32(ptr + 12, value.rotation.x);\n\t        builder.setFloat32(ptr + 16, value.rotation.y);\n\t        builder.setFloat32(ptr + 20, value.rotation.z);\n\t        builder.setFloat32(ptr + 24, value.rotation.w);\n\t        builder.setFloat32(ptr + 28, value.scale.x);\n\t        builder.setFloat32(ptr + 32, value.scale.y);\n\t        builder.setFloat32(ptr + 36, value.scale.z);\n\t        builder.setUint32(ptr + 40, value.parent || 0);\n\t    },\n\t    deserialize(reader) {\n\t        const ptr = reader.incrementReadOffset(TRANSFORM_LENGTH);\n\t        return {\n\t            position: {\n\t                x: reader.getFloat32(ptr),\n\t                y: reader.getFloat32(ptr + 4),\n\t                z: reader.getFloat32(ptr + 8)\n\t            },\n\t            rotation: {\n\t                x: reader.getFloat32(ptr + 12),\n\t                y: reader.getFloat32(ptr + 16),\n\t                z: reader.getFloat32(ptr + 20),\n\t                w: reader.getFloat32(ptr + 24)\n\t            },\n\t            scale: {\n\t                x: reader.getFloat32(ptr + 28),\n\t                y: reader.getFloat32(ptr + 32),\n\t                z: reader.getFloat32(ptr + 36)\n\t            },\n\t            parent: reader.getUint32(ptr + 40)\n\t        };\n\t    },\n\t    create() {\n\t        return {\n\t            position: { x: 0, y: 0, z: 0 },\n\t            scale: { x: 1, y: 1, z: 1 },\n\t            rotation: { x: 0, y: 0, z: 0, w: 1 }\n\t        };\n\t    }\n\t};\n\tfunction defineTransformComponent({ defineComponentFromSchema }) {\n\t    return defineComponentFromSchema(TransformSchema, COMPONENT_ID$1);\n\t}\n\n\tvar COMPONENT_ID;\n\t(function (COMPONENT_ID) {\n\t    COMPONENT_ID[COMPONENT_ID[\"SYNC\"] = 1000] = \"SYNC\";\n\t})(COMPONENT_ID || (COMPONENT_ID = {}));\n\tfunction defineSdkComponents(engine) {\n\t    const autogeneratedComponents = defineLibraryComponents(engine);\n\t    // This components are redefined below\n\t    engine.removeComponentDefinition(autogeneratedComponents.MeshRenderer._id);\n\t    engine.removeComponentDefinition(autogeneratedComponents.MeshCollider._id);\n\t    return {\n\t        ...autogeneratedComponents,\n\t        Transform: defineTransformComponent(engine),\n\t        MeshRenderer: engine.defineComponentFromSchema(MeshRendererSchema, COMPONENT_ID$j),\n\t        MeshCollider: engine.defineComponentFromSchema(MeshColliderSchema, COMPONENT_ID$k)\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tfunction IArray(type) {\n\t    return {\n\t        serialize(value, builder) {\n\t            builder.writeUint32(value.length);\n\t            for (const item of value) {\n\t                type.serialize(item, builder);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const newArray = [];\n\t            const length = reader.readUint32();\n\t            for (let index = 0; index < length; index++) {\n\t                newArray.push(type.deserialize(reader));\n\t            }\n\t            return newArray;\n\t        },\n\t        create() {\n\t            return [];\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tconst Bool = {\n\t    serialize(value, builder) {\n\t        builder.writeInt8(value ? 1 : 0);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt8() === 1;\n\t    },\n\t    create() {\n\t        return false;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tfunction IEnum(type) {\n\t    return {\n\t        serialize(value, builder) {\n\t            type.serialize(value, builder);\n\t        },\n\t        deserialize(reader) {\n\t            return type.deserialize(reader);\n\t        },\n\t        create() {\n\t            return type.create();\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tconst Float32 = {\n\t    serialize(value, builder) {\n\t        builder.writeFloat32(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readFloat32();\n\t    },\n\t    create() {\n\t        return 0.0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Float64 = {\n\t    serialize(value, builder) {\n\t        builder.writeFloat64(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readFloat64();\n\t    },\n\t    create() {\n\t        return 0.0;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tconst Int64 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt64(BigInt(value));\n\t    },\n\t    deserialize(reader) {\n\t        return Number(reader.readInt64());\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int32 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt32(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt32();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int16 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt16(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt16();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int8 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt8(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt8();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tconst FlatString = {\n\t    serialize(value, builder) {\n\t        builder.writeBuffer(new TextEncoder().encode(value));\n\t    },\n\t    deserialize(reader) {\n\t        return new TextDecoder().decode(reader.readBuffer());\n\t    },\n\t    create() {\n\t        return '';\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst EcsString = FlatString;\n\n\t/**\n\t * @public\n\t */\n\tfunction IMap(spec) {\n\t    return {\n\t        serialize(value, builder) {\n\t            for (const key in spec) {\n\t                // TODO: as any\n\t                spec[key].serialize(value[key], builder);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const newValue = {};\n\t            for (const key in spec) {\n\t                newValue[key] = spec[key].deserialize(reader);\n\t            }\n\t            return newValue;\n\t        },\n\t        create() {\n\t            const newValue = {};\n\t            for (const key in spec) {\n\t                newValue[key] = spec[key].create();\n\t            }\n\t            return newValue;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tfunction IOptional(spec) {\n\t    return {\n\t        serialize(value, builder) {\n\t            if (value) {\n\t                builder.writeInt8(1);\n\t                spec.serialize(value, builder);\n\t            }\n\t            else {\n\t                builder.writeInt8(0);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const exists = reader.readInt8();\n\t            if (exists) {\n\t                return spec.deserialize(reader);\n\t            }\n\t        },\n\t        create() {\n\t            return undefined;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\texports.Schemas = void 0;\n\t(function (Schemas) {\n\t    Schemas.Boolean = Bool;\n\t    Schemas.String = EcsString;\n\t    Schemas.Float = Float32;\n\t    Schemas.Double = Float64;\n\t    Schemas.Byte = Int8;\n\t    Schemas.Short = Int16;\n\t    Schemas.Int = Int32;\n\t    Schemas.Int64 = Int64;\n\t    Schemas.Number = Float32;\n\t    Schemas.Enum = IEnum;\n\t    Schemas.Array = IArray;\n\t    Schemas.Map = IMap;\n\t    Schemas.Optional = IOptional;\n\t})(exports.Schemas || (exports.Schemas = {}));\n\n\tvar dist = {};\n\n\tvar types = {};\n\n\tvar hasRequiredTypes;\n\n\tfunction requireTypes () {\n\t\tif (hasRequiredTypes) return types;\n\t\thasRequiredTypes = 1;\n\t\tObject.defineProperty(types, \"__esModule\", { value: true });\n\t\t\n\t\treturn types;\n\t}\n\n\tvar hasRequiredDist;\n\n\tfunction requireDist () {\n\t\tif (hasRequiredDist) return dist;\n\t\thasRequiredDist = 1;\n\t\t(function (exports) {\n\t\t\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t\t\t}) : (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    o[k2] = m[k];\n\t\t\t}));\n\t\t\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t\t\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.crdtProtocol = exports.stateIterator = exports.sameData = void 0;\n\t\t\t__exportStar(requireTypes(), exports);\n\t\t\tconst globalBuffer = globalThis.Buffer;\n\t\t\t/**\n\t\t\t * Compare raw data.\n\t\t\t * @internal\n\t\t\t */\n\t\t\tfunction sameData(a, b) {\n\t\t\t    // At reference level\n\t\t\t    if (a === b)\n\t\t\t        return true;\n\t\t\t    if (a instanceof Uint8Array && b instanceof Uint8Array) {\n\t\t\t        if (a.byteLength !== b.byteLength) {\n\t\t\t            return false;\n\t\t\t        }\n\t\t\t        for (let i = 0; i < a.byteLength; i++) {\n\t\t\t            if (a[i] !== b[i]) {\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return true;\n\t\t\t    }\n\t\t\t    if (globalBuffer) {\n\t\t\t        if (a instanceof globalBuffer && b instanceof globalBuffer) {\n\t\t\t            // Deep level\n\t\t\t            return a.equals(b);\n\t\t\t        }\n\t\t\t    }\n\t\t\t    return false;\n\t\t\t}\n\t\t\texports.sameData = sameData;\n\t\t\t/**\n\t\t\t * State iterator\n\t\t\t * @internal\n\t\t\t */\n\t\t\tfunction* stateIterator(state) {\n\t\t\t    for (const [key1, value1] of state.entries()) {\n\t\t\t        for (const [key2, value2] of value1.entries()) {\n\t\t\t            yield [key1, key2, value2];\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\texports.stateIterator = stateIterator;\n\t\t\t/**\n\t\t\t * @public\n\t\t\t * CRDT protocol.\n\t\t\t * Stores the latest state, and decides whenever we have\n\t\t\t * to process and store the new data in case its an update, or\n\t\t\t * to discard and send our local value cause remote it's outdated.\n\t\t\t */\n\t\t\tfunction crdtProtocol() {\n\t\t\t    /**\n\t\t\t     * Local state where we store the latest lamport timestamp\n\t\t\t     * and the raw data value\n\t\t\t     * @internal\n\t\t\t     */\n\t\t\t    const state = new Map();\n\t\t\t    /**\n\t\t\t     * We should call this fn in order to update the state\n\t\t\t     * @internal\n\t\t\t     */\n\t\t\t    function updateState(key1, key2, data, remoteTimestamp) {\n\t\t\t        const key1Value = state.get(key1);\n\t\t\t        const timestamp = Math.max(remoteTimestamp, key1Value?.get(key2)?.timestamp || 0);\n\t\t\t        if (key1Value) {\n\t\t\t            key1Value.set(key2, { timestamp, data });\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            const newKey1Value = new Map();\n\t\t\t            newKey1Value.set(key2, { timestamp, data });\n\t\t\t            state.set(key1, newKey1Value);\n\t\t\t        }\n\t\t\t        return { timestamp, data };\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Create an event for the specified key and store the new data and\n\t\t\t     * lamport timestmap incremented by one in the state.\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function createEvent(key1, key2, data) {\n\t\t\t        // Increment the timestamp\n\t\t\t        const timestamp = (state.get(key1)?.get(key2)?.timestamp || 0) + 1;\n\t\t\t        updateState(key1, key2, data, timestamp);\n\t\t\t        return { key1, key2, data, timestamp };\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Process the received message only if the lamport number recieved is higher\n\t\t\t     * than the stored one. If its lower, we spread it to the network to correct the peer.\n\t\t\t     * If they are equal, the bigger raw data wins.\n\t\t\t  \n\t\t\t     * Returns the recieved data if the lamport number was bigger than ours.\n\t\t\t     * If it was an outdated message, then we return void\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function processMessage(message) {\n\t\t\t        const { key1, key2, data, timestamp } = message;\n\t\t\t        const current = state.get(key1)?.get(key2);\n\t\t\t        // The received message is > than our current value, update our state.\n\t\t\t        if (!current || current.timestamp < timestamp) {\n\t\t\t            updateState(key1, key2, data, timestamp);\n\t\t\t            return message;\n\t\t\t        }\n\t\t\t        // Outdated Message. Resend our state message through the wire.\n\t\t\t        if (current.timestamp > timestamp) {\n\t\t\t            return {\n\t\t\t                key1,\n\t\t\t                key2,\n\t\t\t                data: current.data,\n\t\t\t                timestamp: current.timestamp\n\t\t\t            };\n\t\t\t        }\n\t\t\t        // Same data, same timestamp. Weirdo echo message.\n\t\t\t        if (sameData(current.data, data)) {\n\t\t\t            return message;\n\t\t\t        }\n\t\t\t        // Race condition, same timestamp diff data.\n\t\t\t        function compareData(current, data) {\n\t\t\t            return current > data;\n\t\t\t        }\n\t\t\t        if (compareData(current.data, data)) {\n\t\t\t            return {\n\t\t\t                key1,\n\t\t\t                key2,\n\t\t\t                data: current.data,\n\t\t\t                timestamp: current.timestamp\n\t\t\t            };\n\t\t\t        }\n\t\t\t        updateState(key1, key2, data, timestamp).data;\n\t\t\t        return message;\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Returns the current state\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function getState() {\n\t\t\t        return state;\n\t\t\t    }\n\t\t\t    return {\n\t\t\t        createEvent,\n\t\t\t        processMessage,\n\t\t\t        getState\n\t\t\t    };\n\t\t\t}\n\t\t\texports.crdtProtocol = crdtProtocol;\n\t\t\t\n\t} (dist));\n\t\treturn dist;\n\t}\n\n\tvar distExports = requireDist();\n\n\t/**\n\t * Take the max between currentSize and intendedSize and then plus 1024. Then,\n\t *  find the next nearer multiple of 1024.\n\t * @param currentSize - number\n\t * @param intendedSize - number\n\t * @returns the calculated number\n\t */\n\tfunction getNextSize(currentSize, intendedSize) {\n\t    const minNewSize = Math.max(currentSize, intendedSize) + 1024;\n\t    return Math.ceil(minNewSize / 1024) * 1024;\n\t}\n\tconst defaultInitialCapacity = 10240;\n\t/**\n\t * ByteBuffer is a wrapper of DataView which also adds a read and write offset.\n\t *  Also in a write operation it resizes the buffer is being used if it needs.\n\t *\n\t * - Use read and write function to generate or consume data.\n\t * - Use set and get only if you are sure that you're doing.\n\t */\n\tfunction createByteBuffer(options = {}) {\n\t    const initialROffset = options.reading?.currentOffset || 0;\n\t    let initialBuffer = null;\n\t    let initialWOffset = 0;\n\t    if (options.writing) {\n\t        initialBuffer = options.writing.buffer;\n\t        if (options.writing.currentOffset) {\n\t            initialWOffset = options.writing.currentOffset;\n\t        }\n\t    }\n\t    else if (options.reading) {\n\t        initialBuffer = options.reading.buffer;\n\t        initialWOffset = options.reading.length || options.reading.buffer.length;\n\t    }\n\t    else {\n\t        initialBuffer = new Uint8Array(options.initialCapacity || defaultInitialCapacity);\n\t    }\n\t    let buffer = initialBuffer;\n\t    let view = new DataView(buffer.buffer, buffer.byteOffset);\n\t    let woffset = initialWOffset;\n\t    let roffset = initialROffset;\n\t    /**\n\t     * Increement the write offset and resize the buffer if it needs.\n\t     */\n\t    const woAdd = (amount) => {\n\t        if (woffset + amount > buffer.byteLength) {\n\t            const newsize = getNextSize(buffer.byteLength, woffset + amount);\n\t            const newBuffer = new Uint8Array(newsize);\n\t            newBuffer.set(buffer);\n\t            buffer = newBuffer;\n\t            view = new DataView(buffer.buffer);\n\t        }\n\t        woffset += amount;\n\t        return woffset - amount;\n\t    };\n\t    /**\n\t     * Increment the read offset and throw an error if it's trying to read\n\t     *  outside the bounds.\n\t     */\n\t    const roAdd = (amount) => {\n\t        if (roffset + amount > woffset) {\n\t            throw new Error('Outside of the bounds of writen data.');\n\t        }\n\t        roffset += amount;\n\t        return roffset - amount;\n\t    };\n\t    return {\n\t        /**\n\t         * @returns The entire current Uint8Array.\n\t         *\n\t         * WARNING: if the buffer grows, the view had changed itself,\n\t         *  and the reference will be a invalid one.\n\t         */\n\t        buffer() {\n\t            return buffer;\n\t        },\n\t        /**\n\t         * @returns The capacity of the current buffer\n\t         */\n\t        bufferLength() {\n\t            return buffer.length;\n\t        },\n\t        /**\n\t         * Resets byteBuffer to avoid creating a new one\n\t         */\n\t        resetBuffer() {\n\t            roffset = 0;\n\t            woffset = 0;\n\t        },\n\t        /**\n\t         * @returns The current read offset\n\t         */\n\t        currentReadOffset() {\n\t            return roffset;\n\t        },\n\t        /**\n\t         * @returns The current write offset\n\t         */\n\t        currentWriteOffset() {\n\t            return woffset;\n\t        },\n\t        /**\n\t         * Reading purpose\n\t         * Returns the previuos offsset size before incrementing\n\t         */\n\t        incrementReadOffset(amount) {\n\t            return roAdd(amount);\n\t        },\n\t        /**\n\t         * @returns How many bytes are available to read.\n\t         */\n\t        remainingBytes() {\n\t            return woffset - roffset;\n\t        },\n\t        readFloat32() {\n\t            return view.getFloat32(roAdd(4));\n\t        },\n\t        readFloat64() {\n\t            return view.getFloat64(roAdd(8));\n\t        },\n\t        readInt8() {\n\t            return view.getInt8(roAdd(1));\n\t        },\n\t        readInt16() {\n\t            return view.getInt16(roAdd(2));\n\t        },\n\t        readInt32() {\n\t            return view.getInt32(roAdd(4));\n\t        },\n\t        readInt64() {\n\t            return view.getBigInt64(roAdd(8));\n\t        },\n\t        readUint8() {\n\t            return view.getUint8(roAdd(1));\n\t        },\n\t        readUint16() {\n\t            return view.getUint16(roAdd(2));\n\t        },\n\t        readUint32() {\n\t            return view.getUint32(roAdd(4));\n\t        },\n\t        readUint64() {\n\t            return view.getBigUint64(roAdd(8));\n\t        },\n\t        readBuffer() {\n\t            const length = view.getUint32(roAdd(4));\n\t            return buffer.subarray(roAdd(length), roAdd(0));\n\t        },\n\t        /**\n\t         * Writing purpose\n\t         */\n\t        /**\n\t         * Increment offset\n\t         * @param amount - how many bytes\n\t         * @returns The offset when this reserving starts.\n\t         */\n\t        incrementWriteOffset(amount) {\n\t            return woAdd(amount);\n\t        },\n\t        /**\n\t         * @returns The total number of bytes writen in the buffer.\n\t         */\n\t        size() {\n\t            return woffset;\n\t        },\n\t        /**\n\t         * Take care using this function, if you modify the data after, the\n\t         * returned subarray will change too. If you'll modify the content of the\n\t         * bytebuffer, maybe you want to use toCopiedBinary()\n\t         *\n\t         * @returns The subarray from 0 to offset as reference.\n\t         */\n\t        toBinary() {\n\t            return buffer.subarray(0, woffset);\n\t        },\n\t        /**\n\t         * Safe copied buffer of the current data of ByteBuffer\n\t         *\n\t         * @returns The subarray from 0 to offset.\n\t         */\n\t        toCopiedBinary() {\n\t            return new Uint8Array(this.toBinary());\n\t        },\n\t        writeBuffer(value, writeLength = true) {\n\t            if (writeLength) {\n\t                this.writeUint32(value.byteLength);\n\t            }\n\t            const o = woAdd(value.byteLength);\n\t            buffer.set(value, o);\n\t        },\n\t        writeFloat32(value) {\n\t            const o = woAdd(4);\n\t            view.setFloat32(o, value);\n\t        },\n\t        writeFloat64(value) {\n\t            const o = woAdd(8);\n\t            view.setFloat64(o, value);\n\t        },\n\t        writeInt8(value) {\n\t            const o = woAdd(1);\n\t            view.setInt8(o, value);\n\t        },\n\t        writeInt16(value) {\n\t            const o = woAdd(2);\n\t            view.setInt16(o, value);\n\t        },\n\t        writeInt32(value) {\n\t            const o = woAdd(4);\n\t            view.setInt32(o, value);\n\t        },\n\t        writeInt64(value) {\n\t            const o = woAdd(8);\n\t            view.setBigInt64(o, value);\n\t        },\n\t        writeUint8(value) {\n\t            const o = woAdd(1);\n\t            view.setUint8(o, value);\n\t        },\n\t        writeUint16(value) {\n\t            const o = woAdd(2);\n\t            view.setUint16(o, value);\n\t        },\n\t        writeUint32(value) {\n\t            const o = woAdd(4);\n\t            view.setUint32(o, value);\n\t        },\n\t        writeUint64(value) {\n\t            const o = woAdd(8);\n\t            view.setBigUint64(o, value);\n\t        },\n\t        // Dataview Proxy\n\t        getFloat32(offset) {\n\t            return view.getFloat32(offset);\n\t        },\n\t        getFloat64(offset) {\n\t            return view.getFloat64(offset);\n\t        },\n\t        getInt8(offset) {\n\t            return view.getInt8(offset);\n\t        },\n\t        getInt16(offset) {\n\t            return view.getInt16(offset);\n\t        },\n\t        getInt32(offset) {\n\t            return view.getInt32(offset);\n\t        },\n\t        getInt64(offset) {\n\t            return view.getBigInt64(offset);\n\t        },\n\t        getUint8(offset) {\n\t            return view.getUint8(offset);\n\t        },\n\t        getUint16(offset) {\n\t            return view.getUint16(offset);\n\t        },\n\t        getUint32(offset) {\n\t            return view.getUint32(offset);\n\t        },\n\t        getUint64(offset) {\n\t            return view.getBigUint64(offset);\n\t        },\n\t        setFloat32(offset, value) {\n\t            view.setFloat32(offset, value);\n\t        },\n\t        setFloat64(offset, value) {\n\t            view.setFloat64(offset, value);\n\t        },\n\t        setInt8(offset, value) {\n\t            view.setInt8(offset, value);\n\t        },\n\t        setInt16(offset, value) {\n\t            view.setInt16(offset, value);\n\t        },\n\t        setInt32(offset, value) {\n\t            view.setInt32(offset, value);\n\t        },\n\t        setInt64(offset, value) {\n\t            view.setBigInt64(offset, value);\n\t        },\n\t        setUint8(offset, value) {\n\t            view.setUint8(offset, value);\n\t        },\n\t        setUint16(offset, value) {\n\t            view.setUint16(offset, value);\n\t        },\n\t        setUint32(offset, value) {\n\t            view.setUint32(offset, value);\n\t        },\n\t        setUint64(offset, value) {\n\t            view.setBigUint64(offset, value);\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * The wire message is the top-level message that can be packed\n\t *  inside it can contain a data with another structure or protocol\n\t *\n\t * Each wire message has three primitive property that it'll never change\n\t *   ---> length        uint32 (message size up to 4,294,967,295)\n\t *   ---> version       uint32 (for now just a number which is zero)\n\t *   ---> message type  uint32\n\t * The length indicates how many bytes are above self, the version in\n\t * combination with message type defines the set of handlers that will be\n\t * available to process the message\n\t *\n\t */\n\tvar WireMessage;\n\t(function (WireMessage) {\n\t    (function (Enum) {\n\t        Enum[Enum[\"RESERVED\"] = 0] = \"RESERVED\";\n\t        // Component Operation\n\t        Enum[Enum[\"PUT_COMPONENT\"] = 1] = \"PUT_COMPONENT\";\n\t        Enum[Enum[\"DELETE_COMPONENT\"] = 2] = \"DELETE_COMPONENT\";\n\t        Enum[Enum[\"MAX_MESSAGE_TYPE\"] = 3] = \"MAX_MESSAGE_TYPE\";\n\t    })(WireMessage.Enum || (WireMessage.Enum = {}));\n\t    WireMessage.HEADER_LENGTH = 8;\n\t    /**\n\t     * Validate if the message incoming is completed\n\t     * @param buf - ByteBuffer\n\t     */\n\t    function validate(buf) {\n\t        const rem = buf.remainingBytes();\n\t        if (rem < WireMessage.HEADER_LENGTH) {\n\t            return false;\n\t        }\n\t        const messageLength = buf.getUint32(buf.currentReadOffset());\n\t        if (rem < messageLength) {\n\t            return false;\n\t        }\n\t        return true;\n\t    }\n\t    WireMessage.validate = validate;\n\t    function readHeader(buf) {\n\t        if (!validate(buf)) {\n\t            return null;\n\t        }\n\t        return {\n\t            length: buf.readUint32(),\n\t            type: buf.readUint32()\n\t        };\n\t    }\n\t    WireMessage.readHeader = readHeader;\n\t})(WireMessage || (WireMessage = {}));\n\tvar WireMessage$1 = WireMessage;\n\n\tvar ComponentOperation;\n\t(function (ComponentOperation) {\n\t    ComponentOperation.MESSAGE_HEADER_LENGTH = 20;\n\t    /**\n\t     * Call this function for an optimal writing data passing the ByteBuffer\n\t     *  already allocated\n\t     */\n\t    function write(type, entity, timestamp, componentDefinition, buf) {\n\t        // reserve the beginning\n\t        const startMessageOffset = buf.incrementWriteOffset(WireMessage$1.HEADER_LENGTH + ComponentOperation.MESSAGE_HEADER_LENGTH);\n\t        // write body\n\t        if (type === WireMessage$1.Enum.PUT_COMPONENT) {\n\t            componentDefinition.writeToByteBuffer(entity, buf);\n\t        }\n\t        const messageLength = buf.size() - startMessageOffset;\n\t        // Write WireMessage header\n\t        buf.setUint32(startMessageOffset, messageLength);\n\t        buf.setUint32(startMessageOffset + 4, type);\n\t        // Write ComponentOperation header\n\t        buf.setUint32(startMessageOffset + 8, entity);\n\t        buf.setUint32(startMessageOffset + 12, componentDefinition._id);\n\t        buf.setUint64(startMessageOffset + 16, BigInt(timestamp));\n\t        buf.setUint32(startMessageOffset + 24, messageLength - ComponentOperation.MESSAGE_HEADER_LENGTH - WireMessage$1.HEADER_LENGTH);\n\t    }\n\t    ComponentOperation.write = write;\n\t    function read(buf) {\n\t        const header = WireMessage$1.readHeader(buf);\n\t        if (!header) {\n\t            return null;\n\t        }\n\t        const common = {\n\t            ...header,\n\t            entity: buf.readUint32(),\n\t            componentId: buf.readInt32(),\n\t            timestamp: Number(buf.readUint64())\n\t        };\n\t        if (header.type === WireMessage$1.Enum.DELETE_COMPONENT) {\n\t            return common;\n\t        }\n\t        return {\n\t            ...common,\n\t            data: buf.readBuffer()\n\t        };\n\t    }\n\t    ComponentOperation.read = read;\n\t})(ComponentOperation || (ComponentOperation = {}));\n\n\tfunction crdtSceneSystem({ engine, transports }) {\n\t    // CRDT Client\n\t    const crdtClient = distExports.crdtProtocol();\n\t    // Messages that we received at transport.onMessage waiting to be processed\n\t    const receivedMessages = [];\n\t    // Messages already processed by the engine but that we need to broadcast to other transports.\n\t    const transportMessages = [];\n\t    // Map of entities already processed at least once\n\t    transports.forEach((transport) => (transport.onmessage = parseChunkMessage(transport.type)));\n\t    /**\n\t     *\n\t     * @param transportType tranport id to identiy messages\n\t     * @returns a function to process received messages\n\t     */\n\t    function parseChunkMessage(transportType) {\n\t        /**\n\t         * Receives a chunk of binary messages and stores all the valid\n\t         * Component Operation Messages at messages queue\n\t         * @param chunkMessage A chunk of binary messages\n\t         */\n\t        return function parseChunkMessage(chunkMessage) {\n\t            const buffer = createByteBuffer({\n\t                reading: { buffer: chunkMessage, currentOffset: 0 }\n\t            });\n\t            while (WireMessage$1.validate(buffer)) {\n\t                const offset = buffer.currentReadOffset();\n\t                const message = ComponentOperation.read(buffer);\n\t                const { type, entity, componentId, data, timestamp } = message;\n\t                receivedMessages.push({\n\t                    type,\n\t                    entity,\n\t                    componentId,\n\t                    data,\n\t                    timestamp,\n\t                    transportType,\n\t                    messageBuffer: buffer\n\t                        .buffer()\n\t                        .subarray(offset, buffer.currentReadOffset())\n\t                });\n\t            }\n\t        };\n\t    }\n\t    /**\n\t     * Return and clear the messaes queue\n\t     * @returns messages recieved by the transport to process on the next tick\n\t     */\n\t    function getMessages(value) {\n\t        const messagesToProcess = Array.from(value);\n\t        value.length = 0;\n\t        return messagesToProcess;\n\t    }\n\t    /**\n\t     * This fn will be called on every tick.\n\t     * Process all the messages queue received by the transport\n\t     */\n\t    function receiveMessages() {\n\t        const messagesToProcess = getMessages(receivedMessages);\n\t        for (const transport of transports) {\n\t            const buffer = createByteBuffer();\n\t            for (const message of messagesToProcess) {\n\t                const { data, timestamp, componentId, entity, type } = message;\n\t                const crdtMessage = {\n\t                    key1: entity,\n\t                    key2: componentId,\n\t                    data: data || null,\n\t                    timestamp: timestamp\n\t                };\n\t                const component = engine.getComponent(componentId);\n\t                const current = crdtClient.processMessage(crdtMessage);\n\t                // CRDT outdated message. Resend this message through the wire\n\t                if (crdtMessage !== current) {\n\t                    const type = component.has(entity)\n\t                        ? WireMessage$1.Enum.PUT_COMPONENT\n\t                        : WireMessage$1.Enum.DELETE_COMPONENT;\n\t                    ComponentOperation.write(type, entity, current.timestamp, component, buffer);\n\t                }\n\t                else {\n\t                    // Process CRDT Message\n\t                    if (type === WireMessage$1.Enum.DELETE_COMPONENT) {\n\t                        component.deleteFrom(entity);\n\t                    }\n\t                    else {\n\t                        const opts = {\n\t                            reading: { buffer: message.data, currentOffset: 0 }\n\t                        };\n\t                        const bb = createByteBuffer(opts);\n\t                        // Update engine component\n\t                        component.upsertFromBinary(message.entity, bb);\n\t                        component.clearDirty();\n\t                    }\n\t                    // Add message to transport queue to be processed by others transports\n\t                    transportMessages.push(message);\n\t                }\n\t            }\n\t            if (buffer.size()) {\n\t                transport.send(buffer.toBinary());\n\t            }\n\t        }\n\t    }\n\t    /**\n\t     * Iterates the dirty map and generates crdt messages to be send\n\t     * @param dirtyMap a map of { entities: [componentId] }\n\t     */\n\t    function createMessages(dirtyMap) {\n\t        // CRDT Messages will be the merge between the recieved transport messages and the new crdt messages\n\t        const crdtMessages = getMessages(transportMessages);\n\t        const buffer = createByteBuffer();\n\t        for (const [entity, componentsId] of dirtyMap) {\n\t            for (const componentId of componentsId) {\n\t                const component = engine.getComponent(componentId);\n\t                const entityComponent = component.has(entity)\n\t                    ? component.toBinary(entity).toBinary()\n\t                    : null;\n\t                const event = crdtClient.createEvent(entity, componentId, entityComponent);\n\t                const offset = buffer.currentWriteOffset();\n\t                const type = component.has(entity)\n\t                    ? WireMessage$1.Enum.PUT_COMPONENT\n\t                    : WireMessage$1.Enum.DELETE_COMPONENT;\n\t                const transportMessage = {\n\t                    type,\n\t                    componentId,\n\t                    entity,\n\t                    timestamp: event.timestamp\n\t                };\n\t                if (transports.some((t) => t.filter(transportMessage))) {\n\t                    ComponentOperation.write(type, entity, event.timestamp, component, buffer);\n\t                    crdtMessages.push({\n\t                        ...transportMessage,\n\t                        messageBuffer: buffer\n\t                            .buffer()\n\t                            .subarray(offset, buffer.currentWriteOffset())\n\t                    });\n\t                }\n\t            }\n\t        }\n\t        // Send messages to transports\n\t        const transportBuffer = createByteBuffer();\n\t        for (const transport of transports) {\n\t            transportBuffer.resetBuffer();\n\t            for (const message of crdtMessages) {\n\t                if (transport.filter(message)) {\n\t                    transportBuffer.writeBuffer(message.messageBuffer, false);\n\t                }\n\t            }\n\t            if (transportBuffer.size()) {\n\t                transport.send(transportBuffer.toBinary());\n\t            }\n\t        }\n\t    }\n\t    return {\n\t        createMessages,\n\t        receiveMessages\n\t    };\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tfunction deepReadonly(val) {\n\t    return Object.freeze({ ...val });\n\t}\n\n\tfunction defineComponent(componentId, spec, constructorDefault\n\t// meta: { syncFlags }\n\t) {\n\t    const data = new Map();\n\t    const dirtyIterator = new Set();\n\t    const defaultBuffer = createByteBuffer();\n\t    if (constructorDefault) {\n\t        spec.serialize(constructorDefault, defaultBuffer);\n\t    }\n\t    function getDefaultValue() {\n\t        if (constructorDefault) {\n\t            return spec.deserialize(createByteBuffer({\n\t                writing: {\n\t                    buffer: defaultBuffer.buffer(),\n\t                    currentOffset: defaultBuffer.currentWriteOffset()\n\t                }\n\t            }));\n\t        }\n\t        else {\n\t            return spec.create();\n\t        }\n\t    }\n\t    function prefillValue(value) {\n\t        return { ...getDefaultValue(), ...value };\n\t    }\n\t    return {\n\t        _id: componentId,\n\t        default: function () {\n\t            return getDefaultValue();\n\t        },\n\t        isDirty: function (entity) {\n\t            return dirtyIterator.has(entity);\n\t        },\n\t        has: function (entity) {\n\t            return data.has(entity);\n\t        },\n\t        deleteFrom: function (entity) {\n\t            const component = data.get(entity);\n\t            data.delete(entity);\n\t            dirtyIterator.add(entity);\n\t            return component || null;\n\t        },\n\t        getOrNull: function (entity) {\n\t            const component = data.get(entity);\n\t            return component ? deepReadonly(component) : null;\n\t        },\n\t        get: function (entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[getFrom] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return deepReadonly(component);\n\t        },\n\t        create: function (entity, value) {\n\t            const component = data.get(entity);\n\t            if (component) {\n\t                throw new Error(`[create] Component ${componentId} for ${entity} already exists`);\n\t            }\n\t            const usedValue = value === undefined ? getDefaultValue() : prefillValue(value);\n\t            data.set(entity, usedValue);\n\t            dirtyIterator.add(entity);\n\t            return usedValue;\n\t        },\n\t        createOrReplace: function (entity, value) {\n\t            const usedValue = value === undefined ? getDefaultValue() : prefillValue(value);\n\t            data.set(entity, usedValue);\n\t            dirtyIterator.add(entity);\n\t            return usedValue;\n\t        },\n\t        getMutableOrNull: function (entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                return null;\n\t            }\n\t            dirtyIterator.add(entity);\n\t            return component;\n\t        },\n\t        getMutable: function (entity) {\n\t            const component = this.getMutableOrNull(entity);\n\t            if (component === null) {\n\t                throw new Error(`[mutable] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return component;\n\t        },\n\t        iterator: function* () {\n\t            for (const [entity, component] of data) {\n\t                yield [entity, component];\n\t            }\n\t        },\n\t        dirtyIterator: function* () {\n\t            for (const entity of dirtyIterator) {\n\t                yield entity;\n\t            }\n\t        },\n\t        toBinary(entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[toBinary] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            const writeBuffer = createByteBuffer();\n\t            spec.serialize(component, writeBuffer);\n\t            return writeBuffer;\n\t        },\n\t        writeToByteBuffer(entity, buffer) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[writeToByteBuffer] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            spec.serialize(component, buffer);\n\t        },\n\t        updateFromBinary(entity, buffer) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[updateFromBinary] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return this.upsertFromBinary(entity, buffer);\n\t        },\n\t        upsertFromBinary(entity, buffer) {\n\t            const newValue = spec.deserialize(buffer);\n\t            data.set(entity, newValue);\n\t            dirtyIterator.add(entity);\n\t            return newValue;\n\t        },\n\t        clearDirty: function () {\n\t            dirtyIterator.clear();\n\t        }\n\t    };\n\t}\n\n\tvar EntityUtils;\n\t(function (EntityUtils) {\n\t    EntityUtils.MAX_ENTITIES = 0xffffffff;\n\t    EntityUtils.DYNAMIC_ENTITIES_START_AT = 100e3;\n\t    EntityUtils.RESERVED_STATIC_ENTITIES = 512;\n\t    EntityUtils.RESERVED_ENTITIES_RANGE = [\n\t        0,\n\t        EntityUtils.RESERVED_STATIC_ENTITIES - 1\n\t    ];\n\t    EntityUtils.STATIC_ENTITIES_RANGE = [\n\t        EntityUtils.RESERVED_STATIC_ENTITIES,\n\t        EntityUtils.DYNAMIC_ENTITIES_START_AT - 1\n\t    ];\n\t    EntityUtils.DYNAMIC_ENTITIES_RANGE = [\n\t        EntityUtils.DYNAMIC_ENTITIES_START_AT,\n\t        EntityUtils.MAX_ENTITIES\n\t    ];\n\t    function isInRange(entity, range) {\n\t        return entity >= range[0] && entity <= range[1];\n\t    }\n\t    function isDynamicEntity(entity) {\n\t        return isInRange(entity, EntityUtils.DYNAMIC_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isDynamicEntity = isDynamicEntity;\n\t    function isStaticEntity(entity) {\n\t        return isInRange(entity, EntityUtils.STATIC_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isStaticEntity = isStaticEntity;\n\t    function isReservedEntity(entity) {\n\t        return isInRange(entity, EntityUtils.RESERVED_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isReservedEntity = isReservedEntity;\n\t})(EntityUtils || (EntityUtils = {}));\n\n\tfunction EntityContainer() {\n\t    const staticEntity = Entity(EntityUtils.STATIC_ENTITIES_RANGE);\n\t    const dynamicEntity = Entity(EntityUtils.DYNAMIC_ENTITIES_RANGE);\n\t    return {\n\t        generateEntity(dynamic = false) {\n\t            if (dynamic) {\n\t                return dynamicEntity.generateEntity();\n\t            }\n\t            else {\n\t                return staticEntity.generateEntity();\n\t            }\n\t        },\n\t        removeEntity(entity) {\n\t            return (staticEntity.removeEntity(entity) || dynamicEntity.removeEntity(entity));\n\t        },\n\t        isEntityExists(entity) {\n\t            return (EntityUtils.isReservedEntity(entity) ||\n\t                staticEntity.getExistingEntities().has(entity) ||\n\t                dynamicEntity.getExistingEntities().has(entity));\n\t        },\n\t        getExistingEntities() {\n\t            return new Set([\n\t                ...staticEntity.getExistingEntities(),\n\t                ...dynamicEntity.getExistingEntities()\n\t            ]);\n\t        }\n\t    };\n\t}\n\tfunction Entity(range) {\n\t    function createEntity(entity) {\n\t        return entity;\n\t    }\n\t    let entityCounter = range[0];\n\t    const usedEntities = new Set();\n\t    function generateEntity() {\n\t        if (entityCounter >= range[1]) {\n\t            throw new Error(`It fails trying to generate an entity out of range [${range[0]}, ${range[1]}].`);\n\t        }\n\t        const entity = createEntity(entityCounter);\n\t        entityCounter++;\n\t        usedEntities.add(entity);\n\t        return entity;\n\t    }\n\t    function removeEntity(entity) {\n\t        return usedEntities.delete(entity);\n\t    }\n\t    return {\n\t        getExistingEntities() {\n\t            return new Set(usedEntities);\n\t        },\n\t        generateEntity,\n\t        removeEntity\n\t    };\n\t}\n\n\tconst SYSTEMS_REGULAR_PRIORITY = 100e3;\n\tfunction SystemContainer() {\n\t    const systems = [];\n\t    function sort() {\n\t        systems.sort((a, b) => b.priority - a.priority);\n\t    }\n\t    function add(fn, priority, name) {\n\t        if (systems.find((item) => item.fn === fn)) {\n\t            throw new Error('System already added');\n\t        }\n\t        else if (name && systems.find((item) => item.name === name)) {\n\t            throw new Error('System name already used');\n\t        }\n\t        systems.push({\n\t            fn,\n\t            priority,\n\t            name\n\t        });\n\t        sort();\n\t    }\n\t    function remove(selector) {\n\t        let index = -1;\n\t        if (typeof selector === 'string') {\n\t            index = systems.findIndex((item) => item.name === selector);\n\t        }\n\t        else {\n\t            index = systems.findIndex((item) => item.fn === selector);\n\t        }\n\t        if (index === -1) {\n\t            return false;\n\t        }\n\t        systems.splice(index, 1);\n\t        sort();\n\t        return true;\n\t    }\n\t    return {\n\t        add,\n\t        remove,\n\t        getSystems() {\n\t            return systems;\n\t        }\n\t    };\n\t}\n\n\tfunction preEngine() {\n\t    const entityContainer = EntityContainer();\n\t    const componentsDefinition = new Map();\n\t    // TODO: find a way to make this work.\n\t    // Maybe a proxy/callback to be up-to-date\n\t    const entitiesComponent = new Map();\n\t    const systems = SystemContainer();\n\t    function addSystem(fn, priority = SYSTEMS_REGULAR_PRIORITY, name) {\n\t        systems.add(fn, priority, name);\n\t    }\n\t    function removeSystem(selector) {\n\t        return systems.remove(selector);\n\t    }\n\t    function addEntity(dynamic = false) {\n\t        // entitiesCompnonent.set(entity, new Set())\n\t        const entity = entityContainer.generateEntity(dynamic);\n\t        return entity;\n\t    }\n\t    function addDynamicEntity() {\n\t        return addEntity(true);\n\t    }\n\t    function removeEntity(entity) {\n\t        for (const [, component] of componentsDefinition) {\n\t            if (component.has(entity)) {\n\t                component.deleteFrom(entity);\n\t            }\n\t        }\n\t        return entityContainer.removeEntity(entity);\n\t    }\n\t    function defineComponentFromSchema(spec, componentId, constructorDefault) {\n\t        if (componentsDefinition.get(componentId)) {\n\t            throw new Error(`Component ${componentId} already declared`);\n\t        }\n\t        const newComponent = defineComponent(componentId, spec, constructorDefault);\n\t        componentsDefinition.set(componentId, newComponent);\n\t        return newComponent;\n\t    }\n\t    function defineComponent$1(spec, componentId, constructorDefault) {\n\t        return defineComponentFromSchema(exports.Schemas.Map(spec), componentId, constructorDefault);\n\t    }\n\t    function getComponent(componentId) {\n\t        const component = componentsDefinition.get(componentId);\n\t        if (!component) {\n\t            throw new Error(`Component ${componentId} not found. You need to declare the components at the beginnig of the engine declaration`);\n\t        }\n\t        return component;\n\t    }\n\t    function* getEntitiesWith(...components) {\n\t        for (const [entity, ...groupComp] of getComponentDefGroup(...components)) {\n\t            yield [entity, ...groupComp.map((c) => c.get(entity))];\n\t        }\n\t    }\n\t    function* getComponentDefGroup(...args) {\n\t        const [firstComponentDef, ...componentDefinitions] = args;\n\t        for (const [entity] of firstComponentDef.iterator()) {\n\t            let matches = true;\n\t            for (const componentDef of componentDefinitions) {\n\t                if (!componentDef.has(entity)) {\n\t                    matches = false;\n\t                    break;\n\t                }\n\t            }\n\t            if (matches) {\n\t                yield [entity, ...args];\n\t            }\n\t        }\n\t    }\n\t    function getSystems() {\n\t        return systems.getSystems();\n\t    }\n\t    function removeComponentDefinition(componentId) {\n\t        componentsDefinition.delete(componentId);\n\t    }\n\t    return {\n\t        entitiesComponent,\n\t        componentsDefinition,\n\t        addEntity,\n\t        addDynamicEntity,\n\t        removeEntity,\n\t        addSystem,\n\t        getSystems,\n\t        removeSystem,\n\t        defineComponent: defineComponent$1,\n\t        defineComponentFromSchema,\n\t        getEntitiesWith,\n\t        getComponent,\n\t        removeComponentDefinition\n\t    };\n\t}\n\t/**\n\t * @public\n\t */\n\tfunction Engine({ transports } = {}) {\n\t    const engine = preEngine();\n\t    const crdtSystem = crdtSceneSystem({ engine, transports: transports || [] });\n\t    const baseComponents = defineSdkComponents(engine);\n\t    function update(dt) {\n\t        crdtSystem.receiveMessages();\n\t        for (const system of engine.getSystems()) {\n\t            system.fn(dt);\n\t        }\n\t        // Selected components that only exist one frame\n\t        //  then, they are deleted but their crdt state keeps\n\t        const removeSelectedComponents = [\n\t            baseComponents.OnPointerDownResult,\n\t            baseComponents.OnPointerUpResult\n\t        ];\n\t        const excludeComponentIds = removeSelectedComponents.map((item) => item._id);\n\t        for (const componentDef of removeSelectedComponents) {\n\t            for (const [entity] of engine.getEntitiesWith(componentDef)) {\n\t                componentDef.deleteFrom(entity);\n\t            }\n\t        }\n\t        // TODO: Perf tip\n\t        // Should we add some dirtyIteratorSet at engine level so we dont have\n\t        // to iterate all the component definitions to get the dirty ones ?\n\t        const dirtySet = new Map();\n\t        for (const [componentId, definition] of engine.componentsDefinition) {\n\t            if (excludeComponentIds.includes(componentId))\n\t                continue;\n\t            for (const entity of definition.dirtyIterator()) {\n\t                if (!dirtySet.has(entity)) {\n\t                    dirtySet.set(entity, new Set());\n\t                }\n\t                dirtySet.get(entity).add(componentId);\n\t            }\n\t        }\n\t        crdtSystem.createMessages(dirtySet);\n\t        for (const [_componentId, definition] of engine.componentsDefinition) {\n\t            definition.clearDirty();\n\t        }\n\t    }\n\t    return {\n\t        addEntity: engine.addEntity,\n\t        addDynamicEntity: engine.addDynamicEntity,\n\t        removeEntity: engine.removeEntity,\n\t        addSystem: engine.addSystem,\n\t        removeSystem: engine.removeSystem,\n\t        defineComponent: engine.defineComponent,\n\t        defineComponentFromSchema: engine.defineComponentFromSchema,\n\t        getEntitiesWith: engine.getEntitiesWith,\n\t        getComponent: engine.getComponent,\n\t        removeComponentDefinition: engine.removeComponentDefinition,\n\t        update,\n\t        RootEntity: 0,\n\t        baseComponents\n\t    };\n\t}\n\n\tconst UpdateTimestampStateSchema = {\n\t    timestampLastUpdate: exports.Schemas.Number,\n\t    currentTimestamp: exports.Schemas.Number\n\t};\n\tconst WasEntityClickComponentID = 1500;\n\tconst IsPointerEventActiveComponentID = 1501;\n\tconst EventSystemPriority = 1 << 20;\n\tfunction wasEntityClickedGenerator(engine) {\n\t    const WasEntityClickComponentState = engine.defineComponent(UpdateTimestampStateSchema, WasEntityClickComponentID);\n\t    WasEntityClickComponentState.create(engine.RootEntity);\n\t    engine.addSystem(() => {\n\t        const state = WasEntityClickComponentState.get(engine.RootEntity);\n\t        if (state.currentTimestamp > state.timestampLastUpdate) {\n\t            WasEntityClickComponentState.getMutable(engine.RootEntity).timestampLastUpdate = state.currentTimestamp;\n\t        }\n\t    }, EventSystemPriority);\n\t    return function (entity, actionButton) {\n\t        const component = engine.baseComponents.PointerEventsResult.getOrNull(engine.RootEntity);\n\t        if (!component)\n\t            return false;\n\t        const commands = component.commands;\n\t        // We search the last DOWN command sorted by timestamp\n\t        const down = findLastAction(commands, 1 /* DOWN */, actionButton, entity);\n\t        // We search the last UP command sorted by timestamp\n\t        const up = findLastAction(commands, 0 /* UP */, actionButton, entity);\n\t        if (!down)\n\t            return false;\n\t        if (!up)\n\t            return false;\n\t        const state = WasEntityClickComponentState.get(engine.RootEntity);\n\t        // If the DOWN command has happen before the UP commands, it means that that a clicked has happen\n\t        if (down.timestamp < up.timestamp &&\n\t            up.timestamp > state.timestampLastUpdate) {\n\t            WasEntityClickComponentState.getMutable(engine.RootEntity).currentTimestamp = Math.max(up.timestamp, state.currentTimestamp);\n\t            return true; // clicked\n\t        }\n\t        return false;\n\t    };\n\t}\n\tfunction isPointerEventActiveGenerator(engine) {\n\t    const IsPointerEventActiveComponentState = engine.defineComponent(UpdateTimestampStateSchema, IsPointerEventActiveComponentID);\n\t    IsPointerEventActiveComponentState.create(engine.RootEntity);\n\t    engine.addSystem(() => {\n\t        const state = IsPointerEventActiveComponentState.get(engine.RootEntity);\n\t        if (state.currentTimestamp > state.timestampLastUpdate) {\n\t            IsPointerEventActiveComponentState.getMutable(engine.RootEntity).timestampLastUpdate = state.currentTimestamp;\n\t        }\n\t    }, EventSystemPriority);\n\t    return function (entity, actionButton, pointerEventType) {\n\t        const component = engine.baseComponents.PointerEventsResult.getOrNull(engine.RootEntity);\n\t        if (!component)\n\t            return false;\n\t        const commands = component.commands;\n\t        // We search the last pointer Event command sorted by timestamp\n\t        const command = findLastAction(commands, pointerEventType, actionButton, entity);\n\t        if (!command)\n\t            return false;\n\t        const state = IsPointerEventActiveComponentState.get(engine.RootEntity);\n\t        if (command.timestamp > state.timestampLastUpdate) {\n\t            IsPointerEventActiveComponentState.getMutable(engine.RootEntity).currentTimestamp = Math.max(command.timestamp, state.currentTimestamp);\n\t            return true; // up component is from an old click\n\t        }\n\t        else {\n\t            return false;\n\t        }\n\t    };\n\t}\n\tfunction findLastAction(commands, pointerEventType, actionButton, entity) {\n\t    let commandToReturn = undefined;\n\t    for (const command of commands) {\n\t        if (command.button === actionButton &&\n\t            command.state === pointerEventType &&\n\t            (!entity || (command.hit && entity === command.hit.entityId))) {\n\t            if (!commandToReturn || command.timestamp >= commandToReturn.timestamp)\n\t                commandToReturn = command;\n\t        }\n\t    }\n\t    return commandToReturn;\n\t}\n\n\tfunction createNetworkTransport() {\n\t    // const rpc = new RpcTransport()\n\t    function send(..._args) {\n\t        // console.log('NetworkMessage Sent: ', ...args)\n\t    }\n\t    const type = 'network-transport';\n\t    return {\n\t        send,\n\t        type,\n\t        filter(message) {\n\t            // Echo message, ignore them\n\t            if (message.transportType === type) {\n\t                return false;\n\t            }\n\t            // TODO: Static entities & Network components\n\t            return !!message; // validComponents.includes(componentId)\n\t        }\n\t    };\n\t}\n\n\t/** @public */\n\tvar ECSComponentIDs;\n\t(function (ECSComponentIDs) {\n\t    ECSComponentIDs[ECSComponentIDs[\"Transform\"] = 1] = \"Transform\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Animator\"] = 1042] = \"Animator\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AudioSource\"] = 1020] = \"AudioSource\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarAttach\"] = 1073] = \"AvatarAttach\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarModifierArea\"] = 1070] = \"AvatarModifierArea\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarShape\"] = 1080] = \"AvatarShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Billboard\"] = 1090] = \"Billboard\";\n\t    ECSComponentIDs[ECSComponentIDs[\"BoxShape\"] = 1013] = \"BoxShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CameraMode\"] = 1072] = \"CameraMode\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CameraModeArea\"] = 1071] = \"CameraModeArea\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CylinderShape\"] = 1016] = \"CylinderShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"GltfContainer\"] = 1041] = \"GltfContainer\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Material\"] = 1017] = \"Material\";\n\t    ECSComponentIDs[ECSComponentIDs[\"MeshCollider\"] = 1019] = \"MeshCollider\";\n\t    ECSComponentIDs[ECSComponentIDs[\"MeshRenderer\"] = 1018] = \"MeshRenderer\";\n\t    ECSComponentIDs[ECSComponentIDs[\"NFTShape\"] = 1040] = \"NFTShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerDown\"] = 1060] = \"OnPointerDown\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerDownResult\"] = 1066] = \"OnPointerDownResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerUp\"] = 1061] = \"OnPointerUp\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerUpResult\"] = 1065] = \"OnPointerUpResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PlaneShape\"] = 1014] = \"PlaneShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PointerEvents\"] = 1062] = \"PointerEvents\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PointerEventsResult\"] = 1063] = \"PointerEventsResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PointerLock\"] = 1074] = \"PointerLock\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Raycast\"] = 1067] = \"Raycast\";\n\t    ECSComponentIDs[ECSComponentIDs[\"RaycastResult\"] = 1068] = \"RaycastResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"SphereShape\"] = 1015] = \"SphereShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"TextShape\"] = 1030] = \"TextShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"UiStyles\"] = 1053] = \"UiStyles\";\n\t    ECSComponentIDs[ECSComponentIDs[\"UiText\"] = 1052] = \"UiText\";\n\t    ECSComponentIDs[ECSComponentIDs[\"UiTransform\"] = 1050] = \"UiTransform\";\n\t    ECSComponentIDs[ECSComponentIDs[\"VisibilityComponent\"] = 1081] = \"VisibilityComponent\";\n\t})(ECSComponentIDs || (ECSComponentIDs = {}));\n\n\tconst componentIds = Object.values(ECSComponentIDs)\n\t    .filter((a) => typeof a === 'number')\n\t    .map(Number);\n\tfunction createRendererTransport() {\n\t    if (typeof dcl === 'undefined') {\n\t        // TODO: replace with new rpc\n\t        throw new Error('Cannot create createRendererTransport without global dcl object');\n\t    }\n\t    const type = 'renderer';\n\t    return {\n\t        type,\n\t        send(message) {\n\t            // TODO: replace with new rpc\n\t            dcl\n\t                .callRpc('~system/ExperimentalAPI', 'sendToRenderer', [\n\t                { data: new Uint8Array(message) }\n\t            ])\n\t                .catch(dcl.error);\n\t        },\n\t        filter(message) {\n\t            // Echo message, ignore them\n\t            if (message.transportType === type) {\n\t                return false;\n\t            }\n\t            // Only send renderer components (Proto Generated)\n\t            if (!componentIds.includes(message.componentId)) {\n\t                return false;\n\t            }\n\t            return !!message;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * A class serves as a medium between the observable and its observers\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed\n\t */\n\tclass ObserverEventState {\n\t    /**\n\t     * Create a new EventState\n\t     * @param mask - defines the mask associated with this state\n\t     * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n\t     * @param target - defines the original target of the state\n\t     * @param currentTarget - defines the current target of the state\n\t     */\n\t    constructor(mask, skipNextObservers = false, target, currentTarget) {\n\t        this.initalize(mask, skipNextObservers, target, currentTarget);\n\t    }\n\t    /**\n\t     * Initialize the current event state\n\t     * @param mask - defines the mask associated with this state\n\t     * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\n\t     * @param target - defines the original target of the state\n\t     * @param currentTarget - defines the current target of the state\n\t     * @returns the current event state\n\t     */\n\t    initalize(mask, skipNextObservers = false, target, currentTarget) {\n\t        this.mask = mask;\n\t        this.skipNextObservers = skipNextObservers;\n\t        this.target = target;\n\t        this.currentTarget = currentTarget;\n\t        return this;\n\t    }\n\t}\n\t/**\n\t * Represent an Observer registered to a given Observable object.\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed\n\t */\n\tclass Observer {\n\t    /**\n\t     * Creates a new observer\n\t     * @param callback - defines the callback to call when the observer is notified\n\t     * @param mask - defines the mask of the observer (used to filter notifications)\n\t     * @param scope - defines the current scope used to restore the JS context\n\t     */\n\t    constructor(\n\t    /**\n\t     * Defines the callback to call when the observer is notified\n\t     */\n\t    callback, \n\t    /**\n\t     * Defines the mask of the observer (used to filter notifications)\n\t     */\n\t    mask, \n\t    /**\n\t     * Defines the current scope used to restore the JS context\n\t     */\n\t    scope = null) {\n\t        this.callback = callback;\n\t        this.mask = mask;\n\t        this.scope = scope;\n\t        /**\n\t         * Gets or sets a property defining that the observer as to be unregistered after the next notification\n\t         */\n\t        this.unregisterOnNextCall = false;\n\t        /** For internal usage */\n\t        this._willBeUnregistered = false;\n\t    }\n\t}\n\t/**\n\t * The Observable class is a simple implementation of the Observable pattern.\n\t *\n\t * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\n\t * This enable a more fine grained execution without having to rely on multiple different Observable objects.\n\t * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\n\t * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\n\t *\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed\n\t */\n\tclass Observable {\n\t    /**\n\t     * Creates a new observable\n\t     * @param onObserverAdded - defines a callback to call when a new observer is added\n\t     */\n\t    constructor(onObserverAdded) {\n\t        this._observers = new Array();\n\t        this._onObserverAdded = null;\n\t        this._eventState = new ObserverEventState(0);\n\t        if (onObserverAdded) {\n\t            this._onObserverAdded = onObserverAdded;\n\t        }\n\t    }\n\t    /**\n\t     * Create a new Observer with the specified callback\n\t     * @param callback - the callback that will be executed for that Observer\n\t     * @param mask - the mask used to filter observers\n\t     * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\n\t     * @param scope - optional scope for the callback to be called from\n\t     * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\n\t     * @returns the new observer created for the callback\n\t     */\n\t    add(callback, mask = -1, insertFirst = false, scope = null, unregisterOnFirstCall = false) {\n\t        if (!callback) {\n\t            return null;\n\t        }\n\t        const observer = new Observer(callback, mask, scope);\n\t        observer.unregisterOnNextCall = unregisterOnFirstCall;\n\t        if (insertFirst) {\n\t            this._observers.unshift(observer);\n\t        }\n\t        else {\n\t            this._observers.push(observer);\n\t        }\n\t        if (this._onObserverAdded) {\n\t            this._onObserverAdded(observer);\n\t        }\n\t        return observer;\n\t    }\n\t    /**\n\t     * Create a new Observer with the specified callback and unregisters after the next notification\n\t     * @param callback - the callback that will be executed for that Observer\n\t     * @returns the new observer created for the callback\n\t     */\n\t    addOnce(callback) {\n\t        return this.add(callback, undefined, undefined, undefined, true);\n\t    }\n\t    /**\n\t     * Remove an Observer from the Observable object\n\t     * @param observer - the instance of the Observer to remove\n\t     * @returns false if it doesn't belong to this Observable\n\t     */\n\t    remove(observer) {\n\t        if (!observer) {\n\t            return false;\n\t        }\n\t        const index = this._observers.indexOf(observer);\n\t        if (index !== -1) {\n\t            this._deferUnregister(observer);\n\t            return true;\n\t        }\n\t        return false;\n\t    }\n\t    /**\n\t     * Remove a callback from the Observable object\n\t     * @param callback - the callback to remove\n\t     * @param scope - optional scope. If used only the callbacks with this scope will be removed\n\t     * @returns false if it doesn't belong to this Observable\n\t     */\n\t    removeCallback(callback, scope) {\n\t        for (let index = 0; index < this._observers.length; index++) {\n\t            if (this._observers[index].callback === callback &&\n\t                (!scope || scope === this._observers[index].scope)) {\n\t                this._deferUnregister(this._observers[index]);\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    /**\n\t     * Notify all Observers by calling their respective callback with the given data\n\t     * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\n\t     * @param eventData - defines the data to send to all observers\n\t     * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\n\t     * @param target - defines the original target of the state\n\t     * @param currentTarget - defines the current target of the state\n\t     * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\n\t     */\n\t    notifyObservers(eventData, mask = -1, target, currentTarget) {\n\t        if (!this._observers.length) {\n\t            return true;\n\t        }\n\t        const state = this._eventState;\n\t        state.mask = mask;\n\t        state.target = target;\n\t        state.currentTarget = currentTarget;\n\t        state.skipNextObservers = false;\n\t        state.lastReturnValue = eventData;\n\t        for (const obs of this._observers) {\n\t            if (obs._willBeUnregistered) {\n\t                continue;\n\t            }\n\t            if (obs.mask & mask) {\n\t                if (obs.scope) {\n\t                    state.lastReturnValue = obs.callback.apply(obs.scope, [\n\t                        eventData,\n\t                        state\n\t                    ]);\n\t                }\n\t                else {\n\t                    state.lastReturnValue = obs.callback(eventData, state);\n\t                }\n\t                if (obs.unregisterOnNextCall) {\n\t                    this._deferUnregister(obs);\n\t                }\n\t            }\n\t            if (state.skipNextObservers) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    /**\n\t     * Calling this will execute each callback, expecting it to be a promise or return a value.\n\t     * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\n\t     * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\n\t     * and it is crucial that all callbacks will be executed.\n\t     * The order of the callbacks is kept, callbacks are not executed parallel.\n\t     *\n\t     * @param eventData - The data to be sent to each callback\n\t     * @param mask - is used to filter observers defaults to -1\n\t     * @param target - defines the callback target (see EventState)\n\t     * @param currentTarget - defines he current object in the bubbling phase\n\t     * @returns will return a Promise than resolves when all callbacks executed successfully.\n\t     */\n\t    notifyObserversWithPromise(eventData, mask = -1, target, currentTarget) {\n\t        // create an empty promise\n\t        let p = Promise.resolve(eventData);\n\t        // no observers? return this promise.\n\t        if (!this._observers.length) {\n\t            return p;\n\t        }\n\t        const state = this._eventState;\n\t        state.mask = mask;\n\t        state.target = target;\n\t        state.currentTarget = currentTarget;\n\t        state.skipNextObservers = false;\n\t        // execute one callback after another (not using Promise.all, the order is important)\n\t        this._observers.forEach((obs) => {\n\t            if (state.skipNextObservers) {\n\t                return;\n\t            }\n\t            if (obs._willBeUnregistered) {\n\t                return;\n\t            }\n\t            if (obs.mask & mask) {\n\t                if (obs.scope) {\n\t                    p = p.then((lastReturnedValue) => {\n\t                        state.lastReturnValue = lastReturnedValue;\n\t                        return obs.callback.apply(obs.scope, [eventData, state]);\n\t                    });\n\t                }\n\t                else {\n\t                    p = p.then((lastReturnedValue) => {\n\t                        state.lastReturnValue = lastReturnedValue;\n\t                        return obs.callback(eventData, state);\n\t                    });\n\t                }\n\t                if (obs.unregisterOnNextCall) {\n\t                    this._deferUnregister(obs);\n\t                }\n\t            }\n\t        });\n\t        // return the eventData\n\t        return p.then(() => {\n\t            return eventData;\n\t        });\n\t    }\n\t    /**\n\t     * Notify a specific observer\n\t     * @param observer - defines the observer to notify\n\t     * @param eventData - defines the data to be sent to each callback\n\t     * @param mask - is used to filter observers defaults to -1\n\t     */\n\t    notifyObserver(observer, eventData, mask = -1) {\n\t        const state = this._eventState;\n\t        state.mask = mask;\n\t        state.skipNextObservers = false;\n\t        observer.callback(eventData, state);\n\t    }\n\t    /**\n\t     * Gets a boolean indicating if the observable has at least one observer\n\t     * @returns true is the Observable has at least one Observer registered\n\t     */\n\t    hasObservers() {\n\t        return this._observers.length > 0;\n\t    }\n\t    /**\n\t     * Clear the list of observers\n\t     */\n\t    clear() {\n\t        this._observers = new Array();\n\t        this._onObserverAdded = null;\n\t    }\n\t    /**\n\t     * Clone the current observable\n\t     * @returns a new observable\n\t     */\n\t    clone() {\n\t        const result = new Observable();\n\t        result._observers = this._observers.slice(0);\n\t        return result;\n\t    }\n\t    /**\n\t     * Does this observable handles observer registered with a given mask\n\t     * @param mask - defines the mask to be tested\n\t     * @returns whether or not one observer registered with the given mask is handeled\n\t     */\n\t    hasSpecificMask(mask = -1) {\n\t        for (const obs of this._observers) {\n\t            if (obs.mask & mask || obs.mask === mask) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    _deferUnregister(observer) {\n\t        observer.unregisterOnNextCall = false;\n\t        observer._willBeUnregistered = true;\n\t        Promise.resolve().then.bind(Promise.resolve())(async () => this._remove(observer));\n\t    }\n\t    // This should only be called when not iterating over _observers to avoid callback skipping.\n\t    // Removes an observer from the _observer Array.\n\t    _remove(observer) {\n\t        if (!observer) {\n\t            return false;\n\t        }\n\t        const index = this._observers.indexOf(observer);\n\t        if (index !== -1) {\n\t            this._observers.splice(index, 1);\n\t            return true;\n\t        }\n\t        return false;\n\t    }\n\t}\n\n\t/**\n\t * @internal\n\t * This function generates a callback that is passed to the Observable\n\t * constructor to subscribe to the events of the DecentralandInterface\n\t */\n\tfunction createSubscriber(eventName) {\n\t    return () => {\n\t        if (typeof dcl !== 'undefined')\n\t            dcl.subscribe(eventName);\n\t    };\n\t}\n\t/**\n\t * These events are triggered after your character enters the scene.\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));\n\t/** @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed. Use onEnterSceneObservable instead. */\n\tconst onEnterScene = onEnterSceneObservable;\n\t/**\n\t * These events are triggered after your character leaves the scene.\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));\n\t/** @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed. Use onLeaveSceneObservable instead. */\n\tconst onLeaveScene = onLeaveSceneObservable;\n\t/**\n\t * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onVideoEvent = new Observable(createSubscriber('videoEvent'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onProfileChanged = new Observable(createSubscriber('profileChanged'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));\n\t/**\n\t * @public\n\t * @deprecated This function is an inheritance of ECS6, it's here temporary for the feature parity, please read the news and docs to know how handle when it's removed.\n\t */\n\tconst onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));\n\t/**\n\t * @internal\n\t * This function adds _one_ listener to the onEvent event of dcl interface.\n\t * Leveraging a switch to route events to the Observable handlers.\n\t */\n\tfunction _initEventObservables() {\n\t    if (typeof dcl !== 'undefined') {\n\t        dcl.onEvent((event) => {\n\t            switch (event.type) {\n\t                case 'onEnterScene': {\n\t                    onEnterSceneObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'onLeaveScene': {\n\t                    onLeaveSceneObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'sceneStart': {\n\t                    onSceneReadyObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'playerExpression': {\n\t                    onPlayerExpressionObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'videoEvent': {\n\t                    const videoData = event.data;\n\t                    onVideoEvent.notifyObservers(videoData);\n\t                    return;\n\t                }\n\t                case 'profileChanged': {\n\t                    onProfileChanged.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'playerConnected': {\n\t                    onPlayerConnectedObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'playerDisconnected': {\n\t                    onPlayerDisconnectedObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'onRealmChanged': {\n\t                    onRealmChangedObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t                case 'playerClicked': {\n\t                    onPlayerClickedObservable.notifyObservers(event.data);\n\t                    return;\n\t                }\n\t            }\n\t        });\n\t    }\n\t}\n\n\t/// <reference types=\"@dcl/posix\" />\n\tconst rendererTransport = createRendererTransport();\n\tconst engine = Engine({\n\t    transports: [rendererTransport, createNetworkTransport()]\n\t});\n\tif (typeof dcl !== 'undefined') {\n\t    dcl.loadModule('~system/ExperimentalAPI', {}).catch(dcl.error);\n\t    async function pullRendererMessages() {\n\t        const response = await dcl.callRpc('~system/ExperimentalAPI', 'messageFromRenderer', []);\n\t        if (response.data?.length) {\n\t            if (rendererTransport.onmessage) {\n\t                for (const byteArray of response.data) {\n\t                    rendererTransport.onmessage(byteArray);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    dcl.onUpdate((dt) => {\n\t        pullRendererMessages()\n\t            .catch(dcl.error)\n\t            .finally(() => engine.update(dt));\n\t    });\n\t    _initEventObservables();\n\t}\n\tconst log = dcl.log;\n\tconst error = dcl.error;\n\tlet wasEntityClickedFunc = null;\n\t/**\n\t * Check if an entity emitted a clicked event\n\t * @param entity the entity to query, for global clicks use `engine.RootEntity`\n\t * @param actionButton\n\t * @returns true if the entity was clicked in the last tick-update\n\t */\n\tfunction wasEntityClicked(entity, actionButton) {\n\t    if (!wasEntityClickedFunc) {\n\t        wasEntityClickedFunc = wasEntityClickedGenerator(engine);\n\t    }\n\t    return wasEntityClickedFunc(entity, actionButton);\n\t}\n\tlet isPointerEventActiveFunc = null;\n\t/**\n\t * Check if a pointer event has been emited in the last tick-update.\n\t * @param entity the entity to query, for global clicks use `engine.RootEntity`\n\t * @param actionButton\n\t * @param pointerEventType\n\t * @returns\n\t */\n\tfunction isPointerEventActive(entity, actionButton, pointerEventType) {\n\t    if (!isPointerEventActiveFunc) {\n\t        isPointerEventActiveFunc = isPointerEventActiveGenerator(engine);\n\t    }\n\t    return isPointerEventActiveFunc(entity, actionButton, pointerEventType);\n\t}\n\n\t/**\n\t * Transform parenting: cyclic dependency checker\n\t * It checks only in modified Transforms\n\t *\n\t * Add this system with:\n\t * ```ts\n\t *  engine.addSystem(cyclicParentingChecker(engine))\n\t * ````\n\t * And then it will check every tick the parenting.\n\t *\n\t * @public\n\t *\n\t * @params engine\n\t * @returns a system\n\t */\n\tfunction cyclicParentingChecker(engine) {\n\t    const Transform = engine.baseComponents.Transform;\n\t    return () => {\n\t        for (const entity of Transform.dirtyIterator()) {\n\t            let transform = Transform.getOrNull(entity);\n\t            while (transform && transform.parent) {\n\t                if (transform.parent === entity) {\n\t                    dcl.error(`There is a cyclic parent with entity ${entity}`);\n\t                    break;\n\t                }\n\t                else {\n\t                    transform = Transform.getOrNull(transform.parent);\n\t                }\n\t            }\n\t        }\n\t    };\n\t}\n\n\t/** @public */\n\tconst Transform = engine.baseComponents.Transform;\n\t/** @public */\n\tconst Animator = engine.baseComponents.Animator;\n\t/** @public */\n\tconst AudioSource = engine.baseComponents.AudioSource;\n\t/** @public */\n\tconst AvatarAttach = engine.baseComponents.AvatarAttach;\n\t/** @public */\n\tconst AvatarModifierArea = engine.baseComponents.AvatarModifierArea;\n\t/** @public */\n\tconst AvatarShape = engine.baseComponents.AvatarShape;\n\t/** @public */\n\tconst Billboard = engine.baseComponents.Billboard;\n\t/** @public */\n\tconst BoxShape = engine.baseComponents.BoxShape;\n\t/** @public */\n\tconst CameraMode = engine.baseComponents.CameraMode;\n\t/** @public */\n\tconst CameraModeArea = engine.baseComponents.CameraModeArea;\n\t/** @public */\n\tconst CylinderShape = engine.baseComponents.CylinderShape;\n\t/** @public */\n\tconst GltfContainer = engine.baseComponents.GltfContainer;\n\t/** @public */\n\tconst Material = engine.baseComponents.Material;\n\t/** @public */\n\tconst MeshCollider = engine.baseComponents.MeshCollider;\n\t/** @public */\n\tconst MeshRenderer = engine.baseComponents.MeshRenderer;\n\t/** @public */\n\tconst NFTShape = engine.baseComponents.NFTShape;\n\t/** @public */\n\tconst OnPointerDown = engine.baseComponents.OnPointerDown;\n\t/** @public */\n\tconst OnPointerDownResult = engine.baseComponents.OnPointerDownResult;\n\t/** @public */\n\tconst OnPointerUp = engine.baseComponents.OnPointerUp;\n\t/** @public */\n\tconst OnPointerUpResult = engine.baseComponents.OnPointerUpResult;\n\t/** @public */\n\tconst PlaneShape = engine.baseComponents.PlaneShape;\n\t/** @public */\n\tconst PointerEvents = engine.baseComponents.PointerEvents;\n\t/** @public */\n\tconst PointerEventsResult = engine.baseComponents.PointerEventsResult;\n\t/** @public */\n\tconst PointerLock = engine.baseComponents.PointerLock;\n\t/** @public */\n\tconst Raycast = engine.baseComponents.Raycast;\n\t/** @public */\n\tconst RaycastResult = engine.baseComponents.RaycastResult;\n\t/** @public */\n\tconst SphereShape = engine.baseComponents.SphereShape;\n\t/** @public */\n\tconst TextShape = engine.baseComponents.TextShape;\n\t/** @public */\n\tconst UiStyles = engine.baseComponents.UiStyles;\n\t/** @public */\n\tconst UiText = engine.baseComponents.UiText;\n\t/** @public */\n\tconst UiTransform = engine.baseComponents.UiTransform;\n\t/** @public */\n\tconst VisibilityComponent = engine.baseComponents.VisibilityComponent;\n\n\t/** @public */\n\texports.Components = void 0;\n\t(function (Components) {\n\t    /** @public */\n\t    Components.Transform = engine.baseComponents.Transform;\n\t    /** @public */\n\t    Components.Animator = engine.baseComponents.Animator;\n\t    /** @public */\n\t    Components.AudioSource = engine.baseComponents.AudioSource;\n\t    /** @public */\n\t    Components.AvatarAttach = engine.baseComponents.AvatarAttach;\n\t    /** @public */\n\t    Components.AvatarModifierArea = engine.baseComponents.AvatarModifierArea;\n\t    /** @public */\n\t    Components.AvatarShape = engine.baseComponents.AvatarShape;\n\t    /** @public */\n\t    Components.Billboard = engine.baseComponents.Billboard;\n\t    /** @public */\n\t    Components.BoxShape = engine.baseComponents.BoxShape;\n\t    /** @public */\n\t    Components.CameraMode = engine.baseComponents.CameraMode;\n\t    /** @public */\n\t    Components.CameraModeArea = engine.baseComponents.CameraModeArea;\n\t    /** @public */\n\t    Components.CylinderShape = engine.baseComponents.CylinderShape;\n\t    /** @public */\n\t    Components.GltfContainer = engine.baseComponents.GltfContainer;\n\t    /** @public */\n\t    Components.Material = engine.baseComponents.Material;\n\t    /** @public */\n\t    Components.MeshCollider = engine.baseComponents.MeshCollider;\n\t    /** @public */\n\t    Components.MeshRenderer = engine.baseComponents.MeshRenderer;\n\t    /** @public */\n\t    Components.NFTShape = engine.baseComponents.NFTShape;\n\t    /** @public */\n\t    Components.OnPointerDown = engine.baseComponents.OnPointerDown;\n\t    /** @public */\n\t    Components.OnPointerDownResult = engine.baseComponents.OnPointerDownResult;\n\t    /** @public */\n\t    Components.OnPointerUp = engine.baseComponents.OnPointerUp;\n\t    /** @public */\n\t    Components.OnPointerUpResult = engine.baseComponents.OnPointerUpResult;\n\t    /** @public */\n\t    Components.PlaneShape = engine.baseComponents.PlaneShape;\n\t    /** @public */\n\t    Components.PointerEvents = engine.baseComponents.PointerEvents;\n\t    /** @public */\n\t    Components.PointerEventsResult = engine.baseComponents.PointerEventsResult;\n\t    /** @public */\n\t    Components.PointerLock = engine.baseComponents.PointerLock;\n\t    /** @public */\n\t    Components.Raycast = engine.baseComponents.Raycast;\n\t    /** @public */\n\t    Components.RaycastResult = engine.baseComponents.RaycastResult;\n\t    /** @public */\n\t    Components.SphereShape = engine.baseComponents.SphereShape;\n\t    /** @public */\n\t    Components.TextShape = engine.baseComponents.TextShape;\n\t    /** @public */\n\t    Components.UiStyles = engine.baseComponents.UiStyles;\n\t    /** @public */\n\t    Components.UiText = engine.baseComponents.UiText;\n\t    /** @public */\n\t    Components.UiTransform = engine.baseComponents.UiTransform;\n\t    /** @public */\n\t    Components.VisibilityComponent = engine.baseComponents.VisibilityComponent;\n\t})(exports.Components || (exports.Components = {}));\n\n\tlet communicationsController = null;\n\tlet communicationsControllerPromise = null;\n\tlet _messageObserver = null;\n\t/**\n\t * @internal\n\t */\n\tfunction getMessageObserver() {\n\t    if (!_messageObserver) {\n\t        _messageObserver = new Observable();\n\t    }\n\t    return _messageObserver;\n\t}\n\tfunction ensureCommunicationsController() {\n\t    if (!communicationsControllerPromise) {\n\t        communicationsControllerPromise = dcl.loadModule('~system/CommunicationsController', {});\n\t        void communicationsControllerPromise.then(($) => {\n\t            communicationsController = $;\n\t        });\n\t        const observer = getMessageObserver();\n\t        dcl.subscribe('comms');\n\t        dcl.onEvent((event) => {\n\t            if (event.type === 'comms') {\n\t                observer.notifyObservers(event.data);\n\t            }\n\t        });\n\t    }\n\t    return communicationsControllerPromise;\n\t}\n\t/**\n\t * @public\n\t * @deprecated\n\t */\n\tclass MessageBus {\n\t    constructor() {\n\t        this.messageQueue = [];\n\t        this.connected = false;\n\t        this.flushing = false;\n\t        void ensureCommunicationsController().then(() => {\n\t            this.connected = true;\n\t            this.flush();\n\t        });\n\t    }\n\t    on(message, callback) {\n\t        return getMessageObserver().add((e) => {\n\t            try {\n\t                const m = JSON.parse(e.message);\n\t                if (m.message === message) {\n\t                    callback(m.payload, e.sender);\n\t                }\n\t            }\n\t            catch (e) {\n\t                dcl.error('Error parsing comms message ' + (e.message || ''), e);\n\t            }\n\t        });\n\t    }\n\t    // @internal\n\t    sendRaw(message) {\n\t        this.messageQueue.push(message);\n\t        if (this.connected) {\n\t            this.flush();\n\t        }\n\t    }\n\t    emit(message, payload) {\n\t        const messageToSend = JSON.stringify({ message, payload });\n\t        this.sendRaw(messageToSend);\n\t        getMessageObserver().notifyObservers({\n\t            message: messageToSend,\n\t            sender: 'self'\n\t        });\n\t    }\n\t    flush() {\n\t        if (this.messageQueue.length === 0)\n\t            return;\n\t        if (!this.connected)\n\t            return;\n\t        if (!communicationsController)\n\t            return;\n\t        if (this.flushing)\n\t            return;\n\t        const message = this.messageQueue.shift();\n\t        this.flushing = true;\n\t        dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then((_) => {\n\t            this.flushing = false;\n\t            this.flush();\n\t        }, (_) => {\n\t            this.flushing = false;\n\t        });\n\t    }\n\t}\n\n\texports.Animator = Animator;\n\texports.AudioSource = AudioSource;\n\texports.AvatarAttach = AvatarAttach;\n\texports.AvatarModifierArea = AvatarModifierArea;\n\texports.AvatarShape = AvatarShape;\n\texports.Billboard = Billboard;\n\texports.BoxShape = BoxShape;\n\texports.CameraMode = CameraMode;\n\texports.CameraModeArea = CameraModeArea;\n\texports.CylinderShape = CylinderShape;\n\texports.DEG2RAD = distExports$1.DEG2RAD;\n\texports.Engine = Engine;\n\texports.GltfContainer = GltfContainer;\n\texports.Material = Material;\n\texports.MeshCollider = MeshCollider;\n\texports.MeshRenderer = MeshRenderer;\n\texports.MessageBus = MessageBus;\n\texports.NFTShape = NFTShape;\n\texports.Observable = Observable;\n\texports.Observer = Observer;\n\texports.ObserverEventState = ObserverEventState;\n\texports.OnPointerDown = OnPointerDown;\n\texports.OnPointerDownResult = OnPointerDownResult;\n\texports.OnPointerUp = OnPointerUp;\n\texports.OnPointerUpResult = OnPointerUpResult;\n\texports.PlaneShape = PlaneShape;\n\texports.PointerEvents = PointerEvents;\n\texports.PointerEventsResult = PointerEventsResult;\n\texports.PointerLock = PointerLock;\n\texports.Quaternion = distExports$1.Quaternion;\n\texports.RAD2DEG = distExports$1.RAD2DEG;\n\texports.Raycast = Raycast;\n\texports.RaycastResult = RaycastResult;\n\texports.SphereShape = SphereShape;\n\texports.TextShape = TextShape;\n\texports.Transform = Transform;\n\texports.UiStyles = UiStyles;\n\texports.UiText = UiText;\n\texports.UiTransform = UiTransform;\n\texports.Vector3 = distExports$1.Vector3;\n\texports.VisibilityComponent = VisibilityComponent;\n\texports._initEventObservables = _initEventObservables;\n\texports.cyclicParentingChecker = cyclicParentingChecker;\n\texports.deepReadonly = deepReadonly;\n\texports.engine = engine;\n\texports.error = error;\n\texports.getMessageObserver = getMessageObserver;\n\texports.isPointerEventActive = isPointerEventActive;\n\texports.isPointerEventActiveGenerator = isPointerEventActiveGenerator;\n\texports.log = log;\n\texports.onEnterScene = onEnterScene;\n\texports.onEnterSceneObservable = onEnterSceneObservable;\n\texports.onLeaveScene = onLeaveScene;\n\texports.onLeaveSceneObservable = onLeaveSceneObservable;\n\texports.onPlayerClickedObservable = onPlayerClickedObservable;\n\texports.onPlayerConnectedObservable = onPlayerConnectedObservable;\n\texports.onPlayerDisconnectedObservable = onPlayerDisconnectedObservable;\n\texports.onPlayerExpressionObservable = onPlayerExpressionObservable;\n\texports.onProfileChanged = onProfileChanged;\n\texports.onRealmChangedObservable = onRealmChangedObservable;\n\texports.onSceneReadyObservable = onSceneReadyObservable;\n\texports.onVideoEvent = onVideoEvent;\n\texports.wasEntityClicked = wasEntityClicked;\n\texports.wasEntityClickedGenerator = wasEntityClickedGenerator;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})(this.self = this.self || {});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "sha256": "417be5204cb46913cd23b20c0b7caa61a473777049409c289c9f1f30eccd3363"
  },
  {
    "path": "src/systems/zombiSpawner.ts",
    "content": "\"use strict\";\r\ndefine(\"cone\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createCone = void 0;\r\n    function createCone() {\r\n        const cone = engine.addEntity();\r\n        Transform.create(cone, {\r\n            position: { x: 3, y: 1, z: 3 }\r\n        });\r\n        MeshRenderer.create(cone, { cylinder: {\r\n                radiusTop: 0,\r\n                radiusBottom: 1\r\n            } });\r\n        return cone;\r\n    }\r\n    exports.createCone = createCone;\r\n});\r\ndefine(\"systems/sound\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.playSound = exports.playSounds = void 0;\r\n    function playSounds(dt, state) {\r\n        state.t += dt;\r\n        if (state.t < 4) {\r\n            return;\r\n        }\r\n        state.t = 0;\r\n        const entitiesWSound = engine.getEntitiesWith(AudioSource);\r\n        for (const [entity] of entitiesWSound) {\r\n            const audioSource = AudioSource.getMutable(entity);\r\n            audioSource.volume = 1;\r\n            audioSource.pitch = Math.random() * 5;\r\n            audioSource.playing = true;\r\n        }\r\n    }\r\n    exports.playSounds = playSounds;\r\n    function playSound(entity, soundPath, rndPitch) {\r\n        const pitch = rndPitch ? (Math.random() * 3) + 0.3 : 1;\r\n        if (AudioSource.has(entity)) {\r\n            let source = AudioSource.getMutable(entity);\r\n            source.audioClipUrl = soundPath,\r\n                source.loop = false;\r\n            source.playing = true;\r\n            source.pitch = pitch;\r\n        }\r\n        else {\r\n            AudioSource.create(entity, {\r\n                audioClipUrl: soundPath,\r\n                loop: false,\r\n                pitch: pitch,\r\n                playing: true,\r\n                volume: 1,\r\n            });\r\n        }\r\n    }\r\n    exports.playSound = playSound;\r\n});\r\ndefine(\"helper/systemWithState\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.addStateSystem = void 0;\r\n    function addStateSystem(fn, initialState) {\r\n        const state = { ...initialState };\r\n        engine.addSystem((dt) => fn(dt, state));\r\n    }\r\n    exports.addStateSystem = addStateSystem;\r\n});\r\ndefine(\"nft\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createNft = void 0;\r\n    function createNft(xPos) {\r\n        const nft = engine.addEntity();\r\n        Transform.create(nft, {\r\n            position: { x: xPos, y: 1, z: 13 },\r\n            scale: { x: 1, y: 1, z: 1 },\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 }\r\n        });\r\n        NFTShape.create(nft, {\r\n            color: { r: 1, g: 1, b: 1 },\r\n            style: 4,\r\n            src: 'ethereum://0x06012c8cf97bead5deae237070f9587f8e7a266d/229795'\r\n        });\r\n        return nft;\r\n    }\r\n    exports.createNft = createNft;\r\n});\r\ndefine(\"text\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createText = void 0;\r\n    function createText(value) {\r\n        const text = engine.addEntity();\r\n        Transform.create(text, {\r\n            position: { x: 0, y: 1, z: 0 },\r\n            scale: { x: 1, y: 1, z: 1 },\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 }\r\n        });\r\n        TextShape.create(text, {\r\n            text: value,\r\n            font: 'SansSerif',\r\n            fontAutoSize: false,\r\n            fontSize: 5,\r\n            height: 2,\r\n            width: 4,\r\n            lineCount: 1,\r\n            lineSpacing: 1,\r\n            opacity: 1,\r\n            outlineWidth: 0.1,\r\n            outlineColor: { r: 0, g: 0, b: 1 },\r\n            textColor: { r: 1, g: 1, b: 1 },\r\n            paddingBottom: 0,\r\n            paddingLeft: 0,\r\n            paddingRight: 0,\r\n            paddingTop: 0,\r\n            shadowBlur: 1,\r\n            shadowColor: { r: 1, g: 0, b: 0 },\r\n            shadowOffsetX: 100,\r\n            shadowOffsetY: 5,\r\n            textWrapping: false,\r\n            hTextAlign: 'center',\r\n            vTextAlign: 'center',\r\n            visible: true\r\n        });\r\n        return text;\r\n    }\r\n    exports.createText = createText;\r\n});\r\ndefine(\"components/gameController\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.GameControllerComponent = void 0;\r\n    const COMPONENT_ID = 2066;\r\n    const GameControlleType = {\r\n        spawnActive: Schemas.Boolean,\r\n        spawnInterval: Schemas.Float,\r\n        spawnCountDown: Schemas.Float,\r\n        livesLeft: Schemas.Int,\r\n        score: Schemas.Int,\r\n        winningScore: Schemas.Int,\r\n        maxZombies: Schemas.Int\r\n    };\r\n    exports.GameControllerComponent = engine.defineComponent(GameControlleType, COMPONENT_ID);\r\n});\r\ndefine(\"helper/interpolation\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Interpolate = exports.InterpolationType = void 0;\r\n    var InterpolationType;\r\n    (function (InterpolationType) {\r\n        InterpolationType[InterpolationType[\"LINEAR\"] = 0] = \"LINEAR\";\r\n        InterpolationType[InterpolationType[\"EASEINQUAD\"] = 1] = \"EASEINQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEOUTQUAD\"] = 2] = \"EASEOUTQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEQUAD\"] = 3] = \"EASEQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEINSINE\"] = 4] = \"EASEINSINE\";\r\n        InterpolationType[InterpolationType[\"EASEOUTSINE\"] = 5] = \"EASEOUTSINE\";\r\n        InterpolationType[InterpolationType[\"EASESINE\"] = 6] = \"EASESINE\";\r\n        InterpolationType[InterpolationType[\"EASEINEXPO\"] = 7] = \"EASEINEXPO\";\r\n        InterpolationType[InterpolationType[\"EASEOUTEXPO\"] = 8] = \"EASEOUTEXPO\";\r\n        InterpolationType[InterpolationType[\"EASEEXPO\"] = 9] = \"EASEEXPO\";\r\n        InterpolationType[InterpolationType[\"EASEINELASTIC\"] = 10] = \"EASEINELASTIC\";\r\n        InterpolationType[InterpolationType[\"EASEOUTELASTIC\"] = 11] = \"EASEOUTELASTIC\";\r\n        InterpolationType[InterpolationType[\"EASEELASTIC\"] = 12] = \"EASEELASTIC\";\r\n        InterpolationType[InterpolationType[\"EASEINBOUNCE\"] = 13] = \"EASEINBOUNCE\";\r\n        InterpolationType[InterpolationType[\"EASEOUTEBOUNCE\"] = 14] = \"EASEOUTEBOUNCE\";\r\n        InterpolationType[InterpolationType[\"EASEBOUNCE\"] = 15] = \"EASEBOUNCE\";\r\n    })(InterpolationType = exports.InterpolationType || (exports.InterpolationType = {}));\r\n    function Interpolate(type, t) {\r\n        switch (type) {\r\n            case InterpolationType.LINEAR:\r\n                return InterpolateLinear(t);\r\n                break;\r\n            case InterpolationType.EASEINQUAD:\r\n                return InterpolateEaseInQuad(t);\r\n                break;\r\n            case InterpolationType.EASEOUTQUAD:\r\n                return InterpolateEaseOutQuad(t);\r\n                break;\r\n            case InterpolationType.EASEQUAD:\r\n                return InterpolateEaseQuad(t);\r\n                break;\r\n            case InterpolationType.EASEINSINE:\r\n                return InterpolateEaseInSine(t);\r\n                break;\r\n            case InterpolationType.EASEOUTSINE:\r\n                return InterpolateEaseOutSine(t);\r\n                break;\r\n            case InterpolationType.EASESINE:\r\n                return InterpolateEaseInOutSine(t);\r\n                break;\r\n            case InterpolationType.EASEINEXPO:\r\n                return InterpolateEaseInExpo(t);\r\n                break;\r\n            case InterpolationType.EASEOUTEXPO:\r\n                return InterpolateEaseOutExpo(t);\r\n                break;\r\n            case InterpolationType.EASEEXPO:\r\n                return InterpolateEaseInOutExpo(t);\r\n                break;\r\n            case InterpolationType.EASEINELASTIC:\r\n                return InterpolateEaseInElastic(t);\r\n                break;\r\n            case InterpolationType.EASEOUTELASTIC:\r\n                return InterpolateEaseOutElastic(t);\r\n                break;\r\n            case InterpolationType.EASEELASTIC:\r\n                return InterpolateEaseInOutElastic(t);\r\n                break;\r\n            case InterpolationType.EASEINBOUNCE:\r\n                return InterpolateEaseInBounce(t);\r\n                break;\r\n            case InterpolationType.EASEOUTEBOUNCE:\r\n                return InterpolateEaseOutBounce(t);\r\n                break;\r\n            case InterpolationType.EASEBOUNCE:\r\n                return InterpolateEaseInOutBounce(t);\r\n                break;\r\n            default:\r\n                return InterpolateLinear(t);\r\n        }\r\n    }\r\n    exports.Interpolate = Interpolate;\r\n    function InterpolateLinear(t) {\r\n        return t;\r\n    }\r\n    function InterpolateEaseInQuad(t) {\r\n        return t * t;\r\n    }\r\n    function InterpolateEaseOutQuad(t) {\r\n        return t * (2 - t);\r\n    }\r\n    function InterpolateEaseQuad(t) {\r\n        return (t * t) / (2.0 * (t * t - t) + 1.0);\r\n    }\r\n    function InterpolateEaseInSine(t) {\r\n        return 1 - Math.cos((t * Math.PI) / 2);\r\n    }\r\n    function InterpolateEaseOutSine(t) {\r\n        return Math.sin((t * Math.PI) / 2);\r\n    }\r\n    function InterpolateEaseInOutSine(t) {\r\n        return -(Math.cos(Math.PI * t) - 1) / 2;\r\n    }\r\n    function InterpolateEaseInExpo(t) {\r\n        return t === 0 ? 0 : Math.pow(2, 10 * t - 10);\r\n    }\r\n    function InterpolateEaseOutExpo(t) {\r\n        return t === 1 ? 1 : 1 - Math.pow(2, -10 * t);\r\n    }\r\n    function InterpolateEaseInOutExpo(t) {\r\n        return t === 0 ? 0 : t === 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2;\r\n    }\r\n    function InterpolateEaseInElastic(t) {\r\n        const c4 = (2 * Math.PI) / 3;\r\n        return t === 0 ? 0 : t === 1 ? 1 : -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * c4);\r\n    }\r\n    function InterpolateEaseOutElastic(t) {\r\n        const c5 = (2 * Math.PI) / 3;\r\n        return t === 0 ? 0 : t === 1 ? 1 : Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c5) + 1;\r\n    }\r\n    function InterpolateEaseInOutElastic(t) {\r\n        const c6 = (2 * Math.PI) / 4.5;\r\n        return t === 0\r\n            ? 0\r\n            : t === 1\r\n                ? 1\r\n                : t < 0.5\r\n                    ? -(Math.pow(2, 20 * t - 10) * Math.sin((20 * t - 11.125) * c6)) / 2\r\n                    : (Math.pow(2, -20 * t + 10) * Math.sin((20 * t - 11.125) * c6)) / 2 + 1;\r\n    }\r\n    function InterpolateEaseInBounce(t) {\r\n        return 1 - bounce(1 - t);\r\n    }\r\n    function InterpolateEaseOutBounce(t) {\r\n        return bounce(t);\r\n    }\r\n    function InterpolateEaseInOutBounce(t) {\r\n        return t < 0.5 ? (1 - bounce(1 - 2 * t)) / 2 : (1 + bounce(2 * t - 1)) / 2;\r\n    }\r\n    function bounce(x) {\r\n        const n1 = 7.5625;\r\n        const d1 = 2.75;\r\n        if (x < 1 / d1) {\r\n            return n1 * x * x;\r\n        }\r\n        else if (x < 2 / d1) {\r\n            return n1 * (x -= 1.5 / d1) * x + 0.75;\r\n        }\r\n        else if (x < 2.5 / d1) {\r\n            return n1 * (x -= 2.25 / d1) * x + 0.9375;\r\n        }\r\n        else {\r\n            return n1 * (x -= 2.625 / d1) * x + 0.984375;\r\n        }\r\n    }\r\n});\r\ndefine(\"components/moveTransport\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MoveTransformComponent = void 0;\r\n    const COMPONENT_ID = 2046;\r\n    const Vector3EcsType = Schemas.Map({\r\n        x: Schemas.Float,\r\n        y: Schemas.Float,\r\n        z: Schemas.Float\r\n    });\r\n    const MoveTransportData = {\r\n        hasFinished: Schemas.Boolean,\r\n        duration: Schemas.Float,\r\n        start: Vector3EcsType,\r\n        end: Vector3EcsType,\r\n        normalizedTime: Schemas.Float,\r\n        lerpTime: Schemas.Float,\r\n        speed: Schemas.Float,\r\n        interpolationType: Schemas.Enum(Schemas.Int)\r\n    };\r\n    exports.MoveTransformComponent = engine.defineComponent(MoveTransportData, COMPONENT_ID);\r\n});\r\ndefine(\"systems/clickable\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.addClickBehavior = exports.clickedSystem = void 0;\r\n    const callbackMap = new Map();\r\n    function clickedSystem(dt) {\r\n        const clickedBoshapes = engine.getEntitiesWith(OnPointerDownResult);\r\n        for (const [entity, pointerDownResult] of clickedBoshapes) {\r\n            const fn = callbackMap.get(entity);\r\n            if (fn)\r\n                fn(entity);\r\n        }\r\n    }\r\n    exports.clickedSystem = clickedSystem;\r\n    engine.addSystem(clickedSystem);\r\n    function addClickBehavior(entity, fn) {\r\n        OnPointerDown.create(entity, {\r\n            button: 0,\r\n            maxDistance: 100,\r\n            hoverText: \"click\",\r\n            showFeedback: true\r\n        });\r\n        callbackMap.set(entity, fn);\r\n        return entity;\r\n    }\r\n    exports.addClickBehavior = addClickBehavior;\r\n});\r\ndefine(\"systems/moveZombie\", [\"require\", \"exports\", \"components/moveTransport\", \"helper/interpolation\"], function (require, exports, moveTransport_1, interpolation_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.moveSystem = exports.onMoveZombieFinish = void 0;\r\n    const callbackMap = new Map();\r\n    function onMoveZombieFinish(entity, callback) {\r\n        callbackMap.set(entity, callback);\r\n    }\r\n    exports.onMoveZombieFinish = onMoveZombieFinish;\r\n    function moveSystem(dt) {\r\n        for (const [entity] of engine.getEntitiesWith(moveTransport_1.MoveTransformComponent, Transform)) {\r\n            const move = moveTransport_1.MoveTransformComponent.getMutable(entity);\r\n            const transform = Transform.getMutable(entity);\r\n            move.normalizedTime = Math.min(Math.max(move.normalizedTime + dt * move.speed, 0), 1);\r\n            move.lerpTime = (0, interpolation_1.Interpolate)(move.interpolationType, move.normalizedTime);\r\n            transform.position = Vector3.lerp(move.start, move.end, move.lerpTime);\r\n            move.hasFinished = move.normalizedTime >= 1;\r\n            if (move.hasFinished) {\r\n                const fn = callbackMap.get(entity);\r\n                if (fn)\r\n                    fn();\r\n                moveTransport_1.MoveTransformComponent.deleteFrom(entity);\r\n            }\r\n        }\r\n    }\r\n    exports.moveSystem = moveSystem;\r\n});\r\ndefine(\"zombie\", [\"require\", \"exports\", \"components/gameController\", \"components/moveTransport\", \"game\", \"systems/clickable\", \"systems/moveZombie\", \"systems/sound\"], function (require, exports, gameController_1, moveTransport_2, game_1, clickable_1, moveZombie_1, sound_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createZombie = void 0;\r\n    function createZombie(xPos) {\r\n        const zombie = engine.addEntity();\r\n        Transform.create(zombie, {\r\n            position: { x: xPos, y: 1, z: 3 },\r\n            scale: { x: 1, y: 1, z: 1 },\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 }\r\n        });\r\n        GltfContainer.create(zombie, {\r\n            src: 'models/zombie.glb'\r\n        });\r\n        moveTransport_2.MoveTransformComponent.create(zombie, {\r\n            start: { x: xPos, y: 1, z: 3 },\r\n            end: { x: xPos, y: 1, z: 12 },\r\n            duration: 6,\r\n            normalizedTime: 0,\r\n            lerpTime: 0,\r\n            speed: 0.04,\r\n            hasFinished: false,\r\n            interpolationType: 1\r\n        });\r\n        Animator.create(zombie, { states: [\r\n                {\r\n                    clip: \"Walking\",\r\n                    loop: true,\r\n                    name: \"Walk\",\r\n                    playing: true,\r\n                    shouldReset: false,\r\n                    speed: 1,\r\n                    weight: 1\r\n                },\r\n                {\r\n                    clip: \"Attacking\",\r\n                    loop: true,\r\n                    name: \"Attack\",\r\n                    playing: false,\r\n                    shouldReset: false,\r\n                    speed: 1,\r\n                    weight: 1\r\n                }\r\n            ] });\r\n        (0, moveZombie_1.onMoveZombieFinish)(zombie, () => {\r\n            dcl.log('finished zombie', zombie);\r\n            if (gameController_1.GameControllerComponent.has(game_1.coneEntity)) {\r\n                gameController_1.GameControllerComponent.getMutable(game_1.coneEntity).livesLeft -= 1;\r\n            }\r\n            let animator = Animator.getMutable(zombie);\r\n            const walkAnim = animator.states[0];\r\n            const attackAnim = animator.states[1];\r\n            if (walkAnim && attackAnim) {\r\n                walkAnim.playing = false;\r\n                walkAnim.loop = false;\r\n                attackAnim.playing = true;\r\n                attackAnim.loop = true;\r\n            }\r\n            const nfts = engine.getEntitiesWith(NFTShape);\r\n            for (const [entity, nftShape] of nfts) {\r\n                engine.removeEntity(entity);\r\n                break;\r\n            }\r\n            (0, sound_1.playSound)(zombie, 'sounds/attack.mp3', true);\r\n        });\r\n        (0, clickable_1.addClickBehavior)(zombie, () => {\r\n            dcl.log(\"BOOM!!!\");\r\n            engine.removeEntity(zombie);\r\n            (0, sound_1.playSound)(zombie, 'sounds/explosion.mp3', true);\r\n            if (gameController_1.GameControllerComponent.has(game_1.coneEntity)) {\r\n                gameController_1.GameControllerComponent.getMutable(game_1.coneEntity).score += 1;\r\n            }\r\n        });\r\n        return zombie;\r\n    }\r\n    exports.createZombie = createZombie;\r\n});\r\ndefine(\"game\", [\"require\", \"exports\", \"cone\", \"nft\", \"text\", \"systems/moveZombie\", \"systems/clickable\", \"components/gameController\"], function (require, exports, cone_1, nft_1, text_1, moveZombie_2, clickable_2, gameController_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.coneEntity = void 0;\r\n    const _LIVES = 5;\r\n    const _WINNING_SCORE = 15;\r\n    const _SPAWN_INTERVAL = 3;\r\n    engine.addSystem(moveZombie_2.moveSystem);\r\n    exports.coneEntity = (0, cone_1.createCone)();\r\n    (0, clickable_2.addClickBehavior)(exports.coneEntity, () => {\r\n        dcl.log(\"STARTING GAME\");\r\n        if (gameController_2.GameControllerComponent.has(exports.coneEntity)) {\r\n            if (!gameController_2.GameControllerComponent.get(exports.coneEntity).spawnActive) {\r\n                let controller = gameController_2.GameControllerComponent.getMutable(exports.coneEntity);\r\n                controller.spawnActive = true;\r\n                controller.livesLeft = _LIVES;\r\n                controller.score = 0;\r\n                const nfts = engine.getEntitiesWith(NFTShape);\r\n                for (const [entity, nftShape] of nfts) {\r\n                    engine.removeEntity(entity);\r\n                }\r\n            }\r\n            else\r\n                return;\r\n        }\r\n        else {\r\n            gameController_2.GameControllerComponent.create(exports.coneEntity, {\r\n                spawnActive: true,\r\n                livesLeft: _LIVES,\r\n                score: 0,\r\n                spawnCountDown: 0,\r\n                spawnInterval: _SPAWN_INTERVAL,\r\n                winningScore: _WINNING_SCORE,\r\n                maxZombies: 10\r\n            });\r\n        }\r\n        for (let i = _LIVES; i >= 0; i--) {\r\n            const _nftEntity = (0, nft_1.createNft)(i);\r\n        }\r\n        if (AudioSource.has(exports.coneEntity)) {\r\n            const source = AudioSource.getMutable(exports.coneEntity);\r\n            source.playing = true;\r\n        }\r\n        else {\r\n            AudioSource.create(exports.coneEntity, {\r\n                audioClipUrl: \"/sounds/ambient.mp3\",\r\n                loop: true,\r\n                playing: true,\r\n                pitch: 1,\r\n                volume: 1\r\n            });\r\n        }\r\n    });\r\n    const textEntity = (0, text_1.createText)(\"Click Cone to Play\");\r\n});\r\ndefine(\"components/spawner\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.SpawnerComponent = void 0;\r\n    const COMPONENT_ID = 2223;\r\n    const SpawnerComponentType = {\r\n        lastPointerDownTs: Schemas.Int\r\n    };\r\n    exports.SpawnerComponent = engine.defineComponent(SpawnerComponentType, COMPONENT_ID);\r\n});\r\ndefine(\"systems/zombiSpawner\", [\"require\", \"exports\", \"components/gameController\", \"game\", \"zombie\", \"systems/sound\"], function (require, exports, gameController_3, game_2, zombie_1, sound_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.zombieSpawnSystem = void 0;\r\n    function zombieSpawnSystem(dt) {\r\n        const gameControllers = engine.getEntitiesWith(gameController_3.GameControllerComponent);\r\n        for (const [entity] of gameControllers) {\r\n            const controller = gameController_3.GameControllerComponent.getMutable(entity);\r\n            if (!controller.spawnActive)\r\n                return;\r\n            if (controller.livesLeft <= 0) {\r\n                lose();\r\n            }\r\n            else if (controller.score >= controller.winningScore) {\r\n                win();\r\n            }\r\n            controller.spawnCountDown -= dt;\r\n            if (controller.spawnCountDown < 0) {\r\n                controller.spawnCountDown = controller.spawnInterval;\r\n                dcl.log(\"SPAWNING NEW ZOMBIE\");\r\n                spawnZombie();\r\n                (0, sound_2.playSound)(entity, 'sounds/pickUp.mp3', true);\r\n            }\r\n        }\r\n    }\r\n    exports.zombieSpawnSystem = zombieSpawnSystem;\r\n    engine.addSystem(zombieSpawnSystem);\r\n    function lose() {\r\n        dcl.log(\"GAME OVER!!\");\r\n        endGame();\r\n    }\r\n    function win() {\r\n        dcl.log(\"YOU WIN!!\");\r\n        endGame();\r\n    }\r\n    function spawnZombie() {\r\n        let xPos = 2 + (Math.random() * 10);\r\n        (0, zombie_1.createZombie)(xPos);\r\n    }\r\n    function endGame() {\r\n        if (gameController_3.GameControllerComponent.has(game_2.coneEntity)) {\r\n            gameController_3.GameControllerComponent.getMutable(game_2.coneEntity).spawnActive = false;\r\n        }\r\n        if (AudioSource.has(game_2.coneEntity)) {\r\n            AudioSource.getMutable(game_2.coneEntity).playing = false;\r\n        }\r\n    }\r\n});\r\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "dcc0994966544fb9c1455f7dc4a64f4d7a29104e305acfbc42e271d9051f3aed"
  }
]