"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.mockPreviewWearables = exports.getAllPreviewWearables = exports.wearableValidator = void 0;
var path = require("path");
var fs = require("fs");
var setupUtils_1 = require("./setupUtils");
var schemas_1 = require("@dcl/schemas");
exports.wearableValidator = (0, schemas_1.generateValidator)(schemas_1.Wearable.schema);
var serveWearable = function (_a) {
    var _b;
    var wearableJsonPath = _a.wearableJsonPath, baseUrl = _a.baseUrl;
    var wearableDir = path.dirname(wearableJsonPath);
    var wearableJson = JSON.parse(fs.readFileSync(wearableJsonPath).toString());
    if (!(0, exports.wearableValidator)(wearableJson)) {
        var errors = (exports.wearableValidator.errors || [])
            .map(function (a) { return "".concat(a.dataPath, " ").concat(a.message); })
            .join('');
        if (errors.length > 0) {
            console.error("Unable to validate '".concat(wearableJsonPath, "' properly, please check it: ").concat(errors));
        }
        else {
            console.error("Unable to validate '".concat(wearableJsonPath, "' properly, please check it."));
        }
        throw new Error("Invalid wearable.json (".concat(wearableJson, ")"));
    }
    else {
    }
    var dclIgnorePath = path.resolve(wearableDir, '.dclignore');
    var ignoreFileContent = '';
    if (fs.existsSync(dclIgnorePath)) {
        ignoreFileContent = fs.readFileSync(path.resolve(wearableDir, '.dclignore'), 'utf-8');
    }
    var hashedFiles = (0, setupUtils_1.getFilesFromFolder)({
        folder: wearableDir,
        addOriginalPath: false,
        ignorePattern: ignoreFileContent
    });
    var thumbnailFiltered = hashedFiles.filter(function ($) { return ($ === null || $ === void 0 ? void 0 : $.file) === wearableJson.thumbnail; });
    var thumbnail = thumbnailFiltered.length > 0 &&
        ((_b = thumbnailFiltered[0]) === null || _b === void 0 ? void 0 : _b.hash) &&
        "".concat(baseUrl, "/").concat(thumbnailFiltered[0].hash);
    var wearableJsonWithContents = __assign(__assign({}, wearableJson), { baseUrl: baseUrl, thumbnail: thumbnail, data: __assign(__assign({}, wearableJson.data), { thumbnail: thumbnail, scene: hashedFiles, baseUrl: baseUrl, representations: wearableJson.data.representations.map(function (representation) { return (__assign(__assign({}, representation), { contents: hashedFiles.map(function (file) { return ({
                    key: "".concat(file === null || file === void 0 ? void 0 : file.file),
                    url: "".concat(baseUrl, "/").concat(file === null || file === void 0 ? void 0 : file.hash)
                }); }) })); }) }) });
    return wearableJsonWithContents;
};
var getAllPreviewWearables = function (_a) {
    var baseFolders = _a.baseFolders, baseUrl = _a.baseUrl;
    var wearablePathArray = [];
    for (var _i = 0, baseFolders_1 = baseFolders; _i < baseFolders_1.length; _i++) {
        var wearableDir = baseFolders_1[_i];
        var wearableJsonPath = path.resolve(wearableDir, 'wearable.json');
        if (fs.existsSync(wearableJsonPath)) {
            wearablePathArray.push(wearableJsonPath);
        }
    }
    var ret = [];
    for (var _b = 0, wearablePathArray_1 = wearablePathArray; _b < wearablePathArray_1.length; _b++) {
        var wearableJsonPath = wearablePathArray_1[_b];
        try {
            ret.push(serveWearable({ wearableJsonPath: wearableJsonPath, baseUrl: baseUrl }));
        }
        catch (err) {
            console.error("Couldn't mock the wearable ".concat(wearableJsonPath, ". Please verify the correct format and scheme."), err);
        }
    }
    return ret;
};
exports.getAllPreviewWearables = getAllPreviewWearables;
var mockPreviewWearables = function (app, baseFolders) {
    app.use('/preview-wearables/:id', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
        var baseUrl, wearables, wearableId;
        return __generator(this, function (_a) {
            baseUrl = "".concat(req.protocol, "://").concat(req.get('host'), "/content/contents");
            wearables = (0, exports.getAllPreviewWearables)({
                baseUrl: baseUrl,
                baseFolders: baseFolders
            });
            wearableId = req.params.id;
            return [2 /*return*/, res.json({
                    ok: true,
                    data: wearables.filter(function (w) { return (w === null || w === void 0 ? void 0 : w.id) === wearableId; })
                })];
        });
    }); });
    app.use('/preview-wearables', function (req, res) { return __awaiter(void 0, void 0, void 0, function () {
        var baseUrl;
        return __generator(this, function (_a) {
            baseUrl = "".concat(req.protocol, "://").concat(req.get('host'), "/content/contents");
            return [2 /*return*/, res.json({
                    ok: true,
                    data: (0, exports.getAllPreviewWearables)({ baseUrl: baseUrl, baseFolders: baseFolders })
                })];
        });
    }); });
};
exports.mockPreviewWearables = mockPreviewWearables;
