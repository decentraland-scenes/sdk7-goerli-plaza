[
  {
    "path": "node_modules/@dcl/amd/dist/amd.js",
    "content": "\"use strict\";\n// A naive attempt at getting the global `this`. Donâ€™t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    const anonymousQueue = [];\n    const cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (const x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports =\n                typeof factory === 'function'\n                    ? factory.apply(globalObject, deps) || exports\n                    : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror === 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        const handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule === toModule || depth === 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            const path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        const from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        const inQueue = {};\n        for (const i in registeredModules) {\n            inQueue[i] = false;\n        }\n        const queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            const element = queue.shift();\n            const dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    const dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    const dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        const dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies +\n                ' has not been defined. Please include it as a dependency in ' +\n                parentModule +\n                \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    const _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, \n            // eslint-disable-next-line prefer-rest-params\n            anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0) {\n            const exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (const i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (const i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ === 'require' || $ === 'exports' || $ === 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles\n                    .map(($) => '\\n  - ' + $.join(' -> '))\n                    .join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules\n                    .map(($) => '\\n  - ' + $.name)\n                    .join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern =\n            /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "1fcc2d76805964317daad52b00a258748d14ac85cfd45892dfdb47e8951b1ef1"
  },
  {
    "path": "node_modules/@dcl/sdk/dist/ecs7/index.js",
    "content": "(function (exports) {\n\t'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tvar dist$1 = {};\n\n\tvar Quaternion = {};\n\n\tvar Vector3$1 = {};\n\n\tvar hasRequiredVector3;\n\n\tfunction requireVector3 () {\n\t\tif (hasRequiredVector3) return Vector3$1;\n\t\thasRequiredVector3 = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Vector3 = void 0;\n\t\t\t(function (Vector3) {\n\t\t\t    /**\n\t\t\t     * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n\t\t\t     * @param x - defines the first coordinates (on X axis)\n\t\t\t     * @param y - defines the second coordinates (on Y axis)\n\t\t\t     * @param z - defines the third coordinates (on Z axis)\n\t\t\t     */\n\t\t\t    function create(\n\t\t\t    /**\n\t\t\t     * Defines the first coordinates (on X axis)\n\t\t\t     */\n\t\t\t    x = 0, \n\t\t\t    /**\n\t\t\t     * Defines the second coordinates (on Y axis)\n\t\t\t     */\n\t\t\t    y = 0, \n\t\t\t    /**\n\t\t\t     * Defines the third coordinates (on Z axis)\n\t\t\t     */\n\t\t\t    z = 0) {\n\t\t\t        return { x, y, z };\n\t\t\t    }\n\t\t\t    Vector3.create = create;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the addition of the two given vectors.\n\t\t\t     * @param vector1 - the first vector\n\t\t\t     * @param vector2 - the second vector\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function add(vector1, vector2) {\n\t\t\t        return {\n\t\t\t            x: vector1.x + vector2.x,\n\t\t\t            y: vector1.y + vector2.y,\n\t\t\t            z: vector1.z + vector2.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.add = add;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the substraction of the two given vectors.\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function subtract(minuend, subtrahend) {\n\t\t\t        return {\n\t\t\t            x: minuend.x - subtrahend.x,\n\t\t\t            y: minuend.y - subtrahend.y,\n\t\t\t            z: minuend.z - subtrahend.z\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.subtract = subtract;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the result of the substraction of the two given vectors.\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function subtractToRef(minuend, subtrahend, result) {\n\t\t\t        result.x = minuend.x - subtrahend.x;\n\t\t\t        result.y = minuend.y - subtrahend.y;\n\t\t\t        result.z = minuend.z - subtrahend.z;\n\t\t\t    }\n\t\t\t    Vector3.subtractToRef = subtractToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 with the other sign\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function opposite(value) {\n\t\t\t        return { x: -value.x, y: -value.y, z: -value.z };\n\t\t\t    }\n\t\t\t    Vector3.opposite = opposite;\n\t\t\t    /**\n\t\t\t     * Copy source into dest\n\t\t\t     *\n\t\t\t     */\n\t\t\t    function copy(source, dest) {\n\t\t\t        dest.x = source.x;\n\t\t\t        dest.y = source.y;\n\t\t\t        dest.z = source.z;\n\t\t\t    }\n\t\t\t    Vector3.copy = copy;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 with the same value\n\t\t\t     * @returns the resulting vector\n\t\t\t     */\n\t\t\t    function clone(source) {\n\t\t\t        return Object.assign({}, source);\n\t\t\t    }\n\t\t\t    Vector3.clone = clone;\n\t\t\t    // Properties\n\t\t\t    /**\n\t\t\t     * Gets the length of the Vector3\n\t\t\t     * @returns the length of the Vecto3\n\t\t\t     */\n\t\t\t    function length(vector) {\n\t\t\t        return Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);\n\t\t\t    }\n\t\t\t    Vector3.length = length;\n\t\t\t    /**\n\t\t\t     * Gets the squared length of the Vector3\n\t\t\t     * @returns squared length of the Vector3\n\t\t\t     */\n\t\t\t    function lengthSquared(vector) {\n\t\t\t        return vector.x * vector.x + vector.y * vector.y + vector.z * vector.z;\n\t\t\t    }\n\t\t\t    Vector3.lengthSquared = lengthSquared;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n\t\t\t     * @param scale - defines the multiplier factor\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function scaleToRef(vector, scale, result) {\n\t\t\t        result.x = vector.x * scale;\n\t\t\t        result.y = vector.y * scale;\n\t\t\t        result.z = vector.z * scale;\n\t\t\t    }\n\t\t\t    Vector3.scaleToRef = scaleToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n\t\t\t     * @param scale - defines the multiplier factor\n\t\t\t     * @returns a new Vector3\n\t\t\t     */\n\t\t\t    function scale(vector, scale) {\n\t\t\t        return create(vector.x * scale, vector.y * scale, vector.z * scale);\n\t\t\t    }\n\t\t\t    Vector3.scale = scale;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3 with the given input length.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @param len - the length of the vector\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeFromLength(vector, len) {\n\t\t\t        const result = create(0, 0, 0);\n\t\t\t        normalizeFromLengthToRef(vector, len, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.normalizeFromLength = normalizeFromLength;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3 with the given input length.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @param len - the length of the vector\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeFromLengthToRef(vector, len, result) {\n\t\t\t        if (len === 0 || len === 1.0) {\n\t\t\t            copy(vector, result);\n\t\t\t            return;\n\t\t\t        }\n\t\t\t        scaleToRef(vector, 1.0 / len, result);\n\t\t\t    }\n\t\t\t    Vector3.normalizeFromLengthToRef = normalizeFromLengthToRef;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalize(vector) {\n\t\t\t        return normalizeFromLength(vector, length(vector));\n\t\t\t    }\n\t\t\t    Vector3.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Normalize the current Vector3.\n\t\t\t     * Please note that this is an in place operation.\n\t\t\t     * @returns the current updated Vector3\n\t\t\t     */\n\t\t\t    function normalizeToRef(vector, result) {\n\t\t\t        normalizeFromLengthToRef(vector, length(vector), result);\n\t\t\t    }\n\t\t\t    Vector3.normalizeToRef = normalizeToRef;\n\t\t\t    /**\n\t\t\t     * Returns the dot product (float) between the vectors \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the dot product\n\t\t\t     */\n\t\t\t    function dot(left, right) {\n\t\t\t        return left.x * right.x + left.y * right.y + left.z * right.z;\n\t\t\t    }\n\t\t\t    Vector3.dot = dot;\n\t\t\t    /**\n\t\t\t     * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n\t\t\t     * @param q - defines the Quaternion\n\t\t\t     * @param result - defines the target Vector3\n\t\t\t     * @returns the current Vector3\n\t\t\t     */\n\t\t\t    function rotate(vector, q) {\n\t\t\t        const { x, y, z } = vector;\n\t\t\t        const { x: qx, y: qy, z: qz, w: qw } = q;\n\t\t\t        // calculate quat * vector\n\t\t\t        const ix = qw * x + qy * z - qz * y;\n\t\t\t        const iy = qw * y + qz * x - qx * z;\n\t\t\t        const iz = qw * z + qx * y - qy * x;\n\t\t\t        const iw = -qx * x - qy * y - qz * z;\n\t\t\t        // calculate result * inverse quat\n\t\t\t        return {\n\t\t\t            x: ix * qw + iw * -qx + iy * -qz - iz * -qy,\n\t\t\t            y: iy * qw + iw * -qy + iz * -qx - ix * -qz,\n\t\t\t            z: iz * qw + iw * -qz + ix * -qy - iy * -qx\n\t\t\t        };\n\t\t\t    }\n\t\t\t    Vector3.rotate = rotate;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n\t\t\t     * @param start - defines the start value\n\t\t\t     * @param end - defines the end value\n\t\t\t     * @param amount - max defines amount between both (between 0 and 1)\n\t\t\t     * @returns the new Vector3\n\t\t\t     */\n\t\t\t    function lerp(start, end, amount) {\n\t\t\t        const result = create(0, 0, 0);\n\t\t\t        lerpToRef(start, end, amount, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.lerp = lerp;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n\t\t\t     * @param start - defines the start value\n\t\t\t     * @param end - defines the end value\n\t\t\t     * @param amount - max defines amount between both (between 0 and 1)\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function lerpToRef(start, end, amount, result) {\n\t\t\t        result.x = start.x + (end.x - start.x) * amount;\n\t\t\t        result.y = start.y + (end.y - start.y) * amount;\n\t\t\t        result.z = start.z + (end.z - start.z) * amount;\n\t\t\t    }\n\t\t\t    Vector3.lerpToRef = lerpToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n\t\t\t     * The cross product is then orthogonal to both \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the cross product\n\t\t\t     */\n\t\t\t    function cross(left, right) {\n\t\t\t        const result = Vector3.Zero();\n\t\t\t        Vector3.crossToRef(left, right, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Vector3.cross = cross;\n\t\t\t    /**\n\t\t\t     * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n\t\t\t     * The cross product is then orthogonal to both \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @param result - defines the Vector3 where to store the result\n\t\t\t     */\n\t\t\t    function crossToRef(left, right, result) {\n\t\t\t        result.x = left.y * right.z - left.z * right.y;\n\t\t\t        result.y = left.z * right.x - left.x * right.z;\n\t\t\t        result.z = left.x * right.y - left.y * right.x;\n\t\t\t    }\n\t\t\t    Vector3.crossToRef = crossToRef;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n\t\t\t     * @returns a new empty Vector3\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        return create(0.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Zero = Zero;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n\t\t\t     * @returns a new unit Vector3\n\t\t\t     */\n\t\t\t    function One() {\n\t\t\t        return create(1.0, 1.0, 1.0);\n\t\t\t    }\n\t\t\t    Vector3.One = One;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set tolengthSquared (0.0, 1.0, 0.0)\n\t\t\t     * @returns a new up Vector3\n\t\t\t     */\n\t\t\t    function Up() {\n\t\t\t        return create(0.0, 1.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Up = Up;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n\t\t\t     * @returns a new down Vector3\n\t\t\t     */\n\t\t\t    function Down() {\n\t\t\t        return create(0.0, -1.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Down = Down;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n\t\t\t     * @returns a new forward Vector3\n\t\t\t     */\n\t\t\t    function Forward() {\n\t\t\t        return create(0.0, 0.0, 1.0);\n\t\t\t    }\n\t\t\t    Vector3.Forward = Forward;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n\t\t\t     * @returns a new forward Vector3\n\t\t\t     */\n\t\t\t    function Backward() {\n\t\t\t        return create(0.0, 0.0, -1.0);\n\t\t\t    }\n\t\t\t    Vector3.Backward = Backward;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n\t\t\t     * @returns a new right Vector3\n\t\t\t     */\n\t\t\t    function Right() {\n\t\t\t        return create(1.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Right = Right;\n\t\t\t    /**\n\t\t\t     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n\t\t\t     * @returns a new left Vector3\n\t\t\t     */\n\t\t\t    function Left() {\n\t\t\t        return create(-1.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Vector3.Left = Left;\n\t\t\t})(exports.Vector3 || (exports.Vector3 = {}));\n\t\t\t\n\t} (Vector3$1));\n\t\treturn Vector3$1;\n\t}\n\n\tvar Scalar = {};\n\n\tvar hasRequiredScalar;\n\n\tfunction requireScalar () {\n\t\tif (hasRequiredScalar) return Scalar;\n\t\thasRequiredScalar = 1;\n\t\tObject.defineProperty(Scalar, \"__esModule\", { value: true });\n\t\tScalar.Scalar = void 0;\n\t\t/**\n\t\t * Two pi constants convenient for computation.\n\t\t */\n\t\tconst TwoPi = Math.PI * 2;\n\t\t/**\n\t\t * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n\t\t * @param a - number\n\t\t * @param b - number\n\t\t * @param epsilon - (default = 1.401298E-45)\n\t\t * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n\t\t */\n\t\tfunction withinEpsilon(a, b, epsilon = 1.401298e-45) {\n\t\t    const num = a - b;\n\t\t    return -epsilon <= num && num <= epsilon;\n\t\t}\n\t\t/**\n\t\t * Returns a string : the upper case translation of the number i to hexadecimal.\n\t\t * @param i - number\n\t\t * @returns the upper case translation of the number i to hexadecimal.\n\t\t */\n\t\tfunction toHex(i) {\n\t\t    const str = i.toString(16);\n\t\t    if (i <= 15) {\n\t\t        return ('0' + str).toUpperCase();\n\t\t    }\n\t\t    return str.toUpperCase();\n\t\t}\n\t\t/**\n\t\t * Returns -1 if value is negative and +1 is value is positive.\n\t\t * @param _value - the value\n\t\t * @returns the value itself if it's equal to zero.\n\t\t */\n\t\tfunction sign(value) {\n\t\t    const _value = +value; // convert to a number\n\t\t    if (_value === 0 || isNaN(_value)) {\n\t\t        return _value;\n\t\t    }\n\t\t    return _value > 0 ? 1 : -1;\n\t\t}\n\t\t/**\n\t\t * Returns the value itself if it's between min and max.\n\t\t * Returns min if the value is lower than min.\n\t\t * Returns max if the value is greater than max.\n\t\t * @param value - the value to clmap\n\t\t * @param min - the min value to clamp to (default: 0)\n\t\t * @param max - the max value to clamp to (default: 1)\n\t\t * @returns the clamped value\n\t\t */\n\t\tfunction clamp(value, min = 0, max = 1) {\n\t\t    return Math.min(max, Math.max(min, value));\n\t\t}\n\t\t/**\n\t\t * the log2 of value.\n\t\t * @param value - the value to compute log2 of\n\t\t * @returns the log2 of value.\n\t\t */\n\t\tfunction log2(value) {\n\t\t    return Math.log(value) * Math.LOG2E;\n\t\t}\n\t\t/**\n\t\t * Loops the value, so that it is never larger than length and never smaller than 0.\n\t\t *\n\t\t * This is similar to the modulo operator but it works with floating point numbers.\n\t\t * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n\t\t * With t = 5 and length = 2.5, the result would be 0.0.\n\t\t * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n\t\t * @param value - the value\n\t\t * @param length - the length\n\t\t * @returns the looped value\n\t\t */\n\t\tfunction repeat(value, length) {\n\t\t    return value - Math.floor(value / length) * length;\n\t\t}\n\t\t/**\n\t\t * Normalize the value between 0.0 and 1.0 using min and max values\n\t\t * @param value - value to normalize\n\t\t * @param min - max to normalize between\n\t\t * @param max - min to normalize between\n\t\t * @returns the normalized value\n\t\t */\n\t\tfunction normalize(value, min, max) {\n\t\t    return (value - min) / (max - min);\n\t\t}\n\t\t/**\n\t\t * Denormalize the value from 0.0 and 1.0 using min and max values\n\t\t * @param normalized - value to denormalize\n\t\t * @param min - max to denormalize between\n\t\t * @param max - min to denormalize between\n\t\t * @returns the denormalized value\n\t\t */\n\t\tfunction denormalize(normalized, min, max) {\n\t\t    return normalized * (max - min) + min;\n\t\t}\n\t\t/**\n\t\t * Calculates the shortest difference between two given angles given in degrees.\n\t\t * @param current - current angle in degrees\n\t\t * @param target - target angle in degrees\n\t\t * @returns the delta\n\t\t */\n\t\tfunction deltaAngle(current, target) {\n\t\t    let num = repeat(target - current, 360.0);\n\t\t    if (num > 180.0) {\n\t\t        num -= 360.0;\n\t\t    }\n\t\t    return num;\n\t\t}\n\t\t/**\n\t\t * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n\t\t * @param tx - value\n\t\t * @param length - length\n\t\t * @returns The returned value will move back and forth between 0 and length\n\t\t */\n\t\tfunction pingPong(tx, length) {\n\t\t    const t = repeat(tx, length * 2.0);\n\t\t    return length - Math.abs(t - length);\n\t\t}\n\t\t/**\n\t\t * Interpolates between min and max with smoothing at the limits.\n\t\t *\n\t\t * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n\t\t * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n\t\t * @param from - from\n\t\t * @param to - to\n\t\t * @param tx - value\n\t\t * @returns the smooth stepped value\n\t\t */\n\t\tfunction smoothStep(from, to, tx) {\n\t\t    let t = clamp(tx);\n\t\t    t = -2.0 * t * t * t + 3.0 * t * t;\n\t\t    return to * t + from * (1.0 - t);\n\t\t}\n\t\t/**\n\t\t * Moves a value current towards target.\n\t\t *\n\t\t * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n\t\t * Negative values of maxDelta pushes the value away from target.\n\t\t * @param current - current value\n\t\t * @param target - target value\n\t\t * @param maxDelta - max distance to move\n\t\t * @returns resulting value\n\t\t */\n\t\tfunction moveTowards(current, target, maxDelta) {\n\t\t    let result = 0;\n\t\t    if (Math.abs(target - current) <= maxDelta) {\n\t\t        result = target;\n\t\t    }\n\t\t    else {\n\t\t        result = current + sign(target - current) * maxDelta;\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n\t\t *\n\t\t * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n\t\t *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n\t\t * @param current - current value\n\t\t * @param target - target value\n\t\t * @param maxDelta - max distance to move\n\t\t * @returns resulting angle\n\t\t */\n\t\tfunction moveTowardsAngle(current, target, maxDelta) {\n\t\t    const num = deltaAngle(current, target);\n\t\t    let result = 0;\n\t\t    if (-maxDelta < num && num < maxDelta) {\n\t\t        result = target;\n\t\t    }\n\t\t    else {\n\t\t        result = moveTowards(current, current + num, maxDelta);\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar\n\t\t * @param start - start value\n\t\t * @param end - target value\n\t\t * @param amount - amount to lerp between\n\t\t * @returns the lerped value\n\t\t */\n\t\tfunction lerp(start, end, amount) {\n\t\t    return start + (end - start) * amount;\n\t\t}\n\t\t/**\n\t\t * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n\t\t * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n\t\t * @param start - start value\n\t\t * @param end - target value\n\t\t * @param amount - amount to lerp between\n\t\t * @returns the lerped value\n\t\t */\n\t\tfunction lerpAngle(start, end, amount) {\n\t\t    let num = repeat(end - start, 360.0);\n\t\t    if (num > 180.0) {\n\t\t        num -= 360.0;\n\t\t    }\n\t\t    return start + num * clamp(amount);\n\t\t}\n\t\t/**\n\t\t * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n\t\t * @param a - start value\n\t\t * @param b - target value\n\t\t * @param value - value between a and b\n\t\t * @returns the inverseLerp value\n\t\t */\n\t\tfunction inverseLerp(a, b, value) {\n\t\t    let result = 0;\n\t\t    if (a !== b) {\n\t\t        result = clamp((value - a) / (b - a));\n\t\t    }\n\t\t    else {\n\t\t        result = 0.0;\n\t\t    }\n\t\t    return result;\n\t\t}\n\t\t/**\n\t\t * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n\t\t * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n\t\t * @param value1 - spline value\n\t\t * @param tangent1 - spline value\n\t\t * @param value2 - spline value\n\t\t * @param tangent2 - spline value\n\t\t * @param amount - input value\n\t\t * @returns hermite result\n\t\t */\n\t\tfunction hermite(value1, tangent1, value2, tangent2, amount) {\n\t\t    const squared = amount * amount;\n\t\t    const cubed = amount * squared;\n\t\t    const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n\t\t    const part2 = -2.0 * cubed + 3.0 * squared;\n\t\t    const part3 = cubed - 2.0 * squared + amount;\n\t\t    const part4 = cubed - squared;\n\t\t    return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n\t\t}\n\t\t/**\n\t\t * Returns a random float number between and min and max values\n\t\t * @param min - min value of random\n\t\t * @param max - max value of random\n\t\t * @returns random value\n\t\t */\n\t\tfunction randomRange(min, max) {\n\t\t    if (min === max) {\n\t\t        return min;\n\t\t    }\n\t\t    return Math.random() * (max - min) + min;\n\t\t}\n\t\t/**\n\t\t * This function returns percentage of a number in a given range.\n\t\t *\n\t\t * RangeToPercent(40,20,60) will return 0.5 (50%)\n\t\t * RangeToPercent(34,0,100) will return 0.34 (34%)\n\t\t * @param num - to convert to percentage\n\t\t * @param min - min range\n\t\t * @param max - max range\n\t\t * @returns the percentage\n\t\t */\n\t\tfunction rangeToPercent(num, min, max) {\n\t\t    return (num - min) / (max - min);\n\t\t}\n\t\t/**\n\t\t * This function returns number that corresponds to the percentage in a given range.\n\t\t *\n\t\t * PercentToRange(0.34,0,100) will return 34.\n\t\t * @param percent - to convert to number\n\t\t * @param min - min range\n\t\t * @param max - max range\n\t\t * @returns the number\n\t\t */\n\t\tfunction percentToRange(percent, min, max) {\n\t\t    return (max - min) * percent + min;\n\t\t}\n\t\t/**\n\t\t * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n\t\t * @param angle - The angle to normalize in radian.\n\t\t * @returns The converted angle.\n\t\t */\n\t\tfunction normalizeRadians(angle) {\n\t\t    // More precise but slower version kept for reference.\n\t\t    // tslint:disable:no-commented-out-code\n\t\t    /*\n\t\t      // angle = angle % Tools.TwoPi;\n\t\t      // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n\t\t  \n\t\t      //if (angle > Math.PI) {\n\t\t      //\tangle -= Tools.TwoPi;\n\t\t      //}\n\t\t        */\n\t\t    return angle - TwoPi * Math.floor((angle + Math.PI) / TwoPi);\n\t\t}\n\t\t/**\n\t\t * Scalar computation library\n\t\t * @public\n\t\t */\n\t\tScalar.Scalar = {\n\t\t    withinEpsilon,\n\t\t    toHex,\n\t\t    sign,\n\t\t    clamp,\n\t\t    log2,\n\t\t    repeat,\n\t\t    normalize,\n\t\t    denormalize,\n\t\t    deltaAngle,\n\t\t    pingPong,\n\t\t    smoothStep,\n\t\t    moveTowards,\n\t\t    moveTowardsAngle,\n\t\t    lerp,\n\t\t    lerpAngle,\n\t\t    inverseLerp,\n\t\t    hermite,\n\t\t    randomRange,\n\t\t    rangeToPercent,\n\t\t    percentToRange,\n\t\t    normalizeRadians,\n\t\t    TwoPi\n\t\t};\n\t\t\n\t\treturn Scalar;\n\t}\n\n\tvar types$1 = {};\n\n\tvar hasRequiredTypes$1;\n\n\tfunction requireTypes$1 () {\n\t\tif (hasRequiredTypes$1) return types$1;\n\t\thasRequiredTypes$1 = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;\n\t\t\t(function (Orientation) {\n\t\t\t    /**\n\t\t\t     * Clockwise\n\t\t\t     */\n\t\t\t    Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n\t\t\t    /** Counter clockwise */\n\t\t\t    Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n\t\t\t})(exports.Orientation || (exports.Orientation = {}));\n\t\t\t(function (Space) {\n\t\t\t    /** Local (object) space */\n\t\t\t    Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\n\t\t\t    /** World space */\n\t\t\t    Space[Space[\"WORLD\"] = 1] = \"WORLD\";\n\t\t\t    /** Bone space */\n\t\t\t    Space[Space[\"BONE\"] = 2] = \"BONE\";\n\t\t\t})(exports.Space || (exports.Space = {}));\n\t\t\t/**\n\t\t\t * Constant used to convert a value to gamma space\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.ToGammaSpace = 1 / 2.2;\n\t\t\t/**\n\t\t\t * Constant used to convert a value to linear space\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.ToLinearSpace = 2.2;\n\t\t\t/**\n\t\t\t * Constant used to define the minimal number value in Babylon.js\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.Epsilon = 0.000001;\n\t\t\t/**\n\t\t\t * Constant used to convert from Euler degrees to radians\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.DEG2RAD = Math.PI / 180;\n\t\t\t/**\n\t\t\t * Constant used to convert from radians to Euler degrees\n\t\t\t * @public\n\t\t\t */\n\t\t\texports.RAD2DEG = 360 / (Math.PI * 2);\n\t\t\t\n\t} (types$1));\n\t\treturn types$1;\n\t}\n\n\tvar hasRequiredQuaternion;\n\n\tfunction requireQuaternion () {\n\t\tif (hasRequiredQuaternion) return Quaternion;\n\t\thasRequiredQuaternion = 1;\n\t\t(function (exports) {\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.Quaternion = void 0;\n\t\t\tconst Vector3_1 = requireVector3();\n\t\t\tconst Scalar_1 = requireScalar();\n\t\t\tconst types_1 = requireTypes$1();\n\t\t\t(function (Quaternion) {\n\t\t\t    /**\n\t\t\t     * Creates a new Quaternion from the given floats\n\t\t\t     * @param x - defines the first component (0 by default)\n\t\t\t     * @param y - defines the second component (0 by default)\n\t\t\t     * @param z - defines the third component (0 by default)\n\t\t\t     * @param w - defines the fourth component (1.0 by default)\n\t\t\t     */\n\t\t\t    function create(\n\t\t\t    /** defines the first component (0 by default) */\n\t\t\t    x = 0.0, \n\t\t\t    /** defines the second component (0 by default) */\n\t\t\t    y = 0.0, \n\t\t\t    /** defines the third component (0 by default) */\n\t\t\t    z = 0.0, \n\t\t\t    /** defines the fourth component (1.0 by default) */\n\t\t\t    w = 1.0) {\n\t\t\t        return { x, y, z, w };\n\t\t\t    }\n\t\t\t    Quaternion.create = create;\n\t\t\t    /**\n\t\t\t     * Returns a new Quaternion as the result of the addition of the two given quaternions.\n\t\t\t     * @param q1 - the first quaternion\n\t\t\t     * @param q2 - the second quaternion\n\t\t\t     * @returns the resulting quaternion\n\t\t\t     */\n\t\t\t    function add(q1, q2) {\n\t\t\t        return { x: q1.x + q2.x, y: q1.y + q2.y, z: q1.z + q2.z, w: q1.w + q2.w };\n\t\t\t    }\n\t\t\t    Quaternion.add = add;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n\t\t\t     * @param yaw - defines the rotation around Y axis\n\t\t\t     * @param pitch - defines the rotation around X axis\n\t\t\t     * @param roll - defines the rotation around Z axis\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationYawPitchRoll(yaw, pitch, roll) {\n\t\t\t        // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t        const halfPitch = pitch * 0.5;\n\t\t\t        const halfYaw = yaw * 0.5;\n\t\t\t        const halfRoll = roll * 0.5;\n\t\t\t        const c1 = Math.cos(halfPitch);\n\t\t\t        const c2 = Math.cos(halfYaw);\n\t\t\t        const c3 = Math.cos(halfRoll);\n\t\t\t        const s1 = Math.sin(halfPitch);\n\t\t\t        const s2 = Math.sin(halfYaw);\n\t\t\t        const s3 = Math.sin(halfRoll);\n\t\t\t        return create(c2 * s1 * c3 + s2 * c1 * s3, s2 * c1 * c3 - c2 * s1 * s3, c2 * c1 * s3 - s2 * s1 * c3, c2 * c1 * c3 + s2 * s1 * s3);\n\t\t\t    }\n\t\t\t    Quaternion.rotationYawPitchRoll = rotationYawPitchRoll;\n\t\t\t    /**\n\t\t\t     * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n\t\t\t     * @param x - the rotation on the x axis in euler degrees\n\t\t\t     * @param y - the rotation on the y axis in euler degrees\n\t\t\t     * @param z - the rotation on the z axis in euler degrees\n\t\t\t     */\n\t\t\t    function euler(x, y, z) {\n\t\t\t        return rotationYawPitchRoll(y * types_1.DEG2RAD, x * types_1.DEG2RAD, z * types_1.DEG2RAD);\n\t\t\t    }\n\t\t\t    Quaternion.euler = euler;\n\t\t\t    /**\n\t\t\t     * Gets length of current quaternion\n\t\t\t     * @returns the quaternion length (float)\n\t\t\t     */\n\t\t\t    function length(q) {\n\t\t\t        return Math.sqrt(lengthSquared(q));\n\t\t\t    }\n\t\t\t    Quaternion.length = length;\n\t\t\t    /**\n\t\t\t     * Gets length of current quaternion\n\t\t\t     * @returns the quaternion length (float)\n\t\t\t     */\n\t\t\t    function lengthSquared(q) {\n\t\t\t        return q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;\n\t\t\t    }\n\t\t\t    Quaternion.lengthSquared = lengthSquared;\n\t\t\t    /**\n\t\t\t     * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n\t\t\t     * @param left - defines the left operand\n\t\t\t     * @param right - defines the right operand\n\t\t\t     * @returns the dot product\n\t\t\t     */\n\t\t\t    function dot(left, right) {\n\t\t\t        return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\n\t\t\t    }\n\t\t\t    Quaternion.dot = dot;\n\t\t\t    /**\n\t\t\t     * Returns the angle in degrees between two rotations a and b.\n\t\t\t     * @param quat1 - defines the first quaternion\n\t\t\t     * @param quat2 - defines the second quaternion\n\t\t\t     */\n\t\t\t    function angle(quat1, quat2) {\n\t\t\t        const dotVal = dot(quat1, quat2);\n\t\t\t        return Math.acos(Math.min(Math.abs(dotVal), 1)) * 2 * types_1.RAD2DEG;\n\t\t\t    }\n\t\t\t    Quaternion.angle = angle;\n\t\t\t    /**\n\t\t\t     * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n\t\t\t     * @param from - defines the first quaternion\n\t\t\t     * @param to - defines the second quaternion\n\t\t\t     * @param maxDegreesDelta - the interval step\n\t\t\t     */\n\t\t\t    function rotateTowards(from, to, maxDegreesDelta) {\n\t\t\t        const num = angle(from, to);\n\t\t\t        if (num === 0) {\n\t\t\t            return to;\n\t\t\t        }\n\t\t\t        const t = Math.min(1, maxDegreesDelta / num);\n\t\t\t        return slerp(from, to, t);\n\t\t\t    }\n\t\t\t    Quaternion.rotateTowards = rotateTowards;\n\t\t\t    /**\n\t\t\t     * Creates a rotation with the specified forward and upwards directions.\n\t\t\t     * @param forward - the direction to look in\n\t\t\t     * @param up - the vector that defines in which direction up is\n\t\t\t     */\n\t\t\t    function lookRotation(forward, up = { x: 0.0, y: 1.0, z: 0.0 }) {\n\t\t\t        const forwardNew = Vector3_1.Vector3.normalize(forward);\n\t\t\t        const right = Vector3_1.Vector3.normalize(Vector3_1.Vector3.cross(up, forwardNew));\n\t\t\t        const upNew = Vector3_1.Vector3.cross(forwardNew, right);\n\t\t\t        const m00 = right.x;\n\t\t\t        const m01 = right.y;\n\t\t\t        const m02 = right.z;\n\t\t\t        const m10 = upNew.x;\n\t\t\t        const m11 = upNew.y;\n\t\t\t        const m12 = upNew.z;\n\t\t\t        const m20 = forwardNew.x;\n\t\t\t        const m21 = forwardNew.y;\n\t\t\t        const m22 = forwardNew.z;\n\t\t\t        const num8 = m00 + m11 + m22;\n\t\t\t        const quaternion = create();\n\t\t\t        if (num8 > 0) {\n\t\t\t            let num = Math.sqrt(num8 + 1);\n\t\t\t            quaternion.w = num * 0.5;\n\t\t\t            num = 0.5 / num;\n\t\t\t            quaternion.x = (m12 - m21) * num;\n\t\t\t            quaternion.y = (m20 - m02) * num;\n\t\t\t            quaternion.z = (m01 - m10) * num;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        if (m00 >= m11 && m00 >= m22) {\n\t\t\t            const num7 = Math.sqrt(1 + m00 - m11 - m22);\n\t\t\t            const num4 = 0.5 / num7;\n\t\t\t            quaternion.x = 0.5 * num7;\n\t\t\t            quaternion.y = (m01 + m10) * num4;\n\t\t\t            quaternion.z = (m02 + m20) * num4;\n\t\t\t            quaternion.w = (m12 - m21) * num4;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        if (m11 > m22) {\n\t\t\t            const num6 = Math.sqrt(1 + m11 - m00 - m22);\n\t\t\t            const num3 = 0.5 / num6;\n\t\t\t            quaternion.x = (m10 + m01) * num3;\n\t\t\t            quaternion.y = 0.5 * num6;\n\t\t\t            quaternion.z = (m21 + m12) * num3;\n\t\t\t            quaternion.w = (m20 - m02) * num3;\n\t\t\t            return quaternion;\n\t\t\t        }\n\t\t\t        const num5 = Math.sqrt(1 + m22 - m00 - m11);\n\t\t\t        const num2 = 0.5 / num5;\n\t\t\t        quaternion.x = (m20 + m02) * num2;\n\t\t\t        quaternion.y = (m21 + m12) * num2;\n\t\t\t        quaternion.z = 0.5 * num5;\n\t\t\t        quaternion.w = (m01 - m10) * num2;\n\t\t\t        return quaternion;\n\t\t\t    }\n\t\t\t    Quaternion.lookRotation = lookRotation;\n\t\t\t    /**\n\t\t\t     * Normalize in place the current quaternion\n\t\t\t     * @returns the current updated quaternion\n\t\t\t     */\n\t\t\t    function normalize(q) {\n\t\t\t        const qLength = 1.0 / length(q);\n\t\t\t        return create(q.x * qLength, q.y * qLength, q.z * qLength, q.w * qLength);\n\t\t\t    }\n\t\t\t    Quaternion.normalize = normalize;\n\t\t\t    /**\n\t\t\t     * Creates a rotation which rotates from fromDirection to toDirection.\n\t\t\t     * @param from - defines the first direction Vector\n\t\t\t     * @param to - defines the target direction Vector\n\t\t\t     */\n\t\t\t    function fromToRotation(from, to, up = Vector3_1.Vector3.Up()) {\n\t\t\t        // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n\t\t\t        const v0 = Vector3_1.Vector3.normalize(from);\n\t\t\t        const v1 = Vector3_1.Vector3.normalize(to);\n\t\t\t        const a = Vector3_1.Vector3.cross(v0, v1);\n\t\t\t        const w = Math.sqrt(Vector3_1.Vector3.lengthSquared(v0) * Vector3_1.Vector3.lengthSquared(v1)) +\n\t\t\t            Vector3_1.Vector3.dot(v0, v1);\n\t\t\t        if (Vector3_1.Vector3.lengthSquared(a) < 0.0001) {\n\t\t\t            // the vectors are parallel, check w to find direction\n\t\t\t            // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n\t\t\t            // otherwise the vectors in the same direction and no rotation should occur\n\t\t\t            return Math.abs(w) < 0.0001\n\t\t\t                ? normalize(create(up.x, up.y, up.z, 0))\n\t\t\t                : Identity();\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            return normalize(create(a.x, a.y, a.z, w));\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Quaternion.fromToRotation = fromToRotation;\n\t\t\t    /**\n\t\t\t     * Creates an identity quaternion\n\t\t\t     * @returns - the identity quaternion\n\t\t\t     */\n\t\t\t    function Identity() {\n\t\t\t        return create(0.0, 0.0, 0.0, 1.0);\n\t\t\t    }\n\t\t\t    Quaternion.Identity = Identity;\n\t\t\t    /**\n\t\t\t     * Gets or sets the euler angle representation of the rotation.\n\t\t\t     * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t     */\n\t\t\t    function eulerAngles(q) {\n\t\t\t        const out = Vector3_1.Vector3.create();\n\t\t\t        // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n\t\t\t        const unit = q.x * q.x + q.y * q.y + q.z * q.z + q.w * q.w;\n\t\t\t        // q will have a magnitude of 0.5 or greater if and only if q is a singularity case\n\t\t\t        const test = q.x * q.w - q.y * q.z;\n\t\t\t        if (test > 0.4995 * unit) {\n\t\t\t            // singularity at north pole\n\t\t\t            out.x = Math.PI / 2;\n\t\t\t            out.y = 2 * Math.atan2(q.y, q.x);\n\t\t\t            out.z = 0;\n\t\t\t        }\n\t\t\t        else if (test < -0.4995 * unit) {\n\t\t\t            // singularity at south pole\n\t\t\t            out.x = -Math.PI / 2;\n\t\t\t            out.y = -2 * Math.atan2(q.y, q.x);\n\t\t\t            out.z = 0;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            // no singularity - q is the majority of cases\n\t\t\t            out.x = Math.asin(2 * (q.w * q.x - q.y * q.z));\n\t\t\t            out.y = Math.atan2(2 * q.w * q.y + 2 * q.z * q.x, 1 - 2 * (q.x * q.x + q.y * q.y));\n\t\t\t            out.z = Math.atan2(2 * q.w * q.z + 2 * q.x * q.y, 1 - 2 * (q.z * q.z + q.x * q.x));\n\t\t\t        }\n\t\t\t        out.x *= types_1.RAD2DEG;\n\t\t\t        out.y *= types_1.RAD2DEG;\n\t\t\t        out.z *= types_1.RAD2DEG;\n\t\t\t        // ensure the degree values are between 0 and 360\n\t\t\t        out.x = Scalar_1.Scalar.repeat(out.x, 360);\n\t\t\t        out.y = Scalar_1.Scalar.repeat(out.y, 360);\n\t\t\t        out.z = Scalar_1.Scalar.repeat(out.z, 360);\n\t\t\t        return out;\n\t\t\t    }\n\t\t\t    Quaternion.eulerAngles = eulerAngles;\n\t\t\t    /**\n\t\t\t     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n\t\t\t     * @param yaw - defines the rotation around Y axis\n\t\t\t     * @param pitch - defines the rotation around X axis\n\t\t\t     * @param roll - defines the rotation around Z axis\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function rotationYawPitchRollToRef(yaw, pitch, roll, result) {\n\t\t\t        // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n\t\t\t        const halfPitch = pitch * 0.5;\n\t\t\t        const halfYaw = yaw * 0.5;\n\t\t\t        const halfRoll = roll * 0.5;\n\t\t\t        const c1 = Math.cos(halfPitch);\n\t\t\t        const c2 = Math.cos(halfYaw);\n\t\t\t        const c3 = Math.cos(halfRoll);\n\t\t\t        const s1 = Math.sin(halfPitch);\n\t\t\t        const s2 = Math.sin(halfYaw);\n\t\t\t        const s3 = Math.sin(halfRoll);\n\t\t\t        result.x = c2 * s1 * c3 + s2 * c1 * s3;\n\t\t\t        result.y = s2 * c1 * c3 - c2 * s1 * s3;\n\t\t\t        result.z = c2 * c1 * s3 - s2 * s1 * c3;\n\t\t\t        result.w = c2 * c1 * c3 + s2 * s1 * s3;\n\t\t\t    }\n\t\t\t    Quaternion.rotationYawPitchRollToRef = rotationYawPitchRollToRef;\n\t\t\t    /**\n\t\t\t     * Updates the given quaternion with the given rotation matrix values\n\t\t\t     * @param matrix - defines the source matrix\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function fromRotationMatrixToRef(matrix, result) {\n\t\t\t        const data = matrix._m;\n\t\t\t        // tslint:disable:one-variable-per-declaration\n\t\t\t        const m11 = data[0], m12 = data[4], m13 = data[8];\n\t\t\t        const m21 = data[1], m22 = data[5], m23 = data[9];\n\t\t\t        const m31 = data[2], m32 = data[6], m33 = data[10];\n\t\t\t        // tslint:enable:one-variable-per-declaration\n\t\t\t        const trace = m11 + m22 + m33;\n\t\t\t        let s;\n\t\t\t        if (trace > 0) {\n\t\t\t            s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t            result.w = 0.25 / s;\n\t\t\t            result.x = (m32 - m23) * s;\n\t\t\t            result.y = (m13 - m31) * s;\n\t\t\t            result.z = (m21 - m12) * s;\n\t\t\t        }\n\t\t\t        else if (m11 > m22 && m11 > m33) {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\t\t\t            result.w = (m32 - m23) / s;\n\t\t\t            result.x = 0.25 * s;\n\t\t\t            result.y = (m12 + m21) / s;\n\t\t\t            result.z = (m13 + m31) / s;\n\t\t\t        }\n\t\t\t        else if (m22 > m33) {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\t\t\t            result.w = (m13 - m31) / s;\n\t\t\t            result.x = (m12 + m21) / s;\n\t\t\t            result.y = 0.25 * s;\n\t\t\t            result.z = (m23 + m32) / s;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\t\t\t            result.w = (m21 - m12) / s;\n\t\t\t            result.x = (m13 + m31) / s;\n\t\t\t            result.y = (m23 + m32) / s;\n\t\t\t            result.z = 0.25 * s;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    Quaternion.fromRotationMatrixToRef = fromRotationMatrixToRef;\n\t\t\t    /**\n\t\t\t     * Interpolates between two quaternions\n\t\t\t     * @param left - defines first quaternion\n\t\t\t     * @param right - defines second quaternion\n\t\t\t     * @param amount - defines the gradient to use\n\t\t\t     * @returns the new interpolated quaternion\n\t\t\t     */\n\t\t\t    function slerp(left, right, amount) {\n\t\t\t        const result = Quaternion.Identity();\n\t\t\t        Quaternion.slerpToRef(left, right, amount, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Quaternion.slerp = slerp;\n\t\t\t    /**\n\t\t\t     * Interpolates between two quaternions and stores it into a target quaternion\n\t\t\t     * @param left - defines first quaternion\n\t\t\t     * @param right - defines second quaternion\n\t\t\t     * @param amount - defines the gradient to use\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     */\n\t\t\t    function slerpToRef(left, right, amount, result) {\n\t\t\t        let num2;\n\t\t\t        let num3;\n\t\t\t        let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n\t\t\t        let flag = false;\n\t\t\t        if (num4 < 0) {\n\t\t\t            flag = true;\n\t\t\t            num4 = -num4;\n\t\t\t        }\n\t\t\t        if (num4 > 0.999999) {\n\t\t\t            num3 = 1 - amount;\n\t\t\t            num2 = flag ? -amount : amount;\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            const num5 = Math.acos(num4);\n\t\t\t            const num6 = 1.0 / Math.sin(num5);\n\t\t\t            num3 = Math.sin((1.0 - amount) * num5) * num6;\n\t\t\t            num2 = flag\n\t\t\t                ? -Math.sin(amount * num5) * num6\n\t\t\t                : Math.sin(amount * num5) * num6;\n\t\t\t        }\n\t\t\t        result.x = num3 * left.x + num2 * right.x;\n\t\t\t        result.y = num3 * left.y + num2 * right.y;\n\t\t\t        result.z = num3 * left.z + num2 * right.z;\n\t\t\t        result.w = num3 * left.w + num2 * right.w;\n\t\t\t    }\n\t\t\t    Quaternion.slerpToRef = slerpToRef;\n\t\t\t    /**\n\t\t\t     * Multiplies two quaternions\n\t\t\t     * @param self - defines the first operand\n\t\t\t     * @param q1 - defines the second operand\n\t\t\t     * @returns a new quaternion set as the multiplication result of the self one with the given one \"q1\"\n\t\t\t     */\n\t\t\t    function multiply(self, q1) {\n\t\t\t        const result = create(0, 0, 0, 1.0);\n\t\t\t        multiplyToRef(self, q1, result);\n\t\t\t        return result;\n\t\t\t    }\n\t\t\t    Quaternion.multiply = multiply;\n\t\t\t    /**\n\t\t\t     * Sets the given \"result\" as the the multiplication result of the self one with the given one \"q1\"\n\t\t\t     * @param self - defines the first operand\n\t\t\t     * @param q1 - defines the second operand\n\t\t\t     * @param result - defines the target quaternion\n\t\t\t     * @returns the current quaternion\n\t\t\t     */\n\t\t\t    function multiplyToRef(self, q1, result) {\n\t\t\t        result.x = self.x * q1.w + self.y * q1.z - self.z * q1.y + self.w * q1.x;\n\t\t\t        result.y = -self.x * q1.z + self.y * q1.w + self.z * q1.x + self.w * q1.y;\n\t\t\t        result.z = self.x * q1.y - self.y * q1.x + self.z * q1.w + self.w * q1.z;\n\t\t\t        result.w = -self.x * q1.x - self.y * q1.y - self.z * q1.z + self.w * q1.w;\n\t\t\t    }\n\t\t\t    Quaternion.multiplyToRef = multiplyToRef;\n\t\t\t    function angleAxis(degress, axis) {\n\t\t\t        if (Vector3_1.Vector3.lengthSquared(axis) === 0) {\n\t\t\t            return Quaternion.Identity();\n\t\t\t        }\n\t\t\t        const result = Identity();\n\t\t\t        let radians = degress * types_1.DEG2RAD;\n\t\t\t        radians *= 0.5;\n\t\t\t        const a2 = Vector3_1.Vector3.normalize(axis);\n\t\t\t        Vector3_1.Vector3.scaleToRef(a2, Math.sin(radians), a2);\n\t\t\t        result.x = a2.x;\n\t\t\t        result.y = a2.y;\n\t\t\t        result.z = a2.z;\n\t\t\t        result.w = Math.cos(radians);\n\t\t\t        return normalize(result);\n\t\t\t    }\n\t\t\t    Quaternion.angleAxis = angleAxis;\n\t\t\t    /**\n\t\t\t     * Returns a zero filled quaternion\n\t\t\t     */\n\t\t\t    function Zero() {\n\t\t\t        return create(0.0, 0.0, 0.0, 0.0);\n\t\t\t    }\n\t\t\t    Quaternion.Zero = Zero;\n\t\t\t})(exports.Quaternion || (exports.Quaternion = {}));\n\t\t\t\n\t} (Quaternion));\n\t\treturn Quaternion;\n\t}\n\n\tvar hasRequiredDist$1;\n\n\tfunction requireDist$1 () {\n\t\tif (hasRequiredDist$1) return dist$1;\n\t\thasRequiredDist$1 = 1;\n\t\t(function (exports) {\n\t\t\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t\t\t}) : (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    o[k2] = m[k];\n\t\t\t}));\n\t\t\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t\t\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\t__exportStar(requireQuaternion(), exports);\n\t\t\t__exportStar(requireVector3(), exports);\n\t\t\t__exportStar(requireTypes$1(), exports);\n\t\t\t__exportStar(requireDist$1(), exports);\n\t\t\t\n\t} (dist$1));\n\t\treturn dist$1;\n\t}\n\n\tvar distExports$1 = requireDist$1();\n\n\tvar minimal$1 = {exports: {}};\n\n\tvar indexMinimal = {};\n\n\tvar minimal = {};\n\n\tvar aspromise;\n\tvar hasRequiredAspromise;\n\n\tfunction requireAspromise () {\n\t\tif (hasRequiredAspromise) return aspromise;\n\t\thasRequiredAspromise = 1;\n\t\taspromise = asPromise;\r\n\r\n\t\t/**\r\n\t\t * Callback as used by {@link util.asPromise}.\r\n\t\t * @typedef asPromiseCallback\r\n\t\t * @type {function}\r\n\t\t * @param {Error|null} error Error, if any\r\n\t\t * @param {...*} params Additional arguments\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Returns a promise from a node-style callback function.\r\n\t\t * @memberof util\r\n\t\t * @param {asPromiseCallback} fn Function to call\r\n\t\t * @param {*} ctx Function context\r\n\t\t * @param {...*} params Function arguments\r\n\t\t * @returns {Promise<*>} Promisified function\r\n\t\t */\r\n\t\tfunction asPromise(fn, ctx/*, varargs */) {\r\n\t\t    var params  = new Array(arguments.length - 1),\r\n\t\t        offset  = 0,\r\n\t\t        index   = 2,\r\n\t\t        pending = true;\r\n\t\t    while (index < arguments.length)\r\n\t\t        params[offset++] = arguments[index++];\r\n\t\t    return new Promise(function executor(resolve, reject) {\r\n\t\t        params[offset] = function callback(err/*, varargs */) {\r\n\t\t            if (pending) {\r\n\t\t                pending = false;\r\n\t\t                if (err)\r\n\t\t                    reject(err);\r\n\t\t                else {\r\n\t\t                    var params = new Array(arguments.length - 1),\r\n\t\t                        offset = 0;\r\n\t\t                    while (offset < params.length)\r\n\t\t                        params[offset++] = arguments[offset];\r\n\t\t                    resolve.apply(null, params);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        };\r\n\t\t        try {\r\n\t\t            fn.apply(ctx || null, params);\r\n\t\t        } catch (err) {\r\n\t\t            if (pending) {\r\n\t\t                pending = false;\r\n\t\t                reject(err);\r\n\t\t            }\r\n\t\t        }\r\n\t\t    });\r\n\t\t}\n\t\treturn aspromise;\n\t}\n\n\tvar base64 = {};\n\n\tvar hasRequiredBase64;\n\n\tfunction requireBase64 () {\n\t\tif (hasRequiredBase64) return base64;\n\t\thasRequiredBase64 = 1;\n\t\t(function (exports) {\n\r\n\t\t\t/**\r\n\t\t\t * A minimal base64 implementation for number arrays.\r\n\t\t\t * @memberof util\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\tvar base64 = exports;\r\n\r\n\t\t\t/**\r\n\t\t\t * Calculates the byte length of a base64 encoded string.\r\n\t\t\t * @param {string} string Base64 encoded string\r\n\t\t\t * @returns {number} Byte length\r\n\t\t\t */\r\n\t\t\tbase64.length = function length(string) {\r\n\t\t\t    var p = string.length;\r\n\t\t\t    if (!p)\r\n\t\t\t        return 0;\r\n\t\t\t    var n = 0;\r\n\t\t\t    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n\t\t\t        ++n;\r\n\t\t\t    return Math.ceil(string.length * 3) / 4 - n;\r\n\t\t\t};\r\n\r\n\t\t\t// Base64 encoding table\r\n\t\t\tvar b64 = new Array(64);\r\n\r\n\t\t\t// Base64 decoding table\r\n\t\t\tvar s64 = new Array(123);\r\n\r\n\t\t\t// 65..90, 97..122, 48..57, 43, 47\r\n\t\t\tfor (var i = 0; i < 64;)\r\n\t\t\t    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n\t\t\t/**\r\n\t\t\t * Encodes a buffer to a base64 encoded string.\r\n\t\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t\t * @param {number} start Source start\r\n\t\t\t * @param {number} end Source end\r\n\t\t\t * @returns {string} Base64 encoded string\r\n\t\t\t */\r\n\t\t\tbase64.encode = function encode(buffer, start, end) {\r\n\t\t\t    var parts = null,\r\n\t\t\t        chunk = [];\r\n\t\t\t    var i = 0, // output index\r\n\t\t\t        j = 0, // goto index\r\n\t\t\t        t;     // temporary\r\n\t\t\t    while (start < end) {\r\n\t\t\t        var b = buffer[start++];\r\n\t\t\t        switch (j) {\r\n\t\t\t            case 0:\r\n\t\t\t                chunk[i++] = b64[b >> 2];\r\n\t\t\t                t = (b & 3) << 4;\r\n\t\t\t                j = 1;\r\n\t\t\t                break;\r\n\t\t\t            case 1:\r\n\t\t\t                chunk[i++] = b64[t | b >> 4];\r\n\t\t\t                t = (b & 15) << 2;\r\n\t\t\t                j = 2;\r\n\t\t\t                break;\r\n\t\t\t            case 2:\r\n\t\t\t                chunk[i++] = b64[t | b >> 6];\r\n\t\t\t                chunk[i++] = b64[b & 63];\r\n\t\t\t                j = 0;\r\n\t\t\t                break;\r\n\t\t\t        }\r\n\t\t\t        if (i > 8191) {\r\n\t\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t\t            i = 0;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (j) {\r\n\t\t\t        chunk[i++] = b64[t];\r\n\t\t\t        chunk[i++] = 61;\r\n\t\t\t        if (j === 1)\r\n\t\t\t            chunk[i++] = 61;\r\n\t\t\t    }\r\n\t\t\t    if (parts) {\r\n\t\t\t        if (i)\r\n\t\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t\t        return parts.join(\"\");\r\n\t\t\t    }\r\n\t\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t\t};\r\n\r\n\t\t\tvar invalidEncoding = \"invalid encoding\";\r\n\r\n\t\t\t/**\r\n\t\t\t * Decodes a base64 encoded string to a buffer.\r\n\t\t\t * @param {string} string Source string\r\n\t\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t\t * @param {number} offset Destination offset\r\n\t\t\t * @returns {number} Number of bytes written\r\n\t\t\t * @throws {Error} If encoding is invalid\r\n\t\t\t */\r\n\t\t\tbase64.decode = function decode(string, buffer, offset) {\r\n\t\t\t    var start = offset;\r\n\t\t\t    var j = 0, // goto index\r\n\t\t\t        t;     // temporary\r\n\t\t\t    for (var i = 0; i < string.length;) {\r\n\t\t\t        var c = string.charCodeAt(i++);\r\n\t\t\t        if (c === 61 && j > 1)\r\n\t\t\t            break;\r\n\t\t\t        if ((c = s64[c]) === undefined)\r\n\t\t\t            throw Error(invalidEncoding);\r\n\t\t\t        switch (j) {\r\n\t\t\t            case 0:\r\n\t\t\t                t = c;\r\n\t\t\t                j = 1;\r\n\t\t\t                break;\r\n\t\t\t            case 1:\r\n\t\t\t                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n\t\t\t                t = c;\r\n\t\t\t                j = 2;\r\n\t\t\t                break;\r\n\t\t\t            case 2:\r\n\t\t\t                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n\t\t\t                t = c;\r\n\t\t\t                j = 3;\r\n\t\t\t                break;\r\n\t\t\t            case 3:\r\n\t\t\t                buffer[offset++] = (t & 3) << 6 | c;\r\n\t\t\t                j = 0;\r\n\t\t\t                break;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (j === 1)\r\n\t\t\t        throw Error(invalidEncoding);\r\n\t\t\t    return offset - start;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Tests if the specified string appears to be base64 encoded.\r\n\t\t\t * @param {string} string String to test\r\n\t\t\t * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n\t\t\t */\r\n\t\t\tbase64.test = function test(string) {\r\n\t\t\t    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n\t\t\t};\n\t} (base64));\n\t\treturn base64;\n\t}\n\n\tvar eventemitter;\n\tvar hasRequiredEventemitter;\n\n\tfunction requireEventemitter () {\n\t\tif (hasRequiredEventemitter) return eventemitter;\n\t\thasRequiredEventemitter = 1;\n\t\teventemitter = EventEmitter;\r\n\r\n\t\t/**\r\n\t\t * Constructs a new event emitter instance.\r\n\t\t * @classdesc A minimal event emitter.\r\n\t\t * @memberof util\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction EventEmitter() {\r\n\r\n\t\t    /**\r\n\t\t     * Registered listeners.\r\n\t\t     * @type {Object.<string,*>}\r\n\t\t     * @private\r\n\t\t     */\r\n\t\t    this._listeners = {};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Registers an event listener.\r\n\t\t * @param {string} evt Event name\r\n\t\t * @param {function} fn Listener\r\n\t\t * @param {*} [ctx] Listener context\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n\t\t    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n\t\t        fn  : fn,\r\n\t\t        ctx : ctx || this\r\n\t\t    });\r\n\t\t    return this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes an event listener or any matching listeners if arguments are omitted.\r\n\t\t * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n\t\t * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.off = function off(evt, fn) {\r\n\t\t    if (evt === undefined)\r\n\t\t        this._listeners = {};\r\n\t\t    else {\r\n\t\t        if (fn === undefined)\r\n\t\t            this._listeners[evt] = [];\r\n\t\t        else {\r\n\t\t            var listeners = this._listeners[evt];\r\n\t\t            for (var i = 0; i < listeners.length;)\r\n\t\t                if (listeners[i].fn === fn)\r\n\t\t                    listeners.splice(i, 1);\r\n\t\t                else\r\n\t\t                    ++i;\r\n\t\t        }\r\n\t\t    }\r\n\t\t    return this;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Emits an event by calling its listeners with the specified arguments.\r\n\t\t * @param {string} evt Event name\r\n\t\t * @param {...*} args Arguments\r\n\t\t * @returns {util.EventEmitter} `this`\r\n\t\t */\r\n\t\tEventEmitter.prototype.emit = function emit(evt) {\r\n\t\t    var listeners = this._listeners[evt];\r\n\t\t    if (listeners) {\r\n\t\t        var args = [],\r\n\t\t            i = 1;\r\n\t\t        for (; i < arguments.length;)\r\n\t\t            args.push(arguments[i++]);\r\n\t\t        for (i = 0; i < listeners.length;)\r\n\t\t            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n\t\t    }\r\n\t\t    return this;\r\n\t\t};\n\t\treturn eventemitter;\n\t}\n\n\tvar float;\n\tvar hasRequiredFloat;\n\n\tfunction requireFloat () {\n\t\tif (hasRequiredFloat) return float;\n\t\thasRequiredFloat = 1;\n\r\n\t\tfloat = factory(factory);\r\n\r\n\t\t/**\r\n\t\t * Reads / writes floats / doubles from / to buffers.\r\n\t\t * @name util.float\r\n\t\t * @namespace\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 32 bit float to a buffer using little endian byte order.\r\n\t\t * @name util.float.writeFloatLE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 32 bit float to a buffer using big endian byte order.\r\n\t\t * @name util.float.writeFloatBE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 32 bit float from a buffer using little endian byte order.\r\n\t\t * @name util.float.readFloatLE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 32 bit float from a buffer using big endian byte order.\r\n\t\t * @name util.float.readFloatBE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 64 bit double to a buffer using little endian byte order.\r\n\t\t * @name util.float.writeDoubleLE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Writes a 64 bit double to a buffer using big endian byte order.\r\n\t\t * @name util.float.writeDoubleBE\r\n\t\t * @function\r\n\t\t * @param {number} val Value to write\r\n\t\t * @param {Uint8Array} buf Target buffer\r\n\t\t * @param {number} pos Target buffer offset\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 64 bit double from a buffer using little endian byte order.\r\n\t\t * @name util.float.readDoubleLE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * Reads a 64 bit double from a buffer using big endian byte order.\r\n\t\t * @name util.float.readDoubleBE\r\n\t\t * @function\r\n\t\t * @param {Uint8Array} buf Source buffer\r\n\t\t * @param {number} pos Source buffer offset\r\n\t\t * @returns {number} Value read\r\n\t\t */\r\n\r\n\t\t// Factory function for the purpose of node-based testing in modified global environments\r\n\t\tfunction factory(exports) {\r\n\r\n\t\t    // float: typed array\r\n\t\t    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n\t\t        var f32 = new Float32Array([ -0 ]),\r\n\t\t            f8b = new Uint8Array(f32.buffer),\r\n\t\t            le  = f8b[3] === 128;\r\n\r\n\t\t        function writeFloat_f32_cpy(val, buf, pos) {\r\n\t\t            f32[0] = val;\r\n\t\t            buf[pos    ] = f8b[0];\r\n\t\t            buf[pos + 1] = f8b[1];\r\n\t\t            buf[pos + 2] = f8b[2];\r\n\t\t            buf[pos + 3] = f8b[3];\r\n\t\t        }\r\n\r\n\t\t        function writeFloat_f32_rev(val, buf, pos) {\r\n\t\t            f32[0] = val;\r\n\t\t            buf[pos    ] = f8b[3];\r\n\t\t            buf[pos + 1] = f8b[2];\r\n\t\t            buf[pos + 2] = f8b[1];\r\n\t\t            buf[pos + 3] = f8b[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n\t\t        function readFloat_f32_cpy(buf, pos) {\r\n\t\t            f8b[0] = buf[pos    ];\r\n\t\t            f8b[1] = buf[pos + 1];\r\n\t\t            f8b[2] = buf[pos + 2];\r\n\t\t            f8b[3] = buf[pos + 3];\r\n\t\t            return f32[0];\r\n\t\t        }\r\n\r\n\t\t        function readFloat_f32_rev(buf, pos) {\r\n\t\t            f8b[3] = buf[pos    ];\r\n\t\t            f8b[2] = buf[pos + 1];\r\n\t\t            f8b[1] = buf[pos + 2];\r\n\t\t            f8b[0] = buf[pos + 3];\r\n\t\t            return f32[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n\t\t    // float: ieee754\r\n\t\t    })(); else (function() {\r\n\r\n\t\t        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n\t\t            var sign = val < 0 ? 1 : 0;\r\n\t\t            if (sign)\r\n\t\t                val = -val;\r\n\t\t            if (val === 0)\r\n\t\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n\t\t            else if (isNaN(val))\r\n\t\t                writeUint(2143289344, buf, pos);\r\n\t\t            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n\t\t                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n\t\t            else if (val < 1.1754943508222875e-38) // denormal\r\n\t\t                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n\t\t            else {\r\n\t\t                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n\t\t                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n\t\t                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n\t\t            }\r\n\t\t        }\r\n\r\n\t\t        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n\t\t        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n\t\t        function readFloat_ieee754(readUint, buf, pos) {\r\n\t\t            var uint = readUint(buf, pos),\r\n\t\t                sign = (uint >> 31) * 2 + 1,\r\n\t\t                exponent = uint >>> 23 & 255,\r\n\t\t                mantissa = uint & 8388607;\r\n\t\t            return exponent === 255\r\n\t\t                ? mantissa\r\n\t\t                ? NaN\r\n\t\t                : sign * Infinity\r\n\t\t                : exponent === 0 // denormal\r\n\t\t                ? sign * 1.401298464324817e-45 * mantissa\r\n\t\t                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n\t\t        }\r\n\r\n\t\t        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n\t\t        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n\t\t    })();\r\n\r\n\t\t    // double: typed array\r\n\t\t    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n\t\t        var f64 = new Float64Array([-0]),\r\n\t\t            f8b = new Uint8Array(f64.buffer),\r\n\t\t            le  = f8b[7] === 128;\r\n\r\n\t\t        function writeDouble_f64_cpy(val, buf, pos) {\r\n\t\t            f64[0] = val;\r\n\t\t            buf[pos    ] = f8b[0];\r\n\t\t            buf[pos + 1] = f8b[1];\r\n\t\t            buf[pos + 2] = f8b[2];\r\n\t\t            buf[pos + 3] = f8b[3];\r\n\t\t            buf[pos + 4] = f8b[4];\r\n\t\t            buf[pos + 5] = f8b[5];\r\n\t\t            buf[pos + 6] = f8b[6];\r\n\t\t            buf[pos + 7] = f8b[7];\r\n\t\t        }\r\n\r\n\t\t        function writeDouble_f64_rev(val, buf, pos) {\r\n\t\t            f64[0] = val;\r\n\t\t            buf[pos    ] = f8b[7];\r\n\t\t            buf[pos + 1] = f8b[6];\r\n\t\t            buf[pos + 2] = f8b[5];\r\n\t\t            buf[pos + 3] = f8b[4];\r\n\t\t            buf[pos + 4] = f8b[3];\r\n\t\t            buf[pos + 5] = f8b[2];\r\n\t\t            buf[pos + 6] = f8b[1];\r\n\t\t            buf[pos + 7] = f8b[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n\t\t        function readDouble_f64_cpy(buf, pos) {\r\n\t\t            f8b[0] = buf[pos    ];\r\n\t\t            f8b[1] = buf[pos + 1];\r\n\t\t            f8b[2] = buf[pos + 2];\r\n\t\t            f8b[3] = buf[pos + 3];\r\n\t\t            f8b[4] = buf[pos + 4];\r\n\t\t            f8b[5] = buf[pos + 5];\r\n\t\t            f8b[6] = buf[pos + 6];\r\n\t\t            f8b[7] = buf[pos + 7];\r\n\t\t            return f64[0];\r\n\t\t        }\r\n\r\n\t\t        function readDouble_f64_rev(buf, pos) {\r\n\t\t            f8b[7] = buf[pos    ];\r\n\t\t            f8b[6] = buf[pos + 1];\r\n\t\t            f8b[5] = buf[pos + 2];\r\n\t\t            f8b[4] = buf[pos + 3];\r\n\t\t            f8b[3] = buf[pos + 4];\r\n\t\t            f8b[2] = buf[pos + 5];\r\n\t\t            f8b[1] = buf[pos + 6];\r\n\t\t            f8b[0] = buf[pos + 7];\r\n\t\t            return f64[0];\r\n\t\t        }\r\n\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n\t\t        /* istanbul ignore next */\r\n\t\t        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n\t\t    // double: ieee754\r\n\t\t    })(); else (function() {\r\n\r\n\t\t        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n\t\t            var sign = val < 0 ? 1 : 0;\r\n\t\t            if (sign)\r\n\t\t                val = -val;\r\n\t\t            if (val === 0) {\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n\t\t            } else if (isNaN(val)) {\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint(2146959360, buf, pos + off1);\r\n\t\t            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n\t\t                writeUint(0, buf, pos + off0);\r\n\t\t                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n\t\t            } else {\r\n\t\t                var mantissa;\r\n\t\t                if (val < 2.2250738585072014e-308) { // denormal\r\n\t\t                    mantissa = val / 5e-324;\r\n\t\t                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n\t\t                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n\t\t                } else {\r\n\t\t                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n\t\t                    if (exponent === 1024)\r\n\t\t                        exponent = 1023;\r\n\t\t                    mantissa = val * Math.pow(2, -exponent);\r\n\t\t                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n\t\t                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        }\r\n\r\n\t\t        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n\t\t        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n\t\t        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n\t\t            var lo = readUint(buf, pos + off0),\r\n\t\t                hi = readUint(buf, pos + off1);\r\n\t\t            var sign = (hi >> 31) * 2 + 1,\r\n\t\t                exponent = hi >>> 20 & 2047,\r\n\t\t                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n\t\t            return exponent === 2047\r\n\t\t                ? mantissa\r\n\t\t                ? NaN\r\n\t\t                : sign * Infinity\r\n\t\t                : exponent === 0 // denormal\r\n\t\t                ? sign * 5e-324 * mantissa\r\n\t\t                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n\t\t        }\r\n\r\n\t\t        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n\t\t        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n\t\t    })();\r\n\r\n\t\t    return exports;\r\n\t\t}\r\n\r\n\t\t// uint helpers\r\n\r\n\t\tfunction writeUintLE(val, buf, pos) {\r\n\t\t    buf[pos    ] =  val        & 255;\r\n\t\t    buf[pos + 1] =  val >>> 8  & 255;\r\n\t\t    buf[pos + 2] =  val >>> 16 & 255;\r\n\t\t    buf[pos + 3] =  val >>> 24;\r\n\t\t}\r\n\r\n\t\tfunction writeUintBE(val, buf, pos) {\r\n\t\t    buf[pos    ] =  val >>> 24;\r\n\t\t    buf[pos + 1] =  val >>> 16 & 255;\r\n\t\t    buf[pos + 2] =  val >>> 8  & 255;\r\n\t\t    buf[pos + 3] =  val        & 255;\r\n\t\t}\r\n\r\n\t\tfunction readUintLE(buf, pos) {\r\n\t\t    return (buf[pos    ]\r\n\t\t          | buf[pos + 1] << 8\r\n\t\t          | buf[pos + 2] << 16\r\n\t\t          | buf[pos + 3] << 24) >>> 0;\r\n\t\t}\r\n\r\n\t\tfunction readUintBE(buf, pos) {\r\n\t\t    return (buf[pos    ] << 24\r\n\t\t          | buf[pos + 1] << 16\r\n\t\t          | buf[pos + 2] << 8\r\n\t\t          | buf[pos + 3]) >>> 0;\r\n\t\t}\n\t\treturn float;\n\t}\n\n\tvar inquire_1;\n\tvar hasRequiredInquire;\n\n\tfunction requireInquire () {\n\t\tif (hasRequiredInquire) return inquire_1;\n\t\thasRequiredInquire = 1;\n\t\tinquire_1 = inquire;\r\n\r\n\t\t/**\r\n\t\t * Requires a module only if available.\r\n\t\t * @memberof util\r\n\t\t * @param {string} moduleName Module to require\r\n\t\t * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n\t\t */\r\n\t\tfunction inquire(moduleName) {\r\n\t\t    try {\r\n\t\t        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n\t\t        if (mod && (mod.length || Object.keys(mod).length))\r\n\t\t            return mod;\r\n\t\t    } catch (e) {} // eslint-disable-line no-empty\r\n\t\t    return null;\r\n\t\t}\n\t\treturn inquire_1;\n\t}\n\n\tvar utf8 = {};\n\n\tvar hasRequiredUtf8;\n\n\tfunction requireUtf8 () {\n\t\tif (hasRequiredUtf8) return utf8;\n\t\thasRequiredUtf8 = 1;\n\t\t(function (exports) {\n\r\n\t\t\t/**\r\n\t\t\t * A minimal UTF8 implementation for number arrays.\r\n\t\t\t * @memberof util\r\n\t\t\t * @namespace\r\n\t\t\t */\r\n\t\t\tvar utf8 = exports;\r\n\r\n\t\t\t/**\r\n\t\t\t * Calculates the UTF8 byte length of a string.\r\n\t\t\t * @param {string} string String\r\n\t\t\t * @returns {number} Byte length\r\n\t\t\t */\r\n\t\t\tutf8.length = function utf8_length(string) {\r\n\t\t\t    var len = 0,\r\n\t\t\t        c = 0;\r\n\t\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t\t        c = string.charCodeAt(i);\r\n\t\t\t        if (c < 128)\r\n\t\t\t            len += 1;\r\n\t\t\t        else if (c < 2048)\r\n\t\t\t            len += 2;\r\n\t\t\t        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n\t\t\t            ++i;\r\n\t\t\t            len += 4;\r\n\t\t\t        } else\r\n\t\t\t            len += 3;\r\n\t\t\t    }\r\n\t\t\t    return len;\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Reads UTF8 bytes as a string.\r\n\t\t\t * @param {Uint8Array} buffer Source buffer\r\n\t\t\t * @param {number} start Source start\r\n\t\t\t * @param {number} end Source end\r\n\t\t\t * @returns {string} String read\r\n\t\t\t */\r\n\t\t\tutf8.read = function utf8_read(buffer, start, end) {\r\n\t\t\t    var len = end - start;\r\n\t\t\t    if (len < 1)\r\n\t\t\t        return \"\";\r\n\t\t\t    var parts = null,\r\n\t\t\t        chunk = [],\r\n\t\t\t        i = 0, // char offset\r\n\t\t\t        t;     // temporary\r\n\t\t\t    while (start < end) {\r\n\t\t\t        t = buffer[start++];\r\n\t\t\t        if (t < 128)\r\n\t\t\t            chunk[i++] = t;\r\n\t\t\t        else if (t > 191 && t < 224)\r\n\t\t\t            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n\t\t\t        else if (t > 239 && t < 365) {\r\n\t\t\t            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n\t\t\t            chunk[i++] = 0xD800 + (t >> 10);\r\n\t\t\t            chunk[i++] = 0xDC00 + (t & 1023);\r\n\t\t\t        } else\r\n\t\t\t            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n\t\t\t        if (i > 8191) {\r\n\t\t\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t\t\t            i = 0;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    if (parts) {\r\n\t\t\t        if (i)\r\n\t\t\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t\t\t        return parts.join(\"\");\r\n\t\t\t    }\r\n\t\t\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t\t\t};\r\n\r\n\t\t\t/**\r\n\t\t\t * Writes a string as UTF8 bytes.\r\n\t\t\t * @param {string} string Source string\r\n\t\t\t * @param {Uint8Array} buffer Destination buffer\r\n\t\t\t * @param {number} offset Destination offset\r\n\t\t\t * @returns {number} Bytes written\r\n\t\t\t */\r\n\t\t\tutf8.write = function utf8_write(string, buffer, offset) {\r\n\t\t\t    var start = offset,\r\n\t\t\t        c1, // character 1\r\n\t\t\t        c2; // character 2\r\n\t\t\t    for (var i = 0; i < string.length; ++i) {\r\n\t\t\t        c1 = string.charCodeAt(i);\r\n\t\t\t        if (c1 < 128) {\r\n\t\t\t            buffer[offset++] = c1;\r\n\t\t\t        } else if (c1 < 2048) {\r\n\t\t\t            buffer[offset++] = c1 >> 6       | 192;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n\t\t\t            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n\t\t\t            ++i;\r\n\t\t\t            buffer[offset++] = c1 >> 18      | 240;\r\n\t\t\t            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        } else {\r\n\t\t\t            buffer[offset++] = c1 >> 12      | 224;\r\n\t\t\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t\t\t            buffer[offset++] = c1       & 63 | 128;\r\n\t\t\t        }\r\n\t\t\t    }\r\n\t\t\t    return offset - start;\r\n\t\t\t};\n\t} (utf8));\n\t\treturn utf8;\n\t}\n\n\tvar pool_1;\n\tvar hasRequiredPool;\n\n\tfunction requirePool () {\n\t\tif (hasRequiredPool) return pool_1;\n\t\thasRequiredPool = 1;\n\t\tpool_1 = pool;\r\n\r\n\t\t/**\r\n\t\t * An allocator as used by {@link util.pool}.\r\n\t\t * @typedef PoolAllocator\r\n\t\t * @type {function}\r\n\t\t * @param {number} size Buffer size\r\n\t\t * @returns {Uint8Array} Buffer\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * A slicer as used by {@link util.pool}.\r\n\t\t * @typedef PoolSlicer\r\n\t\t * @type {function}\r\n\t\t * @param {number} start Start offset\r\n\t\t * @param {number} end End offset\r\n\t\t * @returns {Uint8Array} Buffer slice\r\n\t\t * @this {Uint8Array}\r\n\t\t */\r\n\r\n\t\t/**\r\n\t\t * A general purpose buffer pool.\r\n\t\t * @memberof util\r\n\t\t * @function\r\n\t\t * @param {PoolAllocator} alloc Allocator\r\n\t\t * @param {PoolSlicer} slice Slicer\r\n\t\t * @param {number} [size=8192] Slab size\r\n\t\t * @returns {PoolAllocator} Pooled allocator\r\n\t\t */\r\n\t\tfunction pool(alloc, slice, size) {\r\n\t\t    var SIZE   = size || 8192;\r\n\t\t    var MAX    = SIZE >>> 1;\r\n\t\t    var slab   = null;\r\n\t\t    var offset = SIZE;\r\n\t\t    return function pool_alloc(size) {\r\n\t\t        if (size < 1 || size > MAX)\r\n\t\t            return alloc(size);\r\n\t\t        if (offset + size > SIZE) {\r\n\t\t            slab = alloc(SIZE);\r\n\t\t            offset = 0;\r\n\t\t        }\r\n\t\t        var buf = slice.call(slab, offset, offset += size);\r\n\t\t        if (offset & 7) // align to 32 bit\r\n\t\t            offset = (offset | 7) + 1;\r\n\t\t        return buf;\r\n\t\t    };\r\n\t\t}\n\t\treturn pool_1;\n\t}\n\n\tvar longbits;\n\tvar hasRequiredLongbits;\n\n\tfunction requireLongbits () {\n\t\tif (hasRequiredLongbits) return longbits;\n\t\thasRequiredLongbits = 1;\n\t\tlongbits = LongBits;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs new long bits.\n\t\t * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n\t\t * @memberof util\n\t\t * @constructor\n\t\t * @param {number} lo Low 32 bits, unsigned\n\t\t * @param {number} hi High 32 bits, unsigned\n\t\t */\n\t\tfunction LongBits(lo, hi) {\n\n\t\t    // note that the casts below are theoretically unnecessary as of today, but older statically\n\t\t    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n\t\t    /**\n\t\t     * Low bits.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.lo = lo >>> 0;\n\n\t\t    /**\n\t\t     * High bits.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.hi = hi >>> 0;\n\t\t}\n\n\t\t/**\n\t\t * Zero bits.\n\t\t * @memberof util.LongBits\n\t\t * @type {util.LongBits}\n\t\t */\n\t\tvar zero = LongBits.zero = new LongBits(0, 0);\n\n\t\tzero.toNumber = function() { return 0; };\n\t\tzero.zzEncode = zero.zzDecode = function() { return this; };\n\t\tzero.length = function() { return 1; };\n\n\t\t/**\n\t\t * Zero hash.\n\t\t * @memberof util.LongBits\n\t\t * @type {string}\n\t\t */\n\t\tvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n\t\t/**\n\t\t * Constructs new long bits from the specified number.\n\t\t * @param {number} value Value\n\t\t * @returns {util.LongBits} Instance\n\t\t */\n\t\tLongBits.fromNumber = function fromNumber(value) {\n\t\t    if (value === 0)\n\t\t        return zero;\n\t\t    var sign = value < 0;\n\t\t    if (sign)\n\t\t        value = -value;\n\t\t    var lo = value >>> 0,\n\t\t        hi = (value - lo) / 4294967296 >>> 0;\n\t\t    if (sign) {\n\t\t        hi = ~hi >>> 0;\n\t\t        lo = ~lo >>> 0;\n\t\t        if (++lo > 4294967295) {\n\t\t            lo = 0;\n\t\t            if (++hi > 4294967295)\n\t\t                hi = 0;\n\t\t        }\n\t\t    }\n\t\t    return new LongBits(lo, hi);\n\t\t};\n\n\t\t/**\n\t\t * Constructs new long bits from a number, long or string.\n\t\t * @param {Long|number|string} value Value\n\t\t * @returns {util.LongBits} Instance\n\t\t */\n\t\tLongBits.from = function from(value) {\n\t\t    if (typeof value === \"number\")\n\t\t        return LongBits.fromNumber(value);\n\t\t    if (util.isString(value)) {\n\t\t        /* istanbul ignore else */\n\t\t        if (util.Long)\n\t\t            value = util.Long.fromString(value);\n\t\t        else\n\t\t            return LongBits.fromNumber(parseInt(value, 10));\n\t\t    }\n\t\t    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a possibly unsafe JavaScript number.\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {number} Possibly unsafe number\n\t\t */\n\t\tLongBits.prototype.toNumber = function toNumber(unsigned) {\n\t\t    if (!unsigned && this.hi >>> 31) {\n\t\t        var lo = ~this.lo + 1 >>> 0,\n\t\t            hi = ~this.hi     >>> 0;\n\t\t        if (!lo)\n\t\t            hi = hi + 1 >>> 0;\n\t\t        return -(lo + hi * 4294967296);\n\t\t    }\n\t\t    return this.lo + this.hi * 4294967296;\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a long.\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {Long} Long\n\t\t */\n\t\tLongBits.prototype.toLong = function toLong(unsigned) {\n\t\t    return util.Long\n\t\t        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n\t\t        /* istanbul ignore next */\n\t\t        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n\t\t};\n\n\t\tvar charCodeAt = String.prototype.charCodeAt;\n\n\t\t/**\n\t\t * Constructs new long bits from the specified 8 characters long hash.\n\t\t * @param {string} hash Hash\n\t\t * @returns {util.LongBits} Bits\n\t\t */\n\t\tLongBits.fromHash = function fromHash(hash) {\n\t\t    if (hash === zeroHash)\n\t\t        return zero;\n\t\t    return new LongBits(\n\t\t        ( charCodeAt.call(hash, 0)\n\t\t        | charCodeAt.call(hash, 1) << 8\n\t\t        | charCodeAt.call(hash, 2) << 16\n\t\t        | charCodeAt.call(hash, 3) << 24) >>> 0\n\t\t    ,\n\t\t        ( charCodeAt.call(hash, 4)\n\t\t        | charCodeAt.call(hash, 5) << 8\n\t\t        | charCodeAt.call(hash, 6) << 16\n\t\t        | charCodeAt.call(hash, 7) << 24) >>> 0\n\t\t    );\n\t\t};\n\n\t\t/**\n\t\t * Converts this long bits to a 8 characters long hash.\n\t\t * @returns {string} Hash\n\t\t */\n\t\tLongBits.prototype.toHash = function toHash() {\n\t\t    return String.fromCharCode(\n\t\t        this.lo        & 255,\n\t\t        this.lo >>> 8  & 255,\n\t\t        this.lo >>> 16 & 255,\n\t\t        this.lo >>> 24      ,\n\t\t        this.hi        & 255,\n\t\t        this.hi >>> 8  & 255,\n\t\t        this.hi >>> 16 & 255,\n\t\t        this.hi >>> 24\n\t\t    );\n\t\t};\n\n\t\t/**\n\t\t * Zig-zag encodes this long bits.\n\t\t * @returns {util.LongBits} `this`\n\t\t */\n\t\tLongBits.prototype.zzEncode = function zzEncode() {\n\t\t    var mask =   this.hi >> 31;\n\t\t    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n\t\t    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Zig-zag decodes this long bits.\n\t\t * @returns {util.LongBits} `this`\n\t\t */\n\t\tLongBits.prototype.zzDecode = function zzDecode() {\n\t\t    var mask = -(this.lo & 1);\n\t\t    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n\t\t    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Calculates the length of this longbits when encoded as a varint.\n\t\t * @returns {number} Length\n\t\t */\n\t\tLongBits.prototype.length = function length() {\n\t\t    var part0 =  this.lo,\n\t\t        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n\t\t        part2 =  this.hi >>> 24;\n\t\t    return part2 === 0\n\t\t         ? part1 === 0\n\t\t           ? part0 < 16384\n\t\t             ? part0 < 128 ? 1 : 2\n\t\t             : part0 < 2097152 ? 3 : 4\n\t\t           : part1 < 16384\n\t\t             ? part1 < 128 ? 5 : 6\n\t\t             : part1 < 2097152 ? 7 : 8\n\t\t         : part2 < 128 ? 9 : 10;\n\t\t};\n\t\treturn longbits;\n\t}\n\n\tvar hasRequiredMinimal$1;\n\n\tfunction requireMinimal$1 () {\n\t\tif (hasRequiredMinimal$1) return minimal;\n\t\thasRequiredMinimal$1 = 1;\n\t\t(function (exports) {\n\t\t\tvar util = exports;\n\n\t\t\t// used to return a Promise where callback is omitted\n\t\t\tutil.asPromise = requireAspromise();\n\n\t\t\t// converts to / from base64 encoded strings\n\t\t\tutil.base64 = requireBase64();\n\n\t\t\t// base class of rpc.Service\n\t\t\tutil.EventEmitter = requireEventemitter();\n\n\t\t\t// float handling accross browsers\n\t\t\tutil.float = requireFloat();\n\n\t\t\t// requires modules optionally and hides the call from bundlers\n\t\t\tutil.inquire = requireInquire();\n\n\t\t\t// converts to / from utf8 encoded strings\n\t\t\tutil.utf8 = requireUtf8();\n\n\t\t\t// provides a node-like buffer pool in the browser\n\t\t\tutil.pool = requirePool();\n\n\t\t\t// utility to work with the low and high bits of a 64 bit value\n\t\t\tutil.LongBits = requireLongbits();\n\n\t\t\t/**\n\t\t\t * Whether running within node or not.\n\t\t\t * @memberof util\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tutil.isNode = Boolean(typeof commonjsGlobal !== \"undefined\"\n\t\t\t                   && commonjsGlobal\n\t\t\t                   && commonjsGlobal.process\n\t\t\t                   && commonjsGlobal.process.versions\n\t\t\t                   && commonjsGlobal.process.versions.node);\n\n\t\t\t/**\n\t\t\t * Global object reference.\n\t\t\t * @memberof util\n\t\t\t * @type {Object}\n\t\t\t */\n\t\t\tutil.global = util.isNode && commonjsGlobal\n\t\t\t           || typeof window !== \"undefined\" && window\n\t\t\t           || typeof self   !== \"undefined\" && self\n\t\t\t           || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n\t\t\t/**\n\t\t\t * An immuable empty array.\n\t\t\t * @memberof util\n\t\t\t * @type {Array.<*>}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n\t\t\t/**\n\t\t\t * An immutable empty object.\n\t\t\t * @type {Object}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is an integer.\n\t\t\t * @function\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is an integer\n\t\t\t */\n\t\t\tutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n\t\t\t    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is a string.\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is a string\n\t\t\t */\n\t\t\tutil.isString = function isString(value) {\n\t\t\t    return typeof value === \"string\" || value instanceof String;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Tests if the specified value is a non-null object.\n\t\t\t * @param {*} value Value to test\n\t\t\t * @returns {boolean} `true` if the value is a non-null object\n\t\t\t */\n\t\t\tutil.isObject = function isObject(value) {\n\t\t\t    return value && typeof value === \"object\";\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Checks if a property on a message is considered to be present.\n\t\t\t * This is an alias of {@link util.isSet}.\n\t\t\t * @function\n\t\t\t * @param {Object} obj Plain object or message instance\n\t\t\t * @param {string} prop Property name\n\t\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t\t */\n\t\t\tutil.isset =\n\n\t\t\t/**\n\t\t\t * Checks if a property on a message is considered to be present.\n\t\t\t * @param {Object} obj Plain object or message instance\n\t\t\t * @param {string} prop Property name\n\t\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t\t */\n\t\t\tutil.isSet = function isSet(obj, prop) {\n\t\t\t    var value = obj[prop];\n\t\t\t    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n\t\t\t        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n\t\t\t    return false;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Any compatible Buffer instance.\n\t\t\t * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n\t\t\t * @interface Buffer\n\t\t\t * @extends Uint8Array\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Node's Buffer class if available.\n\t\t\t * @type {Constructor<Buffer>}\n\t\t\t */\n\t\t\tutil.Buffer = (function() {\n\t\t\t    try {\n\t\t\t        var Buffer = util.inquire(\"buffer\").Buffer;\n\t\t\t        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n\t\t\t        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n\t\t\t    } catch (e) {\n\t\t\t        /* istanbul ignore next */\n\t\t\t        return null;\n\t\t\t    }\n\t\t\t})();\n\n\t\t\t// Internal alias of or polyfull for Buffer.from.\n\t\t\tutil._Buffer_from = null;\n\n\t\t\t// Internal alias of or polyfill for Buffer.allocUnsafe.\n\t\t\tutil._Buffer_allocUnsafe = null;\n\n\t\t\t/**\n\t\t\t * Creates a new buffer of whatever type supported by the environment.\n\t\t\t * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n\t\t\t * @returns {Uint8Array|Buffer} Buffer\n\t\t\t */\n\t\t\tutil.newBuffer = function newBuffer(sizeOrArray) {\n\t\t\t    /* istanbul ignore next */\n\t\t\t    return typeof sizeOrArray === \"number\"\n\t\t\t        ? util.Buffer\n\t\t\t            ? util._Buffer_allocUnsafe(sizeOrArray)\n\t\t\t            : new util.Array(sizeOrArray)\n\t\t\t        : util.Buffer\n\t\t\t            ? util._Buffer_from(sizeOrArray)\n\t\t\t            : typeof Uint8Array === \"undefined\"\n\t\t\t                ? sizeOrArray\n\t\t\t                : new Uint8Array(sizeOrArray);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n\t\t\t * @type {Constructor<Uint8Array>}\n\t\t\t */\n\t\t\tutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n\t\t\t/**\n\t\t\t * Any compatible Long instance.\n\t\t\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t\t\t * @interface Long\n\t\t\t * @property {number} low Low bits\n\t\t\t * @property {number} high High bits\n\t\t\t * @property {boolean} unsigned Whether unsigned or not\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Long.js's Long class if available.\n\t\t\t * @type {Constructor<Long>}\n\t\t\t */\n\t\t\tutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n\t\t\t         || /* istanbul ignore next */ util.global.Long\n\t\t\t         || util.inquire(\"long\");\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 2 bit (`bool`) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key2Re = /^true|false|0|1$/;\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n\t\t\t/**\n\t\t\t * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n\t\t\t * @type {RegExp}\n\t\t\t * @const\n\t\t\t */\n\t\t\tutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\t\t\t/**\n\t\t\t * Converts a number or long to an 8 characters long hash string.\n\t\t\t * @param {Long|number} value Value to convert\n\t\t\t * @returns {string} Hash\n\t\t\t */\n\t\t\tutil.longToHash = function longToHash(value) {\n\t\t\t    return value\n\t\t\t        ? util.LongBits.from(value).toHash()\n\t\t\t        : util.LongBits.zeroHash;\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Converts an 8 characters long hash string to a long or number.\n\t\t\t * @param {string} hash Hash\n\t\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t\t * @returns {Long|number} Original value\n\t\t\t */\n\t\t\tutil.longFromHash = function longFromHash(hash, unsigned) {\n\t\t\t    var bits = util.LongBits.fromHash(hash);\n\t\t\t    if (util.Long)\n\t\t\t        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n\t\t\t    return bits.toNumber(Boolean(unsigned));\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Merges the properties of the source object into the destination object.\n\t\t\t * @memberof util\n\t\t\t * @param {Object.<string,*>} dst Destination object\n\t\t\t * @param {Object.<string,*>} src Source object\n\t\t\t * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n\t\t\t * @returns {Object.<string,*>} Destination object\n\t\t\t */\n\t\t\tfunction merge(dst, src, ifNotSet) { // used by converters\n\t\t\t    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n\t\t\t        if (dst[keys[i]] === undefined || !ifNotSet)\n\t\t\t            dst[keys[i]] = src[keys[i]];\n\t\t\t    return dst;\n\t\t\t}\n\n\t\t\tutil.merge = merge;\n\n\t\t\t/**\n\t\t\t * Converts the first character of a string to lower case.\n\t\t\t * @param {string} str String to convert\n\t\t\t * @returns {string} Converted string\n\t\t\t */\n\t\t\tutil.lcFirst = function lcFirst(str) {\n\t\t\t    return str.charAt(0).toLowerCase() + str.substring(1);\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Creates a custom error constructor.\n\t\t\t * @memberof util\n\t\t\t * @param {string} name Error name\n\t\t\t * @returns {Constructor<Error>} Custom error constructor\n\t\t\t */\n\t\t\tfunction newError(name) {\n\n\t\t\t    function CustomError(message, properties) {\n\n\t\t\t        if (!(this instanceof CustomError))\n\t\t\t            return new CustomError(message, properties);\n\n\t\t\t        // Error.call(this, message);\n\t\t\t        // ^ just returns a new error instance because the ctor can be called as a function\n\n\t\t\t        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n\t\t\t        /* istanbul ignore next */\n\t\t\t        if (Error.captureStackTrace) // node\n\t\t\t            Error.captureStackTrace(this, CustomError);\n\t\t\t        else\n\t\t\t            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n\t\t\t        if (properties)\n\t\t\t            merge(this, properties);\n\t\t\t    }\n\n\t\t\t    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n\t\t\t    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n\t\t\t    CustomError.prototype.toString = function toString() {\n\t\t\t        return this.name + \": \" + this.message;\n\t\t\t    };\n\n\t\t\t    return CustomError;\n\t\t\t}\n\n\t\t\tutil.newError = newError;\n\n\t\t\t/**\n\t\t\t * Constructs a new protocol error.\n\t\t\t * @classdesc Error subclass indicating a protocol specifc error.\n\t\t\t * @memberof util\n\t\t\t * @extends Error\n\t\t\t * @template T extends Message<T>\n\t\t\t * @constructor\n\t\t\t * @param {string} message Error message\n\t\t\t * @param {Object.<string,*>} [properties] Additional properties\n\t\t\t * @example\n\t\t\t * try {\n\t\t\t *     MyMessage.decode(someBuffer); // throws if required fields are missing\n\t\t\t * } catch (e) {\n\t\t\t *     if (e instanceof ProtocolError && e.instance)\n\t\t\t *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n\t\t\t * }\n\t\t\t */\n\t\t\tutil.ProtocolError = newError(\"ProtocolError\");\n\n\t\t\t/**\n\t\t\t * So far decoded message instance.\n\t\t\t * @name util.ProtocolError#instance\n\t\t\t * @type {Message<T>}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * A OneOf getter as returned by {@link util.oneOfGetter}.\n\t\t\t * @typedef OneOfGetter\n\t\t\t * @type {function}\n\t\t\t * @returns {string|undefined} Set field name, if any\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Builds a getter for a oneof's present field name.\n\t\t\t * @param {string[]} fieldNames Field names\n\t\t\t * @returns {OneOfGetter} Unbound getter\n\t\t\t */\n\t\t\tutil.oneOfGetter = function getOneOf(fieldNames) {\n\t\t\t    var fieldMap = {};\n\t\t\t    for (var i = 0; i < fieldNames.length; ++i)\n\t\t\t        fieldMap[fieldNames[i]] = 1;\n\n\t\t\t    /**\n\t\t\t     * @returns {string|undefined} Set field name, if any\n\t\t\t     * @this Object\n\t\t\t     * @ignore\n\t\t\t     */\n\t\t\t    return function() { // eslint-disable-line consistent-return\n\t\t\t        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n\t\t\t            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n\t\t\t                return keys[i];\n\t\t\t    };\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * A OneOf setter as returned by {@link util.oneOfSetter}.\n\t\t\t * @typedef OneOfSetter\n\t\t\t * @type {function}\n\t\t\t * @param {string|undefined} value Field name\n\t\t\t * @returns {undefined}\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Builds a setter for a oneof's present field name.\n\t\t\t * @param {string[]} fieldNames Field names\n\t\t\t * @returns {OneOfSetter} Unbound setter\n\t\t\t */\n\t\t\tutil.oneOfSetter = function setOneOf(fieldNames) {\n\n\t\t\t    /**\n\t\t\t     * @param {string} name Field name\n\t\t\t     * @returns {undefined}\n\t\t\t     * @this Object\n\t\t\t     * @ignore\n\t\t\t     */\n\t\t\t    return function(name) {\n\t\t\t        for (var i = 0; i < fieldNames.length; ++i)\n\t\t\t            if (fieldNames[i] !== name)\n\t\t\t                delete this[fieldNames[i]];\n\t\t\t    };\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Default conversion options used for {@link Message#toJSON} implementations.\n\t\t\t *\n\t\t\t * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n\t\t\t *\n\t\t\t * - Longs become strings\n\t\t\t * - Enums become string keys\n\t\t\t * - Bytes become base64 encoded strings\n\t\t\t * - (Sub-)Messages become plain objects\n\t\t\t * - Maps become plain objects with all string keys\n\t\t\t * - Repeated fields become arrays\n\t\t\t * - NaN and Infinity for float and double fields become strings\n\t\t\t *\n\t\t\t * @type {IConversionOptions}\n\t\t\t * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n\t\t\t */\n\t\t\tutil.toJSONOptions = {\n\t\t\t    longs: String,\n\t\t\t    enums: String,\n\t\t\t    bytes: String,\n\t\t\t    json: true\n\t\t\t};\n\n\t\t\t// Sets up buffer utility according to the environment (called in index-minimal)\n\t\t\tutil._configure = function() {\n\t\t\t    var Buffer = util.Buffer;\n\t\t\t    /* istanbul ignore if */\n\t\t\t    if (!Buffer) {\n\t\t\t        util._Buffer_from = util._Buffer_allocUnsafe = null;\n\t\t\t        return;\n\t\t\t    }\n\t\t\t    // because node 4.x buffers are incompatible & immutable\n\t\t\t    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n\t\t\t    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n\t\t\t        /* istanbul ignore next */\n\t\t\t        function Buffer_from(value, encoding) {\n\t\t\t            return new Buffer(value, encoding);\n\t\t\t        };\n\t\t\t    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n\t\t\t        /* istanbul ignore next */\n\t\t\t        function Buffer_allocUnsafe(size) {\n\t\t\t            return new Buffer(size);\n\t\t\t        };\n\t\t\t};\n\t} (minimal));\n\t\treturn minimal;\n\t}\n\n\tvar writer;\n\tvar hasRequiredWriter;\n\n\tfunction requireWriter () {\n\t\tif (hasRequiredWriter) return writer;\n\t\thasRequiredWriter = 1;\n\t\twriter = Writer;\n\n\t\tvar util      = requireMinimal$1();\n\n\t\tvar BufferWriter; // cyclic\n\n\t\tvar LongBits  = util.LongBits,\n\t\t    base64    = util.base64,\n\t\t    utf8      = util.utf8;\n\n\t\t/**\n\t\t * Constructs a new writer operation instance.\n\t\t * @classdesc Scheduled writer operation.\n\t\t * @constructor\n\t\t * @param {function(*, Uint8Array, number)} fn Function to call\n\t\t * @param {number} len Value byte length\n\t\t * @param {*} val Value to write\n\t\t * @ignore\n\t\t */\n\t\tfunction Op(fn, len, val) {\n\n\t\t    /**\n\t\t     * Function to call.\n\t\t     * @type {function(Uint8Array, number, *)}\n\t\t     */\n\t\t    this.fn = fn;\n\n\t\t    /**\n\t\t     * Value byte length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = len;\n\n\t\t    /**\n\t\t     * Next operation.\n\t\t     * @type {Writer.Op|undefined}\n\t\t     */\n\t\t    this.next = undefined;\n\n\t\t    /**\n\t\t     * Value to write.\n\t\t     * @type {*}\n\t\t     */\n\t\t    this.val = val; // type varies\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tfunction noop() {} // eslint-disable-line no-empty-function\n\n\t\t/**\n\t\t * Constructs a new writer state instance.\n\t\t * @classdesc Copied writer state.\n\t\t * @memberof Writer\n\t\t * @constructor\n\t\t * @param {Writer} writer Writer to copy state from\n\t\t * @ignore\n\t\t */\n\t\tfunction State(writer) {\n\n\t\t    /**\n\t\t     * Current head.\n\t\t     * @type {Writer.Op}\n\t\t     */\n\t\t    this.head = writer.head;\n\n\t\t    /**\n\t\t     * Current tail.\n\t\t     * @type {Writer.Op}\n\t\t     */\n\t\t    this.tail = writer.tail;\n\n\t\t    /**\n\t\t     * Current buffer length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = writer.len;\n\n\t\t    /**\n\t\t     * Next state.\n\t\t     * @type {State|null}\n\t\t     */\n\t\t    this.next = writer.states;\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new writer instance.\n\t\t * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n\t\t * @constructor\n\t\t */\n\t\tfunction Writer() {\n\n\t\t    /**\n\t\t     * Current length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = 0;\n\n\t\t    /**\n\t\t     * Operations head.\n\t\t     * @type {Object}\n\t\t     */\n\t\t    this.head = new Op(noop, 0, 0);\n\n\t\t    /**\n\t\t     * Operations tail\n\t\t     * @type {Object}\n\t\t     */\n\t\t    this.tail = this.head;\n\n\t\t    /**\n\t\t     * Linked forked states.\n\t\t     * @type {Object|null}\n\t\t     */\n\t\t    this.states = null;\n\n\t\t    // When a value is written, the writer calculates its byte length and puts it into a linked\n\t\t    // list of operations to perform when finish() is called. This both allows us to allocate\n\t\t    // buffers of the exact required size and reduces the amount of work we have to do compared\n\t\t    // to first calculating over objects and then encoding over objects. In our case, the encoding\n\t\t    // part is just a linked list walk calling operations with already prepared values.\n\t\t}\n\n\t\tvar create = function create() {\n\t\t    return util.Buffer\n\t\t        ? function create_buffer_setup() {\n\t\t            return (Writer.create = function create_buffer() {\n\t\t                return new BufferWriter();\n\t\t            })();\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : function create_array() {\n\t\t            return new Writer();\n\t\t        };\n\t\t};\n\n\t\t/**\n\t\t * Creates a new writer.\n\t\t * @function\n\t\t * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n\t\t */\n\t\tWriter.create = create();\n\n\t\t/**\n\t\t * Allocates a buffer of the specified size.\n\t\t * @param {number} size Buffer size\n\t\t * @returns {Uint8Array} Buffer\n\t\t */\n\t\tWriter.alloc = function alloc(size) {\n\t\t    return new util.Array(size);\n\t\t};\n\n\t\t// Use Uint8Array buffer pool in the browser, just like node does with buffers\n\t\t/* istanbul ignore else */\n\t\tif (util.Array !== Array)\n\t\t    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n\t\t/**\n\t\t * Pushes a new operation to the queue.\n\t\t * @param {function(Uint8Array, number, *)} fn Function to call\n\t\t * @param {number} len Value byte length\n\t\t * @param {number} val Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @private\n\t\t */\n\t\tWriter.prototype._push = function push(fn, len, val) {\n\t\t    this.tail = this.tail.next = new Op(fn, len, val);\n\t\t    this.len += len;\n\t\t    return this;\n\t\t};\n\n\t\tfunction writeByte(val, buf, pos) {\n\t\t    buf[pos] = val & 255;\n\t\t}\n\n\t\tfunction writeVarint32(val, buf, pos) {\n\t\t    while (val > 127) {\n\t\t        buf[pos++] = val & 127 | 128;\n\t\t        val >>>= 7;\n\t\t    }\n\t\t    buf[pos] = val;\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new varint writer operation instance.\n\t\t * @classdesc Scheduled varint writer operation.\n\t\t * @extends Op\n\t\t * @constructor\n\t\t * @param {number} len Value byte length\n\t\t * @param {number} val Value to write\n\t\t * @ignore\n\t\t */\n\t\tfunction VarintOp(len, val) {\n\t\t    this.len = len;\n\t\t    this.next = undefined;\n\t\t    this.val = val;\n\t\t}\n\n\t\tVarintOp.prototype = Object.create(Op.prototype);\n\t\tVarintOp.prototype.fn = writeVarint32;\n\n\t\t/**\n\t\t * Writes an unsigned 32 bit value as a varint.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.uint32 = function write_uint32(value) {\n\t\t    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n\t\t    // uint32 is by far the most frequently used operation and benefits significantly from this.\n\t\t    this.len += (this.tail = this.tail.next = new VarintOp(\n\t\t        (value = value >>> 0)\n\t\t                < 128       ? 1\n\t\t        : value < 16384     ? 2\n\t\t        : value < 2097152   ? 3\n\t\t        : value < 268435456 ? 4\n\t\t        :                     5,\n\t\t    value)).len;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 32 bit value as a varint.\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.int32 = function write_int32(value) {\n\t\t    return value < 0\n\t\t        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n\t\t        : this.uint32(value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a 32 bit value as a varint, zig-zag encoded.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.sint32 = function write_sint32(value) {\n\t\t    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n\t\t};\n\n\t\tfunction writeVarint64(val, buf, pos) {\n\t\t    while (val.hi) {\n\t\t        buf[pos++] = val.lo & 127 | 128;\n\t\t        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n\t\t        val.hi >>>= 7;\n\t\t    }\n\t\t    while (val.lo > 127) {\n\t\t        buf[pos++] = val.lo & 127 | 128;\n\t\t        val.lo = val.lo >>> 7;\n\t\t    }\n\t\t    buf[pos++] = val.lo;\n\t\t}\n\n\t\t/**\n\t\t * Writes an unsigned 64 bit value as a varint.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.uint64 = function write_uint64(value) {\n\t\t    var bits = LongBits.from(value);\n\t\t    return this._push(writeVarint64, bits.length(), bits);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as a varint.\n\t\t * @function\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.int64 = Writer.prototype.uint64;\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as a varint, zig-zag encoded.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.sint64 = function write_sint64(value) {\n\t\t    var bits = LongBits.from(value).zzEncode();\n\t\t    return this._push(writeVarint64, bits.length(), bits);\n\t\t};\n\n\t\t/**\n\t\t * Writes a boolish value as a varint.\n\t\t * @param {boolean} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.bool = function write_bool(value) {\n\t\t    return this._push(writeByte, 1, value ? 1 : 0);\n\t\t};\n\n\t\tfunction writeFixed32(val, buf, pos) {\n\t\t    buf[pos    ] =  val         & 255;\n\t\t    buf[pos + 1] =  val >>> 8   & 255;\n\t\t    buf[pos + 2] =  val >>> 16  & 255;\n\t\t    buf[pos + 3] =  val >>> 24;\n\t\t}\n\n\t\t/**\n\t\t * Writes an unsigned 32 bit value as fixed 32 bits.\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.fixed32 = function write_fixed32(value) {\n\t\t    return this._push(writeFixed32, 4, value >>> 0);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 32 bit value as fixed 32 bits.\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n\t\t/**\n\t\t * Writes an unsigned 64 bit value as fixed 64 bits.\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.fixed64 = function write_fixed64(value) {\n\t\t    var bits = LongBits.from(value);\n\t\t    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n\t\t};\n\n\t\t/**\n\t\t * Writes a signed 64 bit value as fixed 64 bits.\n\t\t * @function\n\t\t * @param {Long|number|string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t * @throws {TypeError} If `value` is a string and no long library is present.\n\t\t */\n\t\tWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n\t\t/**\n\t\t * Writes a float (32 bit).\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.float = function write_float(value) {\n\t\t    return this._push(util.float.writeFloatLE, 4, value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a double (64 bit float).\n\t\t * @function\n\t\t * @param {number} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.double = function write_double(value) {\n\t\t    return this._push(util.float.writeDoubleLE, 8, value);\n\t\t};\n\n\t\tvar writeBytes = util.Array.prototype.set\n\t\t    ? function writeBytes_set(val, buf, pos) {\n\t\t        buf.set(val, pos); // also works for plain array values\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    : function writeBytes_for(val, buf, pos) {\n\t\t        for (var i = 0; i < val.length; ++i)\n\t\t            buf[pos + i] = val[i];\n\t\t    };\n\n\t\t/**\n\t\t * Writes a sequence of bytes.\n\t\t * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.bytes = function write_bytes(value) {\n\t\t    var len = value.length >>> 0;\n\t\t    if (!len)\n\t\t        return this._push(writeByte, 1, 0);\n\t\t    if (util.isString(value)) {\n\t\t        var buf = Writer.alloc(len = base64.length(value));\n\t\t        base64.decode(value, buf, 0);\n\t\t        value = buf;\n\t\t    }\n\t\t    return this.uint32(len)._push(writeBytes, len, value);\n\t\t};\n\n\t\t/**\n\t\t * Writes a string.\n\t\t * @param {string} value Value to write\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.string = function write_string(value) {\n\t\t    var len = utf8.length(value);\n\t\t    return len\n\t\t        ? this.uint32(len)._push(utf8.write, len, value)\n\t\t        : this._push(writeByte, 1, 0);\n\t\t};\n\n\t\t/**\n\t\t * Forks this writer's state by pushing it to a stack.\n\t\t * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.fork = function fork() {\n\t\t    this.states = new State(this);\n\t\t    this.head = this.tail = new Op(noop, 0, 0);\n\t\t    this.len = 0;\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Resets this instance to the last state.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.reset = function reset() {\n\t\t    if (this.states) {\n\t\t        this.head   = this.states.head;\n\t\t        this.tail   = this.states.tail;\n\t\t        this.len    = this.states.len;\n\t\t        this.states = this.states.next;\n\t\t    } else {\n\t\t        this.head = this.tail = new Op(noop, 0, 0);\n\t\t        this.len  = 0;\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n\t\t * @returns {Writer} `this`\n\t\t */\n\t\tWriter.prototype.ldelim = function ldelim() {\n\t\t    var head = this.head,\n\t\t        tail = this.tail,\n\t\t        len  = this.len;\n\t\t    this.reset().uint32(len);\n\t\t    if (len) {\n\t\t        this.tail.next = head.next; // skip noop\n\t\t        this.tail = tail;\n\t\t        this.len += len;\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Finishes the write operation.\n\t\t * @returns {Uint8Array} Finished buffer\n\t\t */\n\t\tWriter.prototype.finish = function finish() {\n\t\t    var head = this.head.next, // skip noop\n\t\t        buf  = this.constructor.alloc(this.len),\n\t\t        pos  = 0;\n\t\t    while (head) {\n\t\t        head.fn(head.val, buf, pos);\n\t\t        pos += head.len;\n\t\t        head = head.next;\n\t\t    }\n\t\t    // this.head = this.tail = null;\n\t\t    return buf;\n\t\t};\n\n\t\tWriter._configure = function(BufferWriter_) {\n\t\t    BufferWriter = BufferWriter_;\n\t\t    Writer.create = create();\n\t\t    BufferWriter._configure();\n\t\t};\n\t\treturn writer;\n\t}\n\n\tvar writer_buffer;\n\tvar hasRequiredWriter_buffer;\n\n\tfunction requireWriter_buffer () {\n\t\tif (hasRequiredWriter_buffer) return writer_buffer;\n\t\thasRequiredWriter_buffer = 1;\n\t\twriter_buffer = BufferWriter;\n\n\t\t// extends Writer\n\t\tvar Writer = requireWriter();\n\t\t(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs a new buffer writer instance.\n\t\t * @classdesc Wire format writer using node buffers.\n\t\t * @extends Writer\n\t\t * @constructor\n\t\t */\n\t\tfunction BufferWriter() {\n\t\t    Writer.call(this);\n\t\t}\n\n\t\tBufferWriter._configure = function () {\n\t\t    /**\n\t\t     * Allocates a buffer of the specified size.\n\t\t     * @function\n\t\t     * @param {number} size Buffer size\n\t\t     * @returns {Buffer} Buffer\n\t\t     */\n\t\t    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n\t\t    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n\t\t        ? function writeBytesBuffer_set(val, buf, pos) {\n\t\t          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n\t\t          // also works for plain array values\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : function writeBytesBuffer_copy(val, buf, pos) {\n\t\t          if (val.copy) // Buffer values\n\t\t            val.copy(buf, pos, 0, val.length);\n\t\t          else for (var i = 0; i < val.length;) // plain array values\n\t\t            buf[pos++] = val[i++];\n\t\t        };\n\t\t};\n\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n\t\t    if (util.isString(value))\n\t\t        value = util._Buffer_from(value, \"base64\");\n\t\t    var len = value.length >>> 0;\n\t\t    this.uint32(len);\n\t\t    if (len)\n\t\t        this._push(BufferWriter.writeBytesBuffer, len, value);\n\t\t    return this;\n\t\t};\n\n\t\tfunction writeStringBuffer(val, buf, pos) {\n\t\t    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n\t\t        util.utf8.write(val, buf, pos);\n\t\t    else if (buf.utf8Write)\n\t\t        buf.utf8Write(val, pos);\n\t\t    else\n\t\t        buf.write(val, pos);\n\t\t}\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferWriter.prototype.string = function write_string_buffer(value) {\n\t\t    var len = util.Buffer.byteLength(value);\n\t\t    this.uint32(len);\n\t\t    if (len)\n\t\t        this._push(writeStringBuffer, len, value);\n\t\t    return this;\n\t\t};\n\n\n\t\t/**\n\t\t * Finishes the write operation.\n\t\t * @name BufferWriter#finish\n\t\t * @function\n\t\t * @returns {Buffer} Finished buffer\n\t\t */\n\n\t\tBufferWriter._configure();\n\t\treturn writer_buffer;\n\t}\n\n\tvar reader;\n\tvar hasRequiredReader;\n\n\tfunction requireReader () {\n\t\tif (hasRequiredReader) return reader;\n\t\thasRequiredReader = 1;\n\t\treader = Reader;\n\n\t\tvar util      = requireMinimal$1();\n\n\t\tvar BufferReader; // cyclic\n\n\t\tvar LongBits  = util.LongBits,\n\t\t    utf8      = util.utf8;\n\n\t\t/* istanbul ignore next */\n\t\tfunction indexOutOfRange(reader, writeLength) {\n\t\t    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n\t\t}\n\n\t\t/**\n\t\t * Constructs a new reader instance using the specified buffer.\n\t\t * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n\t\t * @constructor\n\t\t * @param {Uint8Array} buffer Buffer to read from\n\t\t */\n\t\tfunction Reader(buffer) {\n\n\t\t    /**\n\t\t     * Read buffer.\n\t\t     * @type {Uint8Array}\n\t\t     */\n\t\t    this.buf = buffer;\n\n\t\t    /**\n\t\t     * Read buffer position.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.pos = 0;\n\n\t\t    /**\n\t\t     * Read buffer length.\n\t\t     * @type {number}\n\t\t     */\n\t\t    this.len = buffer.length;\n\t\t}\n\n\t\tvar create_array = typeof Uint8Array !== \"undefined\"\n\t\t    ? function create_typed_array(buffer) {\n\t\t        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n\t\t            return new Reader(buffer);\n\t\t        throw Error(\"illegal buffer\");\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    : function create_array(buffer) {\n\t\t        if (Array.isArray(buffer))\n\t\t            return new Reader(buffer);\n\t\t        throw Error(\"illegal buffer\");\n\t\t    };\n\n\t\tvar create = function create() {\n\t\t    return util.Buffer\n\t\t        ? function create_buffer_setup(buffer) {\n\t\t            return (Reader.create = function create_buffer(buffer) {\n\t\t                return util.Buffer.isBuffer(buffer)\n\t\t                    ? new BufferReader(buffer)\n\t\t                    /* istanbul ignore next */\n\t\t                    : create_array(buffer);\n\t\t            })(buffer);\n\t\t        }\n\t\t        /* istanbul ignore next */\n\t\t        : create_array;\n\t\t};\n\n\t\t/**\n\t\t * Creates a new reader using the specified buffer.\n\t\t * @function\n\t\t * @param {Uint8Array|Buffer} buffer Buffer to read from\n\t\t * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n\t\t * @throws {Error} If `buffer` is not a valid buffer\n\t\t */\n\t\tReader.create = create();\n\n\t\tReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n\t\t/**\n\t\t * Reads a varint as an unsigned 32 bit value.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.uint32 = (function read_uint32_setup() {\n\t\t    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n\t\t    return function read_uint32() {\n\t\t        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\t\t        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n\t\t        /* istanbul ignore if */\n\t\t        if ((this.pos += 5) > this.len) {\n\t\t            this.pos = this.len;\n\t\t            throw indexOutOfRange(this, 10);\n\t\t        }\n\t\t        return value;\n\t\t    };\n\t\t})();\n\n\t\t/**\n\t\t * Reads a varint as a signed 32 bit value.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.int32 = function read_int32() {\n\t\t    return this.uint32() | 0;\n\t\t};\n\n\t\t/**\n\t\t * Reads a zig-zag encoded varint as a signed 32 bit value.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.sint32 = function read_sint32() {\n\t\t    var value = this.uint32();\n\t\t    return value >>> 1 ^ -(value & 1) | 0;\n\t\t};\n\n\t\t/* eslint-disable no-invalid-this */\n\n\t\tfunction readLongVarint() {\n\t\t    // tends to deopt with local vars for octet etc.\n\t\t    var bits = new LongBits(0, 0);\n\t\t    var i = 0;\n\t\t    if (this.len - this.pos > 4) { // fast route (lo)\n\t\t        for (; i < 4; ++i) {\n\t\t            // 1st..4th\n\t\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t        // 5th\n\t\t        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n\t\t        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n\t\t        if (this.buf[this.pos++] < 128)\n\t\t            return bits;\n\t\t        i = 0;\n\t\t    } else {\n\t\t        for (; i < 3; ++i) {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t            // 1st..3th\n\t\t            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t        // 4th\n\t\t        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n\t\t        return bits;\n\t\t    }\n\t\t    if (this.len - this.pos > 4) { // fast route (hi)\n\t\t        for (; i < 5; ++i) {\n\t\t            // 6th..10th\n\t\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t    } else {\n\t\t        for (; i < 5; ++i) {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t            // 6th..10th\n\t\t            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n\t\t            if (this.buf[this.pos++] < 128)\n\t\t                return bits;\n\t\t        }\n\t\t    }\n\t\t    /* istanbul ignore next */\n\t\t    throw Error(\"invalid varint encoding\");\n\t\t}\n\n\t\t/* eslint-enable no-invalid-this */\n\n\t\t/**\n\t\t * Reads a varint as a signed 64 bit value.\n\t\t * @name Reader#int64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a varint as an unsigned 64 bit value.\n\t\t * @name Reader#uint64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a zig-zag encoded varint as a signed 64 bit value.\n\t\t * @name Reader#sint64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a varint as a boolean.\n\t\t * @returns {boolean} Value read\n\t\t */\n\t\tReader.prototype.bool = function read_bool() {\n\t\t    return this.uint32() !== 0;\n\t\t};\n\n\t\tfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n\t\t    return (buf[end - 4]\n\t\t          | buf[end - 3] << 8\n\t\t          | buf[end - 2] << 16\n\t\t          | buf[end - 1] << 24) >>> 0;\n\t\t}\n\n\t\t/**\n\t\t * Reads fixed 32 bits as an unsigned 32 bit integer.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.fixed32 = function read_fixed32() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    return readFixed32_end(this.buf, this.pos += 4);\n\t\t};\n\n\t\t/**\n\t\t * Reads fixed 32 bits as a signed 32 bit integer.\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.sfixed32 = function read_sfixed32() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    return readFixed32_end(this.buf, this.pos += 4) | 0;\n\t\t};\n\n\t\t/* eslint-disable no-invalid-this */\n\n\t\tfunction readFixed64(/* this: Reader */) {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 8 > this.len)\n\t\t        throw indexOutOfRange(this, 8);\n\n\t\t    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n\t\t}\n\n\t\t/* eslint-enable no-invalid-this */\n\n\t\t/**\n\t\t * Reads fixed 64 bits.\n\t\t * @name Reader#fixed64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads zig-zag encoded fixed 64 bits.\n\t\t * @name Reader#sfixed64\n\t\t * @function\n\t\t * @returns {Long} Value read\n\t\t */\n\n\t\t/**\n\t\t * Reads a float (32 bit) as a number.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.float = function read_float() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 4 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    var value = util.float.readFloatLE(this.buf, this.pos);\n\t\t    this.pos += 4;\n\t\t    return value;\n\t\t};\n\n\t\t/**\n\t\t * Reads a double (64 bit float) as a number.\n\t\t * @function\n\t\t * @returns {number} Value read\n\t\t */\n\t\tReader.prototype.double = function read_double() {\n\n\t\t    /* istanbul ignore if */\n\t\t    if (this.pos + 8 > this.len)\n\t\t        throw indexOutOfRange(this, 4);\n\n\t\t    var value = util.float.readDoubleLE(this.buf, this.pos);\n\t\t    this.pos += 8;\n\t\t    return value;\n\t\t};\n\n\t\t/**\n\t\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t\t * @returns {Uint8Array} Value read\n\t\t */\n\t\tReader.prototype.bytes = function read_bytes() {\n\t\t    var length = this.uint32(),\n\t\t        start  = this.pos,\n\t\t        end    = this.pos + length;\n\n\t\t    /* istanbul ignore if */\n\t\t    if (end > this.len)\n\t\t        throw indexOutOfRange(this, length);\n\n\t\t    this.pos += length;\n\t\t    if (Array.isArray(this.buf)) // plain array\n\t\t        return this.buf.slice(start, end);\n\t\t    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n\t\t        ? new this.buf.constructor(0)\n\t\t        : this._slice.call(this.buf, start, end);\n\t\t};\n\n\t\t/**\n\t\t * Reads a string preceeded by its byte length as a varint.\n\t\t * @returns {string} Value read\n\t\t */\n\t\tReader.prototype.string = function read_string() {\n\t\t    var bytes = this.bytes();\n\t\t    return utf8.read(bytes, 0, bytes.length);\n\t\t};\n\n\t\t/**\n\t\t * Skips the specified number of bytes if specified, otherwise skips a varint.\n\t\t * @param {number} [length] Length if known, otherwise a varint is assumed\n\t\t * @returns {Reader} `this`\n\t\t */\n\t\tReader.prototype.skip = function skip(length) {\n\t\t    if (typeof length === \"number\") {\n\t\t        /* istanbul ignore if */\n\t\t        if (this.pos + length > this.len)\n\t\t            throw indexOutOfRange(this, length);\n\t\t        this.pos += length;\n\t\t    } else {\n\t\t        do {\n\t\t            /* istanbul ignore if */\n\t\t            if (this.pos >= this.len)\n\t\t                throw indexOutOfRange(this);\n\t\t        } while (this.buf[this.pos++] & 128);\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\t/**\n\t\t * Skips the next element of the specified wire type.\n\t\t * @param {number} wireType Wire type received\n\t\t * @returns {Reader} `this`\n\t\t */\n\t\tReader.prototype.skipType = function(wireType) {\n\t\t    switch (wireType) {\n\t\t        case 0:\n\t\t            this.skip();\n\t\t            break;\n\t\t        case 1:\n\t\t            this.skip(8);\n\t\t            break;\n\t\t        case 2:\n\t\t            this.skip(this.uint32());\n\t\t            break;\n\t\t        case 3:\n\t\t            while ((wireType = this.uint32() & 7) !== 4) {\n\t\t                this.skipType(wireType);\n\t\t            }\n\t\t            break;\n\t\t        case 5:\n\t\t            this.skip(4);\n\t\t            break;\n\n\t\t        /* istanbul ignore next */\n\t\t        default:\n\t\t            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n\t\t    }\n\t\t    return this;\n\t\t};\n\n\t\tReader._configure = function(BufferReader_) {\n\t\t    BufferReader = BufferReader_;\n\t\t    Reader.create = create();\n\t\t    BufferReader._configure();\n\n\t\t    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n\t\t    util.merge(Reader.prototype, {\n\n\t\t        int64: function read_int64() {\n\t\t            return readLongVarint.call(this)[fn](false);\n\t\t        },\n\n\t\t        uint64: function read_uint64() {\n\t\t            return readLongVarint.call(this)[fn](true);\n\t\t        },\n\n\t\t        sint64: function read_sint64() {\n\t\t            return readLongVarint.call(this).zzDecode()[fn](false);\n\t\t        },\n\n\t\t        fixed64: function read_fixed64() {\n\t\t            return readFixed64.call(this)[fn](true);\n\t\t        },\n\n\t\t        sfixed64: function read_sfixed64() {\n\t\t            return readFixed64.call(this)[fn](false);\n\t\t        }\n\n\t\t    });\n\t\t};\n\t\treturn reader;\n\t}\n\n\tvar reader_buffer;\n\tvar hasRequiredReader_buffer;\n\n\tfunction requireReader_buffer () {\n\t\tif (hasRequiredReader_buffer) return reader_buffer;\n\t\thasRequiredReader_buffer = 1;\n\t\treader_buffer = BufferReader;\n\n\t\t// extends Reader\n\t\tvar Reader = requireReader();\n\t\t(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t/**\n\t\t * Constructs a new buffer reader instance.\n\t\t * @classdesc Wire format reader using node buffers.\n\t\t * @extends Reader\n\t\t * @constructor\n\t\t * @param {Buffer} buffer Buffer to read from\n\t\t */\n\t\tfunction BufferReader(buffer) {\n\t\t    Reader.call(this, buffer);\n\n\t\t    /**\n\t\t     * Read buffer.\n\t\t     * @name BufferReader#buf\n\t\t     * @type {Buffer}\n\t\t     */\n\t\t}\n\n\t\tBufferReader._configure = function () {\n\t\t    /* istanbul ignore else */\n\t\t    if (util.Buffer)\n\t\t        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\t\t};\n\n\n\t\t/**\n\t\t * @override\n\t\t */\n\t\tBufferReader.prototype.string = function read_string_buffer() {\n\t\t    var len = this.uint32(); // modifies pos\n\t\t    return this.buf.utf8Slice\n\t\t        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n\t\t        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n\t\t};\n\n\t\t/**\n\t\t * Reads a sequence of bytes preceeded by its length as a varint.\n\t\t * @name BufferReader#bytes\n\t\t * @function\n\t\t * @returns {Buffer} Value read\n\t\t */\n\n\t\tBufferReader._configure();\n\t\treturn reader_buffer;\n\t}\n\n\tvar rpc = {};\n\n\tvar service;\n\tvar hasRequiredService;\n\n\tfunction requireService () {\n\t\tif (hasRequiredService) return service;\n\t\thasRequiredService = 1;\n\t\tservice = Service;\n\n\t\tvar util = requireMinimal$1();\n\n\t\t// Extends EventEmitter\n\t\t(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n\t\t/**\n\t\t * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n\t\t *\n\t\t * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n\t\t * @typedef rpc.ServiceMethodCallback\n\t\t * @template TRes extends Message<TRes>\n\t\t * @type {function}\n\t\t * @param {Error|null} error Error, if any\n\t\t * @param {TRes} [response] Response message\n\t\t * @returns {undefined}\n\t\t */\n\n\t\t/**\n\t\t * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n\t\t * @typedef rpc.ServiceMethod\n\t\t * @template TReq extends Message<TReq>\n\t\t * @template TRes extends Message<TRes>\n\t\t * @type {function}\n\t\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t\t * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n\t\t * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n\t\t */\n\n\t\t/**\n\t\t * Constructs a new RPC service instance.\n\t\t * @classdesc An RPC service as returned by {@link Service#create}.\n\t\t * @exports rpc.Service\n\t\t * @extends util.EventEmitter\n\t\t * @constructor\n\t\t * @param {RPCImpl} rpcImpl RPC implementation\n\t\t * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n\t\t * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n\t\t */\n\t\tfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n\t\t    if (typeof rpcImpl !== \"function\")\n\t\t        throw TypeError(\"rpcImpl must be a function\");\n\n\t\t    util.EventEmitter.call(this);\n\n\t\t    /**\n\t\t     * RPC implementation. Becomes `null` once the service is ended.\n\t\t     * @type {RPCImpl|null}\n\t\t     */\n\t\t    this.rpcImpl = rpcImpl;\n\n\t\t    /**\n\t\t     * Whether requests are length-delimited.\n\t\t     * @type {boolean}\n\t\t     */\n\t\t    this.requestDelimited = Boolean(requestDelimited);\n\n\t\t    /**\n\t\t     * Whether responses are length-delimited.\n\t\t     * @type {boolean}\n\t\t     */\n\t\t    this.responseDelimited = Boolean(responseDelimited);\n\t\t}\n\n\t\t/**\n\t\t * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n\t\t * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n\t\t * @param {Constructor<TReq>} requestCtor Request constructor\n\t\t * @param {Constructor<TRes>} responseCtor Response constructor\n\t\t * @param {TReq|Properties<TReq>} request Request message or plain object\n\t\t * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n\t\t * @returns {undefined}\n\t\t * @template TReq extends Message<TReq>\n\t\t * @template TRes extends Message<TRes>\n\t\t */\n\t\tService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n\t\t    if (!request)\n\t\t        throw TypeError(\"request must be specified\");\n\n\t\t    var self = this;\n\t\t    if (!callback)\n\t\t        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n\t\t    if (!self.rpcImpl) {\n\t\t        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n\t\t        return undefined;\n\t\t    }\n\n\t\t    try {\n\t\t        return self.rpcImpl(\n\t\t            method,\n\t\t            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n\t\t            function rpcCallback(err, response) {\n\n\t\t                if (err) {\n\t\t                    self.emit(\"error\", err, method);\n\t\t                    return callback(err);\n\t\t                }\n\n\t\t                if (response === null) {\n\t\t                    self.end(/* endedByRPC */ true);\n\t\t                    return undefined;\n\t\t                }\n\n\t\t                if (!(response instanceof responseCtor)) {\n\t\t                    try {\n\t\t                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n\t\t                    } catch (err) {\n\t\t                        self.emit(\"error\", err, method);\n\t\t                        return callback(err);\n\t\t                    }\n\t\t                }\n\n\t\t                self.emit(\"data\", response, method);\n\t\t                return callback(null, response);\n\t\t            }\n\t\t        );\n\t\t    } catch (err) {\n\t\t        self.emit(\"error\", err, method);\n\t\t        setTimeout(function() { callback(err); }, 0);\n\t\t        return undefined;\n\t\t    }\n\t\t};\n\n\t\t/**\n\t\t * Ends this service and emits the `end` event.\n\t\t * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n\t\t * @returns {rpc.Service} `this`\n\t\t */\n\t\tService.prototype.end = function end(endedByRPC) {\n\t\t    if (this.rpcImpl) {\n\t\t        if (!endedByRPC) // signal end to rpcImpl\n\t\t            this.rpcImpl(null, null, null);\n\t\t        this.rpcImpl = null;\n\t\t        this.emit(\"end\").off();\n\t\t    }\n\t\t    return this;\n\t\t};\n\t\treturn service;\n\t}\n\n\tvar hasRequiredRpc;\n\n\tfunction requireRpc () {\n\t\tif (hasRequiredRpc) return rpc;\n\t\thasRequiredRpc = 1;\n\t\t(function (exports) {\n\n\t\t\t/**\n\t\t\t * Streaming RPC helpers.\n\t\t\t * @namespace\n\t\t\t */\n\t\t\tvar rpc = exports;\n\n\t\t\t/**\n\t\t\t * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n\t\t\t * @typedef RPCImpl\n\t\t\t * @type {function}\n\t\t\t * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n\t\t\t * @param {Uint8Array} requestData Request data\n\t\t\t * @param {RPCImplCallback} callback Callback function\n\t\t\t * @returns {undefined}\n\t\t\t * @example\n\t\t\t * function rpcImpl(method, requestData, callback) {\n\t\t\t *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n\t\t\t *         throw Error(\"no such method\");\n\t\t\t *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n\t\t\t *         callback(err, responseData);\n\t\t\t *     });\n\t\t\t * }\n\t\t\t */\n\n\t\t\t/**\n\t\t\t * Node-style callback as used by {@link RPCImpl}.\n\t\t\t * @typedef RPCImplCallback\n\t\t\t * @type {function}\n\t\t\t * @param {Error|null} error Error, if any, otherwise `null`\n\t\t\t * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n\t\t\t * @returns {undefined}\n\t\t\t */\n\n\t\t\trpc.Service = requireService();\n\t} (rpc));\n\t\treturn rpc;\n\t}\n\n\tvar roots;\n\tvar hasRequiredRoots;\n\n\tfunction requireRoots () {\n\t\tif (hasRequiredRoots) return roots;\n\t\thasRequiredRoots = 1;\n\t\troots = {};\n\n\t\t/**\n\t\t * Named roots.\n\t\t * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n\t\t * Can also be used manually to make roots available accross modules.\n\t\t * @name roots\n\t\t * @type {Object.<string,Root>}\n\t\t * @example\n\t\t * // pbjs -r myroot -o compiled.js ...\n\t\t *\n\t\t * // in another module:\n\t\t * require(\"./compiled.js\");\n\t\t *\n\t\t * // in any subsequent module:\n\t\t * var root = protobuf.roots[\"myroot\"];\n\t\t */\n\t\treturn roots;\n\t}\n\n\tvar hasRequiredIndexMinimal;\n\n\tfunction requireIndexMinimal () {\n\t\tif (hasRequiredIndexMinimal) return indexMinimal;\n\t\thasRequiredIndexMinimal = 1;\n\t\t(function (exports) {\n\t\t\tvar protobuf = exports;\n\n\t\t\t/**\n\t\t\t * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n\t\t\t * @name build\n\t\t\t * @type {string}\n\t\t\t * @const\n\t\t\t */\n\t\t\tprotobuf.build = \"minimal\";\n\n\t\t\t// Serialization\n\t\t\tprotobuf.Writer       = requireWriter();\n\t\t\tprotobuf.BufferWriter = requireWriter_buffer();\n\t\t\tprotobuf.Reader       = requireReader();\n\t\t\tprotobuf.BufferReader = requireReader_buffer();\n\n\t\t\t// Utility\n\t\t\tprotobuf.util         = requireMinimal$1();\n\t\t\tprotobuf.rpc          = requireRpc();\n\t\t\tprotobuf.roots        = requireRoots();\n\t\t\tprotobuf.configure    = configure;\n\n\t\t\t/* istanbul ignore next */\n\t\t\t/**\n\t\t\t * Reconfigures the library according to the environment.\n\t\t\t * @returns {undefined}\n\t\t\t */\n\t\t\tfunction configure() {\n\t\t\t    protobuf.util._configure();\n\t\t\t    protobuf.Writer._configure(protobuf.BufferWriter);\n\t\t\t    protobuf.Reader._configure(protobuf.BufferReader);\n\t\t\t}\n\n\t\t\t// Set up buffer utility according to the environment\n\t\t\tconfigure();\n\t} (indexMinimal));\n\t\treturn indexMinimal;\n\t}\n\n\tvar hasRequiredMinimal;\n\n\tfunction requireMinimal () {\n\t\tif (hasRequiredMinimal) return minimal$1.exports;\n\t\thasRequiredMinimal = 1;\n\t\t(function (module) {\n\t\t\tmodule.exports = requireIndexMinimal();\n\t} (minimal$1));\n\t\treturn minimal$1.exports;\n\t}\n\n\tvar minimalExports = requireMinimal();\n\n\t/* eslint-disable */\n\tfunction createBasePBAnimator() {\n\t    return { states: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAnimator = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        for (const v of message.states) {\n\t            PBAnimationState.encode(v, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAnimator();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.states.push(PBAnimationState.decode(reader, reader.uint32()));\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBAnimationState() {\n\t    return {\n\t        name: '',\n\t        clip: '',\n\t        playing: undefined,\n\t        weight: undefined,\n\t        speed: undefined,\n\t        loop: undefined,\n\t        shouldReset: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAnimationState = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.name !== '') {\n\t            writer.uint32(10).string(message.name);\n\t        }\n\t        if (message.clip !== '') {\n\t            writer.uint32(18).string(message.clip);\n\t        }\n\t        if (message.playing !== undefined) {\n\t            writer.uint32(24).bool(message.playing);\n\t        }\n\t        if (message.weight !== undefined) {\n\t            writer.uint32(37).float(message.weight);\n\t        }\n\t        if (message.speed !== undefined) {\n\t            writer.uint32(45).float(message.speed);\n\t        }\n\t        if (message.loop !== undefined) {\n\t            writer.uint32(48).bool(message.loop);\n\t        }\n\t        if (message.shouldReset !== undefined) {\n\t            writer.uint32(56).bool(message.shouldReset);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAnimationState();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.name = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.clip = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.playing = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.weight = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.speed = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.loop = reader.bool();\n\t                    break;\n\t                case 7:\n\t                    message.shouldReset = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$p = 1042;\n\t/**\n\t * @internal\n\t */\n\tconst AnimatorSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAnimator.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAnimator.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAnimator.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBAudioSource() {\n\t    return { playing: undefined, volume: undefined, loop: undefined, pitch: undefined, audioClipUrl: '' };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAudioSource = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.playing !== undefined) {\n\t            writer.uint32(8).bool(message.playing);\n\t        }\n\t        if (message.volume !== undefined) {\n\t            writer.uint32(21).float(message.volume);\n\t        }\n\t        if (message.loop !== undefined) {\n\t            writer.uint32(24).bool(message.loop);\n\t        }\n\t        if (message.pitch !== undefined) {\n\t            writer.uint32(37).float(message.pitch);\n\t        }\n\t        if (message.audioClipUrl !== '') {\n\t            writer.uint32(42).string(message.audioClipUrl);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAudioSource();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.playing = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.volume = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.loop = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.pitch = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.audioClipUrl = reader.string();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$o = 1020;\n\t/**\n\t * @internal\n\t */\n\tconst AudioSourceSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAudioSource.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAudioSource.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAudioSource.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar AvatarAnchorPoint;\n\t(function (AvatarAnchorPoint) {\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"POSITION\"] = 0] = \"POSITION\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"NAME_TAG\"] = 1] = \"NAME_TAG\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"LEFT_HAND\"] = 2] = \"LEFT_HAND\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"RIGHT_HAND\"] = 3] = \"RIGHT_HAND\";\n\t    AvatarAnchorPoint[AvatarAnchorPoint[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(AvatarAnchorPoint || (AvatarAnchorPoint = {}));\n\tfunction createBasePBAvatarAttach() {\n\t    return { avatarId: '', anchorPointId: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarAttach = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.avatarId !== '') {\n\t            writer.uint32(10).string(message.avatarId);\n\t        }\n\t        if (message.anchorPointId !== 0) {\n\t            writer.uint32(16).int32(message.anchorPointId);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarAttach();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.avatarId = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.anchorPointId = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$n = 1073;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarAttachSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarAttach.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarAttach.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarAttach.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBaseVector3() {\n\t    return { x: 0, y: 0, z: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Vector3 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.x !== 0) {\n\t            writer.uint32(13).float(message.x);\n\t        }\n\t        if (message.y !== 0) {\n\t            writer.uint32(21).float(message.y);\n\t        }\n\t        if (message.z !== 0) {\n\t            writer.uint32(29).float(message.z);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseVector3();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.x = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.y = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.z = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar AvatarModifier;\n\t(function (AvatarModifier) {\n\t    AvatarModifier[AvatarModifier[\"HIDE_AVATARS\"] = 0] = \"HIDE_AVATARS\";\n\t    AvatarModifier[AvatarModifier[\"DISABLE_PASSPORTS\"] = 1] = \"DISABLE_PASSPORTS\";\n\t    AvatarModifier[AvatarModifier[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(AvatarModifier || (AvatarModifier = {}));\n\tfunction createBasePBAvatarModifierArea() {\n\t    return { area: undefined, excludeIds: [], modifiers: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarModifierArea = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.area !== undefined) {\n\t            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        for (const v of message.excludeIds) {\n\t            writer.uint32(18).string(v);\n\t        }\n\t        writer.uint32(26).fork();\n\t        for (const v of message.modifiers) {\n\t            writer.int32(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarModifierArea();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.area = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.excludeIds.push(reader.string());\n\t                    break;\n\t                case 3:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.modifiers.push(reader.int32());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.modifiers.push(reader.int32());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$m = 1070;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarModifierAreaSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarModifierArea.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarModifierArea.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarModifierArea.decode(new Uint8Array());\n\t    }\n\t};\n\n\tvar long;\n\tvar hasRequiredLong;\n\n\tfunction requireLong () {\n\t\tif (hasRequiredLong) return long;\n\t\thasRequiredLong = 1;\n\t\tlong = Long;\r\n\r\n\t\t/**\r\n\t\t * wasm optimizations, to do native i64 multiplication and divide\r\n\t\t */\r\n\t\tvar wasm = null;\r\n\r\n\t\ttry {\r\n\t\t  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n\t\t    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n\t\t  ])), {}).exports;\r\n\t\t} catch (e) {\r\n\t\t  // no wasm support :(\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n\t\t *  See the from* functions below for more convenient ways of constructing Longs.\r\n\t\t * @exports Long\r\n\t\t * @class A Long class for representing a 64 bit two's-complement integer value.\r\n\t\t * @param {number} low The low (signed) 32 bits of the long\r\n\t\t * @param {number} high The high (signed) 32 bits of the long\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @constructor\r\n\t\t */\r\n\t\tfunction Long(low, high, unsigned) {\r\n\r\n\t\t    /**\r\n\t\t     * The low 32 bits as a signed value.\r\n\t\t     * @type {number}\r\n\t\t     */\r\n\t\t    this.low = low | 0;\r\n\r\n\t\t    /**\r\n\t\t     * The high 32 bits as a signed value.\r\n\t\t     * @type {number}\r\n\t\t     */\r\n\t\t    this.high = high | 0;\r\n\r\n\t\t    /**\r\n\t\t     * Whether unsigned or not.\r\n\t\t     * @type {boolean}\r\n\t\t     */\r\n\t\t    this.unsigned = !!unsigned;\r\n\t\t}\r\n\r\n\t\t// The internal representation of a long is the two given signed, 32-bit values.\r\n\t\t// We use 32-bit pieces because these are the size of integers on which\r\n\t\t// Javascript performs bit-operations.  For operations like addition and\r\n\t\t// multiplication, we split each number into 16 bit pieces, which can easily be\r\n\t\t// multiplied within Javascript's floating-point representation without overflow\r\n\t\t// or change in sign.\r\n\t\t//\r\n\t\t// In the algorithms below, we frequently reduce the negative case to the\r\n\t\t// positive case by negating the input(s) and then post-processing the result.\r\n\t\t// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n\t\t// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n\t\t// a positive number, it overflows back into a negative).  Not handling this\r\n\t\t// case would often result in infinite recursion.\r\n\t\t//\r\n\t\t// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n\t\t// methods on which they depend.\r\n\r\n\t\t/**\r\n\t\t * An indicator used to reliably determine if an object is a Long or not.\r\n\t\t * @type {boolean}\r\n\t\t * @const\r\n\t\t * @private\r\n\t\t */\r\n\t\tLong.prototype.__isLong__;\r\n\r\n\t\tObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n\t\t/**\r\n\t\t * @function\r\n\t\t * @param {*} obj Object\r\n\t\t * @returns {boolean}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction isLong(obj) {\r\n\t\t    return (obj && obj[\"__isLong__\"]) === true;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Tests if the specified object is a Long.\r\n\t\t * @function\r\n\t\t * @param {*} obj Object\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLong.isLong = isLong;\r\n\r\n\t\t/**\r\n\t\t * A cache of the Long representations of small integer values.\r\n\t\t * @type {!Object}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar INT_CACHE = {};\r\n\r\n\t\t/**\r\n\t\t * A cache of the Long representations of small unsigned integer values.\r\n\t\t * @type {!Object}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar UINT_CACHE = {};\r\n\r\n\t\t/**\r\n\t\t * @param {number} value\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromInt(value, unsigned) {\r\n\t\t    var obj, cachedObj, cache;\r\n\t\t    if (unsigned) {\r\n\t\t        value >>>= 0;\r\n\t\t        if (cache = (0 <= value && value < 256)) {\r\n\t\t            cachedObj = UINT_CACHE[value];\r\n\t\t            if (cachedObj)\r\n\t\t                return cachedObj;\r\n\t\t        }\r\n\t\t        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n\t\t        if (cache)\r\n\t\t            UINT_CACHE[value] = obj;\r\n\t\t        return obj;\r\n\t\t    } else {\r\n\t\t        value |= 0;\r\n\t\t        if (cache = (-128 <= value && value < 128)) {\r\n\t\t            cachedObj = INT_CACHE[value];\r\n\t\t            if (cachedObj)\r\n\t\t                return cachedObj;\r\n\t\t        }\r\n\t\t        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n\t\t        if (cache)\r\n\t\t            INT_CACHE[value] = obj;\r\n\t\t        return obj;\r\n\t\t    }\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representing the given 32 bit integer value.\r\n\t\t * @function\r\n\t\t * @param {number} value The 32 bit integer in question\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromInt = fromInt;\r\n\r\n\t\t/**\r\n\t\t * @param {number} value\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromNumber(value, unsigned) {\r\n\t\t    if (isNaN(value))\r\n\t\t        return unsigned ? UZERO : ZERO;\r\n\t\t    if (unsigned) {\r\n\t\t        if (value < 0)\r\n\t\t            return UZERO;\r\n\t\t        if (value >= TWO_PWR_64_DBL)\r\n\t\t            return MAX_UNSIGNED_VALUE;\r\n\t\t    } else {\r\n\t\t        if (value <= -TWO_PWR_63_DBL)\r\n\t\t            return MIN_VALUE;\r\n\t\t        if (value + 1 >= TWO_PWR_63_DBL)\r\n\t\t            return MAX_VALUE;\r\n\t\t    }\r\n\t\t    if (value < 0)\r\n\t\t        return fromNumber(-value, unsigned).neg();\r\n\t\t    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n\t\t * @function\r\n\t\t * @param {number} value The number in question\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromNumber = fromNumber;\r\n\r\n\t\t/**\r\n\t\t * @param {number} lowBits\r\n\t\t * @param {number} highBits\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromBits(lowBits, highBits, unsigned) {\r\n\t\t    return new Long(lowBits, highBits, unsigned);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n\t\t *  assumed to use 32 bits.\r\n\t\t * @function\r\n\t\t * @param {number} lowBits The low 32 bits\r\n\t\t * @param {number} highBits The high 32 bits\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBits = fromBits;\r\n\r\n\t\t/**\r\n\t\t * @function\r\n\t\t * @param {number} base\r\n\t\t * @param {number} exponent\r\n\t\t * @returns {number}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n\t\t/**\r\n\t\t * @param {string} str\r\n\t\t * @param {(boolean|number)=} unsigned\r\n\t\t * @param {number=} radix\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromString(str, unsigned, radix) {\r\n\t\t    if (str.length === 0)\r\n\t\t        throw Error('empty string');\r\n\t\t    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n\t\t        return ZERO;\r\n\t\t    if (typeof unsigned === 'number') {\r\n\t\t        // For goog.math.long compatibility\r\n\t\t        radix = unsigned,\r\n\t\t        unsigned = false;\r\n\t\t    } else {\r\n\t\t        unsigned = !! unsigned;\r\n\t\t    }\r\n\t\t    radix = radix || 10;\r\n\t\t    if (radix < 2 || 36 < radix)\r\n\t\t        throw RangeError('radix');\r\n\r\n\t\t    var p;\r\n\t\t    if ((p = str.indexOf('-')) > 0)\r\n\t\t        throw Error('interior hyphen');\r\n\t\t    else if (p === 0) {\r\n\t\t        return fromString(str.substring(1), unsigned, radix).neg();\r\n\t\t    }\r\n\r\n\t\t    // Do several (8) digits each time through the loop, so as to\r\n\t\t    // minimize the calls to the very expensive emulated div.\r\n\t\t    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n\t\t    var result = ZERO;\r\n\t\t    for (var i = 0; i < str.length; i += 8) {\r\n\t\t        var size = Math.min(8, str.length - i),\r\n\t\t            value = parseInt(str.substring(i, i + size), radix);\r\n\t\t        if (size < 8) {\r\n\t\t            var power = fromNumber(pow_dbl(radix, size));\r\n\t\t            result = result.mul(power).add(fromNumber(value));\r\n\t\t        } else {\r\n\t\t            result = result.mul(radixToPower);\r\n\t\t            result = result.add(fromNumber(value));\r\n\t\t        }\r\n\t\t    }\r\n\t\t    result.unsigned = unsigned;\r\n\t\t    return result;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns a Long representation of the given string, written using the specified radix.\r\n\t\t * @function\r\n\t\t * @param {string} str The textual representation of the Long\r\n\t\t * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n\t\t * @returns {!Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromString = fromString;\r\n\r\n\t\t/**\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n\t\t * @param {boolean=} unsigned\r\n\t\t * @returns {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tfunction fromValue(val, unsigned) {\r\n\t\t    if (typeof val === 'number')\r\n\t\t        return fromNumber(val, unsigned);\r\n\t\t    if (typeof val === 'string')\r\n\t\t        return fromString(val, unsigned);\r\n\t\t    // Throws for non-objects, converts non-instanceof Long:\r\n\t\t    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Converts the specified value to a Long using the appropriate from* function for its type.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLong.fromValue = fromValue;\r\n\r\n\t\t// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n\t\t// no runtime penalty for these.\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @const\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar ZERO = fromInt(0);\r\n\r\n\t\t/**\r\n\t\t * Signed zero.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.ZERO = ZERO;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar UZERO = fromInt(0, true);\r\n\r\n\t\t/**\r\n\t\t * Unsigned zero.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.UZERO = UZERO;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar ONE = fromInt(1);\r\n\r\n\t\t/**\r\n\t\t * Signed one.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.ONE = ONE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar UONE = fromInt(1, true);\r\n\r\n\t\t/**\r\n\t\t * Unsigned one.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.UONE = UONE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar NEG_ONE = fromInt(-1);\r\n\r\n\t\t/**\r\n\t\t * Signed negative one.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.NEG_ONE = NEG_ONE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n\t\t/**\r\n\t\t * Maximum signed value.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.MAX_VALUE = MAX_VALUE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n\t\t/**\r\n\t\t * Maximum unsigned value.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n\t\t/**\r\n\t\t * @type {!Long}\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n\t\t/**\r\n\t\t * Minimum signed value.\r\n\t\t * @type {!Long}\r\n\t\t */\r\n\t\tLong.MIN_VALUE = MIN_VALUE;\r\n\r\n\t\t/**\r\n\t\t * @alias Long.prototype\r\n\t\t * @inner\r\n\t\t */\r\n\t\tvar LongPrototype = Long.prototype;\r\n\r\n\t\t/**\r\n\t\t * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tLongPrototype.toInt = function toInt() {\r\n\t\t    return this.unsigned ? this.low >>> 0 : this.low;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tLongPrototype.toNumber = function toNumber() {\r\n\t\t    if (this.unsigned)\r\n\t\t        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n\t\t    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts the Long to a string written in the specified radix.\r\n\t\t * @param {number=} radix Radix (2-36), defaults to 10\r\n\t\t * @returns {string}\r\n\t\t * @override\r\n\t\t * @throws {RangeError} If `radix` is out of range\r\n\t\t */\r\n\t\tLongPrototype.toString = function toString(radix) {\r\n\t\t    radix = radix || 10;\r\n\t\t    if (radix < 2 || 36 < radix)\r\n\t\t        throw RangeError('radix');\r\n\t\t    if (this.isZero())\r\n\t\t        return '0';\r\n\t\t    if (this.isNegative()) { // Unsigned Longs are never negative\r\n\t\t        if (this.eq(MIN_VALUE)) {\r\n\t\t            // We need to change the Long value before it can be negated, so we remove\r\n\t\t            // the bottom-most digit in this base and then recurse to do the rest.\r\n\t\t            var radixLong = fromNumber(radix),\r\n\t\t                div = this.div(radixLong),\r\n\t\t                rem1 = div.mul(radixLong).sub(this);\r\n\t\t            return div.toString(radix) + rem1.toInt().toString(radix);\r\n\t\t        } else\r\n\t\t            return '-' + this.neg().toString(radix);\r\n\t\t    }\r\n\r\n\t\t    // Do several (6) digits each time through the loop, so as to\r\n\t\t    // minimize the calls to the very expensive emulated div.\r\n\t\t    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n\t\t        rem = this;\r\n\t\t    var result = '';\r\n\t\t    while (true) {\r\n\t\t        var remDiv = rem.div(radixToPower),\r\n\t\t            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n\t\t            digits = intval.toString(radix);\r\n\t\t        rem = remDiv;\r\n\t\t        if (rem.isZero())\r\n\t\t            return digits + result;\r\n\t\t        else {\r\n\t\t            while (digits.length < 6)\r\n\t\t                digits = '0' + digits;\r\n\t\t            result = '' + digits + result;\r\n\t\t        }\r\n\t\t    }\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the high 32 bits as a signed integer.\r\n\t\t * @returns {number} Signed high bits\r\n\t\t */\r\n\t\tLongPrototype.getHighBits = function getHighBits() {\r\n\t\t    return this.high;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the high 32 bits as an unsigned integer.\r\n\t\t * @returns {number} Unsigned high bits\r\n\t\t */\r\n\t\tLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n\t\t    return this.high >>> 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the low 32 bits as a signed integer.\r\n\t\t * @returns {number} Signed low bits\r\n\t\t */\r\n\t\tLongPrototype.getLowBits = function getLowBits() {\r\n\t\t    return this.low;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the low 32 bits as an unsigned integer.\r\n\t\t * @returns {number} Unsigned low bits\r\n\t\t */\r\n\t\tLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n\t\t    return this.low >>> 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets the number of bits needed to represent the absolute value of this Long.\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n\t\t    if (this.isNegative()) // Unsigned Longs are never negative\r\n\t\t        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n\t\t    var val = this.high != 0 ? this.high : this.low;\r\n\t\t    for (var bit = 31; bit > 0; bit--)\r\n\t\t        if ((val & (1 << bit)) != 0)\r\n\t\t            break;\r\n\t\t    return this.high != 0 ? bit + 33 : bit + 1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals zero.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isZero = function isZero() {\r\n\t\t    return this.high === 0 && this.low === 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is negative.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isNegative = function isNegative() {\r\n\t\t    return !this.unsigned && this.high < 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is positive.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isPositive = function isPositive() {\r\n\t\t    return this.unsigned || this.high >= 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is odd.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isOdd = function isOdd() {\r\n\t\t    return (this.low & 1) === 1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is even.\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.isEven = function isEven() {\r\n\t\t    return (this.low & 1) === 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.equals = function equals(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n\t\t        return false;\r\n\t\t    return this.high === other.high && this.low === other.low;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.eq = LongPrototype.equals;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value differs from the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.notEquals = function notEquals(other) {\r\n\t\t    return !this.eq(/* validates */ other);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lessThan = function lessThan(other) {\r\n\t\t    return this.comp(/* validates */ other) < 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than or equal the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n\t\t    return this.comp(/* validates */ other) <= 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.greaterThan = function greaterThan(other) {\r\n\t\t    return this.comp(/* validates */ other) > 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than or equal the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n\t\t    return this.comp(/* validates */ other) >= 0;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n\t\t/**\r\n\t\t * Compares this Long's value with the specified's.\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n\t\t *  if the given one is greater\r\n\t\t */\r\n\t\tLongPrototype.compare = function compare(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    if (this.eq(other))\r\n\t\t        return 0;\r\n\t\t    var thisNeg = this.isNegative(),\r\n\t\t        otherNeg = other.isNegative();\r\n\t\t    if (thisNeg && !otherNeg)\r\n\t\t        return -1;\r\n\t\t    if (!thisNeg && otherNeg)\r\n\t\t        return 1;\r\n\t\t    // At this point the sign bits are the same\r\n\t\t    if (!this.unsigned)\r\n\t\t        return this.sub(other).isNegative() ? -1 : 1;\r\n\t\t    // Both are positive if at least one is unsigned\r\n\t\t    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} other Other value\r\n\t\t * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n\t\t *  if the given one is greater\r\n\t\t */\r\n\t\tLongPrototype.comp = LongPrototype.compare;\r\n\r\n\t\t/**\r\n\t\t * Negates this Long's value.\r\n\t\t * @returns {!Long} Negated Long\r\n\t\t */\r\n\t\tLongPrototype.negate = function negate() {\r\n\t\t    if (!this.unsigned && this.eq(MIN_VALUE))\r\n\t\t        return MIN_VALUE;\r\n\t\t    return this.not().add(ONE);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n\t\t * @function\r\n\t\t * @returns {!Long} Negated Long\r\n\t\t */\r\n\t\tLongPrototype.neg = LongPrototype.negate;\r\n\r\n\t\t/**\r\n\t\t * Returns the sum of this and the specified Long.\r\n\t\t * @param {!Long|number|string} addend Addend\r\n\t\t * @returns {!Long} Sum\r\n\t\t */\r\n\t\tLongPrototype.add = function add(addend) {\r\n\t\t    if (!isLong(addend))\r\n\t\t        addend = fromValue(addend);\r\n\r\n\t\t    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n\t\t    var a48 = this.high >>> 16;\r\n\t\t    var a32 = this.high & 0xFFFF;\r\n\t\t    var a16 = this.low >>> 16;\r\n\t\t    var a00 = this.low & 0xFFFF;\r\n\r\n\t\t    var b48 = addend.high >>> 16;\r\n\t\t    var b32 = addend.high & 0xFFFF;\r\n\t\t    var b16 = addend.low >>> 16;\r\n\t\t    var b00 = addend.low & 0xFFFF;\r\n\r\n\t\t    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n\t\t    c00 += a00 + b00;\r\n\t\t    c16 += c00 >>> 16;\r\n\t\t    c00 &= 0xFFFF;\r\n\t\t    c16 += a16 + b16;\r\n\t\t    c32 += c16 >>> 16;\r\n\t\t    c16 &= 0xFFFF;\r\n\t\t    c32 += a32 + b32;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c48 += a48 + b48;\r\n\t\t    c48 &= 0xFFFF;\r\n\t\t    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the difference of this and the specified Long.\r\n\t\t * @param {!Long|number|string} subtrahend Subtrahend\r\n\t\t * @returns {!Long} Difference\r\n\t\t */\r\n\t\tLongPrototype.subtract = function subtract(subtrahend) {\r\n\t\t    if (!isLong(subtrahend))\r\n\t\t        subtrahend = fromValue(subtrahend);\r\n\t\t    return this.add(subtrahend.neg());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} subtrahend Subtrahend\r\n\t\t * @returns {!Long} Difference\r\n\t\t */\r\n\t\tLongPrototype.sub = LongPrototype.subtract;\r\n\r\n\t\t/**\r\n\t\t * Returns the product of this and the specified Long.\r\n\t\t * @param {!Long|number|string} multiplier Multiplier\r\n\t\t * @returns {!Long} Product\r\n\t\t */\r\n\t\tLongPrototype.multiply = function multiply(multiplier) {\r\n\t\t    if (this.isZero())\r\n\t\t        return ZERO;\r\n\t\t    if (!isLong(multiplier))\r\n\t\t        multiplier = fromValue(multiplier);\r\n\r\n\t\t    // use wasm support if present\r\n\t\t    if (wasm) {\r\n\t\t        var low = wasm.mul(this.low,\r\n\t\t                           this.high,\r\n\t\t                           multiplier.low,\r\n\t\t                           multiplier.high);\r\n\t\t        return fromBits(low, wasm.get_high(), this.unsigned);\r\n\t\t    }\r\n\r\n\t\t    if (multiplier.isZero())\r\n\t\t        return ZERO;\r\n\t\t    if (this.eq(MIN_VALUE))\r\n\t\t        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n\t\t    if (multiplier.eq(MIN_VALUE))\r\n\t\t        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n\t\t    if (this.isNegative()) {\r\n\t\t        if (multiplier.isNegative())\r\n\t\t            return this.neg().mul(multiplier.neg());\r\n\t\t        else\r\n\t\t            return this.neg().mul(multiplier).neg();\r\n\t\t    } else if (multiplier.isNegative())\r\n\t\t        return this.mul(multiplier.neg()).neg();\r\n\r\n\t\t    // If both longs are small, use float multiplication\r\n\t\t    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n\t\t        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n\t\t    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n\t\t    // We can skip products that would overflow.\r\n\r\n\t\t    var a48 = this.high >>> 16;\r\n\t\t    var a32 = this.high & 0xFFFF;\r\n\t\t    var a16 = this.low >>> 16;\r\n\t\t    var a00 = this.low & 0xFFFF;\r\n\r\n\t\t    var b48 = multiplier.high >>> 16;\r\n\t\t    var b32 = multiplier.high & 0xFFFF;\r\n\t\t    var b16 = multiplier.low >>> 16;\r\n\t\t    var b00 = multiplier.low & 0xFFFF;\r\n\r\n\t\t    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n\t\t    c00 += a00 * b00;\r\n\t\t    c16 += c00 >>> 16;\r\n\t\t    c00 &= 0xFFFF;\r\n\t\t    c16 += a16 * b00;\r\n\t\t    c32 += c16 >>> 16;\r\n\t\t    c16 &= 0xFFFF;\r\n\t\t    c16 += a00 * b16;\r\n\t\t    c32 += c16 >>> 16;\r\n\t\t    c16 &= 0xFFFF;\r\n\t\t    c32 += a32 * b00;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c32 += a16 * b16;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c32 += a00 * b32;\r\n\t\t    c48 += c32 >>> 16;\r\n\t\t    c32 &= 0xFFFF;\r\n\t\t    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n\t\t    c48 &= 0xFFFF;\r\n\t\t    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} multiplier Multiplier\r\n\t\t * @returns {!Long} Product\r\n\t\t */\r\n\t\tLongPrototype.mul = LongPrototype.multiply;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n\t\t *  unsigned if this Long is unsigned.\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Quotient\r\n\t\t */\r\n\t\tLongPrototype.divide = function divide(divisor) {\r\n\t\t    if (!isLong(divisor))\r\n\t\t        divisor = fromValue(divisor);\r\n\t\t    if (divisor.isZero())\r\n\t\t        throw Error('division by zero');\r\n\r\n\t\t    // use wasm support if present\r\n\t\t    if (wasm) {\r\n\t\t        // guard against signed division overflow: the largest\r\n\t\t        // negative number / -1 would be 1 larger than the largest\r\n\t\t        // positive number, due to two's complement.\r\n\t\t        if (!this.unsigned &&\r\n\t\t            this.high === -0x80000000 &&\r\n\t\t            divisor.low === -1 && divisor.high === -1) {\r\n\t\t            // be consistent with non-wasm code path\r\n\t\t            return this;\r\n\t\t        }\r\n\t\t        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n\t\t            this.low,\r\n\t\t            this.high,\r\n\t\t            divisor.low,\r\n\t\t            divisor.high\r\n\t\t        );\r\n\t\t        return fromBits(low, wasm.get_high(), this.unsigned);\r\n\t\t    }\r\n\r\n\t\t    if (this.isZero())\r\n\t\t        return this.unsigned ? UZERO : ZERO;\r\n\t\t    var approx, rem, res;\r\n\t\t    if (!this.unsigned) {\r\n\t\t        // This section is only relevant for signed longs and is derived from the\r\n\t\t        // closure library as a whole.\r\n\t\t        if (this.eq(MIN_VALUE)) {\r\n\t\t            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n\t\t                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n\t\t            else if (divisor.eq(MIN_VALUE))\r\n\t\t                return ONE;\r\n\t\t            else {\r\n\t\t                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n\t\t                var halfThis = this.shr(1);\r\n\t\t                approx = halfThis.div(divisor).shl(1);\r\n\t\t                if (approx.eq(ZERO)) {\r\n\t\t                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n\t\t                } else {\r\n\t\t                    rem = this.sub(divisor.mul(approx));\r\n\t\t                    res = approx.add(rem.div(divisor));\r\n\t\t                    return res;\r\n\t\t                }\r\n\t\t            }\r\n\t\t        } else if (divisor.eq(MIN_VALUE))\r\n\t\t            return this.unsigned ? UZERO : ZERO;\r\n\t\t        if (this.isNegative()) {\r\n\t\t            if (divisor.isNegative())\r\n\t\t                return this.neg().div(divisor.neg());\r\n\t\t            return this.neg().div(divisor).neg();\r\n\t\t        } else if (divisor.isNegative())\r\n\t\t            return this.div(divisor.neg()).neg();\r\n\t\t        res = ZERO;\r\n\t\t    } else {\r\n\t\t        // The algorithm below has not been made for unsigned longs. It's therefore\r\n\t\t        // required to take special care of the MSB prior to running it.\r\n\t\t        if (!divisor.unsigned)\r\n\t\t            divisor = divisor.toUnsigned();\r\n\t\t        if (divisor.gt(this))\r\n\t\t            return UZERO;\r\n\t\t        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n\t\t            return UONE;\r\n\t\t        res = UZERO;\r\n\t\t    }\r\n\r\n\t\t    // Repeat the following until the remainder is less than other:  find a\r\n\t\t    // floating-point that approximates remainder / other *from below*, add this\r\n\t\t    // into the result, and subtract it from the remainder.  It is critical that\r\n\t\t    // the approximate value is less than or equal to the real value so that the\r\n\t\t    // remainder never becomes negative.\r\n\t\t    rem = this;\r\n\t\t    while (rem.gte(divisor)) {\r\n\t\t        // Approximate the result of division. This may be a little greater or\r\n\t\t        // smaller than the actual value.\r\n\t\t        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n\t\t        // We will tweak the approximate result by changing it in the 48-th digit or\r\n\t\t        // the smallest non-fractional digit, whichever is larger.\r\n\t\t        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n\t\t            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n\t\t        // Decrease the approximation until it is smaller than the remainder.  Note\r\n\t\t        // that if it is too large, the product overflows and is negative.\r\n\t\t            approxRes = fromNumber(approx),\r\n\t\t            approxRem = approxRes.mul(divisor);\r\n\t\t        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n\t\t            approx -= delta;\r\n\t\t            approxRes = fromNumber(approx, this.unsigned);\r\n\t\t            approxRem = approxRes.mul(divisor);\r\n\t\t        }\r\n\r\n\t\t        // We know the answer can't be zero... and actually, zero would cause\r\n\t\t        // infinite recursion since we would make no progress.\r\n\t\t        if (approxRes.isZero())\r\n\t\t            approxRes = ONE;\r\n\r\n\t\t        res = res.add(approxRes);\r\n\t\t        rem = rem.sub(approxRem);\r\n\t\t    }\r\n\t\t    return res;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Quotient\r\n\t\t */\r\n\t\tLongPrototype.div = LongPrototype.divide;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long modulo the specified.\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Remainder\r\n\t\t */\r\n\t\tLongPrototype.modulo = function modulo(divisor) {\r\n\t\t    if (!isLong(divisor))\r\n\t\t        divisor = fromValue(divisor);\r\n\r\n\t\t    // use wasm support if present\r\n\t\t    if (wasm) {\r\n\t\t        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n\t\t            this.low,\r\n\t\t            this.high,\r\n\t\t            divisor.low,\r\n\t\t            divisor.high\r\n\t\t        );\r\n\t\t        return fromBits(low, wasm.get_high(), this.unsigned);\r\n\t\t    }\r\n\r\n\t\t    return this.sub(this.div(divisor).mul(divisor));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Remainder\r\n\t\t */\r\n\t\tLongPrototype.mod = LongPrototype.modulo;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n\t\t * @function\r\n\t\t * @param {!Long|number|string} divisor Divisor\r\n\t\t * @returns {!Long} Remainder\r\n\t\t */\r\n\t\tLongPrototype.rem = LongPrototype.modulo;\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise NOT of this Long.\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.not = function not() {\r\n\t\t    return fromBits(~this.low, ~this.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise AND of this Long and the specified.\r\n\t\t * @param {!Long|number|string} other Other Long\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.and = function and(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise OR of this Long and the specified.\r\n\t\t * @param {!Long|number|string} other Other Long\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.or = function or(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the bitwise XOR of this Long and the given one.\r\n\t\t * @param {!Long|number|string} other Other Long\r\n\t\t * @returns {!Long}\r\n\t\t */\r\n\t\tLongPrototype.xor = function xor(other) {\r\n\t\t    if (!isLong(other))\r\n\t\t        other = fromValue(other);\r\n\t\t    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits shifted to the left by the given amount.\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n\t\t    if (isLong(numBits))\r\n\t\t        numBits = numBits.toInt();\r\n\t\t    if ((numBits &= 63) === 0)\r\n\t\t        return this;\r\n\t\t    else if (numBits < 32)\r\n\t\t        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n\t\t    else\r\n\t\t        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shiftRight = function shiftRight(numBits) {\r\n\t\t    if (isLong(numBits))\r\n\t\t        numBits = numBits.toInt();\r\n\t\t    if ((numBits &= 63) === 0)\r\n\t\t        return this;\r\n\t\t    else if (numBits < 32)\r\n\t\t        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n\t\t    else\r\n\t\t        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits logically shifted to the right by the given amount.\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n\t\t    if (isLong(numBits))\r\n\t\t        numBits = numBits.toInt();\r\n\t\t    numBits &= 63;\r\n\t\t    if (numBits === 0)\r\n\t\t        return this;\r\n\t\t    else {\r\n\t\t        var high = this.high;\r\n\t\t        if (numBits < 32) {\r\n\t\t            var low = this.low;\r\n\t\t            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n\t\t        } else if (numBits === 32)\r\n\t\t            return fromBits(high, 0, this.unsigned);\r\n\t\t        else\r\n\t\t            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n\t\t    }\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n\t\t/**\r\n\t\t * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n\t\t * @function\r\n\t\t * @param {number|!Long} numBits Number of bits\r\n\t\t * @returns {!Long} Shifted Long\r\n\t\t */\r\n\t\tLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to signed.\r\n\t\t * @returns {!Long} Signed long\r\n\t\t */\r\n\t\tLongPrototype.toSigned = function toSigned() {\r\n\t\t    if (!this.unsigned)\r\n\t\t        return this;\r\n\t\t    return fromBits(this.low, this.high, false);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to unsigned.\r\n\t\t * @returns {!Long} Unsigned long\r\n\t\t */\r\n\t\tLongPrototype.toUnsigned = function toUnsigned() {\r\n\t\t    if (this.unsigned)\r\n\t\t        return this;\r\n\t\t    return fromBits(this.low, this.high, true);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to its byte representation.\r\n\t\t * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n\t\t * @returns {!Array.<number>} Byte representation\r\n\t\t */\r\n\t\tLongPrototype.toBytes = function toBytes(le) {\r\n\t\t    return le ? this.toBytesLE() : this.toBytesBE();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to its little endian byte representation.\r\n\t\t * @returns {!Array.<number>} Little endian byte representation\r\n\t\t */\r\n\t\tLongPrototype.toBytesLE = function toBytesLE() {\r\n\t\t    var hi = this.high,\r\n\t\t        lo = this.low;\r\n\t\t    return [\r\n\t\t        lo        & 0xff,\r\n\t\t        lo >>>  8 & 0xff,\r\n\t\t        lo >>> 16 & 0xff,\r\n\t\t        lo >>> 24       ,\r\n\t\t        hi        & 0xff,\r\n\t\t        hi >>>  8 & 0xff,\r\n\t\t        hi >>> 16 & 0xff,\r\n\t\t        hi >>> 24\r\n\t\t    ];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Converts this Long to its big endian byte representation.\r\n\t\t * @returns {!Array.<number>} Big endian byte representation\r\n\t\t */\r\n\t\tLongPrototype.toBytesBE = function toBytesBE() {\r\n\t\t    var hi = this.high,\r\n\t\t        lo = this.low;\r\n\t\t    return [\r\n\t\t        hi >>> 24       ,\r\n\t\t        hi >>> 16 & 0xff,\r\n\t\t        hi >>>  8 & 0xff,\r\n\t\t        hi        & 0xff,\r\n\t\t        lo >>> 24       ,\r\n\t\t        lo >>> 16 & 0xff,\r\n\t\t        lo >>>  8 & 0xff,\r\n\t\t        lo        & 0xff\r\n\t\t    ];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Creates a Long from its byte representation.\r\n\t\t * @param {!Array.<number>} bytes Byte representation\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n\t\t * @returns {Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n\t\t    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Creates a Long from its little endian byte representation.\r\n\t\t * @param {!Array.<number>} bytes Little endian byte representation\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n\t\t    return new Long(\r\n\t\t        bytes[0]       |\r\n\t\t        bytes[1] <<  8 |\r\n\t\t        bytes[2] << 16 |\r\n\t\t        bytes[3] << 24,\r\n\t\t        bytes[4]       |\r\n\t\t        bytes[5] <<  8 |\r\n\t\t        bytes[6] << 16 |\r\n\t\t        bytes[7] << 24,\r\n\t\t        unsigned\r\n\t\t    );\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Creates a Long from its big endian byte representation.\r\n\t\t * @param {!Array.<number>} bytes Big endian byte representation\r\n\t\t * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n\t\t * @returns {Long} The corresponding Long value\r\n\t\t */\r\n\t\tLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n\t\t    return new Long(\r\n\t\t        bytes[4] << 24 |\r\n\t\t        bytes[5] << 16 |\r\n\t\t        bytes[6] <<  8 |\r\n\t\t        bytes[7],\r\n\t\t        bytes[0] << 24 |\r\n\t\t        bytes[1] << 16 |\r\n\t\t        bytes[2] <<  8 |\r\n\t\t        bytes[3],\r\n\t\t        unsigned\r\n\t\t    );\r\n\t\t};\n\t\treturn long;\n\t}\n\n\tvar longExports = requireLong();\n\n\t/* eslint-disable */\n\tfunction createBaseColor3() {\n\t    return { r: 0, g: 0, b: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst Color3 = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.r !== 0) {\n\t            writer.uint32(13).float(message.r);\n\t        }\n\t        if (message.g !== 0) {\n\t            writer.uint32(21).float(message.g);\n\t        }\n\t        if (message.b !== 0) {\n\t            writer.uint32(29).float(message.b);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBaseColor3();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.r = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.g = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.b = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBAvatarShape() {\n\t    return {\n\t        id: '',\n\t        name: undefined,\n\t        bodyShape: undefined,\n\t        skinColor: undefined,\n\t        hairColor: undefined,\n\t        eyeColor: undefined,\n\t        wearables: [],\n\t        expressionTriggerId: undefined,\n\t        expressionTriggerTimestamp: undefined,\n\t        stickerTriggerId: undefined,\n\t        stickerTriggerTimestamp: undefined,\n\t        talking: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBAvatarShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.id !== '') {\n\t            writer.uint32(10).string(message.id);\n\t        }\n\t        if (message.name !== undefined) {\n\t            writer.uint32(18).string(message.name);\n\t        }\n\t        if (message.bodyShape !== undefined) {\n\t            writer.uint32(26).string(message.bodyShape);\n\t        }\n\t        if (message.skinColor !== undefined) {\n\t            Color3.encode(message.skinColor, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.hairColor !== undefined) {\n\t            Color3.encode(message.hairColor, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.eyeColor !== undefined) {\n\t            Color3.encode(message.eyeColor, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        for (const v of message.wearables) {\n\t            writer.uint32(58).string(v);\n\t        }\n\t        if (message.expressionTriggerId !== undefined) {\n\t            writer.uint32(66).string(message.expressionTriggerId);\n\t        }\n\t        if (message.expressionTriggerTimestamp !== undefined) {\n\t            writer.uint32(72).int64(message.expressionTriggerTimestamp);\n\t        }\n\t        if (message.stickerTriggerId !== undefined) {\n\t            writer.uint32(82).string(message.stickerTriggerId);\n\t        }\n\t        if (message.stickerTriggerTimestamp !== undefined) {\n\t            writer.uint32(88).int64(message.stickerTriggerTimestamp);\n\t        }\n\t        if (message.talking !== undefined) {\n\t            writer.uint32(96).bool(message.talking);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBAvatarShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.id = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.name = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.bodyShape = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.skinColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.hairColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.eyeColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.wearables.push(reader.string());\n\t                    break;\n\t                case 8:\n\t                    message.expressionTriggerId = reader.string();\n\t                    break;\n\t                case 9:\n\t                    message.expressionTriggerTimestamp = longToNumber(reader.int64());\n\t                    break;\n\t                case 10:\n\t                    message.stickerTriggerId = reader.string();\n\t                    break;\n\t                case 11:\n\t                    message.stickerTriggerTimestamp = longToNumber(reader.int64());\n\t                    break;\n\t                case 12:\n\t                    message.talking = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tvar globalThis$1 = (() => {\n\t    if (typeof globalThis$1 !== 'undefined')\n\t        return globalThis$1;\n\t    if (typeof self !== 'undefined')\n\t        return self;\n\t    if (typeof window !== 'undefined')\n\t        return window;\n\t    if (typeof global !== 'undefined')\n\t        return global;\n\t    throw 'Unable to locate global object';\n\t})();\n\tfunction longToNumber(long) {\n\t    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n\t        throw new globalThis$1.Error('Value is larger than Number.MAX_SAFE_INTEGER');\n\t    }\n\t    return long.toNumber();\n\t}\n\tif (minimalExports.util.Long !== longExports) {\n\t    minimalExports.util.Long = longExports;\n\t    minimalExports.configure();\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$l = 1080;\n\t/**\n\t * @internal\n\t */\n\tconst AvatarShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBAvatarShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBAvatarShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBAvatarShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBBillboard() {\n\t    return { x: undefined, y: undefined, z: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBBillboard = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.x !== undefined) {\n\t            writer.uint32(8).bool(message.x);\n\t        }\n\t        if (message.y !== undefined) {\n\t            writer.uint32(16).bool(message.y);\n\t        }\n\t        if (message.z !== undefined) {\n\t            writer.uint32(24).bool(message.z);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBBillboard();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.x = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.y = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.z = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$k = 1090;\n\t/**\n\t * @internal\n\t */\n\tconst BillboardSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBBillboard.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBBillboard.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBBillboard.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBBoxShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBBoxShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        writer.uint32(34).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBBoxShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$j = 1013;\n\t/**\n\t * @internal\n\t */\n\tconst BoxShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBBoxShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBBoxShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBBoxShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBCameraMode() {\n\t    return { mode: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCameraMode = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.mode !== 0) {\n\t            writer.uint32(8).int32(message.mode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCameraMode();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.mode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$i = 1072;\n\t/**\n\t * @internal\n\t */\n\tconst CameraModeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCameraMode.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCameraMode.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCameraMode.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBCameraModeArea() {\n\t    return { area: undefined, mode: 0 };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCameraModeArea = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.area !== undefined) {\n\t            Vector3.encode(message.area, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.mode !== 0) {\n\t            writer.uint32(16).int32(message.mode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCameraModeArea();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.area = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.mode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$h = 1071;\n\t/**\n\t * @internal\n\t */\n\tconst CameraModeAreaSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCameraModeArea.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCameraModeArea.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCameraModeArea.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBCylinderShape() {\n\t    return {\n\t        withCollisions: undefined,\n\t        isPointerBlocker: undefined,\n\t        visible: undefined,\n\t        radiusTop: undefined,\n\t        radiusBottom: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBCylinderShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.radiusTop !== undefined) {\n\t            writer.uint32(37).float(message.radiusTop);\n\t        }\n\t        if (message.radiusBottom !== undefined) {\n\t            writer.uint32(45).float(message.radiusBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBCylinderShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.radiusTop = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.radiusBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$g = 1016;\n\t/**\n\t * @internal\n\t */\n\tconst CylinderShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBCylinderShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBCylinderShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBCylinderShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBGLTFShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, src: '' };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBGLTFShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.src !== '') {\n\t            writer.uint32(34).string(message.src);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBGLTFShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.src = reader.string();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$f = 1041;\n\t/**\n\t * @internal\n\t */\n\tconst GLTFShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBGLTFShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBGLTFShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBGLTFShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tvar TextureWrapMode;\n\t(function (TextureWrapMode) {\n\t    TextureWrapMode[TextureWrapMode[\"Repeat\"] = 0] = \"Repeat\";\n\t    TextureWrapMode[TextureWrapMode[\"Clamp\"] = 1] = \"Clamp\";\n\t    TextureWrapMode[TextureWrapMode[\"Mirror\"] = 2] = \"Mirror\";\n\t    TextureWrapMode[TextureWrapMode[\"MirrorOnce\"] = 3] = \"MirrorOnce\";\n\t    TextureWrapMode[TextureWrapMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(TextureWrapMode || (TextureWrapMode = {}));\n\tvar FilterMode;\n\t(function (FilterMode) {\n\t    FilterMode[FilterMode[\"Point\"] = 0] = \"Point\";\n\t    FilterMode[FilterMode[\"Bilinear\"] = 1] = \"Bilinear\";\n\t    FilterMode[FilterMode[\"Trilinear\"] = 2] = \"Trilinear\";\n\t    FilterMode[FilterMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(FilterMode || (FilterMode = {}));\n\tvar TransparencyMode;\n\t(function (TransparencyMode) {\n\t    TransparencyMode[TransparencyMode[\"Opaque\"] = 0] = \"Opaque\";\n\t    TransparencyMode[TransparencyMode[\"AlphaTest\"] = 1] = \"AlphaTest\";\n\t    TransparencyMode[TransparencyMode[\"AlphaBlend\"] = 2] = \"AlphaBlend\";\n\t    TransparencyMode[TransparencyMode[\"AlphaTestAndAlphaBlend\"] = 3] = \"AlphaTestAndAlphaBlend\";\n\t    TransparencyMode[TransparencyMode[\"Auto\"] = 4] = \"Auto\";\n\t    TransparencyMode[TransparencyMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n\t})(TransparencyMode || (TransparencyMode = {}));\n\tfunction createBasePBMaterial() {\n\t    return {\n\t        texture: undefined,\n\t        alphaTest: undefined,\n\t        castShadows: undefined,\n\t        alphaTexture: undefined,\n\t        emissiveTexture: undefined,\n\t        bumpTexture: undefined,\n\t        albedoColor: undefined,\n\t        emissiveColor: undefined,\n\t        reflectivityColor: undefined,\n\t        transparencyMode: undefined,\n\t        metallic: undefined,\n\t        roughness: undefined,\n\t        glossiness: undefined,\n\t        specularIntensity: undefined,\n\t        emissiveIntensity: undefined,\n\t        directIntensity: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMaterial = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.texture !== undefined) {\n\t            PBMaterial_Texture.encode(message.texture, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.alphaTest !== undefined) {\n\t            writer.uint32(21).float(message.alphaTest);\n\t        }\n\t        if (message.castShadows !== undefined) {\n\t            writer.uint32(24).bool(message.castShadows);\n\t        }\n\t        if (message.alphaTexture !== undefined) {\n\t            PBMaterial_Texture.encode(message.alphaTexture, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.emissiveTexture !== undefined) {\n\t            PBMaterial_Texture.encode(message.emissiveTexture, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.bumpTexture !== undefined) {\n\t            PBMaterial_Texture.encode(message.bumpTexture, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.albedoColor !== undefined) {\n\t            Color3.encode(message.albedoColor, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.emissiveColor !== undefined) {\n\t            Color3.encode(message.emissiveColor, writer.uint32(66).fork()).ldelim();\n\t        }\n\t        if (message.reflectivityColor !== undefined) {\n\t            Color3.encode(message.reflectivityColor, writer.uint32(74).fork()).ldelim();\n\t        }\n\t        if (message.transparencyMode !== undefined) {\n\t            writer.uint32(80).int32(message.transparencyMode);\n\t        }\n\t        if (message.metallic !== undefined) {\n\t            writer.uint32(93).float(message.metallic);\n\t        }\n\t        if (message.roughness !== undefined) {\n\t            writer.uint32(101).float(message.roughness);\n\t        }\n\t        if (message.glossiness !== undefined) {\n\t            writer.uint32(109).float(message.glossiness);\n\t        }\n\t        if (message.specularIntensity !== undefined) {\n\t            writer.uint32(117).float(message.specularIntensity);\n\t        }\n\t        if (message.emissiveIntensity !== undefined) {\n\t            writer.uint32(125).float(message.emissiveIntensity);\n\t        }\n\t        if (message.directIntensity !== undefined) {\n\t            writer.uint32(133).float(message.directIntensity);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMaterial();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.texture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.alphaTest = reader.float();\n\t                    break;\n\t                case 3:\n\t                    message.castShadows = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.alphaTexture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.emissiveTexture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.bumpTexture = PBMaterial_Texture.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.albedoColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.emissiveColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 9:\n\t                    message.reflectivityColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 10:\n\t                    message.transparencyMode = reader.int32();\n\t                    break;\n\t                case 11:\n\t                    message.metallic = reader.float();\n\t                    break;\n\t                case 12:\n\t                    message.roughness = reader.float();\n\t                    break;\n\t                case 13:\n\t                    message.glossiness = reader.float();\n\t                    break;\n\t                case 14:\n\t                    message.specularIntensity = reader.float();\n\t                    break;\n\t                case 15:\n\t                    message.emissiveIntensity = reader.float();\n\t                    break;\n\t                case 16:\n\t                    message.directIntensity = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMaterial_Texture() {\n\t    return { src: '', wrapMode: undefined, filterMode: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMaterial_Texture = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.src !== '') {\n\t            writer.uint32(10).string(message.src);\n\t        }\n\t        if (message.wrapMode !== undefined) {\n\t            writer.uint32(16).int32(message.wrapMode);\n\t        }\n\t        if (message.filterMode !== undefined) {\n\t            writer.uint32(24).int32(message.filterMode);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMaterial_Texture();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.src = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.wrapMode = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.filterMode = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$e = 1017;\n\t/**\n\t * @internal\n\t */\n\tconst MaterialSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBMaterial.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBMaterial.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBMaterial.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBMeshRenderer() {\n\t    return { box: undefined, sphere: undefined, cylinder: undefined, plane: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.box !== undefined) {\n\t            PBMeshRenderer_BoxMesh.encode(message.box, writer.uint32(10).fork()).ldelim();\n\t        }\n\t        if (message.sphere !== undefined) {\n\t            PBMeshRenderer_SphereMesh.encode(message.sphere, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        if (message.cylinder !== undefined) {\n\t            PBMeshRenderer_CylinderMesh.encode(message.cylinder, writer.uint32(26).fork()).ldelim();\n\t        }\n\t        if (message.plane !== undefined) {\n\t            PBMeshRenderer_PlaneMesh.encode(message.plane, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.box = PBMeshRenderer_BoxMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 2:\n\t                    message.sphere = PBMeshRenderer_SphereMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 3:\n\t                    message.cylinder = PBMeshRenderer_CylinderMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                case 4:\n\t                    message.plane = PBMeshRenderer_PlaneMesh.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_BoxMesh() {\n\t    return { uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_BoxMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        writer.uint32(10).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_BoxMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_CylinderMesh() {\n\t    return { radiusTop: undefined, radiusBottom: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_CylinderMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.radiusTop !== undefined) {\n\t            writer.uint32(13).float(message.radiusTop);\n\t        }\n\t        if (message.radiusBottom !== undefined) {\n\t            writer.uint32(21).float(message.radiusBottom);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_CylinderMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.radiusTop = reader.float();\n\t                    break;\n\t                case 2:\n\t                    message.radiusBottom = reader.float();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_PlaneMesh() {\n\t    return { uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_PlaneMesh = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        writer.uint32(10).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_PlaneMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\tfunction createBasePBMeshRenderer_SphereMesh() {\n\t    return {};\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBMeshRenderer_SphereMesh = {\n\t    encode(_, writer = minimalExports.Writer.create()) {\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBMeshRenderer_SphereMesh();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$d = 1018;\n\t/**\n\t * @internal\n\t */\n\tconst MeshRendererSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBMeshRenderer.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBMeshRenderer.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBMeshRenderer.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBNFTShape() {\n\t    return {\n\t        withCollisions: undefined,\n\t        isPointerBlocker: undefined,\n\t        visible: undefined,\n\t        src: '',\n\t        assetId: undefined,\n\t        style: undefined,\n\t        color: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBNFTShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        if (message.src !== '') {\n\t            writer.uint32(34).string(message.src);\n\t        }\n\t        if (message.assetId !== undefined) {\n\t            writer.uint32(42).string(message.assetId);\n\t        }\n\t        if (message.style !== undefined) {\n\t            writer.uint32(48).int32(message.style);\n\t        }\n\t        if (message.color !== undefined) {\n\t            Color3.encode(message.color, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBNFTShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    message.src = reader.string();\n\t                    break;\n\t                case 5:\n\t                    message.assetId = reader.string();\n\t                    break;\n\t                case 6:\n\t                    message.style = reader.int32();\n\t                    break;\n\t                case 7:\n\t                    message.color = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$c = 1040;\n\t/**\n\t * @internal\n\t */\n\tconst NFTShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBNFTShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBNFTShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBNFTShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerDown() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerDown = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerDown();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$b = 1060;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerDownSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerDown.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerDown.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerDown.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerDownResult() {\n\t    return {\n\t        button: 0,\n\t        meshName: '',\n\t        origin: undefined,\n\t        direction: undefined,\n\t        point: undefined,\n\t        normal: undefined,\n\t        distance: 0,\n\t        timestamp: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerDownResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(16).int32(message.button);\n\t        }\n\t        if (message.meshName !== '') {\n\t            writer.uint32(26).string(message.meshName);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.point !== undefined) {\n\t            Vector3.encode(message.point, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.normal !== undefined) {\n\t            Vector3.encode(message.normal, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.distance !== 0) {\n\t            writer.uint32(69).float(message.distance);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(72).int32(message.timestamp);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerDownResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 2:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.point = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.normal = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.distance = reader.float();\n\t                    break;\n\t                case 9:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$a = 1066;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerDownResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerDownResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerDownResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerDownResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerUp() {\n\t    return { button: undefined, hoverText: undefined, maxDistance: undefined, showFeedback: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerUp = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== undefined) {\n\t            writer.uint32(8).int32(message.button);\n\t        }\n\t        if (message.hoverText !== undefined) {\n\t            writer.uint32(18).string(message.hoverText);\n\t        }\n\t        if (message.maxDistance !== undefined) {\n\t            writer.uint32(29).float(message.maxDistance);\n\t        }\n\t        if (message.showFeedback !== undefined) {\n\t            writer.uint32(32).bool(message.showFeedback);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerUp();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 2:\n\t                    message.hoverText = reader.string();\n\t                    break;\n\t                case 3:\n\t                    message.maxDistance = reader.float();\n\t                    break;\n\t                case 4:\n\t                    message.showFeedback = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$9 = 1061;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerUpSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerUp.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerUp.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerUp.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction createBasePBOnPointerUpResult() {\n\t    return {\n\t        button: 0,\n\t        meshName: '',\n\t        origin: undefined,\n\t        direction: undefined,\n\t        point: undefined,\n\t        normal: undefined,\n\t        distance: 0,\n\t        timestamp: 0\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBOnPointerUpResult = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.button !== 0) {\n\t            writer.uint32(16).int32(message.button);\n\t        }\n\t        if (message.meshName !== '') {\n\t            writer.uint32(26).string(message.meshName);\n\t        }\n\t        if (message.origin !== undefined) {\n\t            Vector3.encode(message.origin, writer.uint32(34).fork()).ldelim();\n\t        }\n\t        if (message.direction !== undefined) {\n\t            Vector3.encode(message.direction, writer.uint32(42).fork()).ldelim();\n\t        }\n\t        if (message.point !== undefined) {\n\t            Vector3.encode(message.point, writer.uint32(50).fork()).ldelim();\n\t        }\n\t        if (message.normal !== undefined) {\n\t            Vector3.encode(message.normal, writer.uint32(58).fork()).ldelim();\n\t        }\n\t        if (message.distance !== 0) {\n\t            writer.uint32(69).float(message.distance);\n\t        }\n\t        if (message.timestamp !== 0) {\n\t            writer.uint32(72).int32(message.timestamp);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBOnPointerUpResult();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 2:\n\t                    message.button = reader.int32();\n\t                    break;\n\t                case 3:\n\t                    message.meshName = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.origin = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 5:\n\t                    message.direction = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 6:\n\t                    message.point = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 7:\n\t                    message.normal = Vector3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 8:\n\t                    message.distance = reader.float();\n\t                    break;\n\t                case 9:\n\t                    message.timestamp = reader.int32();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$8 = 1065;\n\t/**\n\t * @internal\n\t */\n\tconst OnPointerUpResultSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBOnPointerUpResult.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBOnPointerUpResult.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBOnPointerUpResult.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBPlaneShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined, uvs: [] };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPlaneShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        writer.uint32(34).fork();\n\t        for (const v of message.uvs) {\n\t            writer.float(v);\n\t        }\n\t        writer.ldelim();\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPlaneShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 4:\n\t                    if ((tag & 7) === 2) {\n\t                        const end2 = reader.uint32() + reader.pos;\n\t                        while (reader.pos < end2) {\n\t                            message.uvs.push(reader.float());\n\t                        }\n\t                    }\n\t                    else {\n\t                        message.uvs.push(reader.float());\n\t                    }\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$7 = 1014;\n\t/**\n\t * @internal\n\t */\n\tconst PlaneShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPlaneShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPlaneShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPlaneShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBPointerLock() {\n\t    return { isPointerLocked: false };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBPointerLock = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.isPointerLocked === true) {\n\t            writer.uint32(8).bool(message.isPointerLocked);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBPointerLock();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.isPointerLocked = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$6 = 1074;\n\t/**\n\t * @internal\n\t */\n\tconst PointerLockSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBPointerLock.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBPointerLock.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBPointerLock.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBSphereShape() {\n\t    return { withCollisions: undefined, isPointerBlocker: undefined, visible: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBSphereShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.withCollisions !== undefined) {\n\t            writer.uint32(8).bool(message.withCollisions);\n\t        }\n\t        if (message.isPointerBlocker !== undefined) {\n\t            writer.uint32(16).bool(message.isPointerBlocker);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(24).bool(message.visible);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBSphereShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.withCollisions = reader.bool();\n\t                    break;\n\t                case 2:\n\t                    message.isPointerBlocker = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$5 = 1015;\n\t/**\n\t * @internal\n\t */\n\tconst SphereShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBSphereShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBSphereShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBSphereShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBTextShape() {\n\t    return {\n\t        text: '',\n\t        visible: undefined,\n\t        font: undefined,\n\t        opacity: undefined,\n\t        fontSize: undefined,\n\t        fontAutoSize: undefined,\n\t        hTextAlign: undefined,\n\t        vTextAlign: undefined,\n\t        width: undefined,\n\t        height: undefined,\n\t        paddingTop: undefined,\n\t        paddingRight: undefined,\n\t        paddingBottom: undefined,\n\t        paddingLeft: undefined,\n\t        lineSpacing: undefined,\n\t        lineCount: undefined,\n\t        textWrapping: undefined,\n\t        shadowBlur: undefined,\n\t        shadowOffsetX: undefined,\n\t        shadowOffsetY: undefined,\n\t        outlineWidth: undefined,\n\t        shadowColor: undefined,\n\t        outlineColor: undefined,\n\t        textColor: undefined\n\t    };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBTextShape = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.text !== '') {\n\t            writer.uint32(10).string(message.text);\n\t        }\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(16).bool(message.visible);\n\t        }\n\t        if (message.font !== undefined) {\n\t            writer.uint32(26).string(message.font);\n\t        }\n\t        if (message.opacity !== undefined) {\n\t            writer.uint32(37).float(message.opacity);\n\t        }\n\t        if (message.fontSize !== undefined) {\n\t            writer.uint32(45).float(message.fontSize);\n\t        }\n\t        if (message.fontAutoSize !== undefined) {\n\t            writer.uint32(48).bool(message.fontAutoSize);\n\t        }\n\t        if (message.hTextAlign !== undefined) {\n\t            writer.uint32(58).string(message.hTextAlign);\n\t        }\n\t        if (message.vTextAlign !== undefined) {\n\t            writer.uint32(66).string(message.vTextAlign);\n\t        }\n\t        if (message.width !== undefined) {\n\t            writer.uint32(77).float(message.width);\n\t        }\n\t        if (message.height !== undefined) {\n\t            writer.uint32(85).float(message.height);\n\t        }\n\t        if (message.paddingTop !== undefined) {\n\t            writer.uint32(93).float(message.paddingTop);\n\t        }\n\t        if (message.paddingRight !== undefined) {\n\t            writer.uint32(101).float(message.paddingRight);\n\t        }\n\t        if (message.paddingBottom !== undefined) {\n\t            writer.uint32(109).float(message.paddingBottom);\n\t        }\n\t        if (message.paddingLeft !== undefined) {\n\t            writer.uint32(117).float(message.paddingLeft);\n\t        }\n\t        if (message.lineSpacing !== undefined) {\n\t            writer.uint32(125).float(message.lineSpacing);\n\t        }\n\t        if (message.lineCount !== undefined) {\n\t            writer.uint32(128).int32(message.lineCount);\n\t        }\n\t        if (message.textWrapping !== undefined) {\n\t            writer.uint32(136).bool(message.textWrapping);\n\t        }\n\t        if (message.shadowBlur !== undefined) {\n\t            writer.uint32(149).float(message.shadowBlur);\n\t        }\n\t        if (message.shadowOffsetX !== undefined) {\n\t            writer.uint32(157).float(message.shadowOffsetX);\n\t        }\n\t        if (message.shadowOffsetY !== undefined) {\n\t            writer.uint32(165).float(message.shadowOffsetY);\n\t        }\n\t        if (message.outlineWidth !== undefined) {\n\t            writer.uint32(173).float(message.outlineWidth);\n\t        }\n\t        if (message.shadowColor !== undefined) {\n\t            Color3.encode(message.shadowColor, writer.uint32(178).fork()).ldelim();\n\t        }\n\t        if (message.outlineColor !== undefined) {\n\t            Color3.encode(message.outlineColor, writer.uint32(186).fork()).ldelim();\n\t        }\n\t        if (message.textColor !== undefined) {\n\t            Color3.encode(message.textColor, writer.uint32(194).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBTextShape();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.text = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                case 3:\n\t                    message.font = reader.string();\n\t                    break;\n\t                case 4:\n\t                    message.opacity = reader.float();\n\t                    break;\n\t                case 5:\n\t                    message.fontSize = reader.float();\n\t                    break;\n\t                case 6:\n\t                    message.fontAutoSize = reader.bool();\n\t                    break;\n\t                case 7:\n\t                    message.hTextAlign = reader.string();\n\t                    break;\n\t                case 8:\n\t                    message.vTextAlign = reader.string();\n\t                    break;\n\t                case 9:\n\t                    message.width = reader.float();\n\t                    break;\n\t                case 10:\n\t                    message.height = reader.float();\n\t                    break;\n\t                case 11:\n\t                    message.paddingTop = reader.float();\n\t                    break;\n\t                case 12:\n\t                    message.paddingRight = reader.float();\n\t                    break;\n\t                case 13:\n\t                    message.paddingBottom = reader.float();\n\t                    break;\n\t                case 14:\n\t                    message.paddingLeft = reader.float();\n\t                    break;\n\t                case 15:\n\t                    message.lineSpacing = reader.float();\n\t                    break;\n\t                case 16:\n\t                    message.lineCount = reader.int32();\n\t                    break;\n\t                case 17:\n\t                    message.textWrapping = reader.bool();\n\t                    break;\n\t                case 18:\n\t                    message.shadowBlur = reader.float();\n\t                    break;\n\t                case 19:\n\t                    message.shadowOffsetX = reader.float();\n\t                    break;\n\t                case 20:\n\t                    message.shadowOffsetY = reader.float();\n\t                    break;\n\t                case 21:\n\t                    message.outlineWidth = reader.float();\n\t                    break;\n\t                case 22:\n\t                    message.shadowColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 23:\n\t                    message.outlineColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                case 24:\n\t                    message.textColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$4 = 1030;\n\t/**\n\t * @internal\n\t */\n\tconst TextShapeSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBTextShape.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBTextShape.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBTextShape.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBUiText() {\n\t    return { text: '', textColor: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBUiText = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.text !== '') {\n\t            writer.uint32(10).string(message.text);\n\t        }\n\t        if (message.textColor !== undefined) {\n\t            Color3.encode(message.textColor, writer.uint32(18).fork()).ldelim();\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBUiText();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.text = reader.string();\n\t                    break;\n\t                case 2:\n\t                    message.textColor = Color3.decode(reader, reader.uint32());\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$3 = 1052;\n\t/**\n\t * @internal\n\t */\n\tconst UiTextSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBUiText.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBUiText.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBUiText.decode(new Uint8Array());\n\t    }\n\t};\n\n\t/* eslint-disable */\n\tfunction createBasePBVisibilityComponent() {\n\t    return { visible: undefined };\n\t}\n\t/**\n\t * @internal\n\t */\n\tconst PBVisibilityComponent = {\n\t    encode(message, writer = minimalExports.Writer.create()) {\n\t        if (message.visible !== undefined) {\n\t            writer.uint32(8).bool(message.visible);\n\t        }\n\t        return writer;\n\t    },\n\t    decode(input, length) {\n\t        const reader = input instanceof minimalExports.Reader ? input : new minimalExports.Reader(input);\n\t        let end = length === undefined ? reader.len : reader.pos + length;\n\t        const message = createBasePBVisibilityComponent();\n\t        while (reader.pos < end) {\n\t            const tag = reader.uint32();\n\t            switch (tag >>> 3) {\n\t                case 1:\n\t                    message.visible = reader.bool();\n\t                    break;\n\t                default:\n\t                    reader.skipType(tag & 7);\n\t                    break;\n\t            }\n\t        }\n\t        return message;\n\t    }\n\t};\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$2 = 1081;\n\t/**\n\t * @internal\n\t */\n\tconst VisibilityComponentSchema = {\n\t    serialize(value, builder) {\n\t        const writer = PBVisibilityComponent.encode(value);\n\t        const buffer = new Uint8Array(writer.finish(), 0, writer.len);\n\t        builder.writeBuffer(buffer, false);\n\t    },\n\t    deserialize(reader) {\n\t        return PBVisibilityComponent.decode(reader.buffer(), reader.remainingBytes());\n\t    },\n\t    create() {\n\t        // TODO: this is a hack.\n\t        return PBVisibilityComponent.decode(new Uint8Array());\n\t    }\n\t};\n\n\tfunction defineLibraryComponents({ defineComponentFromSchema }) {\n\t    return {\n\t        Animator: defineComponentFromSchema(AnimatorSchema, COMPONENT_ID$p),\n\t        AudioSource: defineComponentFromSchema(AudioSourceSchema, COMPONENT_ID$o),\n\t        AvatarAttach: defineComponentFromSchema(AvatarAttachSchema, COMPONENT_ID$n),\n\t        AvatarModifierArea: defineComponentFromSchema(AvatarModifierAreaSchema, COMPONENT_ID$m),\n\t        AvatarShape: defineComponentFromSchema(AvatarShapeSchema, COMPONENT_ID$l),\n\t        Billboard: defineComponentFromSchema(BillboardSchema, COMPONENT_ID$k),\n\t        BoxShape: defineComponentFromSchema(BoxShapeSchema, COMPONENT_ID$j),\n\t        CameraMode: defineComponentFromSchema(CameraModeSchema, COMPONENT_ID$i),\n\t        CameraModeArea: defineComponentFromSchema(CameraModeAreaSchema, COMPONENT_ID$h),\n\t        CylinderShape: defineComponentFromSchema(CylinderShapeSchema, COMPONENT_ID$g),\n\t        GLTFShape: defineComponentFromSchema(GLTFShapeSchema, COMPONENT_ID$f),\n\t        Material: defineComponentFromSchema(MaterialSchema, COMPONENT_ID$e),\n\t        MeshRenderer: defineComponentFromSchema(MeshRendererSchema, COMPONENT_ID$d),\n\t        NFTShape: defineComponentFromSchema(NFTShapeSchema, COMPONENT_ID$c),\n\t        OnPointerDown: defineComponentFromSchema(OnPointerDownSchema, COMPONENT_ID$b),\n\t        OnPointerDownResult: defineComponentFromSchema(OnPointerDownResultSchema, COMPONENT_ID$a),\n\t        OnPointerUp: defineComponentFromSchema(OnPointerUpSchema, COMPONENT_ID$9),\n\t        OnPointerUpResult: defineComponentFromSchema(OnPointerUpResultSchema, COMPONENT_ID$8),\n\t        PlaneShape: defineComponentFromSchema(PlaneShapeSchema, COMPONENT_ID$7),\n\t        PointerLock: defineComponentFromSchema(PointerLockSchema, COMPONENT_ID$6),\n\t        SphereShape: defineComponentFromSchema(SphereShapeSchema, COMPONENT_ID$5),\n\t        TextShape: defineComponentFromSchema(TextShapeSchema, COMPONENT_ID$4),\n\t        UiText: defineComponentFromSchema(UiTextSchema, COMPONENT_ID$3),\n\t        VisibilityComponent: defineComponentFromSchema(VisibilityComponentSchema, COMPONENT_ID$2),\n\t    };\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tconst COMPONENT_ID$1 = 1;\n\t/** @internal */\n\tconst TRANSFORM_LENGTH = 44;\n\t/** @internal */\n\tconst TransformSchema = {\n\t    serialize(value, builder) {\n\t        const ptr = builder.incrementWriteOffset(TRANSFORM_LENGTH);\n\t        builder.setFloat32(ptr, value.position.x);\n\t        builder.setFloat32(ptr + 4, value.position.y);\n\t        builder.setFloat32(ptr + 8, value.position.z);\n\t        builder.setFloat32(ptr + 12, value.rotation.x);\n\t        builder.setFloat32(ptr + 16, value.rotation.y);\n\t        builder.setFloat32(ptr + 20, value.rotation.z);\n\t        builder.setFloat32(ptr + 24, value.rotation.w);\n\t        builder.setFloat32(ptr + 28, value.scale.x);\n\t        builder.setFloat32(ptr + 32, value.scale.y);\n\t        builder.setFloat32(ptr + 36, value.scale.z);\n\t        builder.setUint32(ptr + 40, value.parent || 0);\n\t    },\n\t    deserialize(reader) {\n\t        const ptr = reader.incrementReadOffset(TRANSFORM_LENGTH);\n\t        return {\n\t            position: {\n\t                x: reader.getFloat32(ptr),\n\t                y: reader.getFloat32(ptr + 4),\n\t                z: reader.getFloat32(ptr + 8)\n\t            },\n\t            rotation: {\n\t                x: reader.getFloat32(ptr + 12),\n\t                y: reader.getFloat32(ptr + 16),\n\t                z: reader.getFloat32(ptr + 20),\n\t                w: reader.getFloat32(ptr + 24)\n\t            },\n\t            scale: {\n\t                x: reader.getFloat32(ptr + 28),\n\t                y: reader.getFloat32(ptr + 32),\n\t                z: reader.getFloat32(ptr + 36)\n\t            },\n\t            parent: reader.getUint32(ptr + 40)\n\t        };\n\t    },\n\t    create() {\n\t        return {\n\t            position: { x: 0, y: 0, z: 0 },\n\t            scale: { x: 1, y: 1, z: 1 },\n\t            rotation: { x: 0, y: 0, z: 0, w: 1 }\n\t        };\n\t    }\n\t};\n\tfunction defineTransformComponent({ defineComponentFromSchema }) {\n\t    return defineComponentFromSchema(TransformSchema, COMPONENT_ID$1);\n\t}\n\n\tvar COMPONENT_ID;\n\t(function (COMPONENT_ID) {\n\t    COMPONENT_ID[COMPONENT_ID[\"SYNC\"] = 1000] = \"SYNC\";\n\t})(COMPONENT_ID || (COMPONENT_ID = {}));\n\tfunction defineSdkComponents(engine) {\n\t    const autogeneratedComponents = defineLibraryComponents(engine);\n\t    engine.removeComponentDefinition(autogeneratedComponents.MeshRenderer._id);\n\t    return {\n\t        ...autogeneratedComponents,\n\t        Transform: defineTransformComponent(engine),\n\t        MeshRenderer: engine.defineComponentFromSchema(MeshRendererSchema, COMPONENT_ID$d)\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tfunction IArray(type) {\n\t    return {\n\t        serialize(value, builder) {\n\t            builder.writeUint32(value.length);\n\t            for (const item of value) {\n\t                type.serialize(item, builder);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const newArray = [];\n\t            const length = reader.readUint32();\n\t            for (let index = 0; index < length; index++) {\n\t                newArray.push(type.deserialize(reader));\n\t            }\n\t            return newArray;\n\t        },\n\t        create() {\n\t            return [];\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tconst Bool = {\n\t    serialize(value, builder) {\n\t        builder.writeInt8(value ? 1 : 0);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt8() === 1;\n\t    },\n\t    create() {\n\t        return false;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tfunction IEnum(type) {\n\t    return {\n\t        serialize(value, builder) {\n\t            type.serialize(value, builder);\n\t        },\n\t        deserialize(reader) {\n\t            return type.deserialize(reader);\n\t        },\n\t        create() {\n\t            return type.create();\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tconst Float32 = {\n\t    serialize(value, builder) {\n\t        builder.writeFloat32(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readFloat32();\n\t    },\n\t    create() {\n\t        return 0.0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Float64 = {\n\t    serialize(value, builder) {\n\t        builder.writeFloat64(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readFloat64();\n\t    },\n\t    create() {\n\t        return 0.0;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tconst Int64 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt64(BigInt(value));\n\t    },\n\t    deserialize(reader) {\n\t        return Number(reader.readInt64());\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int32 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt32(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt32();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int16 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt16(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt16();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst Int8 = {\n\t    serialize(value, builder) {\n\t        builder.writeInt8(value);\n\t    },\n\t    deserialize(reader) {\n\t        return reader.readInt8();\n\t    },\n\t    create() {\n\t        return 0;\n\t    }\n\t};\n\n\t/**\n\t * @public\n\t */\n\tconst FlatString = {\n\t    serialize(value, builder) {\n\t        builder.writeBuffer(new TextEncoder().encode(value));\n\t    },\n\t    deserialize(reader) {\n\t        return new TextDecoder().decode(reader.readBuffer());\n\t    },\n\t    create() {\n\t        return '';\n\t    }\n\t};\n\t/**\n\t * @public\n\t */\n\tconst EcsString = FlatString;\n\n\t/**\n\t * @public\n\t */\n\tfunction IMap(spec) {\n\t    return {\n\t        serialize(value, builder) {\n\t            for (const key in spec) {\n\t                // TODO: as any\n\t                spec[key].serialize(value[key], builder);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const newValue = {};\n\t            for (const key in spec) {\n\t                newValue[key] = spec[key].deserialize(reader);\n\t            }\n\t            return newValue;\n\t        },\n\t        create() {\n\t            const newValue = {};\n\t            for (const key in spec) {\n\t                newValue[key] = spec[key].create();\n\t            }\n\t            return newValue;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\tfunction IOptional(spec) {\n\t    return {\n\t        serialize(value, builder) {\n\t            if (value) {\n\t                builder.writeInt8(1);\n\t                spec.serialize(value, builder);\n\t            }\n\t            else {\n\t                builder.writeInt8(0);\n\t            }\n\t        },\n\t        deserialize(reader) {\n\t            const exists = reader.readInt8();\n\t            if (exists) {\n\t                return spec.deserialize(reader);\n\t            }\n\t        },\n\t        create() {\n\t            return undefined;\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * @public\n\t */\n\texports.Schemas = void 0;\n\t(function (Schemas) {\n\t    Schemas.Boolean = Bool;\n\t    Schemas.String = EcsString;\n\t    Schemas.Float = Float32;\n\t    Schemas.Double = Float64;\n\t    Schemas.Byte = Int8;\n\t    Schemas.Short = Int16;\n\t    Schemas.Int = Int32;\n\t    Schemas.Int64 = Int64;\n\t    Schemas.Number = Float32;\n\t    Schemas.Enum = IEnum;\n\t    Schemas.Array = IArray;\n\t    Schemas.Map = IMap;\n\t    Schemas.Optional = IOptional;\n\t})(exports.Schemas || (exports.Schemas = {}));\n\n\tvar dist = {};\n\n\tvar types = {};\n\n\tvar hasRequiredTypes;\n\n\tfunction requireTypes () {\n\t\tif (hasRequiredTypes) return types;\n\t\thasRequiredTypes = 1;\n\t\tObject.defineProperty(types, \"__esModule\", { value: true });\n\t\t\n\t\treturn types;\n\t}\n\n\tvar hasRequiredDist;\n\n\tfunction requireDist () {\n\t\tif (hasRequiredDist) return dist;\n\t\thasRequiredDist = 1;\n\t\t(function (exports) {\n\t\t\tvar __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n\t\t\t}) : (function(o, m, k, k2) {\n\t\t\t    if (k2 === undefined) k2 = k;\n\t\t\t    o[k2] = m[k];\n\t\t\t}));\n\t\t\tvar __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n\t\t\t    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n\t\t\t};\n\t\t\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\t\t\texports.crdtProtocol = exports.stateIterator = exports.sameData = void 0;\n\t\t\t__exportStar(requireTypes(), exports);\n\t\t\t/**\n\t\t\t * Compare raw data.\n\t\t\t * @internal\n\t\t\t */\n\t\t\tfunction sameData(a, b) {\n\t\t\t    // At reference level\n\t\t\t    if (a === b)\n\t\t\t        return true;\n\t\t\t    if (a instanceof Uint8Array && b instanceof Uint8Array) {\n\t\t\t        if (a.byteLength !== b.byteLength) {\n\t\t\t            return false;\n\t\t\t        }\n\t\t\t        for (let i = 0; i < a.byteLength; i++) {\n\t\t\t            if (a[i] !== b[i]) {\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        return true;\n\t\t\t    }\n\t\t\t    if (globalThis.Buffer) {\n\t\t\t        if (a instanceof Buffer && b instanceof Buffer) {\n\t\t\t            // Deep level\n\t\t\t            return a.equals(b);\n\t\t\t        }\n\t\t\t    }\n\t\t\t    return false;\n\t\t\t}\n\t\t\texports.sameData = sameData;\n\t\t\t/**\n\t\t\t * State iterator\n\t\t\t * @internal\n\t\t\t */\n\t\t\tfunction* stateIterator(state) {\n\t\t\t    for (const [key1, value1] of state.entries()) {\n\t\t\t        for (const [key2, value2] of value1.entries()) {\n\t\t\t            yield [key1, key2, value2];\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\texports.stateIterator = stateIterator;\n\t\t\t/**\n\t\t\t * @public\n\t\t\t * CRDT protocol.\n\t\t\t * Stores the latest state, and decides whenever we have\n\t\t\t * to process and store the new data in case its an update, or\n\t\t\t * to discard and send our local value cause remote it's outdated.\n\t\t\t */\n\t\t\tfunction crdtProtocol() {\n\t\t\t    /**\n\t\t\t     * Local state where we store the latest lamport timestamp\n\t\t\t     * and the raw data value\n\t\t\t     * @internal\n\t\t\t     */\n\t\t\t    const state = new Map();\n\t\t\t    /**\n\t\t\t     * We should call this fn in order to update the state\n\t\t\t     * @internal\n\t\t\t     */\n\t\t\t    function updateState(key1, key2, data, remoteTimestamp) {\n\t\t\t        const key1Value = state.get(key1);\n\t\t\t        const timestamp = Math.max(remoteTimestamp, key1Value?.get(key2)?.timestamp || 0);\n\t\t\t        if (key1Value) {\n\t\t\t            key1Value.set(key2, { timestamp, data });\n\t\t\t        }\n\t\t\t        else {\n\t\t\t            const newKey1Value = new Map();\n\t\t\t            newKey1Value.set(key2, { timestamp, data });\n\t\t\t            state.set(key1, newKey1Value);\n\t\t\t        }\n\t\t\t        return { timestamp, data };\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Create an event for the specified key and store the new data and\n\t\t\t     * lamport timestmap incremented by one in the state.\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function createEvent(key1, key2, data) {\n\t\t\t        // Increment the timestamp\n\t\t\t        const timestamp = (state.get(key1)?.get(key2)?.timestamp || 0) + 1;\n\t\t\t        updateState(key1, key2, data, timestamp);\n\t\t\t        return { key1, key2, data, timestamp };\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Process the received message only if the lamport number recieved is higher\n\t\t\t     * than the stored one. If its lower, we spread it to the network to correct the peer.\n\t\t\t     * If they are equal, the bigger raw data wins.\n\t\t\t  \n\t\t\t     * Returns the recieved data if the lamport number was bigger than ours.\n\t\t\t     * If it was an outdated message, then we return void\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function processMessage(message) {\n\t\t\t        const { key1, key2, data, timestamp } = message;\n\t\t\t        const current = state.get(key1)?.get(key2);\n\t\t\t        // The received message is > than our current value, update our state.\n\t\t\t        if (!current || current.timestamp < timestamp) {\n\t\t\t            updateState(key1, key2, data, timestamp);\n\t\t\t            return message;\n\t\t\t        }\n\t\t\t        // Outdated Message. Resend our state message through the wire.\n\t\t\t        if (current.timestamp > timestamp) {\n\t\t\t            return {\n\t\t\t                key1,\n\t\t\t                key2,\n\t\t\t                data: current.data,\n\t\t\t                timestamp: current.timestamp\n\t\t\t            };\n\t\t\t        }\n\t\t\t        // Same data, same timestamp. Weirdo echo message.\n\t\t\t        if (sameData(current.data, data)) {\n\t\t\t            return message;\n\t\t\t        }\n\t\t\t        // Race condition, same timestamp diff data.\n\t\t\t        function compareData(current, data) {\n\t\t\t            return current > data;\n\t\t\t        }\n\t\t\t        if (compareData(current.data, data)) {\n\t\t\t            return {\n\t\t\t                key1,\n\t\t\t                key2,\n\t\t\t                data: current.data,\n\t\t\t                timestamp: current.timestamp\n\t\t\t            };\n\t\t\t        }\n\t\t\t        updateState(key1, key2, data, timestamp).data;\n\t\t\t        return message;\n\t\t\t    }\n\t\t\t    /**\n\t\t\t     * Returns the current state\n\t\t\t     * @public\n\t\t\t     */\n\t\t\t    function getState() {\n\t\t\t        return state;\n\t\t\t    }\n\t\t\t    return {\n\t\t\t        createEvent,\n\t\t\t        processMessage,\n\t\t\t        getState\n\t\t\t    };\n\t\t\t}\n\t\t\texports.crdtProtocol = crdtProtocol;\n\t\t\t\n\t} (dist));\n\t\treturn dist;\n\t}\n\n\tvar distExports = requireDist();\n\n\t/**\n\t * Take the max between currentSize and intendedSize and then plus 1024. Then,\n\t *  find the next nearer multiple of 1024.\n\t * @param currentSize - number\n\t * @param intendedSize - number\n\t * @returns the calculated number\n\t */\n\tfunction getNextSize(currentSize, intendedSize) {\n\t    const minNewSize = Math.max(currentSize, intendedSize) + 1024;\n\t    return Math.ceil(minNewSize / 1024) * 1024;\n\t}\n\tconst defaultInitialCapacity = 10240;\n\t/**\n\t * ByteBuffer is a wrapper of DataView which also adds a read and write offset.\n\t *  Also in a write operation it resizes the buffer is being used if it needs.\n\t *\n\t * - Use read and write function to generate or consume data.\n\t * - Use set and get only if you are sure that you're doing.\n\t */\n\tfunction createByteBuffer(options = {}) {\n\t    const initialROffset = options.reading?.currentOffset || 0;\n\t    let initialBuffer = null;\n\t    let initialWOffset = 0;\n\t    if (options.writing) {\n\t        initialBuffer = options.writing.buffer;\n\t        if (options.writing.currentOffset) {\n\t            initialWOffset = options.writing.currentOffset;\n\t        }\n\t    }\n\t    else if (options.reading) {\n\t        initialBuffer = options.reading.buffer;\n\t        initialWOffset = options.reading.length || options.reading.buffer.length;\n\t    }\n\t    else {\n\t        initialBuffer = new Uint8Array(options.initialCapacity || defaultInitialCapacity);\n\t    }\n\t    let buffer = initialBuffer;\n\t    let view = new DataView(buffer.buffer, buffer.byteOffset);\n\t    let woffset = initialWOffset;\n\t    let roffset = initialROffset;\n\t    /**\n\t     * Increement the write offset and resize the buffer if it needs.\n\t     */\n\t    const woAdd = (amount) => {\n\t        if (woffset + amount > buffer.byteLength) {\n\t            const newsize = getNextSize(buffer.byteLength, woffset + amount);\n\t            const newBuffer = new Uint8Array(newsize);\n\t            newBuffer.set(buffer);\n\t            buffer = newBuffer;\n\t            view = new DataView(buffer.buffer);\n\t        }\n\t        woffset += amount;\n\t        return woffset - amount;\n\t    };\n\t    /**\n\t     * Increment the read offset and throw an error if it's trying to read\n\t     *  outside the bounds.\n\t     */\n\t    const roAdd = (amount) => {\n\t        if (roffset + amount > woffset) {\n\t            throw new Error('Outside of the bounds of writen data.');\n\t        }\n\t        roffset += amount;\n\t        return roffset - amount;\n\t    };\n\t    return {\n\t        /**\n\t         * @returns The entire current Uint8Array.\n\t         *\n\t         * WARNING: if the buffer grows, the view had changed itself,\n\t         *  and the reference will be a invalid one.\n\t         */\n\t        buffer() {\n\t            return buffer;\n\t        },\n\t        /**\n\t         * @returns The capacity of the current buffer\n\t         */\n\t        bufferLength() {\n\t            return buffer.length;\n\t        },\n\t        /**\n\t         * Resets byteBuffer to avoid creating a new one\n\t         */\n\t        resetBuffer() {\n\t            roffset = 0;\n\t            woffset = 0;\n\t        },\n\t        /**\n\t         * @returns The current read offset\n\t         */\n\t        currentReadOffset() {\n\t            return roffset;\n\t        },\n\t        /**\n\t         * @returns The current write offset\n\t         */\n\t        currentWriteOffset() {\n\t            return woffset;\n\t        },\n\t        /**\n\t         * Reading purpose\n\t         * Returns the previuos offsset size before incrementing\n\t         */\n\t        incrementReadOffset(amount) {\n\t            return roAdd(amount);\n\t        },\n\t        /**\n\t         * @returns How many bytes are available to read.\n\t         */\n\t        remainingBytes() {\n\t            return woffset - roffset;\n\t        },\n\t        readFloat32() {\n\t            return view.getFloat32(roAdd(4));\n\t        },\n\t        readFloat64() {\n\t            return view.getFloat64(roAdd(8));\n\t        },\n\t        readInt8() {\n\t            return view.getInt8(roAdd(1));\n\t        },\n\t        readInt16() {\n\t            return view.getInt16(roAdd(2));\n\t        },\n\t        readInt32() {\n\t            return view.getInt32(roAdd(4));\n\t        },\n\t        readInt64() {\n\t            return view.getBigInt64(roAdd(8));\n\t        },\n\t        readUint8() {\n\t            return view.getUint8(roAdd(1));\n\t        },\n\t        readUint16() {\n\t            return view.getUint16(roAdd(2));\n\t        },\n\t        readUint32() {\n\t            return view.getUint32(roAdd(4));\n\t        },\n\t        readUint64() {\n\t            return view.getBigUint64(roAdd(8));\n\t        },\n\t        readBuffer() {\n\t            const length = view.getUint32(roAdd(4));\n\t            return buffer.subarray(roAdd(length), roAdd(0));\n\t        },\n\t        /**\n\t         * Writing purpose\n\t         */\n\t        /**\n\t         * Increment offset\n\t         * @param amount - how many bytes\n\t         * @returns The offset when this reserving starts.\n\t         */\n\t        incrementWriteOffset(amount) {\n\t            return woAdd(amount);\n\t        },\n\t        /**\n\t         * @returns The total number of bytes writen in the buffer.\n\t         */\n\t        size() {\n\t            return woffset;\n\t        },\n\t        /**\n\t         * Take care using this function, if you modify the data after, the\n\t         * returned subarray will change too. If you'll modify the content of the\n\t         * bytebuffer, maybe you want to use toCopiedBinary()\n\t         *\n\t         * @returns The subarray from 0 to offset as reference.\n\t         */\n\t        toBinary() {\n\t            return buffer.subarray(0, woffset);\n\t        },\n\t        /**\n\t         * Safe copied buffer of the current data of ByteBuffer\n\t         *\n\t         * @returns The subarray from 0 to offset.\n\t         */\n\t        toCopiedBinary() {\n\t            return new Uint8Array(this.toBinary());\n\t        },\n\t        writeBuffer(value, writeLength = true) {\n\t            if (writeLength) {\n\t                this.writeUint32(value.byteLength);\n\t            }\n\t            const o = woAdd(value.byteLength);\n\t            buffer.set(value, o);\n\t        },\n\t        writeFloat32(value) {\n\t            const o = woAdd(4);\n\t            view.setFloat32(o, value);\n\t        },\n\t        writeFloat64(value) {\n\t            const o = woAdd(8);\n\t            view.setFloat64(o, value);\n\t        },\n\t        writeInt8(value) {\n\t            const o = woAdd(1);\n\t            view.setInt8(o, value);\n\t        },\n\t        writeInt16(value) {\n\t            const o = woAdd(2);\n\t            view.setInt16(o, value);\n\t        },\n\t        writeInt32(value) {\n\t            const o = woAdd(4);\n\t            view.setInt32(o, value);\n\t        },\n\t        writeInt64(value) {\n\t            const o = woAdd(8);\n\t            view.setBigInt64(o, value);\n\t        },\n\t        writeUint8(value) {\n\t            const o = woAdd(1);\n\t            view.setUint8(o, value);\n\t        },\n\t        writeUint16(value) {\n\t            const o = woAdd(2);\n\t            view.setUint16(o, value);\n\t        },\n\t        writeUint32(value) {\n\t            const o = woAdd(4);\n\t            view.setUint32(o, value);\n\t        },\n\t        writeUint64(value) {\n\t            const o = woAdd(8);\n\t            view.setBigUint64(o, value);\n\t        },\n\t        // Dataview Proxy\n\t        getFloat32(offset) {\n\t            return view.getFloat32(offset);\n\t        },\n\t        getFloat64(offset) {\n\t            return view.getFloat64(offset);\n\t        },\n\t        getInt8(offset) {\n\t            return view.getInt8(offset);\n\t        },\n\t        getInt16(offset) {\n\t            return view.getInt16(offset);\n\t        },\n\t        getInt32(offset) {\n\t            return view.getInt32(offset);\n\t        },\n\t        getInt64(offset) {\n\t            return view.getBigInt64(offset);\n\t        },\n\t        getUint8(offset) {\n\t            return view.getUint8(offset);\n\t        },\n\t        getUint16(offset) {\n\t            return view.getUint16(offset);\n\t        },\n\t        getUint32(offset) {\n\t            return view.getUint32(offset);\n\t        },\n\t        getUint64(offset) {\n\t            return view.getBigUint64(offset);\n\t        },\n\t        setFloat32(offset, value) {\n\t            view.setFloat32(offset, value);\n\t        },\n\t        setFloat64(offset, value) {\n\t            view.setFloat64(offset, value);\n\t        },\n\t        setInt8(offset, value) {\n\t            view.setInt8(offset, value);\n\t        },\n\t        setInt16(offset, value) {\n\t            view.setInt16(offset, value);\n\t        },\n\t        setInt32(offset, value) {\n\t            view.setInt32(offset, value);\n\t        },\n\t        setInt64(offset, value) {\n\t            view.setBigInt64(offset, value);\n\t        },\n\t        setUint8(offset, value) {\n\t            view.setUint8(offset, value);\n\t        },\n\t        setUint16(offset, value) {\n\t            view.setUint16(offset, value);\n\t        },\n\t        setUint32(offset, value) {\n\t            view.setUint32(offset, value);\n\t        },\n\t        setUint64(offset, value) {\n\t            view.setBigUint64(offset, value);\n\t        }\n\t    };\n\t}\n\n\t/**\n\t * The wire message is the top-level message that can be packed\n\t *  inside it can contain a data with another structure or protocol\n\t *\n\t * Each wire message has three primitive property that it'll never change\n\t *   ---> length        uint32 (message size up to 4,294,967,295)\n\t *   ---> version       uint32 (for now just a number which is zero)\n\t *   ---> message type  uint32\n\t * The length indicates how many bytes are above self, the version in\n\t * combination with message type defines the set of handlers that will be\n\t * available to process the message\n\t *\n\t */\n\tvar WireMessage;\n\t(function (WireMessage) {\n\t    (function (Enum) {\n\t        Enum[Enum[\"RESERVED\"] = 0] = \"RESERVED\";\n\t        // Component Operation\n\t        Enum[Enum[\"PUT_COMPONENT\"] = 1] = \"PUT_COMPONENT\";\n\t        Enum[Enum[\"DELETE_COMPONENT\"] = 2] = \"DELETE_COMPONENT\";\n\t        Enum[Enum[\"MAX_MESSAGE_TYPE\"] = 3] = \"MAX_MESSAGE_TYPE\";\n\t    })(WireMessage.Enum || (WireMessage.Enum = {}));\n\t    WireMessage.HEADER_LENGTH = 8;\n\t    /**\n\t     * Validate if the message incoming is completed\n\t     * @param buf - ByteBuffer\n\t     */\n\t    function validate(buf) {\n\t        const rem = buf.remainingBytes();\n\t        if (rem < WireMessage.HEADER_LENGTH) {\n\t            return false;\n\t        }\n\t        const messageLength = buf.getUint32(buf.currentReadOffset());\n\t        if (rem < messageLength) {\n\t            return false;\n\t        }\n\t        return true;\n\t    }\n\t    WireMessage.validate = validate;\n\t    function readHeader(buf) {\n\t        if (!validate(buf)) {\n\t            return null;\n\t        }\n\t        return {\n\t            length: buf.readUint32(),\n\t            type: buf.readUint32()\n\t        };\n\t    }\n\t    WireMessage.readHeader = readHeader;\n\t})(WireMessage || (WireMessage = {}));\n\tvar WireMessage$1 = WireMessage;\n\n\tvar ComponentOperation;\n\t(function (ComponentOperation) {\n\t    ComponentOperation.MESSAGE_HEADER_LENGTH = 20;\n\t    /**\n\t     * Call this function for an optimal writing data passing the ByteBuffer\n\t     *  already allocated\n\t     */\n\t    function write(type, entity, timestamp, componentDefinition, buf) {\n\t        // reserve the beginning\n\t        const startMessageOffset = buf.incrementWriteOffset(WireMessage$1.HEADER_LENGTH + ComponentOperation.MESSAGE_HEADER_LENGTH);\n\t        // write body\n\t        if (type === WireMessage$1.Enum.PUT_COMPONENT) {\n\t            componentDefinition.writeToByteBuffer(entity, buf);\n\t        }\n\t        const messageLength = buf.size() - startMessageOffset;\n\t        // Write WireMessage header\n\t        buf.setUint32(startMessageOffset, messageLength);\n\t        buf.setUint32(startMessageOffset + 4, type);\n\t        // Write ComponentOperation header\n\t        buf.setUint32(startMessageOffset + 8, entity);\n\t        buf.setUint32(startMessageOffset + 12, componentDefinition._id);\n\t        buf.setUint64(startMessageOffset + 16, BigInt(timestamp));\n\t        buf.setUint32(startMessageOffset + 24, messageLength - ComponentOperation.MESSAGE_HEADER_LENGTH - WireMessage$1.HEADER_LENGTH);\n\t    }\n\t    ComponentOperation.write = write;\n\t    function read(buf) {\n\t        const header = WireMessage$1.readHeader(buf);\n\t        if (!header) {\n\t            return null;\n\t        }\n\t        const common = {\n\t            ...header,\n\t            entity: buf.readUint32(),\n\t            componentId: buf.readInt32(),\n\t            timestamp: Number(buf.readUint64())\n\t        };\n\t        if (header.type === WireMessage$1.Enum.DELETE_COMPONENT) {\n\t            return common;\n\t        }\n\t        return {\n\t            ...common,\n\t            data: buf.readBuffer()\n\t        };\n\t    }\n\t    ComponentOperation.read = read;\n\t})(ComponentOperation || (ComponentOperation = {}));\n\n\tfunction crdtSceneSystem({ engine, transports }) {\n\t    // CRDT Client\n\t    const crdtClient = distExports.crdtProtocol();\n\t    // Messages that we received at transport.onMessage waiting to be processed\n\t    const receivedMessages = [];\n\t    // Messages already processed by the engine but that we need to broadcast to other transports.\n\t    const transportMessages = [];\n\t    // Map of entities already processed at least once\n\t    transports.forEach((transport) => (transport.onmessage = parseChunkMessage(transport.type)));\n\t    /**\n\t     *\n\t     * @param transportType tranport id to identiy messages\n\t     * @returns a function to process received messages\n\t     */\n\t    function parseChunkMessage(transportType) {\n\t        /**\n\t         * Receives a chunk of binary messages and stores all the valid\n\t         * Component Operation Messages at messages queue\n\t         * @param chunkMessage A chunk of binary messages\n\t         */\n\t        return function parseChunkMessage(chunkMessage) {\n\t            const buffer = createByteBuffer({\n\t                reading: { buffer: chunkMessage, currentOffset: 0 }\n\t            });\n\t            while (WireMessage$1.validate(buffer)) {\n\t                const offset = buffer.currentReadOffset();\n\t                const message = ComponentOperation.read(buffer);\n\t                const { type, entity, componentId, data, timestamp } = message;\n\t                receivedMessages.push({\n\t                    type,\n\t                    entity,\n\t                    componentId,\n\t                    data,\n\t                    timestamp,\n\t                    transportType,\n\t                    messageBuffer: buffer\n\t                        .buffer()\n\t                        .subarray(offset, buffer.currentReadOffset())\n\t                });\n\t            }\n\t        };\n\t    }\n\t    /**\n\t     * Return and clear the messaes queue\n\t     * @returns messages recieved by the transport to process on the next tick\n\t     */\n\t    function getMessages(value) {\n\t        const messagesToProcess = Array.from(value);\n\t        value.length = 0;\n\t        return messagesToProcess;\n\t    }\n\t    /**\n\t     * This fn will be called on every tick.\n\t     * Process all the messages queue received by the transport\n\t     */\n\t    function receiveMessages() {\n\t        const messagesToProcess = getMessages(receivedMessages);\n\t        for (const transport of transports) {\n\t            const buffer = createByteBuffer();\n\t            for (const message of messagesToProcess) {\n\t                const { data, timestamp, componentId, entity, type } = message;\n\t                const crdtMessage = {\n\t                    key1: entity,\n\t                    key2: componentId,\n\t                    data: data || null,\n\t                    timestamp: timestamp\n\t                };\n\t                const component = engine.getComponent(componentId);\n\t                const current = crdtClient.processMessage(crdtMessage);\n\t                // CRDT outdated message. Resend this message through the wire\n\t                if (crdtMessage !== current) {\n\t                    const type = component.has(entity)\n\t                        ? WireMessage$1.Enum.PUT_COMPONENT\n\t                        : WireMessage$1.Enum.DELETE_COMPONENT;\n\t                    ComponentOperation.write(type, entity, current.timestamp, component, buffer);\n\t                }\n\t                else {\n\t                    // Process CRDT Message\n\t                    if (type === WireMessage$1.Enum.DELETE_COMPONENT) {\n\t                        component.deleteFrom(entity);\n\t                    }\n\t                    else {\n\t                        const opts = {\n\t                            reading: { buffer: message.data, currentOffset: 0 }\n\t                        };\n\t                        const bb = createByteBuffer(opts);\n\t                        // Update engine component\n\t                        component.upsertFromBinary(message.entity, bb);\n\t                        component.clearDirty();\n\t                    }\n\t                    // Add message to transport queue to be processed by others transports\n\t                    transportMessages.push(message);\n\t                }\n\t            }\n\t            if (buffer.size()) {\n\t                transport.send(buffer.toBinary());\n\t            }\n\t        }\n\t    }\n\t    /**\n\t     * Iterates the dirty map and generates crdt messages to be send\n\t     * @param dirtyMap a map of { entities: [componentId] }\n\t     */\n\t    function createMessages(dirtyMap) {\n\t        // CRDT Messages will be the merge between the recieved transport messages and the new crdt messages\n\t        const crdtMessages = getMessages(transportMessages);\n\t        const buffer = createByteBuffer();\n\t        for (const [entity, componentsId] of dirtyMap) {\n\t            for (const componentId of componentsId) {\n\t                const component = engine.getComponent(componentId);\n\t                const entityComponent = component.has(entity)\n\t                    ? component.toBinary(entity).toBinary()\n\t                    : null;\n\t                const event = crdtClient.createEvent(entity, componentId, entityComponent);\n\t                const offset = buffer.currentWriteOffset();\n\t                const type = component.has(entity)\n\t                    ? WireMessage$1.Enum.PUT_COMPONENT\n\t                    : WireMessage$1.Enum.DELETE_COMPONENT;\n\t                const transportMessage = {\n\t                    type,\n\t                    componentId,\n\t                    entity,\n\t                    timestamp: event.timestamp\n\t                };\n\t                if (transports.some((t) => t.filter(transportMessage))) {\n\t                    ComponentOperation.write(type, entity, event.timestamp, component, buffer);\n\t                    crdtMessages.push({\n\t                        ...transportMessage,\n\t                        messageBuffer: buffer\n\t                            .buffer()\n\t                            .subarray(offset, buffer.currentWriteOffset())\n\t                    });\n\t                }\n\t            }\n\t        }\n\t        // Send messages to transports\n\t        const transportBuffer = createByteBuffer();\n\t        for (const transport of transports) {\n\t            transportBuffer.resetBuffer();\n\t            for (const message of crdtMessages) {\n\t                if (transport.filter(message)) {\n\t                    transportBuffer.writeBuffer(message.messageBuffer, false);\n\t                }\n\t            }\n\t            if (transportBuffer.size()) {\n\t                transport.send(transportBuffer.toBinary());\n\t            }\n\t        }\n\t    }\n\t    return {\n\t        createMessages,\n\t        receiveMessages\n\t    };\n\t}\n\n\t/**\n\t * @internal\n\t */\n\tfunction deepReadonly(val) {\n\t    return Object.freeze({ ...val });\n\t}\n\n\tfunction defineComponent(componentId, spec, constructorDefault\n\t// meta: { syncFlags }\n\t) {\n\t    const data = new Map();\n\t    const dirtyIterator = new Set();\n\t    const defaultBuffer = createByteBuffer();\n\t    if (constructorDefault) {\n\t        spec.serialize(constructorDefault, defaultBuffer);\n\t    }\n\t    function getDefaultValue() {\n\t        if (constructorDefault) {\n\t            return spec.deserialize(createByteBuffer({\n\t                writing: {\n\t                    buffer: defaultBuffer.buffer(),\n\t                    currentOffset: defaultBuffer.currentWriteOffset()\n\t                }\n\t            }));\n\t        }\n\t        else {\n\t            return spec.create();\n\t        }\n\t    }\n\t    function prefillValue(value) {\n\t        return { ...getDefaultValue(), ...value };\n\t    }\n\t    return {\n\t        _id: componentId,\n\t        default: function () {\n\t            return getDefaultValue();\n\t        },\n\t        isDirty: function (entity) {\n\t            return dirtyIterator.has(entity);\n\t        },\n\t        has: function (entity) {\n\t            return data.has(entity);\n\t        },\n\t        deleteFrom: function (entity) {\n\t            const component = data.get(entity);\n\t            data.delete(entity);\n\t            dirtyIterator.add(entity);\n\t            return component || null;\n\t        },\n\t        getOrNull: function (entity) {\n\t            const component = data.get(entity);\n\t            return component ? deepReadonly(component) : null;\n\t        },\n\t        get: function (entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[getFrom] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return deepReadonly(component);\n\t        },\n\t        create: function (entity, value) {\n\t            const component = data.get(entity);\n\t            if (component) {\n\t                throw new Error(`[create] Component ${componentId} for ${entity} already exists`);\n\t            }\n\t            const usedValue = value === undefined ? getDefaultValue() : prefillValue(value);\n\t            data.set(entity, usedValue);\n\t            dirtyIterator.add(entity);\n\t            return usedValue;\n\t        },\n\t        createOrReplace: function (entity, value) {\n\t            const usedValue = value === undefined ? getDefaultValue() : prefillValue(value);\n\t            data.set(entity, usedValue);\n\t            dirtyIterator.add(entity);\n\t            return usedValue;\n\t        },\n\t        getMutableOrNull: function (entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                return null;\n\t            }\n\t            dirtyIterator.add(entity);\n\t            return component;\n\t        },\n\t        getMutable: function (entity) {\n\t            const component = this.getMutableOrNull(entity);\n\t            if (component === null) {\n\t                throw new Error(`[mutable] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return component;\n\t        },\n\t        iterator: function* () {\n\t            for (const [entity, component] of data) {\n\t                yield [entity, component];\n\t            }\n\t        },\n\t        dirtyIterator: function* () {\n\t            for (const entity of dirtyIterator) {\n\t                yield entity;\n\t            }\n\t        },\n\t        toBinary(entity) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[toBinary] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            const writeBuffer = createByteBuffer();\n\t            spec.serialize(component, writeBuffer);\n\t            return writeBuffer;\n\t        },\n\t        writeToByteBuffer(entity, buffer) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[writeToByteBuffer] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            spec.serialize(component, buffer);\n\t        },\n\t        updateFromBinary(entity, buffer) {\n\t            const component = data.get(entity);\n\t            if (!component) {\n\t                throw new Error(`[updateFromBinary] Component ${componentId} for ${entity} not found`);\n\t            }\n\t            return this.upsertFromBinary(entity, buffer);\n\t        },\n\t        upsertFromBinary(entity, buffer) {\n\t            const newValue = spec.deserialize(buffer);\n\t            data.set(entity, newValue);\n\t            dirtyIterator.add(entity);\n\t            return newValue;\n\t        },\n\t        clearDirty: function () {\n\t            dirtyIterator.clear();\n\t        }\n\t    };\n\t}\n\n\tvar EntityUtils;\n\t(function (EntityUtils) {\n\t    EntityUtils.MAX_ENTITIES = 0xffffffff;\n\t    EntityUtils.DYNAMIC_ENTITIES_START_AT = 100e3;\n\t    EntityUtils.RESERVED_STATIC_ENTITIES = 512;\n\t    EntityUtils.RESERVED_ENTITIES_RANGE = [\n\t        0,\n\t        EntityUtils.RESERVED_STATIC_ENTITIES - 1\n\t    ];\n\t    EntityUtils.STATIC_ENTITIES_RANGE = [\n\t        EntityUtils.RESERVED_STATIC_ENTITIES,\n\t        EntityUtils.DYNAMIC_ENTITIES_START_AT - 1\n\t    ];\n\t    EntityUtils.DYNAMIC_ENTITIES_RANGE = [\n\t        EntityUtils.DYNAMIC_ENTITIES_START_AT,\n\t        EntityUtils.MAX_ENTITIES\n\t    ];\n\t    function isInRange(entity, range) {\n\t        return entity >= range[0] && entity <= range[1];\n\t    }\n\t    function isDynamicEntity(entity) {\n\t        return isInRange(entity, EntityUtils.DYNAMIC_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isDynamicEntity = isDynamicEntity;\n\t    function isStaticEntity(entity) {\n\t        return isInRange(entity, EntityUtils.STATIC_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isStaticEntity = isStaticEntity;\n\t    function isReservedEntity(entity) {\n\t        return isInRange(entity, EntityUtils.RESERVED_ENTITIES_RANGE);\n\t    }\n\t    EntityUtils.isReservedEntity = isReservedEntity;\n\t})(EntityUtils || (EntityUtils = {}));\n\n\tfunction EntityContainer() {\n\t    const staticEntity = Entity(EntityUtils.STATIC_ENTITIES_RANGE);\n\t    const dynamicEntity = Entity(EntityUtils.DYNAMIC_ENTITIES_RANGE);\n\t    return {\n\t        generateEntity(dynamic = false) {\n\t            if (dynamic) {\n\t                return dynamicEntity.generateEntity();\n\t            }\n\t            else {\n\t                return staticEntity.generateEntity();\n\t            }\n\t        },\n\t        removeEntity(entity) {\n\t            return (staticEntity.removeEntity(entity) || dynamicEntity.removeEntity(entity));\n\t        },\n\t        isEntityExists(entity) {\n\t            return (EntityUtils.isReservedEntity(entity) ||\n\t                staticEntity.getExistingEntities().has(entity) ||\n\t                dynamicEntity.getExistingEntities().has(entity));\n\t        },\n\t        getExistingEntities() {\n\t            return new Set([\n\t                ...staticEntity.getExistingEntities(),\n\t                ...dynamicEntity.getExistingEntities()\n\t            ]);\n\t        }\n\t    };\n\t}\n\tfunction Entity(range) {\n\t    function createEntity(entity) {\n\t        return entity;\n\t    }\n\t    let entityCounter = range[0];\n\t    const usedEntities = new Set();\n\t    function generateEntity() {\n\t        if (entityCounter >= range[1]) {\n\t            throw new Error(`It fails trying to generate an entity out of range [${range[0]}, ${range[1]}].`);\n\t        }\n\t        const entity = createEntity(entityCounter);\n\t        entityCounter++;\n\t        usedEntities.add(entity);\n\t        return entity;\n\t    }\n\t    function removeEntity(entity) {\n\t        return usedEntities.delete(entity);\n\t    }\n\t    return {\n\t        getExistingEntities() {\n\t            return new Set(usedEntities);\n\t        },\n\t        generateEntity,\n\t        removeEntity\n\t    };\n\t}\n\n\tconst SYSTEMS_REGULAR_PRIORITY = 100e3;\n\tfunction SystemContainer() {\n\t    const systems = [];\n\t    function sort() {\n\t        systems.sort((a, b) => b.priority - a.priority);\n\t    }\n\t    function add(fn, priority, name) {\n\t        if (systems.find((item) => item.fn === fn)) {\n\t            throw new Error('System already added');\n\t        }\n\t        else if (name && systems.find((item) => item.name === name)) {\n\t            throw new Error('System name already used');\n\t        }\n\t        systems.push({\n\t            fn,\n\t            priority,\n\t            name\n\t        });\n\t        sort();\n\t    }\n\t    function remove(selector) {\n\t        let index = -1;\n\t        if (typeof selector === 'string') {\n\t            index = systems.findIndex((item) => item.name === selector);\n\t        }\n\t        else {\n\t            index = systems.findIndex((item) => item.fn === selector);\n\t        }\n\t        if (index === -1) {\n\t            return false;\n\t        }\n\t        systems.splice(index, 1);\n\t        sort();\n\t        return true;\n\t    }\n\t    return {\n\t        add,\n\t        remove,\n\t        getSystems() {\n\t            return systems;\n\t        }\n\t    };\n\t}\n\n\tfunction preEngine() {\n\t    const entityContainer = EntityContainer();\n\t    const componentsDefinition = new Map();\n\t    // TODO: find a way to make this work.\n\t    // Maybe a proxy/callback to be up-to-date\n\t    const entitiesComponent = new Map();\n\t    const systems = SystemContainer();\n\t    function addSystem(fn, priority = SYSTEMS_REGULAR_PRIORITY, name) {\n\t        systems.add(fn, priority, name);\n\t    }\n\t    function removeSystem(selector) {\n\t        return systems.remove(selector);\n\t    }\n\t    function addEntity(dynamic = false) {\n\t        // entitiesCompnonent.set(entity, new Set())\n\t        const entity = entityContainer.generateEntity(dynamic);\n\t        return entity;\n\t    }\n\t    function addDynamicEntity() {\n\t        return addEntity(true);\n\t    }\n\t    function removeEntity(entity) {\n\t        for (const [, component] of componentsDefinition) {\n\t            if (component.has(entity)) {\n\t                component.deleteFrom(entity);\n\t            }\n\t        }\n\t        return entityContainer.removeEntity(entity);\n\t    }\n\t    function defineComponentFromSchema(spec, componentId, constructorDefault) {\n\t        if (componentsDefinition.get(componentId)) {\n\t            throw new Error(`Component ${componentId} already declared`);\n\t        }\n\t        const newComponent = defineComponent(componentId, spec, constructorDefault);\n\t        componentsDefinition.set(componentId, newComponent);\n\t        return newComponent;\n\t    }\n\t    function defineComponent$1(spec, componentId, constructorDefault) {\n\t        return defineComponentFromSchema(exports.Schemas.Map(spec), componentId, constructorDefault);\n\t    }\n\t    function getComponent(componentId) {\n\t        const component = componentsDefinition.get(componentId);\n\t        if (!component) {\n\t            throw new Error('Component not found. You need to declare the components at the beginnig of the engine declaration');\n\t        }\n\t        return component;\n\t    }\n\t    function* getEntitiesWith(...components) {\n\t        for (const [entity, ...groupComp] of getComponentDefGroup(...components)) {\n\t            yield [entity, ...groupComp.map((c) => c.get(entity))];\n\t        }\n\t    }\n\t    function* getComponentDefGroup(...args) {\n\t        const [firstComponentDef, ...componentDefinitions] = args;\n\t        for (const [entity] of firstComponentDef.iterator()) {\n\t            let matches = true;\n\t            for (const componentDef of componentDefinitions) {\n\t                if (!componentDef.has(entity)) {\n\t                    matches = false;\n\t                    break;\n\t                }\n\t            }\n\t            if (matches) {\n\t                yield [entity, ...args];\n\t            }\n\t        }\n\t    }\n\t    function getSystems() {\n\t        return systems.getSystems();\n\t    }\n\t    function removeComponentDefinition(componentId) {\n\t        componentsDefinition.delete(componentId);\n\t    }\n\t    return {\n\t        entitiesComponent,\n\t        componentsDefinition,\n\t        addEntity,\n\t        addDynamicEntity,\n\t        removeEntity,\n\t        addSystem,\n\t        getSystems,\n\t        removeSystem,\n\t        defineComponent: defineComponent$1,\n\t        defineComponentFromSchema,\n\t        getEntitiesWith,\n\t        getComponent,\n\t        removeComponentDefinition\n\t    };\n\t}\n\t/**\n\t * @public\n\t */\n\tfunction Engine({ transports } = {}) {\n\t    const engine = preEngine();\n\t    const crdtSystem = crdtSceneSystem({ engine, transports: transports || [] });\n\t    const baseComponents = defineSdkComponents(engine);\n\t    function update(dt) {\n\t        crdtSystem.receiveMessages();\n\t        for (const system of engine.getSystems()) {\n\t            system.fn(dt);\n\t        }\n\t        // Selected components that only exist one frame\n\t        //  then, they are deleted but their crdt state keeps\n\t        const removeSelectedComponents = [\n\t            baseComponents.OnPointerDownResult,\n\t            baseComponents.OnPointerUpResult\n\t        ];\n\t        const excludeComponentIds = removeSelectedComponents.map((item) => item._id);\n\t        for (const componentDef of removeSelectedComponents) {\n\t            for (const [entity] of engine.getEntitiesWith(componentDef)) {\n\t                componentDef.deleteFrom(entity);\n\t            }\n\t        }\n\t        // TODO: Perf tip\n\t        // Should we add some dirtyIteratorSet at engine level so we dont have\n\t        // to iterate all the component definitions to get the dirty ones ?\n\t        const dirtySet = new Map();\n\t        for (const [componentId, definition] of engine.componentsDefinition) {\n\t            if (excludeComponentIds.includes(componentId))\n\t                continue;\n\t            for (const entity of definition.dirtyIterator()) {\n\t                if (!dirtySet.has(entity)) {\n\t                    dirtySet.set(entity, new Set());\n\t                }\n\t                dirtySet.get(entity).add(componentId);\n\t            }\n\t        }\n\t        crdtSystem.createMessages(dirtySet);\n\t        for (const [_componentId, definition] of engine.componentsDefinition) {\n\t            definition.clearDirty();\n\t        }\n\t    }\n\t    return {\n\t        addEntity: engine.addEntity,\n\t        addDynamicEntity: engine.addDynamicEntity,\n\t        removeEntity: engine.removeEntity,\n\t        addSystem: engine.addSystem,\n\t        removeSystem: engine.removeSystem,\n\t        defineComponent: engine.defineComponent,\n\t        defineComponentFromSchema: engine.defineComponentFromSchema,\n\t        getEntitiesWith: engine.getEntitiesWith,\n\t        getComponent: engine.getComponent,\n\t        removeComponentDefinition: engine.removeComponentDefinition,\n\t        update,\n\t        baseComponents\n\t    };\n\t}\n\n\t/** @public */\n\tvar ECSComponentIDs;\n\t(function (ECSComponentIDs) {\n\t    ECSComponentIDs[ECSComponentIDs[\"Transform\"] = 1] = \"Transform\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Animator\"] = 1042] = \"Animator\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AudioSource\"] = 1020] = \"AudioSource\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarAttach\"] = 1073] = \"AvatarAttach\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarModifierArea\"] = 1070] = \"AvatarModifierArea\";\n\t    ECSComponentIDs[ECSComponentIDs[\"AvatarShape\"] = 1080] = \"AvatarShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Billboard\"] = 1090] = \"Billboard\";\n\t    ECSComponentIDs[ECSComponentIDs[\"BoxShape\"] = 1013] = \"BoxShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CameraMode\"] = 1072] = \"CameraMode\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CameraModeArea\"] = 1071] = \"CameraModeArea\";\n\t    ECSComponentIDs[ECSComponentIDs[\"CylinderShape\"] = 1016] = \"CylinderShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"GLTFShape\"] = 1041] = \"GLTFShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"Material\"] = 1017] = \"Material\";\n\t    ECSComponentIDs[ECSComponentIDs[\"MeshRenderer\"] = 1018] = \"MeshRenderer\";\n\t    ECSComponentIDs[ECSComponentIDs[\"NFTShape\"] = 1040] = \"NFTShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerDown\"] = 1060] = \"OnPointerDown\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerDownResult\"] = 1066] = \"OnPointerDownResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerUp\"] = 1061] = \"OnPointerUp\";\n\t    ECSComponentIDs[ECSComponentIDs[\"OnPointerUpResult\"] = 1065] = \"OnPointerUpResult\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PlaneShape\"] = 1014] = \"PlaneShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"PointerLock\"] = 1074] = \"PointerLock\";\n\t    ECSComponentIDs[ECSComponentIDs[\"SphereShape\"] = 1015] = \"SphereShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"TextShape\"] = 1030] = \"TextShape\";\n\t    ECSComponentIDs[ECSComponentIDs[\"UiText\"] = 1052] = \"UiText\";\n\t    ECSComponentIDs[ECSComponentIDs[\"VisibilityComponent\"] = 1081] = \"VisibilityComponent\";\n\t})(ECSComponentIDs || (ECSComponentIDs = {}));\n\n\tconst componentIds = Object.values(ECSComponentIDs)\n\t    .filter((a) => typeof a === 'number')\n\t    .map(Number);\n\tfunction createRendererTransport() {\n\t    if (typeof dcl === 'undefined') {\n\t        // TODO: replace with new rpc\n\t        throw new Error('Cannot create createRendererTransport without global dcl object');\n\t    }\n\t    const type = 'renderer';\n\t    return {\n\t        type,\n\t        send(message) {\n\t            // TODO: replace with new rpc\n\t            dcl\n\t                .callRpc('@decentraland/ExperimentalAPI', 'sendToRenderer', [\n\t                { data: new Uint8Array(message) }\n\t            ])\n\t                .catch(dcl.error);\n\t        },\n\t        filter(message) {\n\t            // Echo message, ignore them\n\t            if (message.transportType === type) {\n\t                return false;\n\t            }\n\t            // Only send renderer components (Proto Generated)\n\t            if (!componentIds.includes(message.componentId)) {\n\t                return false;\n\t            }\n\t            return !!message;\n\t        }\n\t    };\n\t}\n\n\tfunction createNetworkTransport() {\n\t    // const rpc = new RpcTransport()\n\t    function send(..._args) {\n\t        // console.log('NetworkMessage Sent: ', ...args)\n\t    }\n\t    const type = 'network-transport';\n\t    return {\n\t        send,\n\t        type,\n\t        filter(message) {\n\t            // Echo message, ignore them\n\t            if (message.transportType === type) {\n\t                return false;\n\t            }\n\t            // TODO: Static entities & Network components\n\t            return !!message; // validComponents.includes(componentId)\n\t        }\n\t    };\n\t}\n\n\t/// <reference types=\"@dcl/posix\" />\n\tconst rendererTransport = createRendererTransport();\n\tconst engine = Engine({\n\t    transports: [rendererTransport, createNetworkTransport()]\n\t});\n\tif (typeof dcl !== 'undefined') {\n\t    dcl.loadModule('@decentraland/ExperimentalAPI', {}).catch(dcl.error);\n\t    async function pullRendererMessages() {\n\t        const response = await dcl.callRpc('@decentraland/ExperimentalAPI', 'messageFromRenderer', []);\n\t        if (response.data?.length) {\n\t            if (rendererTransport.onmessage) {\n\t                for (const byteArray of response.data) {\n\t                    rendererTransport.onmessage(byteArray);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    dcl.onUpdate((dt) => {\n\t        pullRendererMessages()\n\t            .catch(dcl.error)\n\t            .finally(() => engine.update(dt));\n\t    });\n\t}\n\tconst log = dcl.log;\n\tconst error = dcl.error;\n\n\t/** @public */\n\tconst Transform = engine.baseComponents.Transform;\n\t/** @public */\n\tconst Animator = engine.baseComponents.Animator;\n\t/** @public */\n\tconst AudioSource = engine.baseComponents.AudioSource;\n\t/** @public */\n\tconst AvatarAttach = engine.baseComponents.AvatarAttach;\n\t/** @public */\n\tconst AvatarModifierArea = engine.baseComponents.AvatarModifierArea;\n\t/** @public */\n\tconst AvatarShape = engine.baseComponents.AvatarShape;\n\t/** @public */\n\tconst Billboard = engine.baseComponents.Billboard;\n\t/** @public */\n\tconst BoxShape = engine.baseComponents.BoxShape;\n\t/** @public */\n\tconst CameraMode = engine.baseComponents.CameraMode;\n\t/** @public */\n\tconst CameraModeArea = engine.baseComponents.CameraModeArea;\n\t/** @public */\n\tconst CylinderShape = engine.baseComponents.CylinderShape;\n\t/** @public */\n\tconst GLTFShape = engine.baseComponents.GLTFShape;\n\t/** @public */\n\tconst Material = engine.baseComponents.Material;\n\t/** @public */\n\tconst MeshRenderer = engine.baseComponents.MeshRenderer;\n\t/** @public */\n\tconst NFTShape = engine.baseComponents.NFTShape;\n\t/** @public */\n\tconst OnPointerDown = engine.baseComponents.OnPointerDown;\n\t/** @public */\n\tconst OnPointerDownResult = engine.baseComponents.OnPointerDownResult;\n\t/** @public */\n\tconst OnPointerUp = engine.baseComponents.OnPointerUp;\n\t/** @public */\n\tconst OnPointerUpResult = engine.baseComponents.OnPointerUpResult;\n\t/** @public */\n\tconst PlaneShape = engine.baseComponents.PlaneShape;\n\t/** @public */\n\tconst PointerLock = engine.baseComponents.PointerLock;\n\t/** @public */\n\tconst SphereShape = engine.baseComponents.SphereShape;\n\t/** @public */\n\tconst TextShape = engine.baseComponents.TextShape;\n\t/** @public */\n\tconst UiText = engine.baseComponents.UiText;\n\t/** @public */\n\tconst VisibilityComponent = engine.baseComponents.VisibilityComponent;\n\n\t/** @public */\n\texports.Components = void 0;\n\t(function (Components) {\n\t    /** @public */\n\t    Components.Transform = engine.baseComponents.Transform;\n\t    /** @public */\n\t    Components.Animator = engine.baseComponents.Animator;\n\t    /** @public */\n\t    Components.AudioSource = engine.baseComponents.AudioSource;\n\t    /** @public */\n\t    Components.AvatarAttach = engine.baseComponents.AvatarAttach;\n\t    /** @public */\n\t    Components.AvatarModifierArea = engine.baseComponents.AvatarModifierArea;\n\t    /** @public */\n\t    Components.AvatarShape = engine.baseComponents.AvatarShape;\n\t    /** @public */\n\t    Components.Billboard = engine.baseComponents.Billboard;\n\t    /** @public */\n\t    Components.BoxShape = engine.baseComponents.BoxShape;\n\t    /** @public */\n\t    Components.CameraMode = engine.baseComponents.CameraMode;\n\t    /** @public */\n\t    Components.CameraModeArea = engine.baseComponents.CameraModeArea;\n\t    /** @public */\n\t    Components.CylinderShape = engine.baseComponents.CylinderShape;\n\t    /** @public */\n\t    Components.GLTFShape = engine.baseComponents.GLTFShape;\n\t    /** @public */\n\t    Components.Material = engine.baseComponents.Material;\n\t    /** @public */\n\t    Components.MeshRenderer = engine.baseComponents.MeshRenderer;\n\t    /** @public */\n\t    Components.NFTShape = engine.baseComponents.NFTShape;\n\t    /** @public */\n\t    Components.OnPointerDown = engine.baseComponents.OnPointerDown;\n\t    /** @public */\n\t    Components.OnPointerDownResult = engine.baseComponents.OnPointerDownResult;\n\t    /** @public */\n\t    Components.OnPointerUp = engine.baseComponents.OnPointerUp;\n\t    /** @public */\n\t    Components.OnPointerUpResult = engine.baseComponents.OnPointerUpResult;\n\t    /** @public */\n\t    Components.PlaneShape = engine.baseComponents.PlaneShape;\n\t    /** @public */\n\t    Components.PointerLock = engine.baseComponents.PointerLock;\n\t    /** @public */\n\t    Components.SphereShape = engine.baseComponents.SphereShape;\n\t    /** @public */\n\t    Components.TextShape = engine.baseComponents.TextShape;\n\t    /** @public */\n\t    Components.UiText = engine.baseComponents.UiText;\n\t    /** @public */\n\t    Components.VisibilityComponent = engine.baseComponents.VisibilityComponent;\n\t})(exports.Components || (exports.Components = {}));\n\n\texports.Animator = Animator;\n\texports.AudioSource = AudioSource;\n\texports.AvatarAttach = AvatarAttach;\n\texports.AvatarModifierArea = AvatarModifierArea;\n\texports.AvatarShape = AvatarShape;\n\texports.Billboard = Billboard;\n\texports.BoxShape = BoxShape;\n\texports.CameraMode = CameraMode;\n\texports.CameraModeArea = CameraModeArea;\n\texports.CylinderShape = CylinderShape;\n\texports.DEG2RAD = distExports$1.DEG2RAD;\n\texports.Engine = Engine;\n\texports.Epsilon = distExports$1.Epsilon;\n\texports.GLTFShape = GLTFShape;\n\texports.Material = Material;\n\texports.MeshRenderer = MeshRenderer;\n\texports.NFTShape = NFTShape;\n\texports.OnPointerDown = OnPointerDown;\n\texports.OnPointerDownResult = OnPointerDownResult;\n\texports.OnPointerUp = OnPointerUp;\n\texports.OnPointerUpResult = OnPointerUpResult;\n\texports.Orientation = distExports$1.Orientation;\n\texports.PlaneShape = PlaneShape;\n\texports.PointerLock = PointerLock;\n\texports.Quaternion = distExports$1.Quaternion;\n\texports.RAD2DEG = distExports$1.RAD2DEG;\n\texports.Space = distExports$1.Space;\n\texports.SphereShape = SphereShape;\n\texports.TextShape = TextShape;\n\texports.ToGammaSpace = distExports$1.ToGammaSpace;\n\texports.ToLinearSpace = distExports$1.ToLinearSpace;\n\texports.Transform = Transform;\n\texports.UiText = UiText;\n\texports.Vector3 = distExports$1.Vector3;\n\texports.VisibilityComponent = VisibilityComponent;\n\texports.deepReadonly = deepReadonly;\n\texports.engine = engine;\n\texports.error = error;\n\texports.log = log;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})(this.self = this.self || {});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvVmVjdG9yMy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvU2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC90eXBlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvUXVhdGVybmlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYXNwcm9taXNlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2Jhc2U2NC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9ldmVudGVtaXR0ZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZmxvYXQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy91dGY4L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL3Bvb2wvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9sb25nYml0cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy91dGlsL21pbmltYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlcl9idWZmZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JlYWRlcl9idWZmZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjL3NlcnZpY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3Jvb3RzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9taW5pbWFsLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL0FuaW1hdG9yLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9BbmltYXRvci5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvQXVkaW9Tb3VyY2UuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL0F1ZGlvU291cmNlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9BdmF0YXJBdHRhY2guZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL0F2YXRhckF0dGFjaC5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvY29tbW9uL1ZlY3RvcjMuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL0F2YXRhck1vZGlmaWVyQXJlYS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvQXZhdGFyTW9kaWZpZXJBcmVhLmdlbi50cyIsIi4uL25vZGVfbW9kdWxlcy9sb25nL3NyYy9sb25nLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL2NvbW1vbi9Db2xvcjMuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL0F2YXRhclNoYXBlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9BdmF0YXJTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvQmlsbGJvYXJkLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9CaWxsYm9hcmQuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL0JveFNoYXBlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9Cb3hTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvQ2FtZXJhTW9kZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvQ2FtZXJhTW9kZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvQ2FtZXJhTW9kZUFyZWEuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL0NhbWVyYU1vZGVBcmVhLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9DeWxpbmRlclNoYXBlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9DeWxpbmRlclNoYXBlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9HTFRGU2hhcGUuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL0dMVEZTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvTWF0ZXJpYWwuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL01hdGVyaWFsLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9NZXNoUmVuZGVyZXIuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL01lc2hSZW5kZXJlci5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvTkZUU2hhcGUuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL05GVFNoYXBlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9PblBvaW50ZXJEb3duLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9PblBvaW50ZXJEb3duLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9PblBvaW50ZXJEb3duUmVzdWx0Lmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9PblBvaW50ZXJEb3duUmVzdWx0Lmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9PblBvaW50ZXJVcC5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvT25Qb2ludGVyVXAuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL09uUG9pbnRlclVwUmVzdWx0Lmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9PblBvaW50ZXJVcFJlc3VsdC5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvUGxhbmVTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvUGxhbmVTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvUG9pbnRlckxvY2suZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL1BvaW50ZXJMb2NrLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9TcGhlcmVTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvU3BoZXJlU2hhcGUuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL3BiL1RleHRTaGFwZS5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvVGV4dFNoYXBlLmdlbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9wYi9VaVRleHQuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL1VpVGV4dC5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvcGIvVmlzaWJpbGl0eUNvbXBvbmVudC5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvVmlzaWJpbGl0eUNvbXBvbmVudC5nZW4udHMiLCIuLi9zcmMvY29tcG9uZW50cy9nZW5lcmF0ZWQvaW5kZXguZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvbGVnYWN5L1RyYW5zZm9ybS50cyIsIi4uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwiLi4vc3JjL3NjaGVtYXMvQXJyYXkudHMiLCIuLi9zcmMvc2NoZW1hcy9iYXNpYy9Cb29sZWFuLnRzIiwiLi4vc3JjL3NjaGVtYXMvYmFzaWMvRW51bS50cyIsIi4uL3NyYy9zY2hlbWFzL2Jhc2ljL0Zsb2F0LnRzIiwiLi4vc3JjL3NjaGVtYXMvYmFzaWMvSW50ZWdlci50cyIsIi4uL3NyYy9zY2hlbWFzL2Jhc2ljL1N0cmluZy50cyIsIi4uL3NyYy9zY2hlbWFzL01hcC50cyIsIi4uL3NyYy9zY2hlbWFzL09wdGlvbmFsLnRzIiwiLi4vc3JjL3NjaGVtYXMvaW5kZXgudHMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9jcmR0L2Rpc3QvdHlwZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9jcmR0L2Rpc3QvaW5kZXguanMiLCIuLi9zcmMvc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyL2luZGV4LnRzIiwiLi4vc3JjL3NlcmlhbGl6YXRpb24vd2lyZU1lc3NhZ2UudHMiLCIuLi9zcmMvc2VyaWFsaXphdGlvbi9jcmR0L2NvbXBvbmVudE9wZXJhdGlvbi50cyIsIi4uL3NyYy9zeXN0ZW1zL2NyZHQvaW5kZXgudHMiLCIuLi9zcmMvZW5naW5lL3JlYWRvbmx5LnRzIiwiLi4vc3JjL2VuZ2luZS9jb21wb25lbnQudHMiLCIuLi9zcmMvZW5naW5lL2VudGl0eS11dGlscy50cyIsIi4uL3NyYy9lbmdpbmUvZW50aXR5LnRzIiwiLi4vc3JjL2VuZ2luZS9zeXN0ZW1zLnRzIiwiLi4vc3JjL2VuZ2luZS9pbmRleC50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9pZHMuZ2VuLnRzIiwiLi4vc3JjL3N5c3RlbXMvY3JkdC90cmFuc3BvcnRzL3JlbmRlcmVyVHJhbnNwb3J0LnRzIiwiLi4vc3JjL3N5c3RlbXMvY3JkdC90cmFuc3BvcnRzL25ldHdvcmtUcmFuc3BvcnQudHMiLCIuLi9zcmMvcnVudGltZS9pbml0aWFsaXphdGlvbi50cyIsIi4uL3NyYy9jb21wb25lbnRzL2dlbmVyYXRlZC9nbG9iYWwuZ2VuLnRzIiwiLi4vc3JjL2NvbXBvbmVudHMvZ2VuZXJhdGVkL2dsb2JhbC5uYW1lc3BhY2UuZ2VuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZWN0b3IzID0gdm9pZCAwO1xuLyoqXG4gKiBAcHVibGljXG4gKi9cbnZhciBWZWN0b3IzO1xuKGZ1bmN0aW9uIChWZWN0b3IzKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IzIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB4LCB5LCB6IChmbG9hdHMpIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlcyAob24gWSBheGlzKVxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdGhpcmQgY29vcmRpbmF0ZXMgKG9uIFogYXhpcylcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICAgKi9cbiAgICB4ID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgc2Vjb25kIGNvb3JkaW5hdGVzIChvbiBZIGF4aXMpXG4gICAgICovXG4gICAgeSA9IDAsIFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHRoaXJkIGNvb3JkaW5hdGVzIChvbiBaIGF4aXMpXG4gICAgICovXG4gICAgeiA9IDApIHtcbiAgICAgICAgcmV0dXJuIHsgeCwgeSwgeiB9O1xuICAgIH1cbiAgICBWZWN0b3IzLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIHJlc3VsdCBvZiB0aGUgYWRkaXRpb24gb2YgdGhlIHR3byBnaXZlbiB2ZWN0b3JzLlxuICAgICAqIEBwYXJhbSB2ZWN0b3IxIC0gdGhlIGZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIC0gdGhlIHNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0aW5nIHZlY3RvclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZCh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB2ZWN0b3IxLnggKyB2ZWN0b3IyLngsXG4gICAgICAgICAgICB5OiB2ZWN0b3IxLnkgKyB2ZWN0b3IyLnksXG4gICAgICAgICAgICB6OiB2ZWN0b3IxLnogKyB2ZWN0b3IyLnpcbiAgICAgICAgfTtcbiAgICB9XG4gICAgVmVjdG9yMy5hZGQgPSBhZGQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGFzIHRoZSByZXN1bHQgb2YgdGhlIHN1YnN0cmFjdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyB2ZWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdWJ0cmFjdChtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBtaW51ZW5kLnggLSBzdWJ0cmFoZW5kLngsXG4gICAgICAgICAgICB5OiBtaW51ZW5kLnkgLSBzdWJ0cmFoZW5kLnksXG4gICAgICAgICAgICB6OiBtaW51ZW5kLnogLSBzdWJ0cmFoZW5kLnpcbiAgICAgICAgfTtcbiAgICB9XG4gICAgVmVjdG9yMy5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgcmVzdWx0IG9mIHRoZSBzdWJzdHJhY3Rpb24gb2YgdGhlIHR3byBnaXZlbiB2ZWN0b3JzLlxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VidHJhY3RUb1JlZihtaW51ZW5kLCBzdWJ0cmFoZW5kLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBtaW51ZW5kLnggLSBzdWJ0cmFoZW5kLng7XG4gICAgICAgIHJlc3VsdC55ID0gbWludWVuZC55IC0gc3VidHJhaGVuZC55O1xuICAgICAgICByZXN1bHQueiA9IG1pbnVlbmQueiAtIHN1YnRyYWhlbmQuejtcbiAgICB9XG4gICAgVmVjdG9yMy5zdWJ0cmFjdFRvUmVmID0gc3VidHJhY3RUb1JlZjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgd2l0aCB0aGUgb3RoZXIgc2lnblxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3Bwb3NpdGUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogLXZhbHVlLngsIHk6IC12YWx1ZS55LCB6OiAtdmFsdWUueiB9O1xuICAgIH1cbiAgICBWZWN0b3IzLm9wcG9zaXRlID0gb3Bwb3NpdGU7XG4gICAgLyoqXG4gICAgICogQ29weSBzb3VyY2UgaW50byBkZXN0XG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgZGVzdCkge1xuICAgICAgICBkZXN0LnggPSBzb3VyY2UueDtcbiAgICAgICAgZGVzdC55ID0gc291cmNlLnk7XG4gICAgICAgIGRlc3QueiA9IHNvdXJjZS56O1xuICAgIH1cbiAgICBWZWN0b3IzLmNvcHkgPSBjb3B5O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyB3aXRoIHRoZSBzYW1lIHZhbHVlXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyB2ZWN0b3JcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZShzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZSk7XG4gICAgfVxuICAgIFZlY3RvcjMuY2xvbmUgPSBjbG9uZTtcbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGVuZ3RoIG9mIHRoZSBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgVmVjdG8zXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVuZ3RoKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHZlY3Rvci54ICogdmVjdG9yLnggKyB2ZWN0b3IueSAqIHZlY3Rvci55ICsgdmVjdG9yLnogKiB2ZWN0b3Iueik7XG4gICAgfVxuICAgIFZlY3RvcjMubGVuZ3RoID0gbGVuZ3RoO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoZSBWZWN0b3IzXG4gICAgICogQHJldHVybnMgc3F1YXJlZCBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsZW5ndGhTcXVhcmVkKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdmVjdG9yLnggKiB2ZWN0b3IueCArIHZlY3Rvci55ICogdmVjdG9yLnkgKyB2ZWN0b3IueiAqIHZlY3Rvci56O1xuICAgIH1cbiAgICBWZWN0b3IzLmxlbmd0aFNxdWFyZWQgPSBsZW5ndGhTcXVhcmVkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIG11bHRpcGxpZWQgYnkgdGhlIGZsb2F0IFwic2NhbGVcIlxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIG11bHRpcGxpZXIgZmFjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNjYWxlVG9SZWYodmVjdG9yLCBzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdmVjdG9yLnggKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LnkgPSB2ZWN0b3IueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiA9IHZlY3Rvci56ICogc2NhbGU7XG4gICAgfVxuICAgIFZlY3RvcjMuc2NhbGVUb1JlZiA9IHNjYWxlVG9SZWY7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgbXVsdGlwbGllZCBieSB0aGUgZmxvYXQgXCJzY2FsZVwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2NhbGUodmVjdG9yLCBzY2FsZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlKHZlY3Rvci54ICogc2NhbGUsIHZlY3Rvci55ICogc2NhbGUsIHZlY3Rvci56ICogc2NhbGUpO1xuICAgIH1cbiAgICBWZWN0b3IzLnNjYWxlID0gc2NhbGU7XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgbGVuZ3RoLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIGxlbiAtIHRoZSBsZW5ndGggb2YgdGhlIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUZyb21MZW5ndGgodmVjdG9yLCBsZW4pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKDAsIDAsIDApO1xuICAgICAgICBub3JtYWxpemVGcm9tTGVuZ3RoVG9SZWYodmVjdG9yLCBsZW4sIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZlY3RvcjMubm9ybWFsaXplRnJvbUxlbmd0aCA9IG5vcm1hbGl6ZUZyb21MZW5ndGg7XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgbGVuZ3RoLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIGxlbiAtIHRoZSBsZW5ndGggb2YgdGhlIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUZyb21MZW5ndGhUb1JlZih2ZWN0b3IsIGxlbiwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChsZW4gPT09IDAgfHwgbGVuID09PSAxLjApIHtcbiAgICAgICAgICAgIGNvcHkodmVjdG9yLCByZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlVG9SZWYodmVjdG9yLCAxLjAgLyBsZW4sIHJlc3VsdCk7XG4gICAgfVxuICAgIFZlY3RvcjMubm9ybWFsaXplRnJvbUxlbmd0aFRvUmVmID0gbm9ybWFsaXplRnJvbUxlbmd0aFRvUmVmO1xuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplRnJvbUxlbmd0aCh2ZWN0b3IsIGxlbmd0aCh2ZWN0b3IpKTtcbiAgICB9XG4gICAgVmVjdG9yMy5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIHRoZSBjdXJyZW50IFZlY3RvcjMuXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGluIHBsYWNlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub3JtYWxpemVUb1JlZih2ZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICBub3JtYWxpemVGcm9tTGVuZ3RoVG9SZWYodmVjdG9yLCBsZW5ndGgodmVjdG9yKSwgcmVzdWx0KTtcbiAgICB9XG4gICAgVmVjdG9yMy5ub3JtYWxpemVUb1JlZiA9IG5vcm1hbGl6ZVRvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRvdCBwcm9kdWN0IChmbG9hdCkgYmV0d2VlbiB0aGUgdmVjdG9ycyBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBsZWZ0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSByaWdodCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGRvdCBwcm9kdWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0Lno7XG4gICAgfVxuICAgIFZlY3RvcjMuZG90ID0gZG90O1xuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgY3VycmVudCBWZWN0b3IzIGJhc2VkIG9uIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLCBidXQgYXBwbGllcyB0aGUgcm90YXRpb24gdG8gdGFyZ2V0IFZlY3RvcjMuXG4gICAgICogQHBhcmFtIHEgLSBkZWZpbmVzIHRoZSBRdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0ZSh2ZWN0b3IsIHEpIHtcbiAgICAgICAgY29uc3QgeyB4LCB5LCB6IH0gPSB2ZWN0b3I7XG4gICAgICAgIGNvbnN0IHsgeDogcXgsIHk6IHF5LCB6OiBxeiwgdzogcXcgfSA9IHE7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG4gICAgICAgIGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICAgICAgICBjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgICAgICAgY29uc3QgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG4gICAgICAgIGNvbnN0IGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcbiAgICAgICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeSxcbiAgICAgICAgICAgIHk6IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXosXG4gICAgICAgICAgICB6OiBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4XG4gICAgICAgIH07XG4gICAgfVxuICAgIFZlY3RvcjMucm90YXRlID0gcm90YXRlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gZGVmaW5lcyB0aGUgZW5kIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIG1heCBkZWZpbmVzIGFtb3VudCBiZXR3ZWVuIGJvdGggKGJldHdlZW4gMCBhbmQgMSlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsZXJwKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoMCwgMCwgMCk7XG4gICAgICAgIGxlcnBUb1JlZihzdGFydCwgZW5kLCBhbW91bnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZlY3RvcjMubGVycCA9IGxlcnA7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBmcm9tIHRoZSB2ZWN0b3IgXCJzdGFydFwiIGZvciBcImFtb3VudFwiIHRvIHRoZSB2ZWN0b3IgXCJlbmRcIlxuICAgICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBtYXggZGVmaW5lcyBhbW91bnQgYmV0d2VlbiBib3RoIChiZXR3ZWVuIDAgYW5kIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxlcnBUb1JlZihzdGFydCwgZW5kLCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHN0YXJ0LnggKyAoZW5kLnggLSBzdGFydC54KSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LnkgPSBzdGFydC55ICsgKGVuZC55IC0gc3RhcnQueSkgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC56ID0gc3RhcnQueiArIChlbmQueiAtIHN0YXJ0LnopICogYW1vdW50O1xuICAgIH1cbiAgICBWZWN0b3IzLmxlcnBUb1JlZiA9IGxlcnBUb1JlZjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHZlY3RvcnMgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIFRoZSBjcm9zcyBwcm9kdWN0IGlzIHRoZW4gb3J0aG9nb25hbCB0byBib3RoIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3Jvc3MgcHJvZHVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyb3NzKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBWZWN0b3IzLmNyb3NzVG9SZWYobGVmdCwgcmlnaHQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFZlY3RvcjMuY3Jvc3MgPSBjcm9zcztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBjcm9zcyBwcm9kdWN0IG9mIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBUaGUgY3Jvc3MgcHJvZHVjdCBpcyB0aGVuIG9ydGhvZ29uYWwgdG8gYm90aCBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBsZWZ0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSByaWdodCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyb3NzVG9SZWYobGVmdCwgcmlnaHQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IGxlZnQueSAqIHJpZ2h0LnogLSBsZWZ0LnogKiByaWdodC55O1xuICAgICAgICByZXN1bHQueSA9IGxlZnQueiAqIHJpZ2h0LnggLSBsZWZ0LnggKiByaWdodC56O1xuICAgICAgICByZXN1bHQueiA9IGxlZnQueCAqIHJpZ2h0LnkgLSBsZWZ0LnkgKiByaWdodC54O1xuICAgIH1cbiAgICBWZWN0b3IzLmNyb3NzVG9SZWYgPSBjcm9zc1RvUmVmO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMC4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgZW1wdHkgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIFplcm8oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMC4wLCAwLjAsIDAuMCk7XG4gICAgfVxuICAgIFZlY3RvcjMuWmVybyA9IFplcm87XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMS4wLCAxLjAsIDEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB1bml0IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBPbmUoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMS4wLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIFZlY3RvcjMuT25lID0gT25lO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG9sZW5ndGhTcXVhcmVkICgwLjAsIDEuMCwgMC4wKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IHVwIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBVcCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDEuMCwgMC4wKTtcbiAgICB9XG4gICAgVmVjdG9yMy5VcCA9IFVwO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgLTEuMCwgMC4wKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IGRvd24gVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIERvd24oKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMC4wLCAtMS4wLCAwLjApO1xuICAgIH1cbiAgICBWZWN0b3IzLkRvd24gPSBEb3duO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMC4wLCAxLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgZm9yd2FyZCBWZWN0b3IzXG4gICAgICovXG4gICAgZnVuY3Rpb24gRm9yd2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCwgMS4wKTtcbiAgICB9XG4gICAgVmVjdG9yMy5Gb3J3YXJkID0gRm9yd2FyZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgwLjAsIDAuMCwgLTEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCYWNrd2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCwgLTEuMCk7XG4gICAgfVxuICAgIFZlY3RvcjMuQmFja3dhcmQgPSBCYWNrd2FyZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgxLjAsIDAuMCwgMC4wKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IHJpZ2h0IFZlY3RvcjNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgxLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgVmVjdG9yMy5SaWdodCA9IFJpZ2h0O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKC0xLjAsIDAuMCwgMC4wKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IGxlZnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIExlZnQoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoLTEuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICBWZWN0b3IzLkxlZnQgPSBMZWZ0O1xufSkoVmVjdG9yMyA9IGV4cG9ydHMuVmVjdG9yMyB8fCAoZXhwb3J0cy5WZWN0b3IzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZlY3RvcjMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNjYWxhciA9IHZvaWQgMDtcbi8qKlxuICogVHdvIHBpIGNvbnN0YW50cyBjb252ZW5pZW50IGZvciBjb21wdXRhdGlvbi5cbiAqL1xuY29uc3QgVHdvUGkgPSBNYXRoLlBJICogMjtcbi8qKlxuICogQm9vbGVhbiA6IHRydWUgaWYgdGhlIGFic29sdXRlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIGFuZCBiIGlzIGxvd2VyIHRoYW4gZXBzaWxvbiAoZGVmYXVsdCA9IDEuNDAxMjk4RS00NSlcbiAqIEBwYXJhbSBhIC0gbnVtYmVyXG4gKiBAcGFyYW0gYiAtIG51bWJlclxuICogQHBhcmFtIGVwc2lsb24gLSAoZGVmYXVsdCA9IDEuNDAxMjk4RS00NSlcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGFic29sdXRlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIGFuZCBiIGlzIGxvd2VyIHRoYW4gZXBzaWxvbiAoZGVmYXVsdCA9IDEuNDAxMjk4RS00NSlcbiAqL1xuZnVuY3Rpb24gd2l0aGluRXBzaWxvbihhLCBiLCBlcHNpbG9uID0gMS40MDEyOThlLTQ1KSB7XG4gICAgY29uc3QgbnVtID0gYSAtIGI7XG4gICAgcmV0dXJuIC1lcHNpbG9uIDw9IG51bSAmJiBudW0gPD0gZXBzaWxvbjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyA6IHRoZSB1cHBlciBjYXNlIHRyYW5zbGF0aW9uIG9mIHRoZSBudW1iZXIgaSB0byBoZXhhZGVjaW1hbC5cbiAqIEBwYXJhbSBpIC0gbnVtYmVyXG4gKiBAcmV0dXJucyB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gKi9cbmZ1bmN0aW9uIHRvSGV4KGkpIHtcbiAgICBjb25zdCBzdHIgPSBpLnRvU3RyaW5nKDE2KTtcbiAgICBpZiAoaSA8PSAxNSkge1xuICAgICAgICByZXR1cm4gKCcwJyArIHN0cikudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpO1xufVxuLyoqXG4gKiBSZXR1cm5zIC0xIGlmIHZhbHVlIGlzIG5lZ2F0aXZlIGFuZCArMSBpcyB2YWx1ZSBpcyBwb3NpdGl2ZS5cbiAqIEBwYXJhbSBfdmFsdWUgLSB0aGUgdmFsdWVcbiAqIEByZXR1cm5zIHRoZSB2YWx1ZSBpdHNlbGYgaWYgaXQncyBlcXVhbCB0byB6ZXJvLlxuICovXG5mdW5jdGlvbiBzaWduKHZhbHVlKSB7XG4gICAgY29uc3QgX3ZhbHVlID0gK3ZhbHVlOyAvLyBjb252ZXJ0IHRvIGEgbnVtYmVyXG4gICAgaWYgKF92YWx1ZSA9PT0gMCB8fCBpc05hTihfdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBfdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBfdmFsdWUgPiAwID8gMSA6IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBpdHNlbGYgaWYgaXQncyBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuICogUmV0dXJucyBtaW4gaWYgdGhlIHZhbHVlIGlzIGxvd2VyIHRoYW4gbWluLlxuICogUmV0dXJucyBtYXggaWYgdGhlIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBtYXguXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2xtYXBcbiAqIEBwYXJhbSBtaW4gLSB0aGUgbWluIHZhbHVlIHRvIGNsYW1wIHRvIChkZWZhdWx0OiAwKVxuICogQHBhcmFtIG1heCAtIHRoZSBtYXggdmFsdWUgdG8gY2xhbXAgdG8gKGRlZmF1bHQ6IDEpXG4gKiBAcmV0dXJucyB0aGUgY2xhbXBlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICAgIHJldHVybiBNYXRoLm1pbihtYXgsIE1hdGgubWF4KG1pbiwgdmFsdWUpKTtcbn1cbi8qKlxuICogdGhlIGxvZzIgb2YgdmFsdWUuXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY29tcHV0ZSBsb2cyIG9mXG4gKiBAcmV0dXJucyB0aGUgbG9nMiBvZiB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbG9nMih2YWx1ZSkge1xuICAgIHJldHVybiBNYXRoLmxvZyh2YWx1ZSkgKiBNYXRoLkxPRzJFO1xufVxuLyoqXG4gKiBMb29wcyB0aGUgdmFsdWUsIHNvIHRoYXQgaXQgaXMgbmV2ZXIgbGFyZ2VyIHRoYW4gbGVuZ3RoIGFuZCBuZXZlciBzbWFsbGVyIHRoYW4gMC5cbiAqXG4gKiBUaGlzIGlzIHNpbWlsYXIgdG8gdGhlIG1vZHVsbyBvcGVyYXRvciBidXQgaXQgd29ya3Mgd2l0aCBmbG9hdGluZyBwb2ludCBudW1iZXJzLlxuICogRm9yIGV4YW1wbGUsIHVzaW5nIDMuMCBmb3IgdCBhbmQgMi41IGZvciBsZW5ndGgsIHRoZSByZXN1bHQgd291bGQgYmUgMC41LlxuICogV2l0aCB0ID0gNSBhbmQgbGVuZ3RoID0gMi41LCB0aGUgcmVzdWx0IHdvdWxkIGJlIDAuMC5cbiAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdGhlIGJlaGF2aW91ciBpcyBub3QgZGVmaW5lZCBmb3IgbmVnYXRpdmUgbnVtYmVycyBhcyBpdCBpcyBmb3IgdGhlIG1vZHVsbyBvcGVyYXRvclxuICogQHBhcmFtIHZhbHVlIC0gdGhlIHZhbHVlXG4gKiBAcGFyYW0gbGVuZ3RoIC0gdGhlIGxlbmd0aFxuICogQHJldHVybnMgdGhlIGxvb3BlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiByZXBlYXQodmFsdWUsIGxlbmd0aCkge1xuICAgIHJldHVybiB2YWx1ZSAtIE1hdGguZmxvb3IodmFsdWUgLyBsZW5ndGgpICogbGVuZ3RoO1xufVxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIHZhbHVlIGJldHdlZW4gMC4wIGFuZCAxLjAgdXNpbmcgbWluIGFuZCBtYXggdmFsdWVzXG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBub3JtYWxpemVcbiAqIEBwYXJhbSBtaW4gLSBtYXggdG8gbm9ybWFsaXplIGJldHdlZW5cbiAqIEBwYXJhbSBtYXggLSBtaW4gdG8gbm9ybWFsaXplIGJldHdlZW5cbiAqIEByZXR1cm5zIHRoZSBub3JtYWxpemVkIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xufVxuLyoqXG4gKiBEZW5vcm1hbGl6ZSB0aGUgdmFsdWUgZnJvbSAwLjAgYW5kIDEuMCB1c2luZyBtaW4gYW5kIG1heCB2YWx1ZXNcbiAqIEBwYXJhbSBub3JtYWxpemVkIC0gdmFsdWUgdG8gZGVub3JtYWxpemVcbiAqIEBwYXJhbSBtaW4gLSBtYXggdG8gZGVub3JtYWxpemUgYmV0d2VlblxuICogQHBhcmFtIG1heCAtIG1pbiB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gKiBAcmV0dXJucyB0aGUgZGVub3JtYWxpemVkIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGRlbm9ybWFsaXplKG5vcm1hbGl6ZWQsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQgKiAobWF4IC0gbWluKSArIG1pbjtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc2hvcnRlc3QgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBnaXZlbiBhbmdsZXMgZ2l2ZW4gaW4gZGVncmVlcy5cbiAqIEBwYXJhbSBjdXJyZW50IC0gY3VycmVudCBhbmdsZSBpbiBkZWdyZWVzXG4gKiBAcGFyYW0gdGFyZ2V0IC0gdGFyZ2V0IGFuZ2xlIGluIGRlZ3JlZXNcbiAqIEByZXR1cm5zIHRoZSBkZWx0YVxuICovXG5mdW5jdGlvbiBkZWx0YUFuZ2xlKGN1cnJlbnQsIHRhcmdldCkge1xuICAgIGxldCBudW0gPSByZXBlYXQodGFyZ2V0IC0gY3VycmVudCwgMzYwLjApO1xuICAgIGlmIChudW0gPiAxODAuMCkge1xuICAgICAgICBudW0gLT0gMzYwLjA7XG4gICAgfVxuICAgIHJldHVybiBudW07XG59XG4vKipcbiAqIFBpbmdQb25ncyB0aGUgdmFsdWUgdCwgc28gdGhhdCBpdCBpcyBuZXZlciBsYXJnZXIgdGhhbiBsZW5ndGggYW5kIG5ldmVyIHNtYWxsZXIgdGhhbiAwLlxuICogQHBhcmFtIHR4IC0gdmFsdWVcbiAqIEBwYXJhbSBsZW5ndGggLSBsZW5ndGhcbiAqIEByZXR1cm5zIFRoZSByZXR1cm5lZCB2YWx1ZSB3aWxsIG1vdmUgYmFjayBhbmQgZm9ydGggYmV0d2VlbiAwIGFuZCBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gcGluZ1BvbmcodHgsIGxlbmd0aCkge1xuICAgIGNvbnN0IHQgPSByZXBlYXQodHgsIGxlbmd0aCAqIDIuMCk7XG4gICAgcmV0dXJuIGxlbmd0aCAtIE1hdGguYWJzKHQgLSBsZW5ndGgpO1xufVxuLyoqXG4gKiBJbnRlcnBvbGF0ZXMgYmV0d2VlbiBtaW4gYW5kIG1heCB3aXRoIHNtb290aGluZyBhdCB0aGUgbGltaXRzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaW50ZXJwb2xhdGVzIGJldHdlZW4gbWluIGFuZCBtYXggaW4gYSBzaW1pbGFyIHdheSB0byBMZXJwLiBIb3dldmVyLCB0aGUgaW50ZXJwb2xhdGlvbiB3aWxsIGdyYWR1YWxseSBzcGVlZCB1cFxuICogZnJvbSB0aGUgc3RhcnQgYW5kIHNsb3cgZG93biB0b3dhcmQgdGhlIGVuZC4gVGhpcyBpcyB1c2VmdWwgZm9yIGNyZWF0aW5nIG5hdHVyYWwtbG9va2luZyBhbmltYXRpb24sIGZhZGluZyBhbmQgb3RoZXIgdHJhbnNpdGlvbnMuXG4gKiBAcGFyYW0gZnJvbSAtIGZyb21cbiAqIEBwYXJhbSB0byAtIHRvXG4gKiBAcGFyYW0gdHggLSB2YWx1ZVxuICogQHJldHVybnMgdGhlIHNtb290aCBzdGVwcGVkIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNtb290aFN0ZXAoZnJvbSwgdG8sIHR4KSB7XG4gICAgbGV0IHQgPSBjbGFtcCh0eCk7XG4gICAgdCA9IC0yLjAgKiB0ICogdCAqIHQgKyAzLjAgKiB0ICogdDtcbiAgICByZXR1cm4gdG8gKiB0ICsgZnJvbSAqICgxLjAgLSB0KTtcbn1cbi8qKlxuICogTW92ZXMgYSB2YWx1ZSBjdXJyZW50IHRvd2FyZHMgdGFyZ2V0LlxuICpcbiAqIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHNhbWUgYXMgTWF0aGYuTGVycCBidXQgaW5zdGVhZCB0aGUgZnVuY3Rpb24gd2lsbCBlbnN1cmUgdGhhdCB0aGUgc3BlZWQgbmV2ZXIgZXhjZWVkcyBtYXhEZWx0YS5cbiAqIE5lZ2F0aXZlIHZhbHVlcyBvZiBtYXhEZWx0YSBwdXNoZXMgdGhlIHZhbHVlIGF3YXkgZnJvbSB0YXJnZXQuXG4gKiBAcGFyYW0gY3VycmVudCAtIGN1cnJlbnQgdmFsdWVcbiAqIEBwYXJhbSB0YXJnZXQgLSB0YXJnZXQgdmFsdWVcbiAqIEBwYXJhbSBtYXhEZWx0YSAtIG1heCBkaXN0YW5jZSB0byBtb3ZlXG4gKiBAcmV0dXJucyByZXN1bHRpbmcgdmFsdWVcbiAqL1xuZnVuY3Rpb24gbW92ZVRvd2FyZHMoY3VycmVudCwgdGFyZ2V0LCBtYXhEZWx0YSkge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGlmIChNYXRoLmFicyh0YXJnZXQgLSBjdXJyZW50KSA8PSBtYXhEZWx0YSkge1xuICAgICAgICByZXN1bHQgPSB0YXJnZXQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjdXJyZW50ICsgc2lnbih0YXJnZXQgLSBjdXJyZW50KSAqIG1heERlbHRhO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBTYW1lIGFzIE1vdmVUb3dhcmRzIGJ1dCBtYWtlcyBzdXJlIHRoZSB2YWx1ZXMgaW50ZXJwb2xhdGUgY29ycmVjdGx5IHdoZW4gdGhleSB3cmFwIGFyb3VuZCAzNjAgZGVncmVlcy5cbiAqXG4gKiBWYXJpYWJsZXMgY3VycmVudCBhbmQgdGFyZ2V0IGFyZSBhc3N1bWVkIHRvIGJlIGluIGRlZ3JlZXMuIEZvciBvcHRpbWl6YXRpb24gcmVhc29ucywgbmVnYXRpdmUgdmFsdWVzIG9mIG1heERlbHRhXG4gKiAgYXJlIG5vdCBzdXBwb3J0ZWQgYW5kIG1heSBjYXVzZSBvc2NpbGxhdGlvbi4gVG8gcHVzaCBjdXJyZW50IGF3YXkgZnJvbSBhIHRhcmdldCBhbmdsZSwgYWRkIDE4MCB0byB0aGF0IGFuZ2xlIGluc3RlYWQuXG4gKiBAcGFyYW0gY3VycmVudCAtIGN1cnJlbnQgdmFsdWVcbiAqIEBwYXJhbSB0YXJnZXQgLSB0YXJnZXQgdmFsdWVcbiAqIEBwYXJhbSBtYXhEZWx0YSAtIG1heCBkaXN0YW5jZSB0byBtb3ZlXG4gKiBAcmV0dXJucyByZXN1bHRpbmcgYW5nbGVcbiAqL1xuZnVuY3Rpb24gbW92ZVRvd2FyZHNBbmdsZShjdXJyZW50LCB0YXJnZXQsIG1heERlbHRhKSB7XG4gICAgY29uc3QgbnVtID0gZGVsdGFBbmdsZShjdXJyZW50LCB0YXJnZXQpO1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGlmICgtbWF4RGVsdGEgPCBudW0gJiYgbnVtIDwgbWF4RGVsdGEpIHtcbiAgICAgICAgcmVzdWx0ID0gdGFyZ2V0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbW92ZVRvd2FyZHMoY3VycmVudCwgY3VycmVudCArIG51bSwgbWF4RGVsdGEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjYWxhciB3aXRoIHZhbHVlcyBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBzdGFydCBzY2FsYXIgYW5kIHRoZSBlbmQgc2NhbGFyXG4gKiBAcGFyYW0gc3RhcnQgLSBzdGFydCB2YWx1ZVxuICogQHBhcmFtIGVuZCAtIHRhcmdldCB2YWx1ZVxuICogQHBhcmFtIGFtb3VudCAtIGFtb3VudCB0byBsZXJwIGJldHdlZW5cbiAqIEByZXR1cm5zIHRoZSBsZXJwZWQgdmFsdWVcbiAqL1xuZnVuY3Rpb24gbGVycChzdGFydCwgZW5kLCBhbW91bnQpIHtcbiAgICByZXR1cm4gc3RhcnQgKyAoZW5kIC0gc3RhcnQpICogYW1vdW50O1xufVxuLyoqXG4gKiBTYW1lIGFzIExlcnAgYnV0IG1ha2VzIHN1cmUgdGhlIHZhbHVlcyBpbnRlcnBvbGF0ZSBjb3JyZWN0bHkgd2hlbiB0aGV5IHdyYXAgYXJvdW5kIDM2MCBkZWdyZWVzLlxuICogVGhlIHBhcmFtZXRlciB0IGlzIGNsYW1wZWQgdG8gdGhlIHJhbmdlIFswLCAxXS4gVmFyaWFibGVzIGEgYW5kIGIgYXJlIGFzc3VtZWQgdG8gYmUgaW4gZGVncmVlcy5cbiAqIEBwYXJhbSBzdGFydCAtIHN0YXJ0IHZhbHVlXG4gKiBAcGFyYW0gZW5kIC0gdGFyZ2V0IHZhbHVlXG4gKiBAcGFyYW0gYW1vdW50IC0gYW1vdW50IHRvIGxlcnAgYmV0d2VlblxuICogQHJldHVybnMgdGhlIGxlcnBlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBsZXJwQW5nbGUoc3RhcnQsIGVuZCwgYW1vdW50KSB7XG4gICAgbGV0IG51bSA9IHJlcGVhdChlbmQgLSBzdGFydCwgMzYwLjApO1xuICAgIGlmIChudW0gPiAxODAuMCkge1xuICAgICAgICBudW0gLT0gMzYwLjA7XG4gICAgfVxuICAgIHJldHVybiBzdGFydCArIG51bSAqIGNsYW1wKGFtb3VudCk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxpbmVhciBwYXJhbWV0ZXIgdCB0aGF0IHByb2R1Y2VzIHRoZSBpbnRlcnBvbGFudCB2YWx1ZSB3aXRoaW4gdGhlIHJhbmdlIFthLCBiXS5cbiAqIEBwYXJhbSBhIC0gc3RhcnQgdmFsdWVcbiAqIEBwYXJhbSBiIC0gdGFyZ2V0IHZhbHVlXG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSBiZXR3ZWVuIGEgYW5kIGJcbiAqIEByZXR1cm5zIHRoZSBpbnZlcnNlTGVycCB2YWx1ZVxuICovXG5mdW5jdGlvbiBpbnZlcnNlTGVycChhLCBiLCB2YWx1ZSkge1xuICAgIGxldCByZXN1bHQgPSAwO1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIHJlc3VsdCA9IGNsYW1wKCh2YWx1ZSAtIGEpIC8gKGIgLSBhKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSAwLjA7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBuZXcgc2NhbGFyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgc2NhbGFycyBcInZhbHVlMVwiLCBcInZhbHVlM1wiLCBcInRhbmdlbnQxXCIsIFwidGFuZ2VudDJcIi5cbiAqIHtAbGluayBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0hlcm1pdGVQb2x5bm9taWFsLmh0bWx9XG4gKiBAcGFyYW0gdmFsdWUxIC0gc3BsaW5lIHZhbHVlXG4gKiBAcGFyYW0gdGFuZ2VudDEgLSBzcGxpbmUgdmFsdWVcbiAqIEBwYXJhbSB2YWx1ZTIgLSBzcGxpbmUgdmFsdWVcbiAqIEBwYXJhbSB0YW5nZW50MiAtIHNwbGluZSB2YWx1ZVxuICogQHBhcmFtIGFtb3VudCAtIGlucHV0IHZhbHVlXG4gKiBAcmV0dXJucyBoZXJtaXRlIHJlc3VsdFxuICovXG5mdW5jdGlvbiBoZXJtaXRlKHZhbHVlMSwgdGFuZ2VudDEsIHZhbHVlMiwgdGFuZ2VudDIsIGFtb3VudCkge1xuICAgIGNvbnN0IHNxdWFyZWQgPSBhbW91bnQgKiBhbW91bnQ7XG4gICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgIGNvbnN0IHBhcnQxID0gMi4wICogY3ViZWQgLSAzLjAgKiBzcXVhcmVkICsgMS4wO1xuICAgIGNvbnN0IHBhcnQyID0gLTIuMCAqIGN1YmVkICsgMy4wICogc3F1YXJlZDtcbiAgICBjb25zdCBwYXJ0MyA9IGN1YmVkIC0gMi4wICogc3F1YXJlZCArIGFtb3VudDtcbiAgICBjb25zdCBwYXJ0NCA9IGN1YmVkIC0gc3F1YXJlZDtcbiAgICByZXR1cm4gdmFsdWUxICogcGFydDEgKyB2YWx1ZTIgKiBwYXJ0MiArIHRhbmdlbnQxICogcGFydDMgKyB0YW5nZW50MiAqIHBhcnQ0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGZsb2F0IG51bWJlciBiZXR3ZWVuIGFuZCBtaW4gYW5kIG1heCB2YWx1ZXNcbiAqIEBwYXJhbSBtaW4gLSBtaW4gdmFsdWUgb2YgcmFuZG9tXG4gKiBAcGFyYW0gbWF4IC0gbWF4IHZhbHVlIG9mIHJhbmRvbVxuICogQHJldHVybnMgcmFuZG9tIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVJhbmdlKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBwZXJjZW50YWdlIG9mIGEgbnVtYmVyIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogUmFuZ2VUb1BlcmNlbnQoNDAsMjAsNjApIHdpbGwgcmV0dXJuIDAuNSAoNTAlKVxuICogUmFuZ2VUb1BlcmNlbnQoMzQsMCwxMDApIHdpbGwgcmV0dXJuIDAuMzQgKDM0JSlcbiAqIEBwYXJhbSBudW0gLSB0byBjb252ZXJ0IHRvIHBlcmNlbnRhZ2VcbiAqIEBwYXJhbSBtaW4gLSBtaW4gcmFuZ2VcbiAqIEBwYXJhbSBtYXggLSBtYXggcmFuZ2VcbiAqIEByZXR1cm5zIHRoZSBwZXJjZW50YWdlXG4gKi9cbmZ1bmN0aW9uIHJhbmdlVG9QZXJjZW50KG51bSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gKG51bSAtIG1pbikgLyAobWF4IC0gbWluKTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIG51bWJlciB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBwZXJjZW50YWdlIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogUGVyY2VudFRvUmFuZ2UoMC4zNCwwLDEwMCkgd2lsbCByZXR1cm4gMzQuXG4gKiBAcGFyYW0gcGVyY2VudCAtIHRvIGNvbnZlcnQgdG8gbnVtYmVyXG4gKiBAcGFyYW0gbWluIC0gbWluIHJhbmdlXG4gKiBAcGFyYW0gbWF4IC0gbWF4IHJhbmdlXG4gKiBAcmV0dXJucyB0aGUgbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIHBlcmNlbnRUb1JhbmdlKHBlcmNlbnQsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIChtYXggLSBtaW4pICogcGVyY2VudCArIG1pbjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYW5nbGUgY29udmVydGVkIHRvIGVxdWl2YWxlbnQgdmFsdWUgYmV0d2VlbiAtTWF0aC5QSSBhbmQgTWF0aC5QSSByYWRpYW5zLlxuICogQHBhcmFtIGFuZ2xlIC0gVGhlIGFuZ2xlIHRvIG5vcm1hbGl6ZSBpbiByYWRpYW4uXG4gKiBAcmV0dXJucyBUaGUgY29udmVydGVkIGFuZ2xlLlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVSYWRpYW5zKGFuZ2xlKSB7XG4gICAgLy8gTW9yZSBwcmVjaXNlIGJ1dCBzbG93ZXIgdmVyc2lvbiBrZXB0IGZvciByZWZlcmVuY2UuXG4gICAgLy8gdHNsaW50OmRpc2FibGU6bm8tY29tbWVudGVkLW91dC1jb2RlXG4gICAgLypcbiAgICAgIC8vIGFuZ2xlID0gYW5nbGUgJSBUb29scy5Ud29QaTtcbiAgICAgIC8vIGFuZ2xlID0gKGFuZ2xlICsgVG9vbHMuVHdvUGkpICUgVG9vbHMuVHdvUGk7XG4gIFxuICAgICAgLy9pZiAoYW5nbGUgPiBNYXRoLlBJKSB7XG4gICAgICAvL1x0YW5nbGUgLT0gVG9vbHMuVHdvUGk7XG4gICAgICAvL31cbiAgICAgICAgKi9cbiAgICByZXR1cm4gYW5nbGUgLSBUd29QaSAqIE1hdGguZmxvb3IoKGFuZ2xlICsgTWF0aC5QSSkgLyBUd29QaSk7XG59XG4vKipcbiAqIFNjYWxhciBjb21wdXRhdGlvbiBsaWJyYXJ5XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuU2NhbGFyID0ge1xuICAgIHdpdGhpbkVwc2lsb24sXG4gICAgdG9IZXgsXG4gICAgc2lnbixcbiAgICBjbGFtcCxcbiAgICBsb2cyLFxuICAgIHJlcGVhdCxcbiAgICBub3JtYWxpemUsXG4gICAgZGVub3JtYWxpemUsXG4gICAgZGVsdGFBbmdsZSxcbiAgICBwaW5nUG9uZyxcbiAgICBzbW9vdGhTdGVwLFxuICAgIG1vdmVUb3dhcmRzLFxuICAgIG1vdmVUb3dhcmRzQW5nbGUsXG4gICAgbGVycCxcbiAgICBsZXJwQW5nbGUsXG4gICAgaW52ZXJzZUxlcnAsXG4gICAgaGVybWl0ZSxcbiAgICByYW5kb21SYW5nZSxcbiAgICByYW5nZVRvUGVyY2VudCxcbiAgICBwZXJjZW50VG9SYW5nZSxcbiAgICBub3JtYWxpemVSYWRpYW5zLFxuICAgIFR3b1BpXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NhbGFyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SQUQyREVHID0gZXhwb3J0cy5ERUcyUkFEID0gZXhwb3J0cy5FcHNpbG9uID0gZXhwb3J0cy5Ub0xpbmVhclNwYWNlID0gZXhwb3J0cy5Ub0dhbW1hU3BhY2UgPSBleHBvcnRzLlNwYWNlID0gZXhwb3J0cy5PcmllbnRhdGlvbiA9IHZvaWQgMDtcbi8qKlxuICogRGVmaW5lcyBwb3RlbnRpYWwgb3JpZW50YXRpb24gZm9yIGJhY2sgZmFjZSBjdWxsaW5nXG4gKiBAcHVibGljXG4gKi9cbnZhciBPcmllbnRhdGlvbjtcbihmdW5jdGlvbiAoT3JpZW50YXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDbG9ja3dpc2VcbiAgICAgKi9cbiAgICBPcmllbnRhdGlvbltPcmllbnRhdGlvbltcIkNXXCJdID0gMF0gPSBcIkNXXCI7XG4gICAgLyoqIENvdW50ZXIgY2xvY2t3aXNlICovXG4gICAgT3JpZW50YXRpb25bT3JpZW50YXRpb25bXCJDQ1dcIl0gPSAxXSA9IFwiQ0NXXCI7XG59KShPcmllbnRhdGlvbiA9IGV4cG9ydHMuT3JpZW50YXRpb24gfHwgKGV4cG9ydHMuT3JpZW50YXRpb24gPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHN1cHBvcnRlZCBzcGFjZXNcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFNwYWNlO1xuKGZ1bmN0aW9uIChTcGFjZSkge1xuICAgIC8qKiBMb2NhbCAob2JqZWN0KSBzcGFjZSAqL1xuICAgIFNwYWNlW1NwYWNlW1wiTE9DQUxcIl0gPSAwXSA9IFwiTE9DQUxcIjtcbiAgICAvKiogV29ybGQgc3BhY2UgKi9cbiAgICBTcGFjZVtTcGFjZVtcIldPUkxEXCJdID0gMV0gPSBcIldPUkxEXCI7XG4gICAgLyoqIEJvbmUgc3BhY2UgKi9cbiAgICBTcGFjZVtTcGFjZVtcIkJPTkVcIl0gPSAyXSA9IFwiQk9ORVwiO1xufSkoU3BhY2UgPSBleHBvcnRzLlNwYWNlIHx8IChleHBvcnRzLlNwYWNlID0ge30pKTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGEgdmFsdWUgdG8gZ2FtbWEgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub0dhbW1hU3BhY2UgPSAxIC8gMi4yO1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGNvbnZlcnQgYSB2YWx1ZSB0byBsaW5lYXIgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub0xpbmVhclNwYWNlID0gMi4yO1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGRlZmluZSB0aGUgbWluaW1hbCBudW1iZXIgdmFsdWUgaW4gQmFieWxvbi5qc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLkVwc2lsb24gPSAwLjAwMDAwMTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gRXVsZXIgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuREVHMlJBRCA9IE1hdGguUEkgLyAxODA7XG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gY29udmVydCBmcm9tIHJhZGlhbnMgdG8gRXVsZXIgZGVncmVlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlJBRDJERUcgPSAzNjAgLyAoTWF0aC5QSSAqIDIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlF1YXRlcm5pb24gPSB2b2lkIDA7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFF1YXRlcm5pb247XG4oZnVuY3Rpb24gKFF1YXRlcm5pb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBmaXJzdCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdClcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdClcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHRoaXJkIGNvbXBvbmVudCAoMCBieSBkZWZhdWx0KVxuICAgICAqIEBwYXJhbSB3IC0gZGVmaW5lcyB0aGUgZm91cnRoIGNvbXBvbmVudCAoMS4wIGJ5IGRlZmF1bHQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKFxuICAgIC8qKiBkZWZpbmVzIHRoZSBmaXJzdCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB4ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgc2Vjb25kIGNvbXBvbmVudCAoMCBieSBkZWZhdWx0KSAqL1xuICAgIHkgPSAwLjAsIFxuICAgIC8qKiBkZWZpbmVzIHRoZSB0aGlyZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB6ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgZm91cnRoIGNvbXBvbmVudCAoMS4wIGJ5IGRlZmF1bHQpICovXG4gICAgdyA9IDEuMCkge1xuICAgICAgICByZXR1cm4geyB4LCB5LCB6LCB3IH07XG4gICAgfVxuICAgIFF1YXRlcm5pb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgUXVhdGVybmlvbiBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHF1YXRlcm5pb25zLlxuICAgICAqIEBwYXJhbSBxMSAtIHRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHEyIC0gdGhlIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkKHExLCBxMikge1xuICAgICAgICByZXR1cm4geyB4OiBxMS54ICsgcTIueCwgeTogcTEueSArIHEyLnksIHo6IHExLnogKyBxMi56LCB3OiBxMS53ICsgcTIudyB9O1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLmFkZCA9IGFkZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIGZyb20gdGhlIGdpdmVuIEV1bGVyIGZsb2F0IGFuZ2xlcyAoeSwgeCwgeikgYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0geWF3IC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFkgYXhpc1xuICAgICAqIEBwYXJhbSBwaXRjaCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBYIGF4aXNcbiAgICAgKiBAcGFyYW0gcm9sbCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBaIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGlvbllhd1BpdGNoUm9sbCh5YXcsIHBpdGNoLCByb2xsKSB7XG4gICAgICAgIC8vIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgICAgY29uc3QgaGFsZlBpdGNoID0gcGl0Y2ggKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZZYXcgPSB5YXcgKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZSb2xsID0gcm9sbCAqIDAuNTtcbiAgICAgICAgY29uc3QgYzEgPSBNYXRoLmNvcyhoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBjMiA9IE1hdGguY29zKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBjMyA9IE1hdGguY29zKGhhbGZSb2xsKTtcbiAgICAgICAgY29uc3QgczEgPSBNYXRoLnNpbihoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBzMiA9IE1hdGguc2luKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBzMyA9IE1hdGguc2luKGhhbGZSb2xsKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZShjMiAqIHMxICogYzMgKyBzMiAqIGMxICogczMsIHMyICogYzEgKiBjMyAtIGMyICogczEgKiBzMywgYzIgKiBjMSAqIHMzIC0gczIgKiBzMSAqIGMzLCBjMiAqIGMxICogYzMgKyBzMiAqIHMxICogczMpO1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLnJvdGF0aW9uWWF3UGl0Y2hSb2xsID0gcm90YXRpb25ZYXdQaXRjaFJvbGw7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJvdGF0aW9uIHRoYXQgcm90YXRlcyB6IGRlZ3JlZXMgYXJvdW5kIHRoZSB6IGF4aXMsIHggZGVncmVlcyBhcm91bmQgdGhlIHggYXhpcywgYW5kIHkgZGVncmVlcyBhcm91bmQgdGhlIHkgYXhpcy5cbiAgICAgKiBAcGFyYW0geCAtIHRoZSByb3RhdGlvbiBvbiB0aGUgeCBheGlzIGluIGV1bGVyIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0geSAtIHRoZSByb3RhdGlvbiBvbiB0aGUgeSBheGlzIGluIGV1bGVyIGRlZ3JlZXNcbiAgICAgKiBAcGFyYW0geiAtIHRoZSByb3RhdGlvbiBvbiB0aGUgeiBheGlzIGluIGV1bGVyIGRlZ3JlZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldWxlcih4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiByb3RhdGlvbllhd1BpdGNoUm9sbCh5ICogdHlwZXNfMS5ERUcyUkFELCB4ICogdHlwZXNfMS5ERUcyUkFELCB6ICogdHlwZXNfMS5ERUcyUkFEKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5ldWxlciA9IGV1bGVyO1xuICAgIC8qKlxuICAgICAqIEdldHMgbGVuZ3RoIG9mIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBxdWF0ZXJuaW9uIGxlbmd0aCAoZmxvYXQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVuZ3RoKHEpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChsZW5ndGhTcXVhcmVkKHEpKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5sZW5ndGggPSBsZW5ndGg7XG4gICAgLyoqXG4gICAgICogR2V0cyBsZW5ndGggb2YgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIHF1YXRlcm5pb24gbGVuZ3RoIChmbG9hdClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsZW5ndGhTcXVhcmVkKHEpIHtcbiAgICAgICAgcmV0dXJuIHEueCAqIHEueCArIHEueSAqIHEueSArIHEueiAqIHEueiArIHEudyAqIHEudztcbiAgICB9XG4gICAgUXVhdGVybmlvbi5sZW5ndGhTcXVhcmVkID0gbGVuZ3RoU3F1YXJlZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCAoZmxvYXQpIGJldHdlZW4gdGhlIHF1YXRlcm5pb25zIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZG90IHByb2R1Y3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb3QobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIChsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0LnogKyBsZWZ0LncgKiByaWdodC53KTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5kb3QgPSBkb3Q7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYW5nbGUgaW4gZGVncmVlcyBiZXR3ZWVuIHR3byByb3RhdGlvbnMgYSBhbmQgYi5cbiAgICAgKiBAcGFyYW0gcXVhdDEgLSBkZWZpbmVzIHRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHF1YXQyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbmdsZShxdWF0MSwgcXVhdDIpIHtcbiAgICAgICAgY29uc3QgZG90VmFsID0gZG90KHF1YXQxLCBxdWF0Mik7XG4gICAgICAgIHJldHVybiBNYXRoLmFjb3MoTWF0aC5taW4oTWF0aC5hYnMoZG90VmFsKSwgMSkpICogMiAqIHR5cGVzXzEuUkFEMkRFRztcbiAgICB9XG4gICAgUXVhdGVybmlvbi5hbmdsZSA9IGFuZ2xlO1xuICAgIC8qKlxuICAgICAqIFRoZSBmcm9tIHF1YXRlcm5pb24gaXMgcm90YXRlZCB0b3dhcmRzIHRvIGJ5IGFuIGFuZ3VsYXIgc3RlcCBvZiBtYXhEZWdyZWVzRGVsdGEuXG4gICAgICogQHBhcmFtIGZyb20gLSBkZWZpbmVzIHRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRvIC0gZGVmaW5lcyB0aGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gbWF4RGVncmVlc0RlbHRhIC0gdGhlIGludGVydmFsIHN0ZXBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3RhdGVUb3dhcmRzKGZyb20sIHRvLCBtYXhEZWdyZWVzRGVsdGEpIHtcbiAgICAgICAgY29uc3QgbnVtID0gYW5nbGUoZnJvbSwgdG8pO1xuICAgICAgICBpZiAobnVtID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdCA9IE1hdGgubWluKDEsIG1heERlZ3JlZXNEZWx0YSAvIG51bSk7XG4gICAgICAgIHJldHVybiBzbGVycChmcm9tLCB0bywgdCk7XG4gICAgfVxuICAgIFF1YXRlcm5pb24ucm90YXRlVG93YXJkcyA9IHJvdGF0ZVRvd2FyZHM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBmb3J3YXJkIGFuZCB1cHdhcmRzIGRpcmVjdGlvbnMuXG4gICAgICogQHBhcmFtIGZvcndhcmQgLSB0aGUgZGlyZWN0aW9uIHRvIGxvb2sgaW5cbiAgICAgKiBAcGFyYW0gdXAgLSB0aGUgdmVjdG9yIHRoYXQgZGVmaW5lcyBpbiB3aGljaCBkaXJlY3Rpb24gdXAgaXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb29rUm90YXRpb24oZm9yd2FyZCwgdXAgPSB7IHg6IDAuMCwgeTogMS4wLCB6OiAwLjAgfSkge1xuICAgICAgICBjb25zdCBmb3J3YXJkTmV3ID0gVmVjdG9yM18xLlZlY3RvcjMubm9ybWFsaXplKGZvcndhcmQpO1xuICAgICAgICBjb25zdCByaWdodCA9IFZlY3RvcjNfMS5WZWN0b3IzLm5vcm1hbGl6ZShWZWN0b3IzXzEuVmVjdG9yMy5jcm9zcyh1cCwgZm9yd2FyZE5ldykpO1xuICAgICAgICBjb25zdCB1cE5ldyA9IFZlY3RvcjNfMS5WZWN0b3IzLmNyb3NzKGZvcndhcmROZXcsIHJpZ2h0KTtcbiAgICAgICAgY29uc3QgbTAwID0gcmlnaHQueDtcbiAgICAgICAgY29uc3QgbTAxID0gcmlnaHQueTtcbiAgICAgICAgY29uc3QgbTAyID0gcmlnaHQuejtcbiAgICAgICAgY29uc3QgbTEwID0gdXBOZXcueDtcbiAgICAgICAgY29uc3QgbTExID0gdXBOZXcueTtcbiAgICAgICAgY29uc3QgbTEyID0gdXBOZXcuejtcbiAgICAgICAgY29uc3QgbTIwID0gZm9yd2FyZE5ldy54O1xuICAgICAgICBjb25zdCBtMjEgPSBmb3J3YXJkTmV3Lnk7XG4gICAgICAgIGNvbnN0IG0yMiA9IGZvcndhcmROZXcuejtcbiAgICAgICAgY29uc3QgbnVtOCA9IG0wMCArIG0xMSArIG0yMjtcbiAgICAgICAgY29uc3QgcXVhdGVybmlvbiA9IGNyZWF0ZSgpO1xuICAgICAgICBpZiAobnVtOCA+IDApIHtcbiAgICAgICAgICAgIGxldCBudW0gPSBNYXRoLnNxcnQobnVtOCArIDEpO1xuICAgICAgICAgICAgcXVhdGVybmlvbi53ID0gbnVtICogMC41O1xuICAgICAgICAgICAgbnVtID0gMC41IC8gbnVtO1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gKG0xMiAtIG0yMSkgKiBudW07XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIwIC0gbTAyKSAqIG51bTtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDEgLSBtMTApICogbnVtO1xuICAgICAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0wMCA+PSBtMTEgJiYgbTAwID49IG0yMikge1xuICAgICAgICAgICAgY29uc3QgbnVtNyA9IE1hdGguc3FydCgxICsgbTAwIC0gbTExIC0gbTIyKTtcbiAgICAgICAgICAgIGNvbnN0IG51bTQgPSAwLjUgLyBudW03O1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gMC41ICogbnVtNztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IChtMDEgKyBtMTApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDIgKyBtMjApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24udyA9IChtMTIgLSBtMjEpICogbnVtNDtcbiAgICAgICAgICAgIHJldHVybiBxdWF0ZXJuaW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtMTEgPiBtMjIpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTYgPSBNYXRoLnNxcnQoMSArIG0xMSAtIG0wMCAtIG0yMik7XG4gICAgICAgICAgICBjb25zdCBudW0zID0gMC41IC8gbnVtNjtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueCA9IChtMTAgKyBtMDEpICogbnVtMztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IDAuNSAqIG51bTY7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnogPSAobTIxICsgbTEyKSAqIG51bTM7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLncgPSAobTIwIC0gbTAyKSAqIG51bTM7XG4gICAgICAgICAgICByZXR1cm4gcXVhdGVybmlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW01ID0gTWF0aC5zcXJ0KDEgKyBtMjIgLSBtMDAgLSBtMTEpO1xuICAgICAgICBjb25zdCBudW0yID0gMC41IC8gbnVtNTtcbiAgICAgICAgcXVhdGVybmlvbi54ID0gKG0yMCArIG0wMikgKiBudW0yO1xuICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIxICsgbTEyKSAqIG51bTI7XG4gICAgICAgIHF1YXRlcm5pb24ueiA9IDAuNSAqIG51bTU7XG4gICAgICAgIHF1YXRlcm5pb24udyA9IChtMDEgLSBtMTApICogbnVtMjtcbiAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgfVxuICAgIFF1YXRlcm5pb24ubG9va1JvdGF0aW9uID0gbG9va1JvdGF0aW9uO1xuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSBpbiBwbGFjZSB0aGUgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplKHEpIHtcbiAgICAgICAgY29uc3QgcUxlbmd0aCA9IDEuMCAvIGxlbmd0aChxKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZShxLnggKiBxTGVuZ3RoLCBxLnkgKiBxTGVuZ3RoLCBxLnogKiBxTGVuZ3RoLCBxLncgKiBxTGVuZ3RoKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdoaWNoIHJvdGF0ZXMgZnJvbSBmcm9tRGlyZWN0aW9uIHRvIHRvRGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgZGlyZWN0aW9uIFZlY3RvclxuICAgICAqIEBwYXJhbSB0byAtIGRlZmluZXMgdGhlIHRhcmdldCBkaXJlY3Rpb24gVmVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVRvUm90YXRpb24oZnJvbSwgdG8sIHVwID0gVmVjdG9yM18xLlZlY3RvcjMuVXAoKSkge1xuICAgICAgICAvLyBVbml0eS1iYXNlZCBjYWxjdWxhdGlvbnMgaW1wbGVtZW50ZWQgZnJvbSBodHRwczovL2ZvcnVtLnVuaXR5LmNvbS90aHJlYWRzL3F1YXRlcm5pb24tbG9va3JvdGF0aW9uLWFyb3VuZC1hbi1heGlzLjYwODQ3MC8jcG9zdC00MDY5ODg4XG4gICAgICAgIGNvbnN0IHYwID0gVmVjdG9yM18xLlZlY3RvcjMubm9ybWFsaXplKGZyb20pO1xuICAgICAgICBjb25zdCB2MSA9IFZlY3RvcjNfMS5WZWN0b3IzLm5vcm1hbGl6ZSh0byk7XG4gICAgICAgIGNvbnN0IGEgPSBWZWN0b3IzXzEuVmVjdG9yMy5jcm9zcyh2MCwgdjEpO1xuICAgICAgICBjb25zdCB3ID0gTWF0aC5zcXJ0KFZlY3RvcjNfMS5WZWN0b3IzLmxlbmd0aFNxdWFyZWQodjApICogVmVjdG9yM18xLlZlY3RvcjMubGVuZ3RoU3F1YXJlZCh2MSkpICtcbiAgICAgICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLmRvdCh2MCwgdjEpO1xuICAgICAgICBpZiAoVmVjdG9yM18xLlZlY3RvcjMubGVuZ3RoU3F1YXJlZChhKSA8IDAuMDAwMSkge1xuICAgICAgICAgICAgLy8gdGhlIHZlY3RvcnMgYXJlIHBhcmFsbGVsLCBjaGVjayB3IHRvIGZpbmQgZGlyZWN0aW9uXG4gICAgICAgICAgICAvLyBpZiB3IGlzIDAgdGhlbiB2YWx1ZXMgYXJlIG9wcG9zaXRlLCBhbmQgd2Ugc291bGQgcm90YXRlIDE4MCBkZWdyZWVzIGFyb3VuZCB0aGUgc3VwcGxpZWQgYXhpc1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSB2ZWN0b3JzIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhbmQgbm8gcm90YXRpb24gc2hvdWxkIG9jY3VyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnModykgPCAwLjAwMDFcbiAgICAgICAgICAgICAgICA/IG5vcm1hbGl6ZShjcmVhdGUodXAueCwgdXAueSwgdXAueiwgMCkpXG4gICAgICAgICAgICAgICAgOiBJZGVudGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZShjcmVhdGUoYS54LCBhLnksIGEueiwgdykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFF1YXRlcm5pb24uZnJvbVRvUm90YXRpb24gPSBmcm9tVG9Sb3RhdGlvbjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGlkZW50aXR5IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyAtIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gSWRlbnRpdHkoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGUoMC4wLCAwLjAsIDAuMCwgMS4wKTtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5JZGVudGl0eSA9IElkZW50aXR5O1xuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZXVsZXIgYW5nbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJvdGF0aW9uLlxuICAgICAqIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldWxlckFuZ2xlcyhxKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFZlY3RvcjNfMS5WZWN0b3IzLmNyZWF0ZSgpO1xuICAgICAgICAvLyBpZiB0aGUgaW5wdXQgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGlzIGV4YWN0bHkgb25lLiBPdGhlcndpc2UsIHRoaXMgYWN0cyBhcyBhIGNvcnJlY3Rpb24gZmFjdG9yIGZvciB0aGUgcXVhdGVybmlvbidzIG5vdC1ub3JtYWxpemVkbmVzc1xuICAgICAgICBjb25zdCB1bml0ID0gcS54ICogcS54ICsgcS55ICogcS55ICsgcS56ICogcS56ICsgcS53ICogcS53O1xuICAgICAgICAvLyBxIHdpbGwgaGF2ZSBhIG1hZ25pdHVkZSBvZiAwLjUgb3IgZ3JlYXRlciBpZiBhbmQgb25seSBpZiBxIGlzIGEgc2luZ3VsYXJpdHkgY2FzZVxuICAgICAgICBjb25zdCB0ZXN0ID0gcS54ICogcS53IC0gcS55ICogcS56O1xuICAgICAgICBpZiAodGVzdCA+IDAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IG5vcnRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICBvdXQueSA9IDIgKiBNYXRoLmF0YW4yKHEueSwgcS54KTtcbiAgICAgICAgICAgIG91dC56ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ZXN0IDwgLTAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IHNvdXRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgICAgb3V0LnkgPSAtMiAqIE1hdGguYXRhbjIocS55LCBxLngpO1xuICAgICAgICAgICAgb3V0LnogPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gc2luZ3VsYXJpdHkgLSBxIGlzIHRoZSBtYWpvcml0eSBvZiBjYXNlc1xuICAgICAgICAgICAgb3V0LnggPSBNYXRoLmFzaW4oMiAqIChxLncgKiBxLnggLSBxLnkgKiBxLnopKTtcbiAgICAgICAgICAgIG91dC55ID0gTWF0aC5hdGFuMigyICogcS53ICogcS55ICsgMiAqIHEueiAqIHEueCwgMSAtIDIgKiAocS54ICogcS54ICsgcS55ICogcS55KSk7XG4gICAgICAgICAgICBvdXQueiA9IE1hdGguYXRhbjIoMiAqIHEudyAqIHEueiArIDIgKiBxLnggKiBxLnksIDEgLSAyICogKHEueiAqIHEueiArIHEueCAqIHEueCkpO1xuICAgICAgICB9XG4gICAgICAgIG91dC54ICo9IHR5cGVzXzEuUkFEMkRFRztcbiAgICAgICAgb3V0LnkgKj0gdHlwZXNfMS5SQUQyREVHO1xuICAgICAgICBvdXQueiAqPSB0eXBlc18xLlJBRDJERUc7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgZGVncmVlIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAzNjBcbiAgICAgICAgb3V0LnggPSBTY2FsYXJfMS5TY2FsYXIucmVwZWF0KG91dC54LCAzNjApO1xuICAgICAgICBvdXQueSA9IFNjYWxhcl8xLlNjYWxhci5yZXBlYXQob3V0LnksIDM2MCk7XG4gICAgICAgIG91dC56ID0gU2NhbGFyXzEuU2NhbGFyLnJlcGVhdChvdXQueiwgMzYwKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5ldWxlckFuZ2xlcyA9IGV1bGVyQW5nbGVzO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gZnJvbSB0aGUgZ2l2ZW4gRXVsZXIgZmxvYXQgYW5nbGVzICh5LCB4LCB6KSBhbmQgc3RvcmVzIGl0IGluIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSB5YXcgLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgWSBheGlzXG4gICAgICogQHBhcmFtIHBpdGNoIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFggYXhpc1xuICAgICAqIEBwYXJhbSByb2xsIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFogYXhpc1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcmVzdWx0KSB7XG4gICAgICAgIC8vIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgICAgY29uc3QgaGFsZlBpdGNoID0gcGl0Y2ggKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZZYXcgPSB5YXcgKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZSb2xsID0gcm9sbCAqIDAuNTtcbiAgICAgICAgY29uc3QgYzEgPSBNYXRoLmNvcyhoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBjMiA9IE1hdGguY29zKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBjMyA9IE1hdGguY29zKGhhbGZSb2xsKTtcbiAgICAgICAgY29uc3QgczEgPSBNYXRoLnNpbihoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBzMiA9IE1hdGguc2luKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBzMyA9IE1hdGguc2luKGhhbGZSb2xsKTtcbiAgICAgICAgcmVzdWx0LnggPSBjMiAqIHMxICogYzMgKyBzMiAqIGMxICogczM7XG4gICAgICAgIHJlc3VsdC55ID0gczIgKiBjMSAqIGMzIC0gYzIgKiBzMSAqIHMzO1xuICAgICAgICByZXN1bHQueiA9IGMyICogYzEgKiBzMyAtIHMyICogczEgKiBjMztcbiAgICAgICAgcmVzdWx0LncgPSBjMiAqIGMxICogYzMgKyBzMiAqIHMxICogczM7XG4gICAgfVxuICAgIFF1YXRlcm5pb24ucm90YXRpb25ZYXdQaXRjaFJvbGxUb1JlZiA9IHJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWY7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ2l2ZW4gcXVhdGVybmlvbiB3aXRoIHRoZSBnaXZlbiByb3RhdGlvbiBtYXRyaXggdmFsdWVzXG4gICAgICogQHBhcmFtIG1hdHJpeCAtIGRlZmluZXMgdGhlIHNvdXJjZSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUm90YXRpb25NYXRyaXhUb1JlZihtYXRyaXgsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBkYXRhID0gbWF0cml4Ll9tO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0xMSA9IGRhdGFbMF0sIG0xMiA9IGRhdGFbNF0sIG0xMyA9IGRhdGFbOF07XG4gICAgICAgIGNvbnN0IG0yMSA9IGRhdGFbMV0sIG0yMiA9IGRhdGFbNV0sIG0yMyA9IGRhdGFbOV07XG4gICAgICAgIGNvbnN0IG0zMSA9IGRhdGFbMl0sIG0zMiA9IGRhdGFbNl0sIG0zMyA9IGRhdGFbMTBdO1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzM7XG4gICAgICAgIGxldCBzO1xuICAgICAgICBpZiAodHJhY2UgPiAwKSB7XG4gICAgICAgICAgICBzID0gMC41IC8gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKTtcbiAgICAgICAgICAgIHJlc3VsdC53ID0gMC4yNSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueCA9IChtMzIgLSBtMjMpICogcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0xMyAtIG0zMSkgKiBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAobTIxIC0gbTEyKSAqIHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobTExID4gbTIyICYmIG0xMSA+IG0zMykge1xuICAgICAgICAgICAgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMTEgLSBtMjIgLSBtMzMpO1xuICAgICAgICAgICAgcmVzdWx0LncgPSAobTMyIC0gbTIzKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueCA9IDAuMjUgKiBzO1xuICAgICAgICAgICAgcmVzdWx0LnkgPSAobTEyICsgbTIxKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueiA9IChtMTMgKyBtMzEpIC8gcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtMjIgPiBtMzMpIHtcbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTIyIC0gbTExIC0gbTMzKTtcbiAgICAgICAgICAgIHJlc3VsdC53ID0gKG0xMyAtIG0zMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAobTEyICsgbTIxKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueSA9IDAuMjUgKiBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAobTIzICsgbTMyKSAvIHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0zMyAtIG0xMSAtIG0yMik7XG4gICAgICAgICAgICByZXN1bHQudyA9IChtMjEgLSBtMTIpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC54ID0gKG0xMyArIG0zMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnkgPSAobTIzICsgbTMyKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueiA9IDAuMjUgKiBzO1xuICAgICAgICB9XG4gICAgfVxuICAgIFF1YXRlcm5pb24uZnJvbVJvdGF0aW9uTWF0cml4VG9SZWYgPSBmcm9tUm90YXRpb25NYXRyaXhUb1JlZjtcbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZXMgYmV0d2VlbiB0d28gcXVhdGVybmlvbnNcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgc2Vjb25kIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgdG8gdXNlXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBpbnRlcnBvbGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsZXJwKGxlZnQsIHJpZ2h0LCBhbW91bnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUXVhdGVybmlvbi5JZGVudGl0eSgpO1xuICAgICAgICBRdWF0ZXJuaW9uLnNsZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgUXVhdGVybmlvbi5zbGVycCA9IHNsZXJwO1xuICAgIC8qKlxuICAgICAqIEludGVycG9sYXRlcyBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9ucyBhbmQgc3RvcmVzIGl0IGludG8gYSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyBzZWNvbmQgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGVycFRvUmVmKGxlZnQsIHJpZ2h0LCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICBsZXQgbnVtMjtcbiAgICAgICAgbGV0IG51bTM7XG4gICAgICAgIGxldCBudW00ID0gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudztcbiAgICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgICAgICAgaWYgKG51bTQgPCAwKSB7XG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIG51bTQgPSAtbnVtNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtNCA+IDAuOTk5OTk5KSB7XG4gICAgICAgICAgICBudW0zID0gMSAtIGFtb3VudDtcbiAgICAgICAgICAgIG51bTIgPSBmbGFnID8gLWFtb3VudCA6IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTUgPSBNYXRoLmFjb3MobnVtNCk7XG4gICAgICAgICAgICBjb25zdCBudW02ID0gMS4wIC8gTWF0aC5zaW4obnVtNSk7XG4gICAgICAgICAgICBudW0zID0gTWF0aC5zaW4oKDEuMCAtIGFtb3VudCkgKiBudW01KSAqIG51bTY7XG4gICAgICAgICAgICBudW0yID0gZmxhZ1xuICAgICAgICAgICAgICAgID8gLU1hdGguc2luKGFtb3VudCAqIG51bTUpICogbnVtNlxuICAgICAgICAgICAgICAgIDogTWF0aC5zaW4oYW1vdW50ICogbnVtNSkgKiBudW02O1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC54ID0gbnVtMyAqIGxlZnQueCArIG51bTIgKiByaWdodC54O1xuICAgICAgICByZXN1bHQueSA9IG51bTMgKiBsZWZ0LnkgKyBudW0yICogcmlnaHQueTtcbiAgICAgICAgcmVzdWx0LnogPSBudW0zICogbGVmdC56ICsgbnVtMiAqIHJpZ2h0Lno7XG4gICAgICAgIHJlc3VsdC53ID0gbnVtMyAqIGxlZnQudyArIG51bTIgKiByaWdodC53O1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLnNsZXJwVG9SZWYgPSBzbGVycFRvUmVmO1xuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdHdvIHF1YXRlcm5pb25zXG4gICAgICogQHBhcmFtIHNlbGYgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHExIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIHNldCBhcyB0aGUgbXVsdGlwbGljYXRpb24gcmVzdWx0IG9mIHRoZSBzZWxmIG9uZSB3aXRoIHRoZSBnaXZlbiBvbmUgXCJxMVwiXG4gICAgICovXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkoc2VsZiwgcTEpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKDAsIDAsIDAsIDEuMCk7XG4gICAgICAgIG11bHRpcGx5VG9SZWYoc2VsZiwgcTEsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFF1YXRlcm5pb24ubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBcInJlc3VsdFwiIGFzIHRoZSB0aGUgbXVsdGlwbGljYXRpb24gcmVzdWx0IG9mIHRoZSBzZWxmIG9uZSB3aXRoIHRoZSBnaXZlbiBvbmUgXCJxMVwiXG4gICAgICogQHBhcmFtIHNlbGYgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHExIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbXVsdGlwbHlUb1JlZihzZWxmLCBxMSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gc2VsZi54ICogcTEudyArIHNlbGYueSAqIHExLnogLSBzZWxmLnogKiBxMS55ICsgc2VsZi53ICogcTEueDtcbiAgICAgICAgcmVzdWx0LnkgPSAtc2VsZi54ICogcTEueiArIHNlbGYueSAqIHExLncgKyBzZWxmLnogKiBxMS54ICsgc2VsZi53ICogcTEueTtcbiAgICAgICAgcmVzdWx0LnogPSBzZWxmLnggKiBxMS55IC0gc2VsZi55ICogcTEueCArIHNlbGYueiAqIHExLncgKyBzZWxmLncgKiBxMS56O1xuICAgICAgICByZXN1bHQudyA9IC1zZWxmLnggKiBxMS54IC0gc2VsZi55ICogcTEueSAtIHNlbGYueiAqIHExLnogKyBzZWxmLncgKiBxMS53O1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLm11bHRpcGx5VG9SZWYgPSBtdWx0aXBseVRvUmVmO1xuICAgIGZ1bmN0aW9uIGFuZ2xlQXhpcyhkZWdyZXNzLCBheGlzKSB7XG4gICAgICAgIGlmIChWZWN0b3IzXzEuVmVjdG9yMy5sZW5ndGhTcXVhcmVkKGF4aXMpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUXVhdGVybmlvbi5JZGVudGl0eSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IElkZW50aXR5KCk7XG4gICAgICAgIGxldCByYWRpYW5zID0gZGVncmVzcyAqIHR5cGVzXzEuREVHMlJBRDtcbiAgICAgICAgcmFkaWFucyAqPSAwLjU7XG4gICAgICAgIGNvbnN0IGEyID0gVmVjdG9yM18xLlZlY3RvcjMubm9ybWFsaXplKGF4aXMpO1xuICAgICAgICBWZWN0b3IzXzEuVmVjdG9yMy5zY2FsZVRvUmVmKGEyLCBNYXRoLnNpbihyYWRpYW5zKSwgYTIpO1xuICAgICAgICByZXN1bHQueCA9IGEyLng7XG4gICAgICAgIHJlc3VsdC55ID0gYTIueTtcbiAgICAgICAgcmVzdWx0LnogPSBhMi56O1xuICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKHJhZGlhbnMpO1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplKHJlc3VsdCk7XG4gICAgfVxuICAgIFF1YXRlcm5pb24uYW5nbGVBeGlzID0gYW5nbGVBeGlzO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB6ZXJvIGZpbGxlZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gWmVybygpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZSgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICBRdWF0ZXJuaW9uLlplcm8gPSBaZXJvO1xufSkoUXVhdGVybmlvbiA9IGV4cG9ydHMuUXVhdGVybmlvbiB8fCAoZXhwb3J0cy5RdWF0ZXJuaW9uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1YXRlcm5pb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9RdWF0ZXJuaW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9WZWN0b3IzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW5kZXhcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gYXNQcm9taXNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuYXNQcm9taXNlfS5cclxuICogQHR5cGVkZWYgYXNQcm9taXNlQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnlcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgQWRkaXRpb25hbCBhcmd1bWVudHNcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHByb21pc2UgZnJvbSBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7YXNQcm9taXNlQ2FsbGJhY2t9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcclxuICogQHBhcmFtIHsqfSBjdHggRnVuY3Rpb24gY29udGV4dFxyXG4gKiBAcGFyYW0gey4uLip9IHBhcmFtcyBGdW5jdGlvbiBhcmd1bWVudHNcclxuICogQHJldHVybnMge1Byb21pc2U8Kj59IFByb21pc2lmaWVkIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBhc1Byb21pc2UoZm4sIGN0eC8qLCB2YXJhcmdzICovKSB7XHJcbiAgICB2YXIgcGFyYW1zICA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgb2Zmc2V0ICA9IDAsXHJcbiAgICAgICAgaW5kZXggICA9IDIsXHJcbiAgICAgICAgcGVuZGluZyA9IHRydWU7XHJcbiAgICB3aGlsZSAoaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoKVxyXG4gICAgICAgIHBhcmFtc1tvZmZzZXQrK10gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgcGFyYW1zW29mZnNldF0gPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIvKiwgdmFyYXJncyAqLykge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBwYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW29mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgcGFyYW1zKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIGJhc2U2NCBpbXBsZW1lbnRhdGlvbiBmb3IgbnVtYmVyIGFycmF5cy5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIGJhc2U2NCA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYnl0ZSBsZW5ndGggb2YgYSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQmFzZTY0IGVuY29kZWQgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEJ5dGUgbGVuZ3RoXHJcbiAqL1xyXG5iYXNlNjQubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKHN0cmluZykge1xyXG4gICAgdmFyIHAgPSBzdHJpbmcubGVuZ3RoO1xyXG4gICAgaWYgKCFwKVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgdmFyIG4gPSAwO1xyXG4gICAgd2hpbGUgKC0tcCAlIDQgPiAxICYmIHN0cmluZy5jaGFyQXQocCkgPT09IFwiPVwiKVxyXG4gICAgICAgICsrbjtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoc3RyaW5nLmxlbmd0aCAqIDMpIC8gNCAtIG47XHJcbn07XHJcblxyXG4vLyBCYXNlNjQgZW5jb2RpbmcgdGFibGVcclxudmFyIGI2NCA9IG5ldyBBcnJheSg2NCk7XHJcblxyXG4vLyBCYXNlNjQgZGVjb2RpbmcgdGFibGVcclxudmFyIHM2NCA9IG5ldyBBcnJheSgxMjMpO1xyXG5cclxuLy8gNjUuLjkwLCA5Ny4uMTIyLCA0OC4uNTcsIDQzLCA0N1xyXG5mb3IgKHZhciBpID0gMDsgaSA8IDY0OylcclxuICAgIHM2NFtiNjRbaV0gPSBpIDwgMjYgPyBpICsgNjUgOiBpIDwgNTIgPyBpICsgNzEgOiBpIDwgNjIgPyBpIC0gNCA6IGkgLSA1OSB8IDQzXSA9IGkrKztcclxuXHJcbi8qKlxyXG4gKiBFbmNvZGVzIGEgYnVmZmVyIHRvIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTb3VyY2Ugc3RhcnRcclxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBTb3VyY2UgZW5kXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuYmFzZTY0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShidWZmZXIsIHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBwYXJ0cyA9IG51bGwsXHJcbiAgICAgICAgY2h1bmsgPSBbXTtcclxuICAgIHZhciBpID0gMCwgLy8gb3V0cHV0IGluZGV4XHJcbiAgICAgICAgaiA9IDAsIC8vIGdvdG8gaW5kZXhcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcclxuICAgICAgICB2YXIgYiA9IGJ1ZmZlcltzdGFydCsrXTtcclxuICAgICAgICBzd2l0Y2ggKGopIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgY2h1bmtbaSsrXSA9IGI2NFtiID4+IDJdO1xyXG4gICAgICAgICAgICAgICAgdCA9IChiICYgMykgPDwgNDtcclxuICAgICAgICAgICAgICAgIGogPSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbdCB8IGIgPj4gNF07XHJcbiAgICAgICAgICAgICAgICB0ID0gKGIgJiAxNSkgPDwgMjtcclxuICAgICAgICAgICAgICAgIGogPSAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGNodW5rW2krK10gPSBiNjRbdCB8IGIgPj4gNl07XHJcbiAgICAgICAgICAgICAgICBjaHVua1tpKytdID0gYjY0W2IgJiA2M107XHJcbiAgICAgICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA+IDgxOTEpIHtcclxuICAgICAgICAgICAgKHBhcnRzIHx8IChwYXJ0cyA9IFtdKSkucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY2h1bmspKTtcclxuICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGopIHtcclxuICAgICAgICBjaHVua1tpKytdID0gYjY0W3RdO1xyXG4gICAgICAgIGNodW5rW2krK10gPSA2MTtcclxuICAgICAgICBpZiAoaiA9PT0gMSlcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9IDYxO1xyXG4gICAgfVxyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgICAgaWYgKGkpXHJcbiAgICAgICAgICAgIHBhcnRzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKSk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rLnNsaWNlKDAsIGkpKTtcclxufTtcclxuXHJcbnZhciBpbnZhbGlkRW5jb2RpbmcgPSBcImludmFsaWQgZW5jb2RpbmdcIjtcclxuXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgYnVmZmVyLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFNvdXJjZSBzdHJpbmdcclxuICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZmZXIgRGVzdGluYXRpb24gYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgRGVzdGluYXRpb24gb2Zmc2V0XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IE51bWJlciBvZiBieXRlcyB3cml0dGVuXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBlbmNvZGluZyBpcyBpbnZhbGlkXHJcbiAqL1xyXG5iYXNlNjQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHN0cmluZywgYnVmZmVyLCBvZmZzZXQpIHtcclxuICAgIHZhciBzdGFydCA9IG9mZnNldDtcclxuICAgIHZhciBqID0gMCwgLy8gZ290byBpbmRleFxyXG4gICAgICAgIHQ7ICAgICAvLyB0ZW1wb3JhcnlcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDspIHtcclxuICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkrKyk7XHJcbiAgICAgICAgaWYgKGMgPT09IDYxICYmIGogPiAxKVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBpZiAoKGMgPSBzNjRbY10pID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGludmFsaWRFbmNvZGluZyk7XHJcbiAgICAgICAgc3dpdGNoIChqKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IHQgPDwgMiB8IChjICYgNDgpID4+IDQ7XHJcbiAgICAgICAgICAgICAgICB0ID0gYztcclxuICAgICAgICAgICAgICAgIGogPSAyO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSAodCAmIDE1KSA8PCA0IHwgKGMgJiA2MCkgPj4gMjtcclxuICAgICAgICAgICAgICAgIHQgPSBjO1xyXG4gICAgICAgICAgICAgICAgaiA9IDM7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9ICh0ICYgMykgPDwgNiB8IGM7XHJcbiAgICAgICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChqID09PSAxKVxyXG4gICAgICAgIHRocm93IEVycm9yKGludmFsaWRFbmNvZGluZyk7XHJcbiAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhlIHNwZWNpZmllZCBzdHJpbmcgYXBwZWFycyB0byBiZSBiYXNlNjQgZW5jb2RlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHByb2JhYmx5IGJhc2U2NCBlbmNvZGVkLCBvdGhlcndpc2UgZmFsc2VcclxuICovXHJcbmJhc2U2NC50ZXN0ID0gZnVuY3Rpb24gdGVzdChzdHJpbmcpIHtcclxuICAgIHJldHVybiAvXig/OltBLVphLXowLTkrL117NH0pKig/OltBLVphLXowLTkrL117Mn09PXxbQS1aYS16MC05Ky9dezN9PSk/JC8udGVzdChzdHJpbmcpO1xyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBldmVudCBlbWl0dGVyIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIEEgbWluaW1hbCBldmVudCBlbWl0dGVyLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxyXG4gICAgICogQHR5cGUge09iamVjdC48c3RyaW5nLCo+fVxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiBMaXN0ZW5lclxyXG4gKiBAcGFyYW0geyp9IFtjdHhdIExpc3RlbmVyIGNvbnRleHRcclxuICogQHJldHVybnMge3V0aWwuRXZlbnRFbWl0dGVyfSBgdGhpc2BcclxuICovXHJcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbihldnQsIGZuLCBjdHgpIHtcclxuICAgICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSB8fCAodGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXSkpLnB1c2goe1xyXG4gICAgICAgIGZuICA6IGZuLFxyXG4gICAgICAgIGN0eCA6IGN0eCB8fCB0aGlzXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgb3IgYW55IG1hdGNoaW5nIGxpc3RlbmVycyBpZiBhcmd1bWVudHMgYXJlIG9taXR0ZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXZ0XSBFdmVudCBuYW1lLiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMgaWYgb21pdHRlZC5cclxuICogQHBhcmFtIHtmdW5jdGlvbn0gW2ZuXSBMaXN0ZW5lciB0byByZW1vdmUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBvZiBgZXZ0YCBpZiBvbWl0dGVkLlxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiBvZmYoZXZ0LCBmbikge1xyXG4gICAgaWYgKGV2dCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGZuID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdID0gW107XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0uZm4gPT09IGZuKVxyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXRzIGFuIGV2ZW50IGJ5IGNhbGxpbmcgaXRzIGxpc3RlbmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgYXJndW1lbnRzLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZ0IEV2ZW50IG5hbWVcclxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50c1xyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdChldnQpIHtcclxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcclxuICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdLFxyXG4gICAgICAgICAgICBpID0gMTtcclxuICAgICAgICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOylcclxuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmZuLmFwcGx5KGxpc3RlbmVyc1tpKytdLmN0eCwgYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoZmFjdG9yeSk7XHJcblxyXG4vKipcclxuICogUmVhZHMgLyB3cml0ZXMgZmxvYXRzIC8gZG91YmxlcyBmcm9tIC8gdG8gYnVmZmVycy5cclxuICogQG5hbWUgdXRpbC5mbG9hdFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFdyaXRlcyBhIDMyIGJpdCBmbG9hdCB0byBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQud3JpdGVGbG9hdExFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSAzMiBiaXQgZmxvYXQgdG8gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LndyaXRlRmxvYXRCRVxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byB3cml0ZVxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBUYXJnZXQgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgVGFyZ2V0IGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmVhZHMgYSAzMiBiaXQgZmxvYXQgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZEZsb2F0TEVcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFNvdXJjZSBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBTb3VyY2UgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFJlYWRzIGEgMzIgYml0IGZsb2F0IGZyb20gYSBidWZmZXIgdXNpbmcgYmlnIGVuZGlhbiBieXRlIG9yZGVyLlxyXG4gKiBAbmFtZSB1dGlsLmZsb2F0LnJlYWRGbG9hdEJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGxpdHRsZSBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBXcml0ZXMgYSA2NCBiaXQgZG91YmxlIHRvIGEgYnVmZmVyIHVzaW5nIGJpZyBlbmRpYW4gYnl0ZSBvcmRlci5cclxuICogQG5hbWUgdXRpbC5mbG9hdC53cml0ZURvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHdyaXRlXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmIFRhcmdldCBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IHBvcyBUYXJnZXQgYnVmZmVyIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBsaXR0bGUgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUxFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBhIDY0IGJpdCBkb3VibGUgZnJvbSBhIGJ1ZmZlciB1c2luZyBiaWcgZW5kaWFuIGJ5dGUgb3JkZXIuXHJcbiAqIEBuYW1lIHV0aWwuZmxvYXQucmVhZERvdWJsZUJFXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZiBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3MgU291cmNlIGJ1ZmZlciBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxyXG4gKi9cclxuXHJcbi8vIEZhY3RvcnkgZnVuY3Rpb24gZm9yIHRoZSBwdXJwb3NlIG9mIG5vZGUtYmFzZWQgdGVzdGluZyBpbiBtb2RpZmllZCBnbG9iYWwgZW52aXJvbm1lbnRzXHJcbmZ1bmN0aW9uIGZhY3RvcnkoZXhwb3J0cykge1xyXG5cclxuICAgIC8vIGZsb2F0OiB0eXBlZCBhcnJheVxyXG4gICAgaWYgKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIChmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGYzMiA9IG5ldyBGbG9hdDMyQXJyYXkoWyAtMCBdKSxcclxuICAgICAgICAgICAgZjhiID0gbmV3IFVpbnQ4QXJyYXkoZjMyLmJ1ZmZlciksXHJcbiAgICAgICAgICAgIGxlICA9IGY4YlszXSA9PT0gMTI4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUZsb2F0X2YzMl9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmMzJbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfZjMyX3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGYzMlswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzNdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4YlsxXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRmxvYXRMRSA9IGxlID8gd3JpdGVGbG9hdF9mMzJfY3B5IDogd3JpdGVGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSBsZSA/IHdyaXRlRmxvYXRfZjMyX3JldiA6IHdyaXRlRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVhZEZsb2F0X2YzMl9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsxXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICByZXR1cm4gZjMyWzBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gbGUgPyByZWFkRmxvYXRfZjMyX2NweSA6IHJlYWRGbG9hdF9mMzJfcmV2O1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRmxvYXRCRSA9IGxlID8gcmVhZEZsb2F0X2YzMl9yZXYgOiByZWFkRmxvYXRfZjMyX2NweTtcclxuXHJcbiAgICAvLyBmbG9hdDogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXRfaWVlZTc1NCh3cml0ZVVpbnQsIHZhbCwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSB2YWwgPCAwID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGlmIChzaWduKVxyXG4gICAgICAgICAgICAgICAgdmFsID0gLXZhbDtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gMClcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgxIC8gdmFsID4gMCA/IC8qIHBvc2l0aXZlICovIDAgOiAvKiBuZWdhdGl2ZSAwICovIDIxNDc0ODM2NDgsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOYU4odmFsKSlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQzMjg5MzQ0LCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA+IDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpIC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IDIxMzkwOTUwNDApID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbCA8IDEuMTc1NDk0MzUwODIyMjg3NWUtMzgpIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoKHNpZ24gPDwgMzEgfCBNYXRoLnJvdW5kKHZhbCAvIDEuNDAxMjk4NDY0MzI0ODE3ZS00NSkpID4+PiAwLCBidWYsIHBvcyk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gTWF0aC5yb3VuZCh2YWwgKiBNYXRoLnBvdygyLCAtZXhwb25lbnQpICogODM4ODYwOCkgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgZXhwb25lbnQgKyAxMjcgPDwgMjMgfCBtYW50aXNzYSkgPj4+IDAsIGJ1ZiwgcG9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0TEUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRMRSk7XHJcbiAgICAgICAgZXhwb3J0cy53cml0ZUZsb2F0QkUgPSB3cml0ZUZsb2F0X2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWRGbG9hdF9pZWVlNzU0KHJlYWRVaW50LCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICB2YXIgdWludCA9IHJlYWRVaW50KGJ1ZiwgcG9zKSxcclxuICAgICAgICAgICAgICAgIHNpZ24gPSAodWludCA+PiAzMSkgKiAyICsgMSxcclxuICAgICAgICAgICAgICAgIGV4cG9uZW50ID0gdWludCA+Pj4gMjMgJiAyNTUsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHVpbnQgJiA4Mzg4NjA3O1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDI1NVxyXG4gICAgICAgICAgICAgICAgPyBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgPyBOYU5cclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIEluZmluaXR5XHJcbiAgICAgICAgICAgICAgICA6IGV4cG9uZW50ID09PSAwIC8vIGRlbm9ybWFsXHJcbiAgICAgICAgICAgICAgICA/IHNpZ24gKiAxLjQwMTI5ODQ2NDMyNDgxN2UtNDUgKiBtYW50aXNzYVxyXG4gICAgICAgICAgICAgICAgOiBzaWduICogTWF0aC5wb3coMiwgZXhwb25lbnQgLSAxNTApICogKG1hbnRpc3NhICsgODM4ODYwOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdExFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludExFKTtcclxuICAgICAgICBleHBvcnRzLnJlYWRGbG9hdEJFID0gcmVhZEZsb2F0X2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIGRvdWJsZTogdHlwZWQgYXJyYXlcclxuICAgIGlmICh0eXBlb2YgRmxvYXQ2NEFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBmNjQgPSBuZXcgRmxvYXQ2NEFycmF5KFstMF0pLFxyXG4gICAgICAgICAgICBmOGIgPSBuZXcgVWludDhBcnJheShmNjQuYnVmZmVyKSxcclxuICAgICAgICAgICAgbGUgID0gZjhiWzddID09PSAxMjg7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2Y2NF9jcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgICBmNjRbMF0gPSB2YWw7XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgICAgXSA9IGY4YlswXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDFdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMl0gPSBmOGJbMl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAzXSA9IGY4YlszXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDRdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNV0gPSBmOGJbNV07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA2XSA9IGY4Yls2XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDddID0gZjhiWzddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVEb3VibGVfZjY0X3Jldih2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIGY2NFswXSA9IHZhbDtcclxuICAgICAgICAgICAgYnVmW3BvcyAgICBdID0gZjhiWzddO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgMV0gPSBmOGJbNl07XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyAyXSA9IGY4Yls1XTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDNdID0gZjhiWzRdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgNF0gPSBmOGJbM107XHJcbiAgICAgICAgICAgIGJ1Zltwb3MgKyA1XSA9IGY4YlsyXTtcclxuICAgICAgICAgICAgYnVmW3BvcyArIDZdID0gZjhiWzFdO1xyXG4gICAgICAgICAgICBidWZbcG9zICsgN10gPSBmOGJbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVMRSA9IGxlID8gd3JpdGVEb3VibGVfZjY0X2NweSA6IHdyaXRlRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlQkUgPSBsZSA/IHdyaXRlRG91YmxlX2Y2NF9yZXYgOiB3cml0ZURvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9jcHkoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzBdID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbMV0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzNdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbNF0gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzZdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbN10gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZWFkRG91YmxlX2Y2NF9yZXYoYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgZjhiWzddID0gYnVmW3BvcyAgICBdO1xyXG4gICAgICAgICAgICBmOGJbNl0gPSBidWZbcG9zICsgMV07XHJcbiAgICAgICAgICAgIGY4Yls1XSA9IGJ1Zltwb3MgKyAyXTtcclxuICAgICAgICAgICAgZjhiWzRdID0gYnVmW3BvcyArIDNdO1xyXG4gICAgICAgICAgICBmOGJbM10gPSBidWZbcG9zICsgNF07XHJcbiAgICAgICAgICAgIGY4YlsyXSA9IGJ1Zltwb3MgKyA1XTtcclxuICAgICAgICAgICAgZjhiWzFdID0gYnVmW3BvcyArIDZdO1xyXG4gICAgICAgICAgICBmOGJbMF0gPSBidWZbcG9zICsgN107XHJcbiAgICAgICAgICAgIHJldHVybiBmNjRbMF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gbGUgPyByZWFkRG91YmxlX2Y2NF9jcHkgOiByZWFkRG91YmxlX2Y2NF9yZXY7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICBleHBvcnRzLnJlYWREb3VibGVCRSA9IGxlID8gcmVhZERvdWJsZV9mNjRfcmV2IDogcmVhZERvdWJsZV9mNjRfY3B5O1xyXG5cclxuICAgIC8vIGRvdWJsZTogaWVlZTc1NFxyXG4gICAgfSkoKTsgZWxzZSAoZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdyaXRlRG91YmxlX2llZWU3NTQod3JpdGVVaW50LCBvZmYwLCBvZmYxLCB2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWduID0gdmFsIDwgMCA/IDEgOiAwO1xyXG4gICAgICAgICAgICBpZiAoc2lnbilcclxuICAgICAgICAgICAgICAgIHZhbCA9IC12YWw7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KDEgLyB2YWwgPiAwID8gLyogcG9zaXRpdmUgKi8gMCA6IC8qIG5lZ2F0aXZlIDAgKi8gMjE0NzQ4MzY0OCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICB3cml0ZVVpbnQoMCwgYnVmLCBwb3MgKyBvZmYwKTtcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgyMTQ2OTU5MzYwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbCA+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4KSB7IC8vICstSW5maW5pdHlcclxuICAgICAgICAgICAgICAgIHdyaXRlVWludCgwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgMjE0NjQzNTA3MikgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFudGlzc2E7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgMi4yMjUwNzM4NTg1MDcyMDE0ZS0zMDgpIHsgLy8gZGVub3JtYWxcclxuICAgICAgICAgICAgICAgICAgICBtYW50aXNzYSA9IHZhbCAvIDVlLTMyNDtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgPj4+IDAsIGJ1ZiwgcG9zICsgb2ZmMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVVaW50KChzaWduIDw8IDMxIHwgbWFudGlzc2EgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCwgYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWwpIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvbmVudCA9PT0gMTAyNClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb25lbnQgPSAxMDIzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hbnRpc3NhID0gdmFsICogTWF0aC5wb3coMiwgLWV4cG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZVVpbnQobWFudGlzc2EgKiA0NTAzNTk5NjI3MzcwNDk2ID4+PiAwLCBidWYsIHBvcyArIG9mZjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlVWludCgoc2lnbiA8PCAzMSB8IGV4cG9uZW50ICsgMTAyMyA8PCAyMCB8IG1hbnRpc3NhICogMTA0ODU3NiAmIDEwNDg1NzUpID4+PiAwLCBidWYsIHBvcyArIG9mZjEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnRzLndyaXRlRG91YmxlTEUgPSB3cml0ZURvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgd3JpdGVVaW50TEUsIDAsIDQpO1xyXG4gICAgICAgIGV4cG9ydHMud3JpdGVEb3VibGVCRSA9IHdyaXRlRG91YmxlX2llZWU3NTQuYmluZChudWxsLCB3cml0ZVVpbnRCRSwgNCwgMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlYWREb3VibGVfaWVlZTc1NChyZWFkVWludCwgb2ZmMCwgb2ZmMSwgYnVmLCBwb3MpIHtcclxuICAgICAgICAgICAgdmFyIGxvID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYwKSxcclxuICAgICAgICAgICAgICAgIGhpID0gcmVhZFVpbnQoYnVmLCBwb3MgKyBvZmYxKTtcclxuICAgICAgICAgICAgdmFyIHNpZ24gPSAoaGkgPj4gMzEpICogMiArIDEsXHJcbiAgICAgICAgICAgICAgICBleHBvbmVudCA9IGhpID4+PiAyMCAmIDIwNDcsXHJcbiAgICAgICAgICAgICAgICBtYW50aXNzYSA9IDQyOTQ5NjcyOTYgKiAoaGkgJiAxMDQ4NTc1KSArIGxvO1xyXG4gICAgICAgICAgICByZXR1cm4gZXhwb25lbnQgPT09IDIwNDdcclxuICAgICAgICAgICAgICAgID8gbWFudGlzc2FcclxuICAgICAgICAgICAgICAgID8gTmFOXHJcbiAgICAgICAgICAgICAgICA6IHNpZ24gKiBJbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgOiBleHBvbmVudCA9PT0gMCAvLyBkZW5vcm1hbFxyXG4gICAgICAgICAgICAgICAgPyBzaWduICogNWUtMzI0ICogbWFudGlzc2FcclxuICAgICAgICAgICAgICAgIDogc2lnbiAqIE1hdGgucG93KDIsIGV4cG9uZW50IC0gMTA3NSkgKiAobWFudGlzc2EgKyA0NTAzNTk5NjI3MzcwNDk2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydHMucmVhZERvdWJsZUxFID0gcmVhZERvdWJsZV9pZWVlNzU0LmJpbmQobnVsbCwgcmVhZFVpbnRMRSwgMCwgNCk7XHJcbiAgICAgICAgZXhwb3J0cy5yZWFkRG91YmxlQkUgPSByZWFkRG91YmxlX2llZWU3NTQuYmluZChudWxsLCByZWFkVWludEJFLCA0LCAwKTtcclxuXHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHJldHVybiBleHBvcnRzO1xyXG59XHJcblxyXG4vLyB1aW50IGhlbHBlcnNcclxuXHJcbmZ1bmN0aW9uIHdyaXRlVWludExFKHZhbCwgYnVmLCBwb3MpIHtcclxuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDFdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgMl0gPSAgdmFsID4+PiAxNiAmIDI1NTtcclxuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZVVpbnRCRSh2YWwsIGJ1ZiwgcG9zKSB7XHJcbiAgICBidWZbcG9zICAgIF0gPSAgdmFsID4+PiAyNDtcclxuICAgIGJ1Zltwb3MgKyAxXSA9ICB2YWwgPj4+IDE2ICYgMjU1O1xyXG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gOCAgJiAyNTU7XHJcbiAgICBidWZbcG9zICsgM10gPSAgdmFsICAgICAgICAmIDI1NTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZFVpbnRMRShidWYsIHBvcykge1xyXG4gICAgcmV0dXJuIChidWZbcG9zICAgIF1cclxuICAgICAgICAgIHwgYnVmW3BvcyArIDFdIDw8IDhcclxuICAgICAgICAgIHwgYnVmW3BvcyArIDJdIDw8IDE2XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAzXSA8PCAyNCkgPj4+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRVaW50QkUoYnVmLCBwb3MpIHtcclxuICAgIHJldHVybiAoYnVmW3BvcyAgICBdIDw8IDI0XHJcbiAgICAgICAgICB8IGJ1Zltwb3MgKyAxXSA8PCAxNlxyXG4gICAgICAgICAgfCBidWZbcG9zICsgMl0gPDwgOFxyXG4gICAgICAgICAgfCBidWZbcG9zICsgM10pID4+PiAwO1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGlucXVpcmU7XHJcblxyXG4vKipcclxuICogUmVxdWlyZXMgYSBtb2R1bGUgb25seSBpZiBhdmFpbGFibGUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIE1vZHVsZSB0byByZXF1aXJlXHJcbiAqIEByZXR1cm5zIHs/T2JqZWN0fSBSZXF1aXJlZCBtb2R1bGUgaWYgYXZhaWxhYmxlIGFuZCBub3QgZW1wdHksIG90aGVyd2lzZSBgbnVsbGBcclxuICovXHJcbmZ1bmN0aW9uIGlucXVpcmUobW9kdWxlTmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgbW9kID0gZXZhbChcInF1aXJlXCIucmVwbGFjZSgvXi8sXCJyZVwiKSkobW9kdWxlTmFtZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxyXG4gICAgICAgIGlmIChtb2QgJiYgKG1vZC5sZW5ndGggfHwgT2JqZWN0LmtleXMobW9kKS5sZW5ndGgpKVxyXG4gICAgICAgICAgICByZXR1cm4gbW9kO1xyXG4gICAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIFVURjggaW1wbGVtZW50YXRpb24gZm9yIG51bWJlciBhcnJheXMuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBuYW1lc3BhY2VcclxuICovXHJcbnZhciB1dGY4ID0gZXhwb3J0cztcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBVVEY4IGJ5dGUgbGVuZ3RoIG9mIGEgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFN0cmluZ1xyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBCeXRlIGxlbmd0aFxyXG4gKi9cclxudXRmOC5sZW5ndGggPSBmdW5jdGlvbiB1dGY4X2xlbmd0aChzdHJpbmcpIHtcclxuICAgIHZhciBsZW4gPSAwLFxyXG4gICAgICAgIGMgPSAwO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpXHJcbiAgICAgICAgICAgIGxlbiArPSAxO1xyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KVxyXG4gICAgICAgICAgICBsZW4gKz0gMjtcclxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4RkMwMCkgPT09IDB4RDgwMCAmJiAoc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwKSB7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgbGVuICs9IDQ7XHJcbiAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgIGxlbiArPSAzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkcyBVVEY4IGJ5dGVzIGFzIGEgc3RyaW5nLlxyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBTb3VyY2UgYnVmZmVyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBTb3VyY2Ugc3RhcnRcclxuICogQHBhcmFtIHtudW1iZXJ9IGVuZCBTb3VyY2UgZW5kXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZWFkXHJcbiAqL1xyXG51dGY4LnJlYWQgPSBmdW5jdGlvbiB1dGY4X3JlYWQoYnVmZmVyLCBzdGFydCwgZW5kKSB7XHJcbiAgICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XHJcbiAgICBpZiAobGVuIDwgMSlcclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIHZhciBwYXJ0cyA9IG51bGwsXHJcbiAgICAgICAgY2h1bmsgPSBbXSxcclxuICAgICAgICBpID0gMCwgLy8gY2hhciBvZmZzZXRcclxuICAgICAgICB0OyAgICAgLy8gdGVtcG9yYXJ5XHJcbiAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcclxuICAgICAgICB0ID0gYnVmZmVyW3N0YXJ0KytdO1xyXG4gICAgICAgIGlmICh0IDwgMTI4KVxyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gdDtcclxuICAgICAgICBlbHNlIGlmICh0ID4gMTkxICYmIHQgPCAyMjQpXHJcbiAgICAgICAgICAgIGNodW5rW2krK10gPSAodCAmIDMxKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjM7XHJcbiAgICAgICAgZWxzZSBpZiAodCA+IDIzOSAmJiB0IDwgMzY1KSB7XHJcbiAgICAgICAgICAgIHQgPSAoKHQgJiA3KSA8PCAxOCB8IChidWZmZXJbc3RhcnQrK10gJiA2MykgPDwgMTIgfCAoYnVmZmVyW3N0YXJ0KytdICYgNjMpIDw8IDYgfCBidWZmZXJbc3RhcnQrK10gJiA2MykgLSAweDEwMDAwO1xyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gMHhEODAwICsgKHQgPj4gMTApO1xyXG4gICAgICAgICAgICBjaHVua1tpKytdID0gMHhEQzAwICsgKHQgJiAxMDIzKTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgY2h1bmtbaSsrXSA9ICh0ICYgMTUpIDw8IDEyIHwgKGJ1ZmZlcltzdGFydCsrXSAmIDYzKSA8PCA2IHwgYnVmZmVyW3N0YXJ0KytdICYgNjM7XHJcbiAgICAgICAgaWYgKGkgPiA4MTkxKSB7XHJcbiAgICAgICAgICAgIChwYXJ0cyB8fCAocGFydHMgPSBbXSkpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNodW5rKSk7XHJcbiAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgIGlmIChpKVxyXG4gICAgICAgICAgICBwYXJ0cy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSkpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjaHVuay5zbGljZSgwLCBpKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogV3JpdGVzIGEgc3RyaW5nIGFzIFVURjggYnl0ZXMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU291cmNlIHN0cmluZ1xyXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IGJ1ZmZlciBEZXN0aW5hdGlvbiBidWZmZXJcclxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBEZXN0aW5hdGlvbiBvZmZzZXRcclxuICogQHJldHVybnMge251bWJlcn0gQnl0ZXMgd3JpdHRlblxyXG4gKi9cclxudXRmOC53cml0ZSA9IGZ1bmN0aW9uIHV0Zjhfd3JpdGUoc3RyaW5nLCBidWZmZXIsIG9mZnNldCkge1xyXG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0LFxyXG4gICAgICAgIGMxLCAvLyBjaGFyYWN0ZXIgMVxyXG4gICAgICAgIGMyOyAvLyBjaGFyYWN0ZXIgMlxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjMSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzE7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjMSA8IDIwNDgpIHtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDYgICAgICAgfCAxOTI7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSAgICAgICAmIDYzIHwgMTI4O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGMxICYgMHhGQzAwKSA9PT0gMHhEODAwICYmICgoYzIgPSBzdHJpbmcuY2hhckNvZGVBdChpICsgMSkpICYgMHhGQzAwKSA9PT0gMHhEQzAwKSB7XHJcbiAgICAgICAgICAgIGMxID0gMHgxMDAwMCArICgoYzEgJiAweDAzRkYpIDw8IDEwKSArIChjMiAmIDB4MDNGRik7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDE4ICAgICAgfCAyNDA7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiAxMiAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgPj4gNiAgJiA2MyB8IDEyODtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxICAgICAgICYgNjMgfCAxMjg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnVmZmVyW29mZnNldCsrXSA9IGMxID4+IDEyICAgICAgfCAyMjQ7XHJcbiAgICAgICAgICAgIGJ1ZmZlcltvZmZzZXQrK10gPSBjMSA+PiA2ICAmIDYzIHwgMTI4O1xyXG4gICAgICAgICAgICBidWZmZXJbb2Zmc2V0KytdID0gYzEgICAgICAgJiA2MyB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2Zmc2V0IC0gc3RhcnQ7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBMb25nQml0cztcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9taW5pbWFsXCIpO1xuXG4vKipcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cy5cbiAqIEBjbGFzc2Rlc2MgSGVscGVyIGNsYXNzIGZvciB3b3JraW5nIHdpdGggdGhlIGxvdyBhbmQgaGlnaCBiaXRzIG9mIGEgNjQgYml0IHZhbHVlLlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGxvIExvdyAzMiBiaXRzLCB1bnNpZ25lZFxuICogQHBhcmFtIHtudW1iZXJ9IGhpIEhpZ2ggMzIgYml0cywgdW5zaWduZWRcbiAqL1xuZnVuY3Rpb24gTG9uZ0JpdHMobG8sIGhpKSB7XG5cbiAgICAvLyBub3RlIHRoYXQgdGhlIGNhc3RzIGJlbG93IGFyZSB0aGVvcmV0aWNhbGx5IHVubmVjZXNzYXJ5IGFzIG9mIHRvZGF5LCBidXQgb2xkZXIgc3RhdGljYWxseVxuICAgIC8vIGdlbmVyYXRlZCBjb252ZXJ0ZXIgY29kZSBtaWdodCBzdGlsbCBjYWxsIHRoZSBjdG9yIHdpdGggc2lnbmVkIDMyYml0cy4ga2VwdCBmb3IgY29tcGF0LlxuXG4gICAgLyoqXG4gICAgICogTG93IGJpdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxvID0gbG8gPj4+IDA7XG5cbiAgICAvKipcbiAgICAgKiBIaWdoIGJpdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmhpID0gaGkgPj4+IDA7XG59XG5cbi8qKlxuICogWmVybyBiaXRzLlxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcbiAqIEB0eXBlIHt1dGlsLkxvbmdCaXRzfVxuICovXG52YXIgemVybyA9IExvbmdCaXRzLnplcm8gPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XG5cbnplcm8udG9OdW1iZXIgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG56ZXJvLnp6RW5jb2RlID0gemVyby56ekRlY29kZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcbnplcm8ubGVuZ3RoID0gZnVuY3Rpb24oKSB7IHJldHVybiAxOyB9O1xuXG4vKipcbiAqIFplcm8gaGFzaC5cbiAqIEBtZW1iZXJvZiB1dGlsLkxvbmdCaXRzXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG52YXIgemVyb0hhc2ggPSBMb25nQml0cy56ZXJvSGFzaCA9IFwiXFwwXFwwXFwwXFwwXFwwXFwwXFwwXFwwXCI7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCBudW1iZXIuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWVcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxuICovXG5Mb25nQml0cy5mcm9tTnVtYmVyID0gZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHplcm87XG4gICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDA7XG4gICAgaWYgKHNpZ24pXG4gICAgICAgIHZhbHVlID0gLXZhbHVlO1xuICAgIHZhciBsbyA9IHZhbHVlID4+PiAwLFxuICAgICAgICBoaSA9ICh2YWx1ZSAtIGxvKSAvIDQyOTQ5NjcyOTYgPj4+IDA7XG4gICAgaWYgKHNpZ24pIHtcbiAgICAgICAgaGkgPSB+aGkgPj4+IDA7XG4gICAgICAgIGxvID0gfmxvID4+PiAwO1xuICAgICAgICBpZiAoKytsbyA+IDQyOTQ5NjcyOTUpIHtcbiAgICAgICAgICAgIGxvID0gMDtcbiAgICAgICAgICAgIGlmICgrK2hpID4gNDI5NDk2NzI5NSlcbiAgICAgICAgICAgICAgICBoaSA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMb25nQml0cyhsbywgaGkpO1xufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSBhIG51bWJlciwgbG9uZyBvciBzdHJpbmcuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWVcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBJbnN0YW5jZVxuICovXG5Mb25nQml0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBMb25nQml0cy5mcm9tTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKHV0aWwuTG9uZylcbiAgICAgICAgICAgIHZhbHVlID0gdXRpbC5Mb25nLmZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcihwYXJzZUludCh2YWx1ZSwgMTApKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLmxvdyB8fCB2YWx1ZS5oaWdoID8gbmV3IExvbmdCaXRzKHZhbHVlLmxvdyA+Pj4gMCwgdmFsdWUuaGlnaCA+Pj4gMCkgOiB6ZXJvO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIHBvc3NpYmx5IHVuc2FmZSBKYXZhU2NyaXB0IG51bWJlci5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Vuc2lnbmVkPWZhbHNlXSBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICogQHJldHVybnMge251bWJlcn0gUG9zc2libHkgdW5zYWZlIG51bWJlclxuICovXG5Mb25nQml0cy5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlcih1bnNpZ25lZCkge1xuICAgIGlmICghdW5zaWduZWQgJiYgdGhpcy5oaSA+Pj4gMzEpIHtcbiAgICAgICAgdmFyIGxvID0gfnRoaXMubG8gKyAxID4+PiAwLFxuICAgICAgICAgICAgaGkgPSB+dGhpcy5oaSAgICAgPj4+IDA7XG4gICAgICAgIGlmICghbG8pXG4gICAgICAgICAgICBoaSA9IGhpICsgMSA+Pj4gMDtcbiAgICAgICAgcmV0dXJuIC0obG8gKyBoaSAqIDQyOTQ5NjcyOTYpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sbyArIHRoaXMuaGkgKiA0Mjk0OTY3Mjk2O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIGxvbmcuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtMb25nfSBMb25nXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b0xvbmcgPSBmdW5jdGlvbiB0b0xvbmcodW5zaWduZWQpIHtcbiAgICByZXR1cm4gdXRpbC5Mb25nXG4gICAgICAgID8gbmV3IHV0aWwuTG9uZyh0aGlzLmxvIHwgMCwgdGhpcy5oaSB8IDAsIEJvb2xlYW4odW5zaWduZWQpKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICA6IHsgbG93OiB0aGlzLmxvIHwgMCwgaGlnaDogdGhpcy5oaSB8IDAsIHVuc2lnbmVkOiBCb29sZWFuKHVuc2lnbmVkKSB9O1xufTtcblxudmFyIGNoYXJDb2RlQXQgPSBTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQ7XG5cbi8qKlxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2ggSGFzaFxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEJpdHNcbiAqL1xuTG9uZ0JpdHMuZnJvbUhhc2ggPSBmdW5jdGlvbiBmcm9tSGFzaChoYXNoKSB7XG4gICAgaWYgKGhhc2ggPT09IHplcm9IYXNoKVxuICAgICAgICByZXR1cm4gemVybztcbiAgICByZXR1cm4gbmV3IExvbmdCaXRzKFxuICAgICAgICAoIGNoYXJDb2RlQXQuY2FsbChoYXNoLCAwKVxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAxKSA8PCA4XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDIpIDw8IDE2XG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDMpIDw8IDI0KSA+Pj4gMFxuICAgICxcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNClcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgNSkgPDwgOFxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA2KSA8PCAxNlxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA3KSA8PCAyNCkgPj4+IDBcbiAgICApO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIDggY2hhcmFjdGVycyBsb25nIGhhc2guXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIYXNoXG4gKi9cbkxvbmdCaXRzLnByb3RvdHlwZS50b0hhc2ggPSBmdW5jdGlvbiB0b0hhc2goKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICAgIHRoaXMubG8gICAgICAgICYgMjU1LFxuICAgICAgICB0aGlzLmxvID4+PiA4ICAmIDI1NSxcbiAgICAgICAgdGhpcy5sbyA+Pj4gMTYgJiAyNTUsXG4gICAgICAgIHRoaXMubG8gPj4+IDI0ICAgICAgLFxuICAgICAgICB0aGlzLmhpICAgICAgICAmIDI1NSxcbiAgICAgICAgdGhpcy5oaSA+Pj4gOCAgJiAyNTUsXG4gICAgICAgIHRoaXMuaGkgPj4+IDE2ICYgMjU1LFxuICAgICAgICB0aGlzLmhpID4+PiAyNFxuICAgICk7XG59O1xuXG4vKipcbiAqIFppZy16YWcgZW5jb2RlcyB0aGlzIGxvbmcgYml0cy5cbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcbiAqL1xuTG9uZ0JpdHMucHJvdG90eXBlLnp6RW5jb2RlID0gZnVuY3Rpb24genpFbmNvZGUoKSB7XG4gICAgdmFyIG1hc2sgPSAgIHRoaXMuaGkgPj4gMzE7XG4gICAgdGhpcy5oaSAgPSAoKHRoaXMuaGkgPDwgMSB8IHRoaXMubG8gPj4+IDMxKSBeIG1hc2spID4+PiAwO1xuICAgIHRoaXMubG8gID0gKCB0aGlzLmxvIDw8IDEgICAgICAgICAgICAgICAgICAgXiBtYXNrKSA+Pj4gMDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogWmlnLXphZyBkZWNvZGVzIHRoaXMgbG9uZyBiaXRzLlxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IGB0aGlzYFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUuenpEZWNvZGUgPSBmdW5jdGlvbiB6ekRlY29kZSgpIHtcbiAgICB2YXIgbWFzayA9IC0odGhpcy5sbyAmIDEpO1xuICAgIHRoaXMubG8gID0gKCh0aGlzLmxvID4+PiAxIHwgdGhpcy5oaSA8PCAzMSkgXiBtYXNrKSA+Pj4gMDtcbiAgICB0aGlzLmhpICA9ICggdGhpcy5oaSA+Pj4gMSAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGlzIGxvbmdiaXRzIHdoZW4gZW5jb2RlZCBhcyBhIHZhcmludC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IExlbmd0aFxuICovXG5Mb25nQml0cy5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKCkge1xuICAgIHZhciBwYXJ0MCA9ICB0aGlzLmxvLFxuICAgICAgICBwYXJ0MSA9ICh0aGlzLmxvID4+PiAyOCB8IHRoaXMuaGkgPDwgNCkgPj4+IDAsXG4gICAgICAgIHBhcnQyID0gIHRoaXMuaGkgPj4+IDI0O1xuICAgIHJldHVybiBwYXJ0MiA9PT0gMFxuICAgICAgICAgPyBwYXJ0MSA9PT0gMFxuICAgICAgICAgICA/IHBhcnQwIDwgMTYzODRcbiAgICAgICAgICAgICA/IHBhcnQwIDwgMTI4ID8gMSA6IDJcbiAgICAgICAgICAgICA6IHBhcnQwIDwgMjA5NzE1MiA/IDMgOiA0XG4gICAgICAgICAgIDogcGFydDEgPCAxNjM4NFxuICAgICAgICAgICAgID8gcGFydDEgPCAxMjggPyA1IDogNlxuICAgICAgICAgICAgIDogcGFydDEgPCAyMDk3MTUyID8gNyA6IDhcbiAgICAgICAgIDogcGFydDIgPCAxMjggPyA5IDogMTA7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgdXRpbCA9IGV4cG9ydHM7XG5cbi8vIHVzZWQgdG8gcmV0dXJuIGEgUHJvbWlzZSB3aGVyZSBjYWxsYmFjayBpcyBvbWl0dGVkXG51dGlsLmFzUHJvbWlzZSA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9hc3Byb21pc2VcIik7XG5cbi8vIGNvbnZlcnRzIHRvIC8gZnJvbSBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG51dGlsLmJhc2U2NCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9iYXNlNjRcIik7XG5cbi8vIGJhc2UgY2xhc3Mgb2YgcnBjLlNlcnZpY2VcbnV0aWwuRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcIkBwcm90b2J1ZmpzL2V2ZW50ZW1pdHRlclwiKTtcblxuLy8gZmxvYXQgaGFuZGxpbmcgYWNjcm9zcyBicm93c2Vyc1xudXRpbC5mbG9hdCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9mbG9hdFwiKTtcblxuLy8gcmVxdWlyZXMgbW9kdWxlcyBvcHRpb25hbGx5IGFuZCBoaWRlcyB0aGUgY2FsbCBmcm9tIGJ1bmRsZXJzXG51dGlsLmlucXVpcmUgPSByZXF1aXJlKFwiQHByb3RvYnVmanMvaW5xdWlyZVwiKTtcblxuLy8gY29udmVydHMgdG8gLyBmcm9tIHV0ZjggZW5jb2RlZCBzdHJpbmdzXG51dGlsLnV0ZjggPSByZXF1aXJlKFwiQHByb3RvYnVmanMvdXRmOFwiKTtcblxuLy8gcHJvdmlkZXMgYSBub2RlLWxpa2UgYnVmZmVyIHBvb2wgaW4gdGhlIGJyb3dzZXJcbnV0aWwucG9vbCA9IHJlcXVpcmUoXCJAcHJvdG9idWZqcy9wb29sXCIpO1xuXG4vLyB1dGlsaXR5IHRvIHdvcmsgd2l0aCB0aGUgbG93IGFuZCBoaWdoIGJpdHMgb2YgYSA2NCBiaXQgdmFsdWVcbnV0aWwuTG9uZ0JpdHMgPSByZXF1aXJlKFwiLi9sb25nYml0c1wiKTtcblxuLyoqXG4gKiBXaGV0aGVyIHJ1bm5pbmcgd2l0aGluIG5vZGUgb3Igbm90LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEB0eXBlIHtib29sZWFufVxuICovXG51dGlsLmlzTm9kZSA9IEJvb2xlYW4odHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbFxuICAgICAgICAgICAgICAgICAgICYmIGdsb2JhbC5wcm9jZXNzXG4gICAgICAgICAgICAgICAgICAgJiYgZ2xvYmFsLnByb2Nlc3MudmVyc2lvbnNcbiAgICAgICAgICAgICAgICAgICAmJiBnbG9iYWwucHJvY2Vzcy52ZXJzaW9ucy5ub2RlKTtcblxuLyoqXG4gKiBHbG9iYWwgb2JqZWN0IHJlZmVyZW5jZS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG51dGlsLmdsb2JhbCA9IHV0aWwuaXNOb2RlICYmIGdsb2JhbFxuICAgICAgICAgICB8fCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvd1xuICAgICAgICAgICB8fCB0eXBlb2Ygc2VsZiAgICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGZcbiAgICAgICAgICAgfHwgdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcblxuLyoqXG4gKiBBbiBpbW11YWJsZSBlbXB0eSBhcnJheS5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAdHlwZSB7QXJyYXkuPCo+fVxuICogQGNvbnN0XG4gKi9cbnV0aWwuZW1wdHlBcnJheSA9IE9iamVjdC5mcmVlemUgPyBPYmplY3QuZnJlZXplKFtdKSA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFtdOyAvLyB1c2VkIG9uIHByb3RvdHlwZXNcblxuLyoqXG4gKiBBbiBpbW11dGFibGUgZW1wdHkgb2JqZWN0LlxuICogQHR5cGUge09iamVjdH1cbiAqIEBjb25zdFxuICovXG51dGlsLmVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSA/IE9iamVjdC5mcmVlemUoe30pIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge307IC8vIHVzZWQgb24gcHJvdG90eXBlc1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYW4gaW50ZWdlci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhbiBpbnRlZ2VyXG4gKi9cbnV0aWwuaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nXG4gKi9cbnV0aWwuaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59O1xuXG4vKipcbiAqIFRlc3RzIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBub24tbnVsbCBvYmplY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIHZhbHVlIGlzIGEgbm9uLW51bGwgb2JqZWN0XG4gKi9cbnV0aWwuaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIHByb3BlcnR5IG9uIGEgbWVzc2FnZSBpcyBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQuXG4gKiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayB1dGlsLmlzU2V0fS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBQbGFpbiBvYmplY3Qgb3IgbWVzc2FnZSBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3AgUHJvcGVydHkgbmFtZVxuICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQsIG90aGVyd2lzZSBgZmFsc2VgXG4gKi9cbnV0aWwuaXNzZXQgPVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHByb3BlcnR5IG9uIGEgbWVzc2FnZSBpcyBjb25zaWRlcmVkIHRvIGJlIHByZXNlbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFBsYWluIG9iamVjdCBvciBtZXNzYWdlIGluc3RhbmNlXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGNvbnNpZGVyZWQgdG8gYmUgcHJlc2VudCwgb3RoZXJ3aXNlIGBmYWxzZWBcbiAqL1xudXRpbC5pc1NldCA9IGZ1bmN0aW9uIGlzU2V0KG9iaiwgcHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtwcm9wXTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiBvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxLCBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5sZW5ndGggOiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoKSA+IDA7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBBbnkgY29tcGF0aWJsZSBCdWZmZXIgaW5zdGFuY2UuXG4gKiBUaGlzIGlzIGEgbWluaW1hbCBzdGFuZC1hbG9uZSBkZWZpbml0aW9uIG9mIGEgQnVmZmVyIGluc3RhbmNlLiBUaGUgYWN0dWFsIHR5cGUgaXMgdGhhdCBleHBvcnRlZCBieSBub2RlJ3MgdHlwaW5ncy5cbiAqIEBpbnRlcmZhY2UgQnVmZmVyXG4gKiBAZXh0ZW5kcyBVaW50OEFycmF5XG4gKi9cblxuLyoqXG4gKiBOb2RlJ3MgQnVmZmVyIGNsYXNzIGlmIGF2YWlsYWJsZS5cbiAqIEB0eXBlIHtDb25zdHJ1Y3RvcjxCdWZmZXI+fVxuICovXG51dGlsLkJ1ZmZlciA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICB2YXIgQnVmZmVyID0gdXRpbC5pbnF1aXJlKFwiYnVmZmVyXCIpLkJ1ZmZlcjtcbiAgICAgICAgLy8gcmVmdXNlIHRvIHVzZSBub24tbm9kZSBidWZmZXJzIGlmIG5vdCBleHBsaWNpdGx5IGFzc2lnbmVkIChwZXJmIHJlYXNvbnMpOlxuICAgICAgICByZXR1cm4gQnVmZmVyLnByb3RvdHlwZS51dGY4V3JpdGUgPyBCdWZmZXIgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufSkoKTtcblxuLy8gSW50ZXJuYWwgYWxpYXMgb2Ygb3IgcG9seWZ1bGwgZm9yIEJ1ZmZlci5mcm9tLlxudXRpbC5fQnVmZmVyX2Zyb20gPSBudWxsO1xuXG4vLyBJbnRlcm5hbCBhbGlhcyBvZiBvciBwb2x5ZmlsbCBmb3IgQnVmZmVyLmFsbG9jVW5zYWZlLlxudXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gbnVsbDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGJ1ZmZlciBvZiB3aGF0ZXZlciB0eXBlIHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0ge251bWJlcnxudW1iZXJbXX0gW3NpemVPckFycmF5PTBdIEJ1ZmZlciBzaXplIG9yIG51bWJlciBhcnJheVxuICogQHJldHVybnMge1VpbnQ4QXJyYXl8QnVmZmVyfSBCdWZmZXJcbiAqL1xudXRpbC5uZXdCdWZmZXIgPSBmdW5jdGlvbiBuZXdCdWZmZXIoc2l6ZU9yQXJyYXkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0eXBlb2Ygc2l6ZU9yQXJyYXkgPT09IFwibnVtYmVyXCJcbiAgICAgICAgPyB1dGlsLkJ1ZmZlclxuICAgICAgICAgICAgPyB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUoc2l6ZU9yQXJyYXkpXG4gICAgICAgICAgICA6IG5ldyB1dGlsLkFycmF5KHNpemVPckFycmF5KVxuICAgICAgICA6IHV0aWwuQnVmZmVyXG4gICAgICAgICAgICA/IHV0aWwuX0J1ZmZlcl9mcm9tKHNpemVPckFycmF5KVxuICAgICAgICAgICAgOiB0eXBlb2YgVWludDhBcnJheSA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgICAgICAgID8gc2l6ZU9yQXJyYXlcbiAgICAgICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KHNpemVPckFycmF5KTtcbn07XG5cbi8qKlxuICogQXJyYXkgaW1wbGVtZW50YXRpb24gdXNlZCBpbiB0aGUgYnJvd3Nlci4gYFVpbnQ4QXJyYXlgIGlmIHN1cHBvcnRlZCwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAdHlwZSB7Q29uc3RydWN0b3I8VWludDhBcnJheT59XG4gKi9cbnV0aWwuQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiA/IFVpbnQ4QXJyYXkgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gOiBBcnJheTtcblxuLyoqXG4gKiBBbnkgY29tcGF0aWJsZSBMb25nIGluc3RhbmNlLlxuICogVGhpcyBpcyBhIG1pbmltYWwgc3RhbmQtYWxvbmUgZGVmaW5pdGlvbiBvZiBhIExvbmcgaW5zdGFuY2UuIFRoZSBhY3R1YWwgdHlwZSBpcyB0aGF0IGV4cG9ydGVkIGJ5IGxvbmcuanMuXG4gKiBAaW50ZXJmYWNlIExvbmdcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsb3cgTG93IGJpdHNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoaWdoIEhpZ2ggYml0c1xuICogQHByb3BlcnR5IHtib29sZWFufSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdFxuICovXG5cbi8qKlxuICogTG9uZy5qcydzIExvbmcgY2xhc3MgaWYgYXZhaWxhYmxlLlxuICogQHR5cGUge0NvbnN0cnVjdG9yPExvbmc+fVxuICovXG51dGlsLkxvbmcgPSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLmdsb2JhbC5kY29kZUlPICYmIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHV0aWwuZ2xvYmFsLmRjb2RlSU8uTG9uZ1xuICAgICAgICAgfHwgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gdXRpbC5nbG9iYWwuTG9uZ1xuICAgICAgICAgfHwgdXRpbC5pbnF1aXJlKFwibG9uZ1wiKTtcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byB2ZXJpZnkgMiBiaXQgKGBib29sYCkgbWFwIGtleXMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGNvbnN0XG4gKi9cbnV0aWwua2V5MlJlID0gL150cnVlfGZhbHNlfDB8MSQvO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSAzMiBiaXQgKGBpbnQzMmAgZXRjLikgbWFwIGtleXMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGNvbnN0XG4gKi9cbnV0aWwua2V5MzJSZSA9IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvO1xuXG4vKipcbiAqIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIHRvIHZlcmlmeSA2NCBiaXQgKGBpbnQ2NGAgZXRjLikgbWFwIGtleXMuXG4gKiBAdHlwZSB7UmVnRXhwfVxuICogQGNvbnN0XG4gKi9cbnV0aWwua2V5NjRSZSA9IC9eKD86W1xcXFx4MDAtXFxcXHhmZl17OH18LT8oPzowfFsxLTldWzAtOV0qKSkkLztcblxuLyoqXG4gKiBDb252ZXJ0cyBhIG51bWJlciBvciBsb25nIHRvIGFuIDggY2hhcmFjdGVycyBsb25nIGhhc2ggc3RyaW5nLlxuICogQHBhcmFtIHtMb25nfG51bWJlcn0gdmFsdWUgVmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge3N0cmluZ30gSGFzaFxuICovXG51dGlsLmxvbmdUb0hhc2ggPSBmdW5jdGlvbiBsb25nVG9IYXNoKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gdXRpbC5Mb25nQml0cy5mcm9tKHZhbHVlKS50b0hhc2goKVxuICAgICAgICA6IHV0aWwuTG9uZ0JpdHMuemVyb0hhc2g7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIDggY2hhcmFjdGVycyBsb25nIGhhc2ggc3RyaW5nIHRvIGEgbG9uZyBvciBudW1iZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1bnNpZ25lZD1mYWxzZV0gV2hldGhlciB1bnNpZ25lZCBvciBub3RcbiAqIEByZXR1cm5zIHtMb25nfG51bWJlcn0gT3JpZ2luYWwgdmFsdWVcbiAqL1xudXRpbC5sb25nRnJvbUhhc2ggPSBmdW5jdGlvbiBsb25nRnJvbUhhc2goaGFzaCwgdW5zaWduZWQpIHtcbiAgICB2YXIgYml0cyA9IHV0aWwuTG9uZ0JpdHMuZnJvbUhhc2goaGFzaCk7XG4gICAgaWYgKHV0aWwuTG9uZylcbiAgICAgICAgcmV0dXJuIHV0aWwuTG9uZy5mcm9tQml0cyhiaXRzLmxvLCBiaXRzLmhpLCB1bnNpZ25lZCk7XG4gICAgcmV0dXJuIGJpdHMudG9OdW1iZXIoQm9vbGVhbih1bnNpZ25lZCkpO1xufTtcblxuLyoqXG4gKiBNZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNvdXJjZSBvYmplY3QgaW50byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQG1lbWJlcm9mIHV0aWxcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGRzdCBEZXN0aW5hdGlvbiBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IHNyYyBTb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpZk5vdFNldD1mYWxzZV0gTWVyZ2VzIG9ubHkgaWYgdGhlIGtleSBpcyBub3QgYWxyZWFkeSBzZXRcbiAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gRGVzdGluYXRpb24gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIG1lcmdlKGRzdCwgc3JjLCBpZk5vdFNldCkgeyAvLyB1c2VkIGJ5IGNvbnZlcnRlcnNcbiAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3JjKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICBpZiAoZHN0W2tleXNbaV1dID09PSB1bmRlZmluZWQgfHwgIWlmTm90U2V0KVxuICAgICAgICAgICAgZHN0W2tleXNbaV1dID0gc3JjW2tleXNbaV1dO1xuICAgIHJldHVybiBkc3Q7XG59XG5cbnV0aWwubWVyZ2UgPSBtZXJnZTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc3RyaW5nIHRvIGxvd2VyIGNhc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIFN0cmluZyB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb252ZXJ0ZWQgc3RyaW5nXG4gKi9cbnV0aWwubGNGaXJzdCA9IGZ1bmN0aW9uIGxjRmlyc3Qoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0ci5zdWJzdHJpbmcoMSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjdXN0b20gZXJyb3IgY29uc3RydWN0b3IuXG4gKiBAbWVtYmVyb2YgdXRpbFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXJyb3IgbmFtZVxuICogQHJldHVybnMge0NvbnN0cnVjdG9yPEVycm9yPn0gQ3VzdG9tIGVycm9yIGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIG5ld0Vycm9yKG5hbWUpIHtcblxuICAgIGZ1bmN0aW9uIEN1c3RvbUVycm9yKG1lc3NhZ2UsIHByb3BlcnRpZXMpIHtcblxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ3VzdG9tRXJyb3IpKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21FcnJvcihtZXNzYWdlLCBwcm9wZXJ0aWVzKTtcblxuICAgICAgICAvLyBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICAgICAgICAvLyBeIGp1c3QgcmV0dXJucyBhIG5ldyBlcnJvciBpbnN0YW5jZSBiZWNhdXNlIHRoZSBjdG9yIGNhbiBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvblxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1lc3NhZ2VcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbWVzc2FnZTsgfSB9KTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIC8vIG5vZGVcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEN1c3RvbUVycm9yKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhY2tcIiwgeyB2YWx1ZTogbmV3IEVycm9yKCkuc3RhY2sgfHwgXCJcIiB9KTtcblxuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIG1lcmdlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIChDdXN0b21FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQ3VzdG9tRXJyb3I7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ3VzdG9tRXJyb3IucHJvdG90eXBlLCBcIm5hbWVcIiwgeyBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmFtZTsgfSB9KTtcblxuICAgIEN1c3RvbUVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgdGhpcy5tZXNzYWdlO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ3VzdG9tRXJyb3I7XG59XG5cbnV0aWwubmV3RXJyb3IgPSBuZXdFcnJvcjtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHByb3RvY29sIGVycm9yLlxuICogQGNsYXNzZGVzYyBFcnJvciBzdWJjbGFzcyBpbmRpY2F0aW5nIGEgcHJvdG9jb2wgc3BlY2lmYyBlcnJvci5cbiAqIEBtZW1iZXJvZiB1dGlsXG4gKiBAZXh0ZW5kcyBFcnJvclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyBNZXNzYWdlPFQ+XG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2VcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IFtwcm9wZXJ0aWVzXSBBZGRpdGlvbmFsIHByb3BlcnRpZXNcbiAqIEBleGFtcGxlXG4gKiB0cnkge1xuICogICAgIE15TWVzc2FnZS5kZWNvZGUoc29tZUJ1ZmZlcik7IC8vIHRocm93cyBpZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAqIH0gY2F0Y2ggKGUpIHtcbiAqICAgICBpZiAoZSBpbnN0YW5jZW9mIFByb3RvY29sRXJyb3IgJiYgZS5pbnN0YW5jZSlcbiAqICAgICAgICAgY29uc29sZS5sb2coXCJkZWNvZGVkIHNvIGZhcjogXCIgKyBKU09OLnN0cmluZ2lmeShlLmluc3RhbmNlKSk7XG4gKiB9XG4gKi9cbnV0aWwuUHJvdG9jb2xFcnJvciA9IG5ld0Vycm9yKFwiUHJvdG9jb2xFcnJvclwiKTtcblxuLyoqXG4gKiBTbyBmYXIgZGVjb2RlZCBtZXNzYWdlIGluc3RhbmNlLlxuICogQG5hbWUgdXRpbC5Qcm90b2NvbEVycm9yI2luc3RhbmNlXG4gKiBAdHlwZSB7TWVzc2FnZTxUPn1cbiAqL1xuXG4vKipcbiAqIEEgT25lT2YgZ2V0dGVyIGFzIHJldHVybmVkIGJ5IHtAbGluayB1dGlsLm9uZU9mR2V0dGVyfS5cbiAqIEB0eXBlZGVmIE9uZU9mR2V0dGVyXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gU2V0IGZpZWxkIG5hbWUsIGlmIGFueVxuICovXG5cbi8qKlxuICogQnVpbGRzIGEgZ2V0dGVyIGZvciBhIG9uZW9mJ3MgcHJlc2VudCBmaWVsZCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmdbXX0gZmllbGROYW1lcyBGaWVsZCBuYW1lc1xuICogQHJldHVybnMge09uZU9mR2V0dGVyfSBVbmJvdW5kIGdldHRlclxuICovXG51dGlsLm9uZU9mR2V0dGVyID0gZnVuY3Rpb24gZ2V0T25lT2YoZmllbGROYW1lcykge1xuICAgIHZhciBmaWVsZE1hcCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgZmllbGRNYXBbZmllbGROYW1lc1tpXV0gPSAxO1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFNldCBmaWVsZCBuYW1lLCBpZiBhbnlcbiAgICAgKiBAdGhpcyBPYmplY3RcbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKSwgaSA9IGtleXMubGVuZ3RoIC0gMTsgaSA+IC0xOyAtLWkpXG4gICAgICAgICAgICBpZiAoZmllbGRNYXBba2V5c1tpXV0gPT09IDEgJiYgdGhpc1trZXlzW2ldXSAhPT0gdW5kZWZpbmVkICYmIHRoaXNba2V5c1tpXV0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXNbaV07XG4gICAgfTtcbn07XG5cbi8qKlxuICogQSBPbmVPZiBzZXR0ZXIgYXMgcmV0dXJuZWQgYnkge0BsaW5rIHV0aWwub25lT2ZTZXR0ZXJ9LlxuICogQHR5cGVkZWYgT25lT2ZTZXR0ZXJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7c3RyaW5nfHVuZGVmaW5lZH0gdmFsdWUgRmllbGQgbmFtZVxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG4vKipcbiAqIEJ1aWxkcyBhIHNldHRlciBmb3IgYSBvbmVvZidzIHByZXNlbnQgZmllbGQgbmFtZS5cbiAqIEBwYXJhbSB7c3RyaW5nW119IGZpZWxkTmFtZXMgRmllbGQgbmFtZXNcbiAqIEByZXR1cm5zIHtPbmVPZlNldHRlcn0gVW5ib3VuZCBzZXR0ZXJcbiAqL1xudXRpbC5vbmVPZlNldHRlciA9IGZ1bmN0aW9uIHNldE9uZU9mKGZpZWxkTmFtZXMpIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEZpZWxkIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqIEB0aGlzIE9iamVjdFxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkTmFtZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lc1tpXSAhPT0gbmFtZSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tmaWVsZE5hbWVzW2ldXTtcbiAgICB9O1xufTtcblxuLyoqXG4gKiBEZWZhdWx0IGNvbnZlcnNpb24gb3B0aW9ucyB1c2VkIGZvciB7QGxpbmsgTWVzc2FnZSN0b0pTT059IGltcGxlbWVudGF0aW9ucy5cbiAqXG4gKiBUaGVzZSBvcHRpb25zIGFyZSBjbG9zZSB0byBwcm90bzMncyBKU09OIG1hcHBpbmcgd2l0aCB0aGUgZXhjZXB0aW9uIHRoYXQgaW50ZXJuYWwgdHlwZXMgbGlrZSBBbnkgYXJlIGhhbmRsZWQganVzdCBsaWtlIG1lc3NhZ2VzLiBNb3JlIHByZWNpc2VseTpcbiAqXG4gKiAtIExvbmdzIGJlY29tZSBzdHJpbmdzXG4gKiAtIEVudW1zIGJlY29tZSBzdHJpbmcga2V5c1xuICogLSBCeXRlcyBiZWNvbWUgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICogLSAoU3ViLSlNZXNzYWdlcyBiZWNvbWUgcGxhaW4gb2JqZWN0c1xuICogLSBNYXBzIGJlY29tZSBwbGFpbiBvYmplY3RzIHdpdGggYWxsIHN0cmluZyBrZXlzXG4gKiAtIFJlcGVhdGVkIGZpZWxkcyBiZWNvbWUgYXJyYXlzXG4gKiAtIE5hTiBhbmQgSW5maW5pdHkgZm9yIGZsb2F0IGFuZCBkb3VibGUgZmllbGRzIGJlY29tZSBzdHJpbmdzXG4gKlxuICogQHR5cGUge0lDb252ZXJzaW9uT3B0aW9uc31cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvdG9jb2wtYnVmZmVycy9kb2NzL3Byb3RvMz9obD1lbiNqc29uXG4gKi9cbnV0aWwudG9KU09OT3B0aW9ucyA9IHtcbiAgICBsb25nczogU3RyaW5nLFxuICAgIGVudW1zOiBTdHJpbmcsXG4gICAgYnl0ZXM6IFN0cmluZyxcbiAgICBqc29uOiB0cnVlXG59O1xuXG4vLyBTZXRzIHVwIGJ1ZmZlciB1dGlsaXR5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQgKGNhbGxlZCBpbiBpbmRleC1taW5pbWFsKVxudXRpbC5fY29uZmlndXJlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIEJ1ZmZlciA9IHV0aWwuQnVmZmVyO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghQnVmZmVyKSB7XG4gICAgICAgIHV0aWwuX0J1ZmZlcl9mcm9tID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBiZWNhdXNlIG5vZGUgNC54IGJ1ZmZlcnMgYXJlIGluY29tcGF0aWJsZSAmIGltbXV0YWJsZVxuICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Rjb2RlSU8vcHJvdG9idWYuanMvcHVsbC82NjVcbiAgICB1dGlsLl9CdWZmZXJfZnJvbSA9IEJ1ZmZlci5mcm9tICE9PSBVaW50OEFycmF5LmZyb20gJiYgQnVmZmVyLmZyb20gfHxcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZnVuY3Rpb24gQnVmZmVyX2Zyb20odmFsdWUsIGVuY29kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmcpO1xuICAgICAgICB9O1xuICAgIHV0aWwuX0J1ZmZlcl9hbGxvY1Vuc2FmZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSB8fFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBCdWZmZXJfYWxsb2NVbnNhZmUoc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXIoc2l6ZSk7XG4gICAgICAgIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRlcjtcblxudmFyIHV0aWwgICAgICA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxudmFyIEJ1ZmZlcldyaXRlcjsgLy8gY3ljbGljXG5cbnZhciBMb25nQml0cyAgPSB1dGlsLkxvbmdCaXRzLFxuICAgIGJhc2U2NCAgICA9IHV0aWwuYmFzZTY0LFxuICAgIHV0ZjggICAgICA9IHV0aWwudXRmODtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB3cml0ZXIgb3BlcmF0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIFVpbnQ4QXJyYXksIG51bWJlcil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhbHVlIHRvIHdyaXRlXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIE9wKGZuLCBsZW4sIHZhbCkge1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oVWludDhBcnJheSwgbnVtYmVyLCAqKX1cbiAgICAgKi9cbiAgICB0aGlzLmZuID0gZm47XG5cbiAgICAvKipcbiAgICAgKiBWYWx1ZSBieXRlIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gbGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBvcGVyYXRpb24uXG4gICAgICogQHR5cGUge1dyaXRlci5PcHx1bmRlZmluZWR9XG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVmFsdWUgdG8gd3JpdGUuXG4gICAgICogQHR5cGUgeyp9XG4gICAgICovXG4gICAgdGhpcy52YWwgPSB2YWw7IC8vIHR5cGUgdmFyaWVzXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBub29wKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIHN0YXRlIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBDb3BpZWQgd3JpdGVyIHN0YXRlLlxuICogQG1lbWJlcm9mIFdyaXRlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1dyaXRlcn0gd3JpdGVyIFdyaXRlciB0byBjb3B5IHN0YXRlIGZyb21cbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gU3RhdGUod3JpdGVyKSB7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhlYWQuXG4gICAgICogQHR5cGUge1dyaXRlci5PcH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSB3cml0ZXIuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdGFpbC5cbiAgICAgKiBAdHlwZSB7V3JpdGVyLk9wfVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHdyaXRlci50YWlsO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBidWZmZXIgbGVuZ3RoLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5sZW4gPSB3cml0ZXIubGVuO1xuXG4gICAgLyoqXG4gICAgICogTmV4dCBzdGF0ZS5cbiAgICAgKiBAdHlwZSB7U3RhdGV8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm5leHQgPSB3cml0ZXIuc3RhdGVzO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gV3JpdGVyKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBsZW5ndGguXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxlbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIGhlYWQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmhlYWQgPSBuZXcgT3Aobm9vcCwgMCwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb25zIHRhaWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMudGFpbCA9IHRoaXMuaGVhZDtcblxuICAgIC8qKlxuICAgICAqIExpbmtlZCBmb3JrZWQgc3RhdGVzLlxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnN0YXRlcyA9IG51bGw7XG5cbiAgICAvLyBXaGVuIGEgdmFsdWUgaXMgd3JpdHRlbiwgdGhlIHdyaXRlciBjYWxjdWxhdGVzIGl0cyBieXRlIGxlbmd0aCBhbmQgcHV0cyBpdCBpbnRvIGEgbGlua2VkXG4gICAgLy8gbGlzdCBvZiBvcGVyYXRpb25zIHRvIHBlcmZvcm0gd2hlbiBmaW5pc2goKSBpcyBjYWxsZWQuIFRoaXMgYm90aCBhbGxvd3MgdXMgdG8gYWxsb2NhdGVcbiAgICAvLyBidWZmZXJzIG9mIHRoZSBleGFjdCByZXF1aXJlZCBzaXplIGFuZCByZWR1Y2VzIHRoZSBhbW91bnQgb2Ygd29yayB3ZSBoYXZlIHRvIGRvIGNvbXBhcmVkXG4gICAgLy8gdG8gZmlyc3QgY2FsY3VsYXRpbmcgb3ZlciBvYmplY3RzIGFuZCB0aGVuIGVuY29kaW5nIG92ZXIgb2JqZWN0cy4gSW4gb3VyIGNhc2UsIHRoZSBlbmNvZGluZ1xuICAgIC8vIHBhcnQgaXMganVzdCBhIGxpbmtlZCBsaXN0IHdhbGsgY2FsbGluZyBvcGVyYXRpb25zIHdpdGggYWxyZWFkeSBwcmVwYXJlZCB2YWx1ZXMuXG59XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHV0aWwuQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcl9zZXR1cCgpIHtcbiAgICAgICAgICAgIHJldHVybiAoV3JpdGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJXcml0ZXIoKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlcigpO1xuICAgICAgICB9O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHdyaXRlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcldyaXRlcnxXcml0ZXJ9IEEge0BsaW5rIEJ1ZmZlcldyaXRlcn0gd2hlbiBCdWZmZXJzIGFyZSBzdXBwb3J0ZWQsIG90aGVyd2lzZSBhIHtAbGluayBXcml0ZXJ9XG4gKi9cbldyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcblxuLyoqXG4gKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBCdWZmZXJcbiAqL1xuV3JpdGVyLmFsbG9jID0gZnVuY3Rpb24gYWxsb2Moc2l6ZSkge1xuICAgIHJldHVybiBuZXcgdXRpbC5BcnJheShzaXplKTtcbn07XG5cbi8vIFVzZSBVaW50OEFycmF5IGJ1ZmZlciBwb29sIGluIHRoZSBicm93c2VyLCBqdXN0IGxpa2Ugbm9kZSBkb2VzIHdpdGggYnVmZmVyc1xuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbmlmICh1dGlsLkFycmF5ICE9PSBBcnJheSlcbiAgICBXcml0ZXIuYWxsb2MgPSB1dGlsLnBvb2woV3JpdGVyLmFsbG9jLCB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSk7XG5cbi8qKlxuICogUHVzaGVzIGEgbmV3IG9wZXJhdGlvbiB0byB0aGUgcXVldWUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFVpbnQ4QXJyYXksIG51bWJlciwgKil9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHByaXZhdGVcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5fcHVzaCA9IGZ1bmN0aW9uIHB1c2goZm4sIGxlbiwgdmFsKSB7XG4gICAgdGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgT3AoZm4sIGxlbiwgdmFsKTtcbiAgICB0aGlzLmxlbiArPSBsZW47XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUJ5dGUodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3NdID0gdmFsICYgMjU1O1xufVxuXG5mdW5jdGlvbiB3cml0ZVZhcmludDMyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwgJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbCA+Pj49IDc7XG4gICAgfVxuICAgIGJ1Zltwb3NdID0gdmFsO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgdmFyaW50IHdyaXRlciBvcGVyYXRpb24gaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFNjaGVkdWxlZCB2YXJpbnQgd3JpdGVyIG9wZXJhdGlvbi5cbiAqIEBleHRlbmRzIE9wXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW4gVmFsdWUgYnl0ZSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gd3JpdGVcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gVmFyaW50T3AobGVuLCB2YWwpIHtcbiAgICB0aGlzLmxlbiA9IGxlbjtcbiAgICB0aGlzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy52YWwgPSB2YWw7XG59XG5cblZhcmludE9wLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoT3AucHJvdG90eXBlKTtcblZhcmludE9wLnByb3RvdHlwZS5mbiA9IHdyaXRlVmFyaW50MzI7XG5cbi8qKlxuICogV3JpdGVzIGFuIHVuc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDMyID0gZnVuY3Rpb24gd3JpdGVfdWludDMyKHZhbHVlKSB7XG4gICAgLy8gaGVyZSwgdGhlIGNhbGwgdG8gdGhpcy5wdXNoIGhhcyBiZWVuIGlubGluZWQgYW5kIGEgdmFyaW50IHNwZWNpZmljIE9wIHN1YmNsYXNzIGlzIHVzZWQuXG4gICAgLy8gdWludDMyIGlzIGJ5IGZhciB0aGUgbW9zdCBmcmVxdWVudGx5IHVzZWQgb3BlcmF0aW9uIGFuZCBiZW5lZml0cyBzaWduaWZpY2FudGx5IGZyb20gdGhpcy5cbiAgICB0aGlzLmxlbiArPSAodGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgVmFyaW50T3AoXG4gICAgICAgICh2YWx1ZSA9IHZhbHVlID4+PiAwKVxuICAgICAgICAgICAgICAgIDwgMTI4ICAgICAgID8gMVxuICAgICAgICA6IHZhbHVlIDwgMTYzODQgICAgID8gMlxuICAgICAgICA6IHZhbHVlIDwgMjA5NzE1MiAgID8gM1xuICAgICAgICA6IHZhbHVlIDwgMjY4NDM1NDU2ID8gNFxuICAgICAgICA6ICAgICAgICAgICAgICAgICAgICAgNSxcbiAgICB2YWx1ZSkpLmxlbjtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ludDMyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDwgMFxuICAgICAgICA/IHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgMTAsIExvbmdCaXRzLmZyb21OdW1iZXIodmFsdWUpKSAvLyAxMCBieXRlcyBwZXIgc3BlY1xuICAgICAgICA6IHRoaXMudWludDMyKHZhbHVlKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgMzIgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNpbnQzMiA9IGZ1bmN0aW9uIHdyaXRlX3NpbnQzMih2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigodmFsdWUgPDwgMSBeIHZhbHVlID4+IDMxKSA+Pj4gMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZVZhcmludDY0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICB3aGlsZSAodmFsLmhpKSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9ICh2YWwubG8gPj4+IDcgfCB2YWwuaGkgPDwgMjUpID4+PiAwO1xuICAgICAgICB2YWwuaGkgPj4+PSA3O1xuICAgIH1cbiAgICB3aGlsZSAodmFsLmxvID4gMTI3KSB7XG4gICAgICAgIGJ1Zltwb3MrK10gPSB2YWwubG8gJiAxMjcgfCAxMjg7XG4gICAgICAgIHZhbC5sbyA9IHZhbC5sbyA+Pj4gNztcbiAgICB9XG4gICAgYnVmW3BvcysrXSA9IHZhbC5sbztcbn1cblxuLyoqXG4gKiBXcml0ZXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LlxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUudWludDY0ID0gZnVuY3Rpb24gd3JpdGVfdWludDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCBiaXRzLmxlbmd0aCgpLCBiaXRzKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDY0IGJpdCB2YWx1ZSBhcyBhIHZhcmludC5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuaW50NjQgPSBXcml0ZXIucHJvdG90eXBlLnVpbnQ2NDtcblxuLyoqXG4gKiBXcml0ZXMgYSBzaWduZWQgNjQgYml0IHZhbHVlIGFzIGEgdmFyaW50LCB6aWctemFnIGVuY29kZWQuXG4gKiBAcGFyYW0ge0xvbmd8bnVtYmVyfHN0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBgdmFsdWVgIGlzIGEgc3RyaW5nIGFuZCBubyBsb25nIGxpYnJhcnkgaXMgcHJlc2VudC5cbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5zaW50NjQgPSBmdW5jdGlvbiB3cml0ZV9zaW50NjQodmFsdWUpIHtcbiAgICB2YXIgYml0cyA9IExvbmdCaXRzLmZyb20odmFsdWUpLnp6RW5jb2RlKCk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgYml0cy5sZW5ndGgoKSwgYml0cyk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGJvb2xpc2ggdmFsdWUgYXMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gd3JpdGVfYm9vbCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgdmFsdWUgPyAxIDogMCk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUZpeGVkMzIodmFsLCBidWYsIHBvcykge1xuICAgIGJ1Zltwb3MgICAgXSA9ICB2YWwgICAgICAgICAmIDI1NTtcbiAgICBidWZbcG9zICsgMV0gPSAgdmFsID4+PiA4ICAgJiAyNTU7XG4gICAgYnVmW3BvcyArIDJdID0gIHZhbCA+Pj4gMTYgICYgMjU1O1xuICAgIGJ1Zltwb3MgKyAzXSA9ICB2YWwgPj4+IDI0O1xufVxuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUgYXMgZml4ZWQgMzIgYml0cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHdyaXRlX2ZpeGVkMzIodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIHZhbHVlID4+PiAwKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZSBhcyBmaXhlZCAzMiBiaXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnNmaXhlZDMyID0gV3JpdGVyLnByb3RvdHlwZS5maXhlZDMyO1xuXG4vKipcbiAqIFdyaXRlcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGB2YWx1ZWAgaXMgYSBzdHJpbmcgYW5kIG5vIGxvbmcgbGlicmFyeSBpcyBwcmVzZW50LlxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZpeGVkNjQgPSBmdW5jdGlvbiB3cml0ZV9maXhlZDY0KHZhbHVlKSB7XG4gICAgdmFyIGJpdHMgPSBMb25nQml0cy5mcm9tKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGJpdHMubG8pLl9wdXNoKHdyaXRlRml4ZWQzMiwgNCwgYml0cy5oaSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUgYXMgZml4ZWQgNjQgYml0cy5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtMb25nfG51bWJlcnxzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgYHZhbHVlYCBpcyBhIHN0cmluZyBhbmQgbm8gbG9uZyBsaWJyYXJ5IGlzIHByZXNlbnQuXG4gKi9cbldyaXRlci5wcm90b3R5cGUuc2ZpeGVkNjQgPSBXcml0ZXIucHJvdG90eXBlLmZpeGVkNjQ7XG5cbi8qKlxuICogV3JpdGVzIGEgZmxvYXQgKDMyIGJpdCkuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBWYWx1ZSB0byB3cml0ZVxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiB3cml0ZV9mbG9hdCh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHV0aWwuZmxvYXQud3JpdGVGbG9hdExFLCA0LCB2YWx1ZSk7XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KS5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFZhbHVlIHRvIHdyaXRlXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5kb3VibGUgPSBmdW5jdGlvbiB3cml0ZV9kb3VibGUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh1dGlsLmZsb2F0LndyaXRlRG91YmxlTEUsIDgsIHZhbHVlKTtcbn07XG5cbnZhciB3cml0ZUJ5dGVzID0gdXRpbC5BcnJheS5wcm90b3R5cGUuc2V0XG4gICAgPyBmdW5jdGlvbiB3cml0ZUJ5dGVzX3NldCh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgIGJ1Zi5zZXQodmFsLCBwb3MpOyAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNfZm9yKHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICBidWZbcG9zICsgaV0gPSB2YWxbaV07XG4gICAgfTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzZXF1ZW5jZSBvZiBieXRlcy5cbiAqIEBwYXJhbSB7VWludDhBcnJheXxzdHJpbmd9IHZhbHVlIEJ1ZmZlciBvciBiYXNlNjQgZW5jb2RlZCBzdHJpbmcgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gd3JpdGVfYnl0ZXModmFsdWUpIHtcbiAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoID4+PiAwO1xuICAgIGlmICghbGVuKVxuICAgICAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICB2YXIgYnVmID0gV3JpdGVyLmFsbG9jKGxlbiA9IGJhc2U2NC5sZW5ndGgodmFsdWUpKTtcbiAgICAgICAgYmFzZTY0LmRlY29kZSh2YWx1ZSwgYnVmLCAwKTtcbiAgICAgICAgdmFsdWUgPSBidWY7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVpbnQzMihsZW4pLl9wdXNoKHdyaXRlQnl0ZXMsIGxlbiwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVmFsdWUgdG8gd3JpdGVcbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZyh2YWx1ZSkge1xuICAgIHZhciBsZW4gPSB1dGY4Lmxlbmd0aCh2YWx1ZSk7XG4gICAgcmV0dXJuIGxlblxuICAgICAgICA/IHRoaXMudWludDMyKGxlbikuX3B1c2godXRmOC53cml0ZSwgbGVuLCB2YWx1ZSlcbiAgICAgICAgOiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgMCk7XG59O1xuXG4vKipcbiAqIEZvcmtzIHRoaXMgd3JpdGVyJ3Mgc3RhdGUgYnkgcHVzaGluZyBpdCB0byBhIHN0YWNrLlxuICogQ2FsbGluZyB7QGxpbmsgV3JpdGVyI3Jlc2V0fHJlc2V0fSBvciB7QGxpbmsgV3JpdGVyI2xkZWxpbXxsZGVsaW19IHJlc2V0cyB0aGUgd3JpdGVyIHRvIHRoZSBwcmV2aW91cyBzdGF0ZS5cbiAqIEByZXR1cm5zIHtXcml0ZXJ9IGB0aGlzYFxuICovXG5Xcml0ZXIucHJvdG90eXBlLmZvcmsgPSBmdW5jdGlvbiBmb3JrKCkge1xuICAgIHRoaXMuc3RhdGVzID0gbmV3IFN0YXRlKHRoaXMpO1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyBPcChub29wLCAwLCAwKTtcbiAgICB0aGlzLmxlbiA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlc2V0cyB0aGlzIGluc3RhbmNlIHRvIHRoZSBsYXN0IHN0YXRlLlxuICogQHJldHVybnMge1dyaXRlcn0gYHRoaXNgXG4gKi9cbldyaXRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZXMpIHtcbiAgICAgICAgdGhpcy5oZWFkICAgPSB0aGlzLnN0YXRlcy5oZWFkO1xuICAgICAgICB0aGlzLnRhaWwgICA9IHRoaXMuc3RhdGVzLnRhaWw7XG4gICAgICAgIHRoaXMubGVuICAgID0gdGhpcy5zdGF0ZXMubGVuO1xuICAgICAgICB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzLm5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbmV3IE9wKG5vb3AsIDAsIDApO1xuICAgICAgICB0aGlzLmxlbiAgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogUmVzZXRzIHRvIHRoZSBsYXN0IHN0YXRlIGFuZCBhcHBlbmRzIHRoZSBmb3JrIHN0YXRlJ3MgY3VycmVudCB3cml0ZSBsZW5ndGggYXMgYSB2YXJpbnQgZm9sbG93ZWQgYnkgaXRzIG9wZXJhdGlvbnMuXG4gKiBAcmV0dXJucyB7V3JpdGVyfSBgdGhpc2BcbiAqL1xuV3JpdGVyLnByb3RvdHlwZS5sZGVsaW0gPSBmdW5jdGlvbiBsZGVsaW0oKSB7XG4gICAgdmFyIGhlYWQgPSB0aGlzLmhlYWQsXG4gICAgICAgIHRhaWwgPSB0aGlzLnRhaWwsXG4gICAgICAgIGxlbiAgPSB0aGlzLmxlbjtcbiAgICB0aGlzLnJlc2V0KCkudWludDMyKGxlbik7XG4gICAgaWYgKGxlbikge1xuICAgICAgICB0aGlzLnRhaWwubmV4dCA9IGhlYWQubmV4dDsgLy8gc2tpcCBub29wXG4gICAgICAgIHRoaXMudGFpbCA9IHRhaWw7XG4gICAgICAgIHRoaXMubGVuICs9IGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gRmluaXNoZWQgYnVmZmVyXG4gKi9cbldyaXRlci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIHZhciBoZWFkID0gdGhpcy5oZWFkLm5leHQsIC8vIHNraXAgbm9vcFxuICAgICAgICBidWYgID0gdGhpcy5jb25zdHJ1Y3Rvci5hbGxvYyh0aGlzLmxlbiksXG4gICAgICAgIHBvcyAgPSAwO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICAgIGhlYWQuZm4oaGVhZC52YWwsIGJ1ZiwgcG9zKTtcbiAgICAgICAgcG9zICs9IGhlYWQubGVuO1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICAvLyB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHJldHVybiBidWY7XG59O1xuXG5Xcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlcldyaXRlcl8pIHtcbiAgICBCdWZmZXJXcml0ZXIgPSBCdWZmZXJXcml0ZXJfO1xuICAgIFdyaXRlci5jcmVhdGUgPSBjcmVhdGUoKTtcbiAgICBCdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSgpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJXcml0ZXI7XG5cbi8vIGV4dGVuZHMgV3JpdGVyXG52YXIgV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xuKEJ1ZmZlcldyaXRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFdyaXRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlcldyaXRlcjtcblxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxuICogQGV4dGVuZHMgV3JpdGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQnVmZmVyV3JpdGVyKCkge1xuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xufVxuXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBBbGxvY2F0ZXMgYSBidWZmZXIgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIEJ1ZmZlciBzaXplXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gQnVmZmVyXG4gICAgICovXG4gICAgQnVmZmVyV3JpdGVyLmFsbG9jID0gdXRpbC5fQnVmZmVyX2FsbG9jVW5zYWZlO1xuXG4gICAgQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIgPSB1dGlsLkJ1ZmZlciAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zZXQubmFtZSA9PT0gXCJzZXRcIlxuICAgICAgICA/IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfc2V0KHZhbCwgYnVmLCBwb3MpIHtcbiAgICAgICAgICBidWYuc2V0KHZhbCwgcG9zKTsgLy8gZmFzdGVyIHRoYW4gY29weSAocmVxdWlyZXMgbm9kZSA+PSA0IHdoZXJlIEJ1ZmZlcnMgZXh0ZW5kIFVpbnQ4QXJyYXkgYW5kIHNldCBpcyBwcm9wZXJseSBpbmhlcml0ZWQpXG4gICAgICAgICAgLy8gYWxzbyB3b3JrcyBmb3IgcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX2NvcHkodmFsLCBidWYsIHBvcykge1xuICAgICAgICAgIGlmICh2YWwuY29weSkgLy8gQnVmZmVyIHZhbHVlc1xuICAgICAgICAgICAgdmFsLmNvcHkoYnVmLCBwb3MsIDAsIHZhbC5sZW5ndGgpO1xuICAgICAgICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOykgLy8gcGxhaW4gYXJyYXkgdmFsdWVzXG4gICAgICAgICAgICBidWZbcG9zKytdID0gdmFsW2krK107XG4gICAgICAgIH07XG59O1xuXG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiB3cml0ZV9ieXRlc19idWZmZXIodmFsdWUpIHtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpXG4gICAgICAgIHZhbHVlID0gdXRpbC5fQnVmZmVyX2Zyb20odmFsdWUsIFwiYmFzZTY0XCIpO1xuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggPj4+IDA7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyLCBsZW4sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHdyaXRlU3RyaW5nQnVmZmVyKHZhbCwgYnVmLCBwb3MpIHtcbiAgICBpZiAodmFsLmxlbmd0aCA8IDQwKSAvLyBwbGFpbiBqcyBpcyBmYXN0ZXIgZm9yIHNob3J0IHN0cmluZ3MgKHByb2JhYmx5IGR1ZSB0byByZWR1bmRhbnQgYXNzZXJ0aW9ucylcbiAgICAgICAgdXRpbC51dGY4LndyaXRlKHZhbCwgYnVmLCBwb3MpO1xuICAgIGVsc2UgaWYgKGJ1Zi51dGY4V3JpdGUpXG4gICAgICAgIGJ1Zi51dGY4V3JpdGUodmFsLCBwb3MpO1xuICAgIGVsc2VcbiAgICAgICAgYnVmLndyaXRlKHZhbCwgcG9zKTtcbn1cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiB3cml0ZV9zdHJpbmdfYnVmZmVyKHZhbHVlKSB7XG4gICAgdmFyIGxlbiA9IHV0aWwuQnVmZmVyLmJ5dGVMZW5ndGgodmFsdWUpO1xuICAgIHRoaXMudWludDMyKGxlbik7XG4gICAgaWYgKGxlbilcbiAgICAgICAgdGhpcy5fcHVzaCh3cml0ZVN0cmluZ0J1ZmZlciwgbGVuLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogRmluaXNoZXMgdGhlIHdyaXRlIG9wZXJhdGlvbi5cbiAqIEBuYW1lIEJ1ZmZlcldyaXRlciNmaW5pc2hcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0J1ZmZlcn0gRmluaXNoZWQgYnVmZmVyXG4gKi9cblxuQnVmZmVyV3JpdGVyLl9jb25maWd1cmUoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFkZXI7XG5cbnZhciB1dGlsICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbnZhciBCdWZmZXJSZWFkZXI7IC8vIGN5Y2xpY1xuXG52YXIgTG9uZ0JpdHMgID0gdXRpbC5Mb25nQml0cyxcbiAgICB1dGY4ICAgICAgPSB1dGlsLnV0Zjg7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpbmRleE91dE9mUmFuZ2UocmVhZGVyLCB3cml0ZUxlbmd0aCkge1xuICAgIHJldHVybiBSYW5nZUVycm9yKFwiaW5kZXggb3V0IG9mIHJhbmdlOiBcIiArIHJlYWRlci5wb3MgKyBcIiArIFwiICsgKHdyaXRlTGVuZ3RoIHx8IDEpICsgXCIgPiBcIiArIHJlYWRlci5sZW4pO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcmVhZGVyIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgYnVmZmVyLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cbiAqL1xuZnVuY3Rpb24gUmVhZGVyKGJ1ZmZlcikge1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQHR5cGUge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5idWYgPSBidWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlciBwb3NpdGlvbi5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucG9zID0gMDtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gYnVmZmVyLmxlbmd0aDtcbn1cblxudmFyIGNyZWF0ZV9hcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiBjcmVhdGVfdHlwZWRfYXJyYXkoYnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IEFycmF5LmlzQXJyYXkoYnVmZmVyKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoYnVmZmVyKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJ1ZmZlcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRlcihidWZmZXIpO1xuICAgICAgICB0aHJvdyBFcnJvcihcImlsbGVnYWwgYnVmZmVyXCIpO1xuICAgIH07XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIHV0aWwuQnVmZmVyXG4gICAgICAgID8gZnVuY3Rpb24gY3JlYXRlX2J1ZmZlcl9zZXR1cChidWZmZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoUmVhZGVyLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZV9idWZmZXIoYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgQnVmZmVyUmVhZGVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICAgICAgICAgICAgOiBjcmVhdGVfYXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICAgIH0pKGJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgOiBjcmVhdGVfYXJyYXk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcmVhZGVyIHVzaW5nIHRoZSBzcGVjaWZpZWQgYnVmZmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxuICogQHJldHVybnMge1JlYWRlcnxCdWZmZXJSZWFkZXJ9IEEge0BsaW5rIEJ1ZmZlclJlYWRlcn0gaWYgYGJ1ZmZlcmAgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBhIHtAbGluayBSZWFkZXJ9XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYGJ1ZmZlcmAgaXMgbm90IGEgdmFsaWQgYnVmZmVyXG4gKi9cblJlYWRlci5jcmVhdGUgPSBjcmVhdGUoKTtcblxuUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLkFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS51aW50MzIgPSAoZnVuY3Rpb24gcmVhZF91aW50MzJfc2V0dXAoKSB7XG4gICAgdmFyIHZhbHVlID0gNDI5NDk2NzI5NTsgLy8gb3B0aW1pemVyIHR5cGUtaGludCwgdGVuZHMgdG8gZGVvcHQgb3RoZXJ3aXNlICg/ISlcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVhZF91aW50MzIoKSB7XG4gICAgICAgIHZhbHVlID0gKCAgICAgICAgIHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNyAgICAgICApID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAgNykgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IDE0KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjEpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgIDE1KSA8PCAyOCkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoKHRoaXMucG9zICs9IDUpID4gdGhpcy5sZW4pIHtcbiAgICAgICAgICAgIHRoaXMucG9zID0gdGhpcy5sZW47XG4gICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuaW50MzIgPSBmdW5jdGlvbiByZWFkX2ludDMyKCkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigpIHwgMDtcbn07XG5cbi8qKlxuICogUmVhZHMgYSB6aWctemFnIGVuY29kZWQgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zaW50MzIgPSBmdW5jdGlvbiByZWFkX3NpbnQzMigpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnVpbnQzMigpO1xuICAgIHJldHVybiB2YWx1ZSA+Pj4gMSBeIC0odmFsdWUgJiAxKSB8IDA7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuZnVuY3Rpb24gcmVhZExvbmdWYXJpbnQoKSB7XG4gICAgLy8gdGVuZHMgdG8gZGVvcHQgd2l0aCBsb2NhbCB2YXJzIGZvciBvY3RldCBldGMuXG4gICAgdmFyIGJpdHMgPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh0aGlzLmxlbiAtIHRoaXMucG9zID4gNCkgeyAvLyBmYXN0IHJvdXRlIChsbylcbiAgICAgICAgZm9yICg7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgICAgIC8vIDFzdC4uNHRoXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNXRoXG4gICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IDI4KSA+Pj4gMDtcbiAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPj4gIDQpID4+PiAwO1xuICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgaSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIDFzdC4uM3RoXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNHRoXG4gICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSAmIDEyNykgPDwgaSAqIDcpID4+PiAwO1xuICAgICAgICByZXR1cm4gYml0cztcbiAgICB9XG4gICAgaWYgKHRoaXMubGVuIC0gdGhpcy5wb3MgPiA0KSB7IC8vIGZhc3Qgcm91dGUgKGhpKVxuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgLy8gNnRoLi4xMHRoXG4gICAgICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNyArIDMpID4+PiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCA1OyArK2kpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIDZ0aC4uMTB0aFxuICAgICAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgaSAqIDcgKyAzKSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB2YXJpbnQgZW5jb2RpbmdcIik7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXG5cbi8qKlxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBzaWduZWQgNjQgYml0IHZhbHVlLlxuICogQG5hbWUgUmVhZGVyI2ludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhbiB1bnNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjdWludDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCB2YXJpbnQgYXMgYSBzaWduZWQgNjQgYml0IHZhbHVlLlxuICogQG5hbWUgUmVhZGVyI3NpbnQ2NFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TG9uZ30gVmFsdWUgcmVhZFxuICovXG5cbi8qKlxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBib29sZWFuLlxuICogQHJldHVybnMge2Jvb2xlYW59IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gcmVhZF9ib29sKCkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigpICE9PSAwO1xufTtcblxuZnVuY3Rpb24gcmVhZEZpeGVkMzJfZW5kKGJ1ZiwgZW5kKSB7IC8vIG5vdGUgdGhhdCB0aGlzIHVzZXMgYGVuZGAsIG5vdCBgcG9zYFxuICAgIHJldHVybiAoYnVmW2VuZCAtIDRdXG4gICAgICAgICAgfCBidWZbZW5kIC0gM10gPDwgOFxuICAgICAgICAgIHwgYnVmW2VuZCAtIDJdIDw8IDE2XG4gICAgICAgICAgfCBidWZbZW5kIC0gMV0gPDwgMjQpID4+PiAwO1xufVxuXG4vKipcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgMzIgYml0IGludGVnZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfZml4ZWQzMigpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xuXG4gICAgcmV0dXJuIHJlYWRGaXhlZDMyX2VuZCh0aGlzLmJ1ZiwgdGhpcy5wb3MgKz0gNCk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYSBzaWduZWQgMzIgYml0IGludGVnZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2ZpeGVkMzIgPSBmdW5jdGlvbiByZWFkX3NmaXhlZDMyKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICByZXR1cm4gcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSB8IDA7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuZnVuY3Rpb24gcmVhZEZpeGVkNjQoLyogdGhpczogUmVhZGVyICovKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA4KTtcblxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMocmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSwgcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSk7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXG5cbi8qKlxuICogUmVhZHMgZml4ZWQgNjQgYml0cy5cbiAqIEBuYW1lIFJlYWRlciNmaXhlZDY0XG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtMb25nfSBWYWx1ZSByZWFkXG4gKi9cblxuLyoqXG4gKiBSZWFkcyB6aWctemFnIGVuY29kZWQgZml4ZWQgNjQgYml0cy5cbiAqIEBuYW1lIFJlYWRlciNzZml4ZWQ2NFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TG9uZ30gVmFsdWUgcmVhZFxuICovXG5cbi8qKlxuICogUmVhZHMgYSBmbG9hdCAoMzIgYml0KSBhcyBhIG51bWJlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24gcmVhZF9mbG9hdCgpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xuXG4gICAgdmFyIHZhbHVlID0gdXRpbC5mbG9hdC5yZWFkRmxvYXRMRSh0aGlzLmJ1ZiwgdGhpcy5wb3MpO1xuICAgIHRoaXMucG9zICs9IDQ7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIGRvdWJsZSAoNjQgYml0IGZsb2F0KSBhcyBhIG51bWJlci5cbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge251bWJlcn0gVmFsdWUgcmVhZFxuICovXG5SZWFkZXIucHJvdG90eXBlLmRvdWJsZSA9IGZ1bmN0aW9uIHJlYWRfZG91YmxlKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgOCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICB2YXIgdmFsdWUgPSB1dGlsLmZsb2F0LnJlYWREb3VibGVMRSh0aGlzLmJ1ZiwgdGhpcy5wb3MpO1xuICAgIHRoaXMucG9zICs9IDg7XG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5ieXRlcyA9IGZ1bmN0aW9uIHJlYWRfYnl0ZXMoKSB7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMudWludDMyKCksXG4gICAgICAgIHN0YXJ0ICA9IHRoaXMucG9zLFxuICAgICAgICBlbmQgICAgPSB0aGlzLnBvcyArIGxlbmd0aDtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChlbmQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIGxlbmd0aCk7XG5cbiAgICB0aGlzLnBvcyArPSBsZW5ndGg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5idWYpKSAvLyBwbGFpbiBhcnJheVxuICAgICAgICByZXR1cm4gdGhpcy5idWYuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgcmV0dXJuIHN0YXJ0ID09PSBlbmQgLy8gZml4IGZvciBJRSAxMC9XaW44IGFuZCBvdGhlcnMnIHN1YmFycmF5IHJldHVybmluZyBhcnJheSBvZiBzaXplIDFcbiAgICAgICAgPyBuZXcgdGhpcy5idWYuY29uc3RydWN0b3IoMClcbiAgICAgICAgOiB0aGlzLl9zbGljZS5jYWxsKHRoaXMuYnVmLCBzdGFydCwgZW5kKTtcbn07XG5cbi8qKlxuICogUmVhZHMgYSBzdHJpbmcgcHJlY2VlZGVkIGJ5IGl0cyBieXRlIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZygpIHtcbiAgICB2YXIgYnl0ZXMgPSB0aGlzLmJ5dGVzKCk7XG4gICAgcmV0dXJuIHV0ZjgucmVhZChieXRlcywgMCwgYnl0ZXMubGVuZ3RoKTtcbn07XG5cbi8qKlxuICogU2tpcHMgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgYnl0ZXMgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2Ugc2tpcHMgYSB2YXJpbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTGVuZ3RoIGlmIGtub3duLCBvdGhlcndpc2UgYSB2YXJpbnQgaXMgYXNzdW1lZFxuICogQHJldHVybnMge1JlYWRlcn0gYHRoaXNgXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIHNraXAobGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0aGlzLnBvcyArIGxlbmd0aCA+IHRoaXMubGVuKVxuICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMucG9zICs9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmxlbilcbiAgICAgICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcyk7XG4gICAgICAgIH0gd2hpbGUgKHRoaXMuYnVmW3RoaXMucG9zKytdICYgMTI4KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNraXBzIHRoZSBuZXh0IGVsZW1lbnQgb2YgdGhlIHNwZWNpZmllZCB3aXJlIHR5cGUuXG4gKiBAcGFyYW0ge251bWJlcn0gd2lyZVR5cGUgV2lyZSB0eXBlIHJlY2VpdmVkXG4gKiBAcmV0dXJucyB7UmVhZGVyfSBgdGhpc2BcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5za2lwVHlwZSA9IGZ1bmN0aW9uKHdpcmVUeXBlKSB7XG4gICAgc3dpdGNoICh3aXJlVHlwZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICB0aGlzLnNraXAoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB0aGlzLnNraXAoOCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgdGhpcy5za2lwKHRoaXMudWludDMyKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHdoaWxlICgod2lyZVR5cGUgPSB0aGlzLnVpbnQzMigpICYgNykgIT09IDQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNraXBUeXBlKHdpcmVUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB0aGlzLnNraXAoNCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHdpcmUgdHlwZSBcIiArIHdpcmVUeXBlICsgXCIgYXQgb2Zmc2V0IFwiICsgdGhpcy5wb3MpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblJlYWRlci5fY29uZmlndXJlID0gZnVuY3Rpb24oQnVmZmVyUmVhZGVyXykge1xuICAgIEJ1ZmZlclJlYWRlciA9IEJ1ZmZlclJlYWRlcl87XG4gICAgUmVhZGVyLmNyZWF0ZSA9IGNyZWF0ZSgpO1xuICAgIEJ1ZmZlclJlYWRlci5fY29uZmlndXJlKCk7XG5cbiAgICB2YXIgZm4gPSB1dGlsLkxvbmcgPyBcInRvTG9uZ1wiIDogLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gXCJ0b051bWJlclwiO1xuICAgIHV0aWwubWVyZ2UoUmVhZGVyLnByb3RvdHlwZSwge1xuXG4gICAgICAgIGludDY0OiBmdW5jdGlvbiByZWFkX2ludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcylbZm5dKGZhbHNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1aW50NjQ6IGZ1bmN0aW9uIHJlYWRfdWludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcylbZm5dKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNpbnQ2NDogZnVuY3Rpb24gcmVhZF9zaW50NjQoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZExvbmdWYXJpbnQuY2FsbCh0aGlzKS56ekRlY29kZSgpW2ZuXShmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZml4ZWQ2NDogZnVuY3Rpb24gcmVhZF9maXhlZDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRGaXhlZDY0LmNhbGwodGhpcylbZm5dKHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNmaXhlZDY0OiBmdW5jdGlvbiByZWFkX3NmaXhlZDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRGaXhlZDY0LmNhbGwodGhpcylbZm5dKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlclJlYWRlcjtcblxuLy8gZXh0ZW5kcyBSZWFkZXJcbnZhciBSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG4oQnVmZmVyUmVhZGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVhZGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyUmVhZGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciByZWFkZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBSZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlclJlYWRlcihidWZmZXIpIHtcbiAgICBSZWFkZXIuY2FsbCh0aGlzLCBidWZmZXIpO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICovXG59XG5cbkJ1ZmZlclJlYWRlci5fY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHV0aWwuQnVmZmVyKVxuICAgICAgICBCdWZmZXJSZWFkZXIucHJvdG90eXBlLl9zbGljZSA9IHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbn07XG5cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZ19idWZmZXIoKSB7XG4gICAgdmFyIGxlbiA9IHRoaXMudWludDMyKCk7IC8vIG1vZGlmaWVzIHBvc1xuICAgIHJldHVybiB0aGlzLmJ1Zi51dGY4U2xpY2VcbiAgICAgICAgPyB0aGlzLmJ1Zi51dGY4U2xpY2UodGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSlcbiAgICAgICAgOiB0aGlzLmJ1Zi50b1N0cmluZyhcInV0Zi04XCIsIHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQG5hbWUgQnVmZmVyUmVhZGVyI2J5dGVzXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcbiAqL1xuXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4uL3V0aWwvbWluaW1hbFwiKTtcblxuLy8gRXh0ZW5kcyBFdmVudEVtaXR0ZXJcbihTZXJ2aWNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUodXRpbC5FdmVudEVtaXR0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBTZXJ2aWNlO1xuXG4vKipcbiAqIEEgc2VydmljZSBtZXRob2QgY2FsbGJhY2sgYXMgdXNlZCBieSB7QGxpbmsgcnBjLlNlcnZpY2VNZXRob2R8U2VydmljZU1ldGhvZH0uXG4gKlxuICogRGlmZmVycyBmcm9tIHtAbGluayBSUENJbXBsQ2FsbGJhY2t9IGluIHRoYXQgaXQgaXMgYW4gYWN0dWFsIGNhbGxiYWNrIG9mIGEgc2VydmljZSBtZXRob2Qgd2hpY2ggbWF5IG5vdCByZXR1cm4gYHJlc3BvbnNlID0gbnVsbGAuXG4gKiBAdHlwZWRlZiBycGMuU2VydmljZU1ldGhvZENhbGxiYWNrXG4gKiBAdGVtcGxhdGUgVFJlcyBleHRlbmRzIE1lc3NhZ2U8VFJlcz5cbiAqIEB0eXBlIHtmdW5jdGlvbn1cbiAqIEBwYXJhbSB7RXJyb3J8bnVsbH0gZXJyb3IgRXJyb3IsIGlmIGFueVxuICogQHBhcmFtIHtUUmVzfSBbcmVzcG9uc2VdIFJlc3BvbnNlIG1lc3NhZ2VcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxuLyoqXG4gKiBBIHNlcnZpY2UgbWV0aG9kIHBhcnQgb2YgYSB7QGxpbmsgcnBjLlNlcnZpY2V9IGFzIGNyZWF0ZWQgYnkge0BsaW5rIFNlcnZpY2UuY3JlYXRlfS5cbiAqIEB0eXBlZGVmIHJwYy5TZXJ2aWNlTWV0aG9kXG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtUUmVxfFByb3BlcnRpZXM8VFJlcT59IHJlcXVlc3QgUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdFxuICogQHBhcmFtIHtycGMuU2VydmljZU1ldGhvZENhbGxiYWNrPFRSZXM+fSBbY2FsbGJhY2tdIE5vZGUtc3R5bGUgY2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIGVycm9yLCBpZiBhbnksIGFuZCB0aGUgcmVzcG9uc2UgbWVzc2FnZVxuICogQHJldHVybnMge1Byb21pc2U8TWVzc2FnZTxUUmVzPj59IFByb21pc2UgaWYgYGNhbGxiYWNrYCBoYXMgYmVlbiBvbWl0dGVkLCBvdGhlcndpc2UgYHVuZGVmaW5lZGBcbiAqL1xuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgUlBDIHNlcnZpY2UgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIEFuIFJQQyBzZXJ2aWNlIGFzIHJldHVybmVkIGJ5IHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0uXG4gKiBAZXhwb3J0cyBycGMuU2VydmljZVxuICogQGV4dGVuZHMgdXRpbC5FdmVudEVtaXR0ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtSUENJbXBsfSBycGNJbXBsIFJQQyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtIHtib29sZWFufSBbcmVxdWVzdERlbGltaXRlZD1mYWxzZV0gV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZFxuICogQHBhcmFtIHtib29sZWFufSBbcmVzcG9uc2VEZWxpbWl0ZWQ9ZmFsc2VdIFdoZXRoZXIgcmVzcG9uc2VzIGFyZSBsZW5ndGgtZGVsaW1pdGVkXG4gKi9cbmZ1bmN0aW9uIFNlcnZpY2UocnBjSW1wbCwgcmVxdWVzdERlbGltaXRlZCwgcmVzcG9uc2VEZWxpbWl0ZWQpIHtcblxuICAgIGlmICh0eXBlb2YgcnBjSW1wbCAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJycGNJbXBsIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIHV0aWwuRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBSUEMgaW1wbGVtZW50YXRpb24uIEJlY29tZXMgYG51bGxgIG9uY2UgdGhlIHNlcnZpY2UgaXMgZW5kZWQuXG4gICAgICogQHR5cGUge1JQQ0ltcGx8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnJwY0ltcGwgPSBycGNJbXBsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXF1ZXN0cyBhcmUgbGVuZ3RoLWRlbGltaXRlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlcXVlc3REZWxpbWl0ZWQgPSBCb29sZWFuKHJlcXVlc3REZWxpbWl0ZWQpO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciByZXNwb25zZXMgYXJlIGxlbmd0aC1kZWxpbWl0ZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNwb25zZURlbGltaXRlZCA9IEJvb2xlYW4ocmVzcG9uc2VEZWxpbWl0ZWQpO1xufVxuXG4vKipcbiAqIENhbGxzIGEgc2VydmljZSBtZXRob2QgdGhyb3VnaCB7QGxpbmsgcnBjLlNlcnZpY2UjcnBjSW1wbHxycGNJbXBsfS5cbiAqIEBwYXJhbSB7TWV0aG9kfHJwYy5TZXJ2aWNlTWV0aG9kPFRSZXEsVFJlcz59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZFxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVxPn0gcmVxdWVzdEN0b3IgUmVxdWVzdCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtDb25zdHJ1Y3RvcjxUUmVzPn0gcmVzcG9uc2VDdG9yIFJlc3BvbnNlIGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1RSZXF8UHJvcGVydGllczxUUmVxPn0gcmVxdWVzdCBSZXF1ZXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0XG4gKiBAcGFyYW0ge3JwYy5TZXJ2aWNlTWV0aG9kQ2FsbGJhY2s8VFJlcz59IGNhbGxiYWNrIFNlcnZpY2UgY2FsbGJhY2tcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAdGVtcGxhdGUgVFJlcSBleHRlbmRzIE1lc3NhZ2U8VFJlcT5cbiAqIEB0ZW1wbGF0ZSBUUmVzIGV4dGVuZHMgTWVzc2FnZTxUUmVzPlxuICovXG5TZXJ2aWNlLnByb3RvdHlwZS5ycGNDYWxsID0gZnVuY3Rpb24gcnBjQ2FsbChtZXRob2QsIHJlcXVlc3RDdG9yLCByZXNwb25zZUN0b3IsIHJlcXVlc3QsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXJlcXVlc3QpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcihcInJlcXVlc3QgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuIHV0aWwuYXNQcm9taXNlKHJwY0NhbGwsIHNlbGYsIG1ldGhvZCwgcmVxdWVzdEN0b3IsIHJlc3BvbnNlQ3RvciwgcmVxdWVzdCk7XG5cbiAgICBpZiAoIXNlbGYucnBjSW1wbCkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhFcnJvcihcImFscmVhZHkgZW5kZWRcIikpOyB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gc2VsZi5ycGNJbXBsKFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgcmVxdWVzdEN0b3Jbc2VsZi5yZXF1ZXN0RGVsaW1pdGVkID8gXCJlbmNvZGVEZWxpbWl0ZWRcIiA6IFwiZW5jb2RlXCJdKHJlcXVlc3QpLmZpbmlzaCgpLFxuICAgICAgICAgICAgZnVuY3Rpb24gcnBjQ2FsbGJhY2soZXJyLCByZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIsIG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmVuZCgvKiBlbmRlZEJ5UlBDICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgcmVzcG9uc2VDdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZUN0b3Jbc2VsZi5yZXNwb25zZURlbGltaXRlZCA/IFwiZGVjb2RlRGVsaW1pdGVkXCIgOiBcImRlY29kZVwiXShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLmVtaXQoXCJkYXRhXCIsIHJlc3BvbnNlLCBtZXRob2QpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVyciwgbWV0aG9kKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2soZXJyKTsgfSwgMCk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcblxuLyoqXG4gKiBFbmRzIHRoaXMgc2VydmljZSBhbmQgZW1pdHMgdGhlIGBlbmRgIGV2ZW50LlxuICogQHBhcmFtIHtib29sZWFufSBbZW5kZWRCeVJQQz1mYWxzZV0gV2hldGhlciB0aGUgc2VydmljZSBoYXMgYmVlbiBlbmRlZCBieSB0aGUgUlBDIGltcGxlbWVudGF0aW9uLlxuICogQHJldHVybnMge3JwYy5TZXJ2aWNlfSBgdGhpc2BcbiAqL1xuU2VydmljZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gZW5kKGVuZGVkQnlSUEMpIHtcbiAgICBpZiAodGhpcy5ycGNJbXBsKSB7XG4gICAgICAgIGlmICghZW5kZWRCeVJQQykgLy8gc2lnbmFsIGVuZCB0byBycGNJbXBsXG4gICAgICAgICAgICB0aGlzLnJwY0ltcGwobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIHRoaXMucnBjSW1wbCA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdChcImVuZFwiKS5vZmYoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogU3RyZWFtaW5nIFJQQyBoZWxwZXJzLlxuICogQG5hbWVzcGFjZVxuICovXG52YXIgcnBjID0gZXhwb3J0cztcblxuLyoqXG4gKiBSUEMgaW1wbGVtZW50YXRpb24gcGFzc2VkIHRvIHtAbGluayBTZXJ2aWNlI2NyZWF0ZX0gcGVyZm9ybWluZyBhIHNlcnZpY2UgcmVxdWVzdCBvbiBuZXR3b3JrIGxldmVsLCBpLmUuIGJ5IHV0aWxpemluZyBodHRwIHJlcXVlc3RzIG9yIHdlYnNvY2tldHMuXG4gKiBAdHlwZWRlZiBSUENJbXBsXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge01ldGhvZHxycGMuU2VydmljZU1ldGhvZDxNZXNzYWdlPHt9PixNZXNzYWdlPHt9Pj59IG1ldGhvZCBSZWZsZWN0ZWQgb3Igc3RhdGljIG1ldGhvZCBiZWluZyBjYWxsZWRcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gcmVxdWVzdERhdGEgUmVxdWVzdCBkYXRhXG4gKiBAcGFyYW0ge1JQQ0ltcGxDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAZXhhbXBsZVxuICogZnVuY3Rpb24gcnBjSW1wbChtZXRob2QsIHJlcXVlc3REYXRhLCBjYWxsYmFjaykge1xuICogICAgIGlmIChwcm90b2J1Zi51dGlsLmxjRmlyc3QobWV0aG9kLm5hbWUpICE9PSBcIm15TWV0aG9kXCIpIC8vIGNvbXBhdGlibGUgd2l0aCBzdGF0aWMgY29kZVxuICogICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggbWV0aG9kXCIpO1xuICogICAgIGFzeW5jaHJvbm91c2x5T2J0YWluQVJlc3BvbnNlKHJlcXVlc3REYXRhLCBmdW5jdGlvbihlcnIsIHJlc3BvbnNlRGF0YSkge1xuICogICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3BvbnNlRGF0YSk7XG4gKiAgICAgfSk7XG4gKiB9XG4gKi9cblxuLyoqXG4gKiBOb2RlLXN0eWxlIGNhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIFJQQ0ltcGx9LlxuICogQHR5cGVkZWYgUlBDSW1wbENhbGxiYWNrXG4gKiBAdHlwZSB7ZnVuY3Rpb259XG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnksIG90aGVyd2lzZSBgbnVsbGBcbiAqIEBwYXJhbSB7VWludDhBcnJheXxudWxsfSBbcmVzcG9uc2VdIFJlc3BvbnNlIGRhdGEgb3IgYG51bGxgIHRvIHNpZ25hbCBlbmQgb2Ygc3RyZWFtLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuXG5ycGMuU2VydmljZSA9IHJlcXVpcmUoXCIuL3JwYy9zZXJ2aWNlXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKipcbiAqIE5hbWVkIHJvb3RzLlxuICogVGhpcyBpcyB3aGVyZSBwYmpzIHN0b3JlcyBnZW5lcmF0ZWQgc3RydWN0dXJlcyAodGhlIG9wdGlvbiBgLXIsIC0tcm9vdGAgc3BlY2lmaWVzIGEgbmFtZSkuXG4gKiBDYW4gYWxzbyBiZSB1c2VkIG1hbnVhbGx5IHRvIG1ha2Ugcm9vdHMgYXZhaWxhYmxlIGFjY3Jvc3MgbW9kdWxlcy5cbiAqIEBuYW1lIHJvb3RzXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsUm9vdD59XG4gKiBAZXhhbXBsZVxuICogLy8gcGJqcyAtciBteXJvb3QgLW8gY29tcGlsZWQuanMgLi4uXG4gKlxuICogLy8gaW4gYW5vdGhlciBtb2R1bGU6XG4gKiByZXF1aXJlKFwiLi9jb21waWxlZC5qc1wiKTtcbiAqXG4gKiAvLyBpbiBhbnkgc3Vic2VxdWVudCBtb2R1bGU6XG4gKiB2YXIgcm9vdCA9IHByb3RvYnVmLnJvb3RzW1wibXlyb290XCJdO1xuICovXG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IGV4cG9ydHM7XG5cbi8qKlxuICogQnVpbGQgdHlwZSwgb25lIG9mIGBcImZ1bGxcImAsIGBcImxpZ2h0XCJgIG9yIGBcIm1pbmltYWxcImAuXG4gKiBAbmFtZSBidWlsZFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xuXG4vLyBTZXJpYWxpemF0aW9uXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJfYnVmZmVyXCIpO1xucHJvdG9idWYuUmVhZGVyICAgICAgID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcblxuLy8gVXRpbGl0eVxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xucHJvdG9idWYucnBjICAgICAgICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xucHJvdG9idWYucm9vdHMgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdHNcIik7XG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIFJlY29uZmlndXJlcyB0aGUgbGlicmFyeSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50LlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlKCkge1xuICAgIHByb3RvYnVmLnV0aWwuX2NvbmZpZ3VyZSgpO1xuICAgIHByb3RvYnVmLldyaXRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlcldyaXRlcik7XG4gICAgcHJvdG9idWYuUmVhZGVyLl9jb25maWd1cmUocHJvdG9idWYuQnVmZmVyUmVhZGVyKTtcbn1cblxuLy8gU2V0IHVwIGJ1ZmZlciB1dGlsaXR5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnRcbmNvbmZpZ3VyZSgpO1xuIiwiLy8gbWluaW1hbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4LW1pbmltYWxcIik7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJBbmltYXRvciB7XG4gIHN0YXRlczogUEJBbmltYXRpb25TdGF0ZVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJBbmltYXRpb25TdGF0ZSB7XG4gIG5hbWU6IHN0cmluZ1xuICBjbGlwOiBzdHJpbmdcbiAgcGxheWluZz86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQ9MS4wcyAqL1xuICB3ZWlnaHQ/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQ9MS4wICovXG4gIHNwZWVkPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PXRydWUgKi9cbiAgbG9vcD86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgc2hvdWxkUmVzZXQ/OiBib29sZWFuIHwgdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkFuaW1hdG9yKCk6IFBCQW5pbWF0b3Ige1xuICByZXR1cm4geyBzdGF0ZXM6IFtdIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJBbmltYXRvciA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCQW5pbWF0b3IsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5zdGF0ZXMpIHtcbiAgICAgIFBCQW5pbWF0aW9uU3RhdGUuZW5jb2RlKHYhLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQkFuaW1hdG9yIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkFuaW1hdG9yKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS5zdGF0ZXMucHVzaChQQkFuaW1hdGlvblN0YXRlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkFuaW1hdGlvblN0YXRlKCk6IFBCQW5pbWF0aW9uU3RhdGUge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICcnLFxuICAgIGNsaXA6ICcnLFxuICAgIHBsYXlpbmc6IHVuZGVmaW5lZCxcbiAgICB3ZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBzcGVlZDogdW5kZWZpbmVkLFxuICAgIGxvb3A6IHVuZGVmaW5lZCxcbiAgICBzaG91bGRSZXNldDogdW5kZWZpbmVkXG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJBbmltYXRpb25TdGF0ZSA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCQW5pbWF0aW9uU3RhdGUsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5uYW1lICE9PSAnJykge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UubmFtZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuY2xpcCAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLmNsaXApXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnBsYXlpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNCkuYm9vbChtZXNzYWdlLnBsYXlpbmcpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLndlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDM3KS5mbG9hdChtZXNzYWdlLndlaWdodClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig0NSkuZmxvYXQobWVzc2FnZS5zcGVlZClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubG9vcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDQ4KS5ib29sKG1lc3NhZ2UubG9vcClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc2hvdWxkUmVzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig1NikuYm9vbChtZXNzYWdlLnNob3VsZFJlc2V0KVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJBbmltYXRpb25TdGF0ZSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJBbmltYXRpb25TdGF0ZSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLmNsaXAgPSByZWFkZXIuc3RyaW5nKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5wbGF5aW5nID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLndlaWdodCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIG1lc3NhZ2Uuc3BlZWQgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBtZXNzYWdlLmxvb3AgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIG1lc3NhZ2Uuc2hvdWxkUmVzZXQgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCQW5pbWF0b3IgfSBmcm9tICcuL3BiL0FuaW1hdG9yLmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwNDJcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEFuaW1hdG9yU2NoZW1hOiBJU2NoZW1hPFBCQW5pbWF0b3I+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCQW5pbWF0b3IsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQkFuaW1hdG9yLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQkFuaW1hdG9yIHtcbiAgICByZXR1cm4gUEJBbmltYXRvci5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCQW5pbWF0b3Ige1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQkFuaW1hdG9yLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJBdWRpb1NvdXJjZSB7XG4gIHBsYXlpbmc/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PTEuMGYgKi9cbiAgdm9sdW1lPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIGxvb3A/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PTEuMGYgKi9cbiAgcGl0Y2g/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgYXVkaW9DbGlwVXJsOiBzdHJpbmdcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCQXVkaW9Tb3VyY2UoKTogUEJBdWRpb1NvdXJjZSB7XG4gIHJldHVybiB7IHBsYXlpbmc6IHVuZGVmaW5lZCwgdm9sdW1lOiB1bmRlZmluZWQsIGxvb3A6IHVuZGVmaW5lZCwgcGl0Y2g6IHVuZGVmaW5lZCwgYXVkaW9DbGlwVXJsOiAnJyB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCQXVkaW9Tb3VyY2UgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQkF1ZGlvU291cmNlLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UucGxheWluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDgpLmJvb2wobWVzc2FnZS5wbGF5aW5nKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS52b2x1bWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyMSkuZmxvYXQobWVzc2FnZS52b2x1bWUpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmxvb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNCkuYm9vbChtZXNzYWdlLmxvb3ApXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnBpdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMzcpLmZsb2F0KG1lc3NhZ2UucGl0Y2gpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmF1ZGlvQ2xpcFVybCAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNDIpLnN0cmluZyhtZXNzYWdlLmF1ZGlvQ2xpcFVybClcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCQXVkaW9Tb3VyY2Uge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQXVkaW9Tb3VyY2UoKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLnBsYXlpbmcgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2Uudm9sdW1lID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5sb29wID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLnBpdGNoID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgbWVzc2FnZS5hdWRpb0NsaXBVcmwgPSByZWFkZXIuc3RyaW5nKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cbiIsImltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi8uLi9zY2hlbWFzL0lTY2hlbWEnXG5pbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgUEJBdWRpb1NvdXJjZSB9IGZyb20gJy4vcGIvQXVkaW9Tb3VyY2UuZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTAyMFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQXVkaW9Tb3VyY2VTY2hlbWE6IElTY2hlbWE8UEJBdWRpb1NvdXJjZT4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJBdWRpb1NvdXJjZSwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCQXVkaW9Tb3VyY2UuZW5jb2RlKHZhbHVlKVxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbilcbiAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpXG4gIH0sXG4gIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IFBCQXVkaW9Tb3VyY2Uge1xuICAgIHJldHVybiBQQkF1ZGlvU291cmNlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJBdWRpb1NvdXJjZSB7XG4gICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgcmV0dXJuIFBCQXVkaW9Tb3VyY2UuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGNvbnN0IGVudW0gQXZhdGFyQW5jaG9yUG9pbnQge1xuICBQT1NJVElPTiA9IDAsXG4gIE5BTUVfVEFHID0gMSxcbiAgTEVGVF9IQU5EID0gMixcbiAgUklHSFRfSEFORCA9IDMsXG4gIFVOUkVDT0dOSVpFRCA9IC0xXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJBdmF0YXJBdHRhY2gge1xuICBhdmF0YXJJZDogc3RyaW5nXG4gIGFuY2hvclBvaW50SWQ6IEF2YXRhckFuY2hvclBvaW50XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQkF2YXRhckF0dGFjaCgpOiBQQkF2YXRhckF0dGFjaCB7XG4gIHJldHVybiB7IGF2YXRhcklkOiAnJywgYW5jaG9yUG9pbnRJZDogMCB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCQXZhdGFyQXR0YWNoID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJBdmF0YXJBdHRhY2gsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5hdmF0YXJJZCAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmF2YXRhcklkKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5hbmNob3JQb2ludElkICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLmFuY2hvclBvaW50SWQpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQkF2YXRhckF0dGFjaCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJBdmF0YXJBdHRhY2goKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmF2YXRhcklkID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuYW5jaG9yUG9pbnRJZCA9IHJlYWRlci5pbnQzMigpIGFzIGFueVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQkF2YXRhckF0dGFjaCB9IGZyb20gJy4vcGIvQXZhdGFyQXR0YWNoLmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwNzNcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEF2YXRhckF0dGFjaFNjaGVtYTogSVNjaGVtYTxQQkF2YXRhckF0dGFjaD4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJBdmF0YXJBdHRhY2gsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQkF2YXRhckF0dGFjaC5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJBdmF0YXJBdHRhY2gge1xuICAgIHJldHVybiBQQkF2YXRhckF0dGFjaC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCQXZhdGFyQXR0YWNoIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJBdmF0YXJBdHRhY2guZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3IzIHtcbiAgeDogbnVtYmVyXG4gIHk6IG51bWJlclxuICB6OiBudW1iZXJcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVZlY3RvcjMoKTogVmVjdG9yMyB7XG4gIHJldHVybiB7IHg6IDAsIHk6IDAsIHo6IDAgfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBWZWN0b3IzID0ge1xuICBlbmNvZGUobWVzc2FnZTogVmVjdG9yMywgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLnggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTMpLmZsb2F0KG1lc3NhZ2UueClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UueSAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyMSkuZmxvYXQobWVzc2FnZS55KVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS56ICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI5KS5mbG9hdChtZXNzYWdlLnopXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VWZWN0b3IzKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS54ID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS55ID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS56ID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9jb21tb24vVmVjdG9yMy5nZW4nXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGNvbnN0IGVudW0gQXZhdGFyTW9kaWZpZXIge1xuICBISURFX0FWQVRBUlMgPSAwLFxuICBESVNBQkxFX1BBU1NQT1JUUyA9IDEsXG4gIFVOUkVDT0dOSVpFRCA9IC0xXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJBdmF0YXJNb2RpZmllckFyZWEge1xuICBhcmVhOiBWZWN0b3IzIHwgdW5kZWZpbmVkXG4gIGV4Y2x1ZGVJZHM6IHN0cmluZ1tdXG4gIG1vZGlmaWVyczogQXZhdGFyTW9kaWZpZXJbXVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdmF0YXJNb2RpZmllckFyZWEoKTogUEJBdmF0YXJNb2RpZmllckFyZWEge1xuICByZXR1cm4geyBhcmVhOiB1bmRlZmluZWQsIGV4Y2x1ZGVJZHM6IFtdLCBtb2RpZmllcnM6IFtdIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJBdmF0YXJNb2RpZmllckFyZWEgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQkF2YXRhck1vZGlmaWVyQXJlYSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLmFyZWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5hcmVhLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmV4Y2x1ZGVJZHMpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyh2ISlcbiAgICB9XG4gICAgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpXG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UubW9kaWZpZXJzKSB7XG4gICAgICB3cml0ZXIuaW50MzIodilcbiAgICB9XG4gICAgd3JpdGVyLmxkZWxpbSgpXG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCQXZhdGFyTW9kaWZpZXJBcmVhIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkF2YXRhck1vZGlmaWVyQXJlYSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UuYXJlYSA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLmV4Y2x1ZGVJZHMucHVzaChyZWFkZXIuc3RyaW5nKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zXG4gICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZS5tb2RpZmllcnMucHVzaChyZWFkZXIuaW50MzIoKSBhcyBhbnkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UubW9kaWZpZXJzLnB1c2gocmVhZGVyLmludDMyKCkgYXMgYW55KVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cbiIsImltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi8uLi9zY2hlbWFzL0lTY2hlbWEnXG5pbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgUEJBdmF0YXJNb2RpZmllckFyZWEgfSBmcm9tICcuL3BiL0F2YXRhck1vZGlmaWVyQXJlYS5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDcwXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBBdmF0YXJNb2RpZmllckFyZWFTY2hlbWE6IElTY2hlbWE8UEJBdmF0YXJNb2RpZmllckFyZWE+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCQXZhdGFyTW9kaWZpZXJBcmVhLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJBdmF0YXJNb2RpZmllckFyZWEuZW5jb2RlKHZhbHVlKVxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbilcbiAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpXG4gIH0sXG4gIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IFBCQXZhdGFyTW9kaWZpZXJBcmVhIHtcbiAgICByZXR1cm4gUEJBdmF0YXJNb2RpZmllckFyZWEuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQkF2YXRhck1vZGlmaWVyQXJlYSB7XG4gICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgcmV0dXJuIFBCQXZhdGFyTW9kaWZpZXJBcmVhLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IExvbmc7XHJcblxyXG4vKipcclxuICogd2FzbSBvcHRpbWl6YXRpb25zLCB0byBkbyBuYXRpdmUgaTY0IG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpZGVcclxuICovXHJcbnZhciB3YXNtID0gbnVsbDtcclxuXHJcbnRyeSB7XHJcbiAgd2FzbSA9IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG5ldyBVaW50OEFycmF5KFtcclxuICAgIDAsIDk3LCAxMTUsIDEwOSwgMSwgMCwgMCwgMCwgMSwgMTMsIDIsIDk2LCAwLCAxLCAxMjcsIDk2LCA0LCAxMjcsIDEyNywgMTI3LCAxMjcsIDEsIDEyNywgMywgNywgNiwgMCwgMSwgMSwgMSwgMSwgMSwgNiwgNiwgMSwgMTI3LCAxLCA2NSwgMCwgMTEsIDcsIDUwLCA2LCAzLCAxMDksIDExNywgMTA4LCAwLCAxLCA1LCAxMDAsIDEwNSwgMTE4LCA5NSwgMTE1LCAwLCAyLCA1LCAxMDAsIDEwNSwgMTE4LCA5NSwgMTE3LCAwLCAzLCA1LCAxMTQsIDEwMSwgMTA5LCA5NSwgMTE1LCAwLCA0LCA1LCAxMTQsIDEwMSwgMTA5LCA5NSwgMTE3LCAwLCA1LCA4LCAxMDMsIDEwMSwgMTE2LCA5NSwgMTA0LCAxMDUsIDEwMywgMTA0LCAwLCAwLCAxMCwgMTkxLCAxLCA2LCA0LCAwLCAzNSwgMCwgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyNiwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTI3LCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExLCAzNiwgMSwgMSwgMTI2LCAzMiwgMCwgMTczLCAzMiwgMSwgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAzMiwgMiwgMTczLCAzMiwgMywgMTczLCA2NiwgMzIsIDEzNCwgMTMyLCAxMjgsIDM0LCA0LCA2NiwgMzIsIDEzNSwgMTY3LCAzNiwgMCwgMzIsIDQsIDE2NywgMTEsIDM2LCAxLCAxLCAxMjYsIDMyLCAwLCAxNzMsIDMyLCAxLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDMyLCAyLCAxNzMsIDMyLCAzLCAxNzMsIDY2LCAzMiwgMTM0LCAxMzIsIDEyOSwgMzQsIDQsIDY2LCAzMiwgMTM1LCAxNjcsIDM2LCAwLCAzMiwgNCwgMTY3LCAxMSwgMzYsIDEsIDEsIDEyNiwgMzIsIDAsIDE3MywgMzIsIDEsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMzIsIDIsIDE3MywgMzIsIDMsIDE3MywgNjYsIDMyLCAxMzQsIDEzMiwgMTMwLCAzNCwgNCwgNjYsIDMyLCAxMzUsIDE2NywgMzYsIDAsIDMyLCA0LCAxNjcsIDExXHJcbiAgXSkpLCB7fSkuZXhwb3J0cztcclxufSBjYXRjaCAoZSkge1xyXG4gIC8vIG5vIHdhc20gc3VwcG9ydCA6KFxyXG59XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIDY0IGJpdCB0d28ncy1jb21wbGVtZW50IGludGVnZXIsIGdpdmVuIGl0cyBsb3cgYW5kIGhpZ2ggMzIgYml0IHZhbHVlcyBhcyAqc2lnbmVkKiBpbnRlZ2Vycy5cclxuICogIFNlZSB0aGUgZnJvbSogZnVuY3Rpb25zIGJlbG93IGZvciBtb3JlIGNvbnZlbmllbnQgd2F5cyBvZiBjb25zdHJ1Y3RpbmcgTG9uZ3MuXHJcbiAqIEBleHBvcnRzIExvbmdcclxuICogQGNsYXNzIEEgTG9uZyBjbGFzcyBmb3IgcmVwcmVzZW50aW5nIGEgNjQgYml0IHR3bydzLWNvbXBsZW1lbnQgaW50ZWdlciB2YWx1ZS5cclxuICogQHBhcmFtIHtudW1iZXJ9IGxvdyBUaGUgbG93IChzaWduZWQpIDMyIGJpdHMgb2YgdGhlIGxvbmdcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggKHNpZ25lZCkgMzIgYml0cyBvZiB0aGUgbG9uZ1xyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gTG9uZyhsb3csIGhpZ2gsIHVuc2lnbmVkKSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbG93IDMyIGJpdHMgYXMgYSBzaWduZWQgdmFsdWUuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmxvdyA9IGxvdyB8IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaGlnaCAzMiBiaXRzIGFzIGEgc2lnbmVkIHZhbHVlLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgdGhpcy5oaWdoID0gaGlnaCB8IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdC5cclxuICAgICAqIEB0eXBlIHtib29sZWFufVxyXG4gICAgICovXHJcbiAgICB0aGlzLnVuc2lnbmVkID0gISF1bnNpZ25lZDtcclxufVxyXG5cclxuLy8gVGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGEgbG9uZyBpcyB0aGUgdHdvIGdpdmVuIHNpZ25lZCwgMzItYml0IHZhbHVlcy5cclxuLy8gV2UgdXNlIDMyLWJpdCBwaWVjZXMgYmVjYXVzZSB0aGVzZSBhcmUgdGhlIHNpemUgb2YgaW50ZWdlcnMgb24gd2hpY2hcclxuLy8gSmF2YXNjcmlwdCBwZXJmb3JtcyBiaXQtb3BlcmF0aW9ucy4gIEZvciBvcGVyYXRpb25zIGxpa2UgYWRkaXRpb24gYW5kXHJcbi8vIG11bHRpcGxpY2F0aW9uLCB3ZSBzcGxpdCBlYWNoIG51bWJlciBpbnRvIDE2IGJpdCBwaWVjZXMsIHdoaWNoIGNhbiBlYXNpbHkgYmVcclxuLy8gbXVsdGlwbGllZCB3aXRoaW4gSmF2YXNjcmlwdCdzIGZsb2F0aW5nLXBvaW50IHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgb3ZlcmZsb3dcclxuLy8gb3IgY2hhbmdlIGluIHNpZ24uXHJcbi8vXHJcbi8vIEluIHRoZSBhbGdvcml0aG1zIGJlbG93LCB3ZSBmcmVxdWVudGx5IHJlZHVjZSB0aGUgbmVnYXRpdmUgY2FzZSB0byB0aGVcclxuLy8gcG9zaXRpdmUgY2FzZSBieSBuZWdhdGluZyB0aGUgaW5wdXQocykgYW5kIHRoZW4gcG9zdC1wcm9jZXNzaW5nIHRoZSByZXN1bHQuXHJcbi8vIE5vdGUgdGhhdCB3ZSBtdXN0IEFMV0FZUyBjaGVjayBzcGVjaWFsbHkgd2hldGhlciB0aG9zZSB2YWx1ZXMgYXJlIE1JTl9WQUxVRVxyXG4vLyAoLTJeNjMpIGJlY2F1c2UgLU1JTl9WQUxVRSA9PSBNSU5fVkFMVUUgKHNpbmNlIDJeNjMgY2Fubm90IGJlIHJlcHJlc2VudGVkIGFzXHJcbi8vIGEgcG9zaXRpdmUgbnVtYmVyLCBpdCBvdmVyZmxvd3MgYmFjayBpbnRvIGEgbmVnYXRpdmUpLiAgTm90IGhhbmRsaW5nIHRoaXNcclxuLy8gY2FzZSB3b3VsZCBvZnRlbiByZXN1bHQgaW4gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4vL1xyXG4vLyBDb21tb24gY29uc3RhbnQgdmFsdWVzIFpFUk8sIE9ORSwgTkVHX09ORSwgZXRjLiBhcmUgZGVmaW5lZCBiZWxvdyB0aGUgZnJvbSpcclxuLy8gbWV0aG9kcyBvbiB3aGljaCB0aGV5IGRlcGVuZC5cclxuXHJcbi8qKlxyXG4gKiBBbiBpbmRpY2F0b3IgdXNlZCB0byByZWxpYWJseSBkZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgTG9uZyBvciBub3QuXHJcbiAqIEB0eXBlIHtib29sZWFufVxyXG4gKiBAY29uc3RcclxuICogQHByaXZhdGVcclxuICovXHJcbkxvbmcucHJvdG90eXBlLl9faXNMb25nX187XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTG9uZy5wcm90b3R5cGUsIFwiX19pc0xvbmdfX1wiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5cclxuLyoqXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gaXNMb25nKG9iaikge1xyXG4gICAgcmV0dXJuIChvYmogJiYgb2JqW1wiX19pc0xvbmdfX1wiXSkgPT09IHRydWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhIExvbmcuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3RcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nLmlzTG9uZyA9IGlzTG9uZztcclxuXHJcbi8qKlxyXG4gKiBBIGNhY2hlIG9mIHRoZSBMb25nIHJlcHJlc2VudGF0aW9ucyBvZiBzbWFsbCBpbnRlZ2VyIHZhbHVlcy5cclxuICogQHR5cGUgeyFPYmplY3R9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIElOVF9DQUNIRSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEEgY2FjaGUgb2YgdGhlIExvbmcgcmVwcmVzZW50YXRpb25zIG9mIHNtYWxsIHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLlxyXG4gKiBAdHlwZSB7IU9iamVjdH1cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVUlOVF9DQUNIRSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxuZnVuY3Rpb24gZnJvbUludCh2YWx1ZSwgdW5zaWduZWQpIHtcclxuICAgIHZhciBvYmosIGNhY2hlZE9iaiwgY2FjaGU7XHJcbiAgICBpZiAodW5zaWduZWQpIHtcclxuICAgICAgICB2YWx1ZSA+Pj49IDA7XHJcbiAgICAgICAgaWYgKGNhY2hlID0gKDAgPD0gdmFsdWUgJiYgdmFsdWUgPCAyNTYpKSB7XHJcbiAgICAgICAgICAgIGNhY2hlZE9iaiA9IFVJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqID0gZnJvbUJpdHModmFsdWUsICh2YWx1ZSB8IDApIDwgMCA/IC0xIDogMCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKGNhY2hlKVxyXG4gICAgICAgICAgICBVSU5UX0NBQ0hFW3ZhbHVlXSA9IG9iajtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YWx1ZSB8PSAwO1xyXG4gICAgICAgIGlmIChjYWNoZSA9ICgtMTI4IDw9IHZhbHVlICYmIHZhbHVlIDwgMTI4KSkge1xyXG4gICAgICAgICAgICBjYWNoZWRPYmogPSBJTlRfQ0FDSEVbdmFsdWVdO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkT2JqKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZE9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2JqID0gZnJvbUJpdHModmFsdWUsIHZhbHVlIDwgMCA/IC0xIDogMCwgZmFsc2UpO1xyXG4gICAgICAgIGlmIChjYWNoZSlcclxuICAgICAgICAgICAgSU5UX0NBQ0hFW3ZhbHVlXSA9IG9iajtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiAzMiBiaXQgaW50ZWdlciB2YWx1ZS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgMzIgYml0IGludGVnZXIgaW4gcXVlc3Rpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUludCA9IGZyb21JbnQ7XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tTnVtYmVyKHZhbHVlLCB1bnNpZ25lZCkge1xyXG4gICAgaWYgKGlzTmFOKHZhbHVlKSlcclxuICAgICAgICByZXR1cm4gdW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICBpZiAodW5zaWduZWQpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgICAgICByZXR1cm4gVVpFUk87XHJcbiAgICAgICAgaWYgKHZhbHVlID49IFRXT19QV1JfNjRfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTUFYX1VOU0lHTkVEX1ZBTFVFO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodmFsdWUgPD0gLVRXT19QV1JfNjNfREJMKVxyXG4gICAgICAgICAgICByZXR1cm4gTUlOX1ZBTFVFO1xyXG4gICAgICAgIGlmICh2YWx1ZSArIDEgPj0gVFdPX1BXUl82M19EQkwpXHJcbiAgICAgICAgICAgIHJldHVybiBNQVhfVkFMVUU7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPCAwKVxyXG4gICAgICAgIHJldHVybiBmcm9tTnVtYmVyKC12YWx1ZSwgdW5zaWduZWQpLm5lZygpO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKCh2YWx1ZSAlIFRXT19QV1JfMzJfREJMKSB8IDAsICh2YWx1ZSAvIFRXT19QV1JfMzJfREJMKSB8IDAsIHVuc2lnbmVkKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBMb25nIHJlcHJlc2VudGluZyB0aGUgZ2l2ZW4gdmFsdWUsIHByb3ZpZGVkIHRoYXQgaXQgaXMgYSBmaW5pdGUgbnVtYmVyLiBPdGhlcndpc2UsIHplcm8gaXMgcmV0dXJuZWQuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG51bWJlciBpbiBxdWVzdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gKi9cclxuTG9uZy5mcm9tTnVtYmVyID0gZnJvbU51bWJlcjtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gbG93Qml0c1xyXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaEJpdHNcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWRcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21CaXRzKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIG5ldyBMb25nKGxvd0JpdHMsIGhpZ2hCaXRzLCB1bnNpZ25lZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgTG9uZyByZXByZXNlbnRpbmcgdGhlIDY0IGJpdCBpbnRlZ2VyIHRoYXQgY29tZXMgYnkgY29uY2F0ZW5hdGluZyB0aGUgZ2l2ZW4gbG93IGFuZCBoaWdoIGJpdHMuIEVhY2ggaXNcclxuICogIGFzc3VtZWQgdG8gdXNlIDMyIGJpdHMuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gbG93Qml0cyBUaGUgbG93IDMyIGJpdHNcclxuICogQHBhcmFtIHtudW1iZXJ9IGhpZ2hCaXRzIFRoZSBoaWdoIDMyIGJpdHNcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUJpdHMgPSBmcm9tQml0cztcclxuXHJcbi8qKlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ9IGJhc2VcclxuICogQHBhcmFtIHtudW1iZXJ9IGV4cG9uZW50XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIHBvd19kYmwgPSBNYXRoLnBvdzsgLy8gVXNlZCA0IHRpbWVzICg0KjggdG8gMTUrNClcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEBwYXJhbSB7KGJvb2xlYW58bnVtYmVyKT19IHVuc2lnbmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXhcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbmZ1bmN0aW9uIGZyb21TdHJpbmcoc3RyLCB1bnNpZ25lZCwgcmFkaXgpIHtcclxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKVxyXG4gICAgICAgIHRocm93IEVycm9yKCdlbXB0eSBzdHJpbmcnKTtcclxuICAgIGlmIChzdHIgPT09IFwiTmFOXCIgfHwgc3RyID09PSBcIkluZmluaXR5XCIgfHwgc3RyID09PSBcIitJbmZpbml0eVwiIHx8IHN0ciA9PT0gXCItSW5maW5pdHlcIilcclxuICAgICAgICByZXR1cm4gWkVSTztcclxuICAgIGlmICh0eXBlb2YgdW5zaWduZWQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgLy8gRm9yIGdvb2cubWF0aC5sb25nIGNvbXBhdGliaWxpdHlcclxuICAgICAgICByYWRpeCA9IHVuc2lnbmVkLFxyXG4gICAgICAgIHVuc2lnbmVkID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVuc2lnbmVkID0gISEgdW5zaWduZWQ7XHJcbiAgICB9XHJcbiAgICByYWRpeCA9IHJhZGl4IHx8IDEwO1xyXG4gICAgaWYgKHJhZGl4IDwgMiB8fCAzNiA8IHJhZGl4KVxyXG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoJ3JhZGl4Jyk7XHJcblxyXG4gICAgdmFyIHA7XHJcbiAgICBpZiAoKHAgPSBzdHIuaW5kZXhPZignLScpKSA+IDApXHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ2ludGVyaW9yIGh5cGhlbicpO1xyXG4gICAgZWxzZSBpZiAocCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHN0ci5zdWJzdHJpbmcoMSksIHVuc2lnbmVkLCByYWRpeCkubmVnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG8gc2V2ZXJhbCAoOCkgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXHJcbiAgICB2YXIgcmFkaXhUb1Bvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCA4KSk7XHJcblxyXG4gICAgdmFyIHJlc3VsdCA9IFpFUk87XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gOCkge1xyXG4gICAgICAgIHZhciBzaXplID0gTWF0aC5taW4oOCwgc3RyLmxlbmd0aCAtIGkpLFxyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHN0ci5zdWJzdHJpbmcoaSwgaSArIHNpemUpLCByYWRpeCk7XHJcbiAgICAgICAgaWYgKHNpemUgPCA4KSB7XHJcbiAgICAgICAgICAgIHZhciBwb3dlciA9IGZyb21OdW1iZXIocG93X2RibChyYWRpeCwgc2l6ZSkpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQubXVsKHBvd2VyKS5hZGQoZnJvbU51bWJlcih2YWx1ZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5tdWwocmFkaXhUb1Bvd2VyKTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmFkZChmcm9tTnVtYmVyKHZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzdWx0LnVuc2lnbmVkID0gdW5zaWduZWQ7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIExvbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHN0cmluZywgd3JpdHRlbiB1c2luZyB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUaGUgdGV4dHVhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgTG9uZ1xyXG4gKiBAcGFyYW0geyhib29sZWFufG51bWJlcik9fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyPX0gcmFkaXggVGhlIHJhZGl4IGluIHdoaWNoIHRoZSB0ZXh0IGlzIHdyaXR0ZW4gKDItMzYpLCBkZWZhdWx0cyB0byAxMFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XHJcblxyXG4vKipcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ3whe2xvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIsIHVuc2lnbmVkOiBib29sZWFufX0gdmFsXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHVuc2lnbmVkXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBmcm9tVmFsdWUodmFsLCB1bnNpZ25lZCkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKVxyXG4gICAgICAgIHJldHVybiBmcm9tTnVtYmVyKHZhbCwgdW5zaWduZWQpO1xyXG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbCwgdW5zaWduZWQpO1xyXG4gICAgLy8gVGhyb3dzIGZvciBub24tb2JqZWN0cywgY29udmVydHMgbm9uLWluc3RhbmNlb2YgTG9uZzpcclxuICAgIHJldHVybiBmcm9tQml0cyh2YWwubG93LCB2YWwuaGlnaCwgdHlwZW9mIHVuc2lnbmVkID09PSAnYm9vbGVhbicgPyB1bnNpZ25lZCA6IHZhbC51bnNpZ25lZCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGUgc3BlY2lmaWVkIHZhbHVlIHRvIGEgTG9uZyB1c2luZyB0aGUgYXBwcm9wcmlhdGUgZnJvbSogZnVuY3Rpb24gZm9yIGl0cyB0eXBlLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfCF7bG93OiBudW1iZXIsIGhpZ2g6IG51bWJlciwgdW5zaWduZWQ6IGJvb2xlYW59fSB2YWwgVmFsdWVcclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLmZyb21WYWx1ZSA9IGZyb21WYWx1ZTtcclxuXHJcbi8vIE5PVEU6IHRoZSBjb21waWxlciBzaG91bGQgaW5saW5lIHRoZXNlIGNvbnN0YW50IHZhbHVlcyBiZWxvdyBhbmQgdGhlbiByZW1vdmUgdGhlc2UgdmFyaWFibGVzLCBzbyB0aGVyZSBzaG91bGQgYmVcclxuLy8gbm8gcnVudGltZSBwZW5hbHR5IGZvciB0aGVzZS5cclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl8xNl9EQkwgPSAxIDw8IDE2O1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzI0X0RCTCA9IDEgPDwgMjQ7XHJcblxyXG4vKipcclxuICogQHR5cGUge251bWJlcn1cclxuICogQGNvbnN0XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFRXT19QV1JfMzJfREJMID0gVFdPX1BXUl8xNl9EQkwgKiBUV09fUFdSXzE2X0RCTDtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKiBAY29uc3RcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVFdPX1BXUl82NF9EQkwgPSBUV09fUFdSXzMyX0RCTCAqIFRXT19QV1JfMzJfREJMO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzYzX0RCTCA9IFRXT19QV1JfNjRfREJMIC8gMjtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBjb25zdFxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBUV09fUFdSXzI0ID0gZnJvbUludChUV09fUFdSXzI0X0RCTCk7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBaRVJPID0gZnJvbUludCgwKTtcclxuXHJcbi8qKlxyXG4gKiBTaWduZWQgemVyby5cclxuICogQHR5cGUgeyFMb25nfVxyXG4gKi9cclxuTG9uZy5aRVJPID0gWkVSTztcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIFVaRVJPID0gZnJvbUludCgwLCB0cnVlKTtcclxuXHJcbi8qKlxyXG4gKiBVbnNpZ25lZCB6ZXJvLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLlVaRVJPID0gVVpFUk87XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBPTkUgPSBmcm9tSW50KDEpO1xyXG5cclxuLyoqXHJcbiAqIFNpZ25lZCBvbmUuXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICovXHJcbkxvbmcuT05FID0gT05FO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgVU9ORSA9IGZyb21JbnQoMSwgdHJ1ZSk7XHJcblxyXG4vKipcclxuICogVW5zaWduZWQgb25lLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLlVPTkUgPSBVT05FO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgTkVHX09ORSA9IGZyb21JbnQoLTEpO1xyXG5cclxuLyoqXHJcbiAqIFNpZ25lZCBuZWdhdGl2ZSBvbmUuXHJcbiAqIEB0eXBlIHshTG9uZ31cclxuICovXHJcbkxvbmcuTkVHX09ORSA9IE5FR19PTkU7XHJcblxyXG4vKipcclxuICogQHR5cGUgeyFMb25nfVxyXG4gKiBAaW5uZXJcclxuICovXHJcbnZhciBNQVhfVkFMVUUgPSBmcm9tQml0cygweEZGRkZGRkZGfDAsIDB4N0ZGRkZGRkZ8MCwgZmFsc2UpO1xyXG5cclxuLyoqXHJcbiAqIE1heGltdW0gc2lnbmVkIHZhbHVlLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk1BWF9WQUxVRSA9IE1BWF9WQUxVRTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIE1BWF9VTlNJR05FRF9WQUxVRSA9IGZyb21CaXRzKDB4RkZGRkZGRkZ8MCwgMHhGRkZGRkZGRnwwLCB0cnVlKTtcclxuXHJcbi8qKlxyXG4gKiBNYXhpbXVtIHVuc2lnbmVkIHZhbHVlLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk1BWF9VTlNJR05FRF9WQUxVRSA9IE1BWF9VTlNJR05FRF9WQUxVRTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqIEBpbm5lclxyXG4gKi9cclxudmFyIE1JTl9WQUxVRSA9IGZyb21CaXRzKDAsIDB4ODAwMDAwMDB8MCwgZmFsc2UpO1xyXG5cclxuLyoqXHJcbiAqIE1pbmltdW0gc2lnbmVkIHZhbHVlLlxyXG4gKiBAdHlwZSB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nLk1JTl9WQUxVRSA9IE1JTl9WQUxVRTtcclxuXHJcbi8qKlxyXG4gKiBAYWxpYXMgTG9uZy5wcm90b3R5cGVcclxuICogQGlubmVyXHJcbiAqL1xyXG52YXIgTG9uZ1Byb3RvdHlwZSA9IExvbmcucHJvdG90eXBlO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoZSBMb25nIHRvIGEgMzIgYml0IGludGVnZXIsIGFzc3VtaW5nIGl0IGlzIGEgMzIgYml0IGludGVnZXIuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvSW50ID0gZnVuY3Rpb24gdG9JbnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51bnNpZ25lZCA/IHRoaXMubG93ID4+PiAwIDogdGhpcy5sb3c7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSB0aGUgbmVhcmVzdCBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHZhbHVlIChkb3VibGUsIDUzIGJpdCBtYW50aXNzYSkuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIoKSB7XHJcbiAgICBpZiAodGhpcy51bnNpZ25lZClcclxuICAgICAgICByZXR1cm4gKCh0aGlzLmhpZ2ggPj4+IDApICogVFdPX1BXUl8zMl9EQkwpICsgKHRoaXMubG93ID4+PiAwKTtcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggKiBUV09fUFdSXzMyX0RCTCArICh0aGlzLmxvdyA+Pj4gMCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhlIExvbmcgdG8gYSBzdHJpbmcgd3JpdHRlbiBpbiB0aGUgc3BlY2lmaWVkIHJhZGl4LlxyXG4gKiBAcGFyYW0ge251bWJlcj19IHJhZGl4IFJhZGl4ICgyLTM2KSwgZGVmYXVsdHMgdG8gMTBcclxuICogQHJldHVybnMge3N0cmluZ31cclxuICogQG92ZXJyaWRlXHJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGByYWRpeGAgaXMgb3V0IG9mIHJhbmdlXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcocmFkaXgpIHtcclxuICAgIHJhZGl4ID0gcmFkaXggfHwgMTA7XHJcbiAgICBpZiAocmFkaXggPCAyIHx8IDM2IDwgcmFkaXgpXHJcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcigncmFkaXgnKTtcclxuICAgIGlmICh0aGlzLmlzWmVybygpKVxyXG4gICAgICAgIHJldHVybiAnMCc7XHJcbiAgICBpZiAodGhpcy5pc05lZ2F0aXZlKCkpIHsgLy8gVW5zaWduZWQgTG9uZ3MgYXJlIG5ldmVyIG5lZ2F0aXZlXHJcbiAgICAgICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSkge1xyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoYW5nZSB0aGUgTG9uZyB2YWx1ZSBiZWZvcmUgaXQgY2FuIGJlIG5lZ2F0ZWQsIHNvIHdlIHJlbW92ZVxyXG4gICAgICAgICAgICAvLyB0aGUgYm90dG9tLW1vc3QgZGlnaXQgaW4gdGhpcyBiYXNlIGFuZCB0aGVuIHJlY3Vyc2UgdG8gZG8gdGhlIHJlc3QuXHJcbiAgICAgICAgICAgIHZhciByYWRpeExvbmcgPSBmcm9tTnVtYmVyKHJhZGl4KSxcclxuICAgICAgICAgICAgICAgIGRpdiA9IHRoaXMuZGl2KHJhZGl4TG9uZyksXHJcbiAgICAgICAgICAgICAgICByZW0xID0gZGl2Lm11bChyYWRpeExvbmcpLnN1Yih0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpdi50b1N0cmluZyhyYWRpeCkgKyByZW0xLnRvSW50KCkudG9TdHJpbmcocmFkaXgpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gJy0nICsgdGhpcy5uZWcoKS50b1N0cmluZyhyYWRpeCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRG8gc2V2ZXJhbCAoNikgZGlnaXRzIGVhY2ggdGltZSB0aHJvdWdoIHRoZSBsb29wLCBzbyBhcyB0b1xyXG4gICAgLy8gbWluaW1pemUgdGhlIGNhbGxzIHRvIHRoZSB2ZXJ5IGV4cGVuc2l2ZSBlbXVsYXRlZCBkaXYuXHJcbiAgICB2YXIgcmFkaXhUb1Bvd2VyID0gZnJvbU51bWJlcihwb3dfZGJsKHJhZGl4LCA2KSwgdGhpcy51bnNpZ25lZCksXHJcbiAgICAgICAgcmVtID0gdGhpcztcclxuICAgIHZhciByZXN1bHQgPSAnJztcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgdmFyIHJlbURpdiA9IHJlbS5kaXYocmFkaXhUb1Bvd2VyKSxcclxuICAgICAgICAgICAgaW50dmFsID0gcmVtLnN1YihyZW1EaXYubXVsKHJhZGl4VG9Qb3dlcikpLnRvSW50KCkgPj4+IDAsXHJcbiAgICAgICAgICAgIGRpZ2l0cyA9IGludHZhbC50b1N0cmluZyhyYWRpeCk7XHJcbiAgICAgICAgcmVtID0gcmVtRGl2O1xyXG4gICAgICAgIGlmIChyZW0uaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdoaWxlIChkaWdpdHMubGVuZ3RoIDwgNilcclxuICAgICAgICAgICAgICAgIGRpZ2l0cyA9ICcwJyArIGRpZ2l0cztcclxuICAgICAgICAgICAgcmVzdWx0ID0gJycgKyBkaWdpdHMgKyByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhIHNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBTaWduZWQgaGlnaCBiaXRzXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdldEhpZ2hCaXRzID0gZnVuY3Rpb24gZ2V0SGlnaEJpdHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGhpZ2ggMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCBoaWdoIGJpdHNcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2V0SGlnaEJpdHNVbnNpZ25lZCA9IGZ1bmN0aW9uIGdldEhpZ2hCaXRzVW5zaWduZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5oaWdoID4+PiAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGxvdyAzMiBiaXRzIGFzIGEgc2lnbmVkIGludGVnZXIuXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFNpZ25lZCBsb3cgYml0c1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzID0gZnVuY3Rpb24gZ2V0TG93Qml0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmxvdztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBsb3cgMzIgYml0cyBhcyBhbiB1bnNpZ25lZCBpbnRlZ2VyLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBVbnNpZ25lZCBsb3cgYml0c1xyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXRMb3dCaXRzVW5zaWduZWQgPSBmdW5jdGlvbiBnZXRMb3dCaXRzVW5zaWduZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sb3cgPj4+IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbnVtYmVyIG9mIGJpdHMgbmVlZGVkIHRvIHJlcHJlc2VudCB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBMb25nLlxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5nZXROdW1CaXRzQWJzID0gZnVuY3Rpb24gZ2V0TnVtQml0c0FicygpIHtcclxuICAgIGlmICh0aGlzLmlzTmVnYXRpdmUoKSkgLy8gVW5zaWduZWQgTG9uZ3MgYXJlIG5ldmVyIG5lZ2F0aXZlXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXEoTUlOX1ZBTFVFKSA/IDY0IDogdGhpcy5uZWcoKS5nZXROdW1CaXRzQWJzKCk7XHJcbiAgICB2YXIgdmFsID0gdGhpcy5oaWdoICE9IDAgPyB0aGlzLmhpZ2ggOiB0aGlzLmxvdztcclxuICAgIGZvciAodmFyIGJpdCA9IDMxOyBiaXQgPiAwOyBiaXQtLSlcclxuICAgICAgICBpZiAoKHZhbCAmICgxIDw8IGJpdCkpICE9IDApXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaCAhPSAwID8gYml0ICsgMzMgOiBiaXQgKyAxO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGVxdWFscyB6ZXJvLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGlnaCA9PT0gMCAmJiB0aGlzLmxvdyA9PT0gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgemVyby4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNpc1plcm99LlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZXF6ID0gTG9uZ1Byb3RvdHlwZS5pc1plcm87XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbmVnYXRpdmUuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5pc05lZ2F0aXZlID0gZnVuY3Rpb24gaXNOZWdhdGl2ZSgpIHtcclxuICAgIHJldHVybiAhdGhpcy51bnNpZ25lZCAmJiB0aGlzLmhpZ2ggPCAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIHBvc2l0aXZlLlxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuaXNQb3NpdGl2ZSA9IGZ1bmN0aW9uIGlzUG9zaXRpdmUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51bnNpZ25lZCB8fCB0aGlzLmhpZ2ggPj0gMDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBvZGQuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkKCkge1xyXG4gICAgcmV0dXJuICh0aGlzLmxvdyAmIDEpID09PSAxO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGV2ZW4uXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4oKSB7XHJcbiAgICByZXR1cm4gKHRoaXMubG93ICYgMSkgPT09IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZXF1YWxzIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgaWYgKHRoaXMudW5zaWduZWQgIT09IG90aGVyLnVuc2lnbmVkICYmICh0aGlzLmhpZ2ggPj4+IDMxKSA9PT0gMSAmJiAob3RoZXIuaGlnaCA+Pj4gMzEpID09PSAxKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBlcXVhbHMgdGhlIHNwZWNpZmllZCdzLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2VxdWFsc30uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5lcSA9IExvbmdQcm90b3R5cGUuZXF1YWxzO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5vdEVxdWFscyA9IGZ1bmN0aW9uIG5vdEVxdWFscyhvdGhlcikge1xyXG4gICAgcmV0dXJuICF0aGlzLmVxKC8qIHZhbGlkYXRlcyAqLyBvdGhlcik7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubmVxID0gTG9uZ1Byb3RvdHlwZS5ub3RFcXVhbHM7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNub3RFcXVhbHN9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubmUgPSBMb25nUHJvdG90eXBlLm5vdEVxdWFscztcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBsZXNzIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbiA9IGZ1bmN0aW9uIGxlc3NUaGFuKG90aGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPCAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbGVzc1RoYW59LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubHQgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGxlc3NUaGFuT3JFcXVhbChvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpIDw9IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubHRlID0gTG9uZ1Byb3RvdHlwZS5sZXNzVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNsZXNzVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUubGUgPSBMb25nUHJvdG90eXBlLmxlc3NUaGFuT3JFcXVhbDtcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGlzIExvbmcncyB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHNwZWNpZmllZCdzLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIHZhbHVlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbiA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG90aGVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wKC8qIHZhbGlkYXRlcyAqLyBvdGhlcikgPiAwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkJ3MuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjZ3JlYXRlclRoYW59LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ3QgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuO1xyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGlmIHRoaXMgTG9uZydzIHZhbHVlIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgc3BlY2lmaWVkJ3MuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbCA9IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcXVhbChvdGhlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuY29tcCgvKiB2YWxpZGF0ZXMgKi8gb3RoZXIpID49IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ3RlID0gTG9uZ1Byb3RvdHlwZS5ncmVhdGVyVGhhbk9yRXF1YWw7XHJcblxyXG4vKipcclxuICogVGVzdHMgaWYgdGhpcyBMb25nJ3MgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNncmVhdGVyVGhhbk9yRXF1YWx9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICovXHJcbkxvbmdQcm90b3R5cGUuZ2UgPSBMb25nUHJvdG90eXBlLmdyZWF0ZXJUaGFuT3JFcXVhbDtcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciB2YWx1ZVxyXG4gKiBAcmV0dXJucyB7bnVtYmVyfSAwIGlmIHRoZXkgYXJlIHRoZSBzYW1lLCAxIGlmIHRoZSB0aGlzIGlzIGdyZWF0ZXIgYW5kIC0xXHJcbiAqICBpZiB0aGUgZ2l2ZW4gb25lIGlzIGdyZWF0ZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUob3RoZXIpIHtcclxuICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICBpZiAodGhpcy5lcShvdGhlcikpXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB2YXIgdGhpc05lZyA9IHRoaXMuaXNOZWdhdGl2ZSgpLFxyXG4gICAgICAgIG90aGVyTmVnID0gb3RoZXIuaXNOZWdhdGl2ZSgpO1xyXG4gICAgaWYgKHRoaXNOZWcgJiYgIW90aGVyTmVnKVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIGlmICghdGhpc05lZyAmJiBvdGhlck5lZylcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHNpZ24gYml0cyBhcmUgdGhlIHNhbWVcclxuICAgIGlmICghdGhpcy51bnNpZ25lZClcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWIob3RoZXIpLmlzTmVnYXRpdmUoKSA/IC0xIDogMTtcclxuICAgIC8vIEJvdGggYXJlIHBvc2l0aXZlIGlmIGF0IGxlYXN0IG9uZSBpcyB1bnNpZ25lZFxyXG4gICAgcmV0dXJuIChvdGhlci5oaWdoID4+PiAwKSA+ICh0aGlzLmhpZ2ggPj4+IDApIHx8IChvdGhlci5oaWdoID09PSB0aGlzLmhpZ2ggJiYgKG90aGVyLmxvdyA+Pj4gMCkgPiAodGhpcy5sb3cgPj4+IDApKSA/IC0xIDogMTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlcyB0aGlzIExvbmcncyB2YWx1ZSB3aXRoIHRoZSBzcGVjaWZpZWQncy4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNjb21wYXJlfS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gb3RoZXIgT3RoZXIgdmFsdWVcclxuICogQHJldHVybnMge251bWJlcn0gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgMSBpZiB0aGUgdGhpcyBpcyBncmVhdGVyIGFuZCAtMVxyXG4gKiAgaWYgdGhlIGdpdmVuIG9uZSBpcyBncmVhdGVyXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmNvbXAgPSBMb25nUHJvdG90eXBlLmNvbXBhcmU7XHJcblxyXG4vKipcclxuICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS5cclxuICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUubmVnYXRlID0gZnVuY3Rpb24gbmVnYXRlKCkge1xyXG4gICAgaWYgKCF0aGlzLnVuc2lnbmVkICYmIHRoaXMuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICByZXR1cm4gTUlOX1ZBTFVFO1xyXG4gICAgcmV0dXJuIHRoaXMubm90KCkuYWRkKE9ORSk7XHJcbn07XHJcblxyXG4vKipcclxuICogTmVnYXRlcyB0aGlzIExvbmcncyB2YWx1ZS4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNuZWdhdGV9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHJldHVybnMgeyFMb25nfSBOZWdhdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUubmVnID0gTG9uZ1Byb3RvdHlwZS5uZWdhdGU7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc3VtIG9mIHRoaXMgYW5kIHRoZSBzcGVjaWZpZWQgTG9uZy5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBhZGRlbmQgQWRkZW5kXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU3VtXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChhZGRlbmQpIHtcclxuICAgIGlmICghaXNMb25nKGFkZGVuZCkpXHJcbiAgICAgICAgYWRkZW5kID0gZnJvbVZhbHVlKGFkZGVuZCk7XHJcblxyXG4gICAgLy8gRGl2aWRlIGVhY2ggbnVtYmVyIGludG8gNCBjaHVua3Mgb2YgMTYgYml0cywgYW5kIHRoZW4gc3VtIHRoZSBjaHVua3MuXHJcblxyXG4gICAgdmFyIGE0OCA9IHRoaXMuaGlnaCA+Pj4gMTY7XHJcbiAgICB2YXIgYTMyID0gdGhpcy5oaWdoICYgMHhGRkZGO1xyXG4gICAgdmFyIGExNiA9IHRoaXMubG93ID4+PiAxNjtcclxuICAgIHZhciBhMDAgPSB0aGlzLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICB2YXIgYjQ4ID0gYWRkZW5kLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGIzMiA9IGFkZGVuZC5oaWdoICYgMHhGRkZGO1xyXG4gICAgdmFyIGIxNiA9IGFkZGVuZC5sb3cgPj4+IDE2O1xyXG4gICAgdmFyIGIwMCA9IGFkZGVuZC5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGM0OCA9IDAsIGMzMiA9IDAsIGMxNiA9IDAsIGMwMCA9IDA7XHJcbiAgICBjMDAgKz0gYTAwICsgYjAwO1xyXG4gICAgYzE2ICs9IGMwMCA+Pj4gMTY7XHJcbiAgICBjMDAgJj0gMHhGRkZGO1xyXG4gICAgYzE2ICs9IGExNiArIGIxNjtcclxuICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgYzE2ICY9IDB4RkZGRjtcclxuICAgIGMzMiArPSBhMzIgKyBiMzI7XHJcbiAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICBjNDggKz0gYTQ4ICsgYjQ4O1xyXG4gICAgYzQ4ICY9IDB4RkZGRjtcclxuICAgIHJldHVybiBmcm9tQml0cygoYzE2IDw8IDE2KSB8IGMwMCwgKGM0OCA8PCAxNikgfCBjMzIsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IHN1YnRyYWhlbmQgU3VidHJhaGVuZFxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IERpZmZlcmVuY2VcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc3VidHJhY3QgPSBmdW5jdGlvbiBzdWJ0cmFjdChzdWJ0cmFoZW5kKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhzdWJ0cmFoZW5kKSlcclxuICAgICAgICBzdWJ0cmFoZW5kID0gZnJvbVZhbHVlKHN1YnRyYWhlbmQpO1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkKHN1YnRyYWhlbmQubmVnKCkpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGRpZmZlcmVuY2Ugb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI3N1YnRyYWN0fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gc3VidHJhaGVuZCBTdWJ0cmFoZW5kXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gRGlmZmVyZW5jZVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5zdWIgPSBMb25nUHJvdG90eXBlLnN1YnRyYWN0O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhpcyBhbmQgdGhlIHNwZWNpZmllZCBMb25nLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG11bHRpcGxpZXIgTXVsdGlwbGllclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFByb2R1Y3RcclxuICovXHJcbkxvbmdQcm90b3R5cGUubXVsdGlwbHkgPSBmdW5jdGlvbiBtdWx0aXBseShtdWx0aXBsaWVyKSB7XHJcbiAgICBpZiAodGhpcy5pc1plcm8oKSlcclxuICAgICAgICByZXR1cm4gWkVSTztcclxuICAgIGlmICghaXNMb25nKG11bHRpcGxpZXIpKVxyXG4gICAgICAgIG11bHRpcGxpZXIgPSBmcm9tVmFsdWUobXVsdGlwbGllcik7XHJcblxyXG4gICAgLy8gdXNlIHdhc20gc3VwcG9ydCBpZiBwcmVzZW50XHJcbiAgICBpZiAod2FzbSkge1xyXG4gICAgICAgIHZhciBsb3cgPSB3YXNtLm11bCh0aGlzLmxvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyLmxvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGllci5oaWdoKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtLmdldF9oaWdoKCksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtdWx0aXBsaWVyLmlzWmVybygpKVxyXG4gICAgICAgIHJldHVybiBaRVJPO1xyXG4gICAgaWYgKHRoaXMuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICByZXR1cm4gbXVsdGlwbGllci5pc09kZCgpID8gTUlOX1ZBTFVFIDogWkVSTztcclxuICAgIGlmIChtdWx0aXBsaWVyLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNPZGQoKSA/IE1JTl9WQUxVRSA6IFpFUk87XHJcblxyXG4gICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllci5uZWcoKSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZWcoKS5tdWwobXVsdGlwbGllcikubmVnKCk7XHJcbiAgICB9IGVsc2UgaWYgKG11bHRpcGxpZXIuaXNOZWdhdGl2ZSgpKVxyXG4gICAgICAgIHJldHVybiB0aGlzLm11bChtdWx0aXBsaWVyLm5lZygpKS5uZWcoKTtcclxuXHJcbiAgICAvLyBJZiBib3RoIGxvbmdzIGFyZSBzbWFsbCwgdXNlIGZsb2F0IG11bHRpcGxpY2F0aW9uXHJcbiAgICBpZiAodGhpcy5sdChUV09fUFdSXzI0KSAmJiBtdWx0aXBsaWVyLmx0KFRXT19QV1JfMjQpKVxyXG4gICAgICAgIHJldHVybiBmcm9tTnVtYmVyKHRoaXMudG9OdW1iZXIoKSAqIG11bHRpcGxpZXIudG9OdW1iZXIoKSwgdGhpcy51bnNpZ25lZCk7XHJcblxyXG4gICAgLy8gRGl2aWRlIGVhY2ggbG9uZyBpbnRvIDQgY2h1bmtzIG9mIDE2IGJpdHMsIGFuZCB0aGVuIGFkZCB1cCA0eDQgcHJvZHVjdHMuXHJcbiAgICAvLyBXZSBjYW4gc2tpcCBwcm9kdWN0cyB0aGF0IHdvdWxkIG92ZXJmbG93LlxyXG5cclxuICAgIHZhciBhNDggPSB0aGlzLmhpZ2ggPj4+IDE2O1xyXG4gICAgdmFyIGEzMiA9IHRoaXMuaGlnaCAmIDB4RkZGRjtcclxuICAgIHZhciBhMTYgPSB0aGlzLmxvdyA+Pj4gMTY7XHJcbiAgICB2YXIgYTAwID0gdGhpcy5sb3cgJiAweEZGRkY7XHJcblxyXG4gICAgdmFyIGI0OCA9IG11bHRpcGxpZXIuaGlnaCA+Pj4gMTY7XHJcbiAgICB2YXIgYjMyID0gbXVsdGlwbGllci5oaWdoICYgMHhGRkZGO1xyXG4gICAgdmFyIGIxNiA9IG11bHRpcGxpZXIubG93ID4+PiAxNjtcclxuICAgIHZhciBiMDAgPSBtdWx0aXBsaWVyLmxvdyAmIDB4RkZGRjtcclxuXHJcbiAgICB2YXIgYzQ4ID0gMCwgYzMyID0gMCwgYzE2ID0gMCwgYzAwID0gMDtcclxuICAgIGMwMCArPSBhMDAgKiBiMDA7XHJcbiAgICBjMTYgKz0gYzAwID4+PiAxNjtcclxuICAgIGMwMCAmPSAweEZGRkY7XHJcbiAgICBjMTYgKz0gYTE2ICogYjAwO1xyXG4gICAgYzMyICs9IGMxNiA+Pj4gMTY7XHJcbiAgICBjMTYgJj0gMHhGRkZGO1xyXG4gICAgYzE2ICs9IGEwMCAqIGIxNjtcclxuICAgIGMzMiArPSBjMTYgPj4+IDE2O1xyXG4gICAgYzE2ICY9IDB4RkZGRjtcclxuICAgIGMzMiArPSBhMzIgKiBiMDA7XHJcbiAgICBjNDggKz0gYzMyID4+PiAxNjtcclxuICAgIGMzMiAmPSAweEZGRkY7XHJcbiAgICBjMzIgKz0gYTE2ICogYjE2O1xyXG4gICAgYzQ4ICs9IGMzMiA+Pj4gMTY7XHJcbiAgICBjMzIgJj0gMHhGRkZGO1xyXG4gICAgYzMyICs9IGEwMCAqIGIzMjtcclxuICAgIGM0OCArPSBjMzIgPj4+IDE2O1xyXG4gICAgYzMyICY9IDB4RkZGRjtcclxuICAgIGM0OCArPSBhNDggKiBiMDAgKyBhMzIgKiBiMTYgKyBhMTYgKiBiMzIgKyBhMDAgKiBiNDg7XHJcbiAgICBjNDggJj0gMHhGRkZGO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKChjMTYgPDwgMTYpIHwgYzAwLCAoYzQ4IDw8IDE2KSB8IGMzMiwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgcHJvZHVjdCBvZiB0aGlzIGFuZCB0aGUgc3BlY2lmaWVkIExvbmcuIFRoaXMgaXMgYW4gYWxpYXMgb2Yge0BsaW5rIExvbmcjbXVsdGlwbHl9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBtdWx0aXBsaWVyIE11bHRpcGxpZXJcclxuICogQHJldHVybnMgeyFMb25nfSBQcm9kdWN0XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm11bCA9IExvbmdQcm90b3R5cGUubXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGUgcmVzdWx0IGlzIHNpZ25lZCBpZiB0aGlzIExvbmcgaXMgc2lnbmVkIG9yXHJcbiAqICB1bnNpZ25lZCBpZiB0aGlzIExvbmcgaXMgdW5zaWduZWQuXHJcbiAqIEBwYXJhbSB7IUxvbmd8bnVtYmVyfHN0cmluZ30gZGl2aXNvciBEaXZpc29yXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gUXVvdGllbnRcclxuICovXHJcbkxvbmdQcm90b3R5cGUuZGl2aWRlID0gZnVuY3Rpb24gZGl2aWRlKGRpdmlzb3IpIHtcclxuICAgIGlmICghaXNMb25nKGRpdmlzb3IpKVxyXG4gICAgICAgIGRpdmlzb3IgPSBmcm9tVmFsdWUoZGl2aXNvcik7XHJcbiAgICBpZiAoZGl2aXNvci5pc1plcm8oKSlcclxuICAgICAgICB0aHJvdyBFcnJvcignZGl2aXNpb24gYnkgemVybycpO1xyXG5cclxuICAgIC8vIHVzZSB3YXNtIHN1cHBvcnQgaWYgcHJlc2VudFxyXG4gICAgaWYgKHdhc20pIHtcclxuICAgICAgICAvLyBndWFyZCBhZ2FpbnN0IHNpZ25lZCBkaXZpc2lvbiBvdmVyZmxvdzogdGhlIGxhcmdlc3RcclxuICAgICAgICAvLyBuZWdhdGl2ZSBudW1iZXIgLyAtMSB3b3VsZCBiZSAxIGxhcmdlciB0aGFuIHRoZSBsYXJnZXN0XHJcbiAgICAgICAgLy8gcG9zaXRpdmUgbnVtYmVyLCBkdWUgdG8gdHdvJ3MgY29tcGxlbWVudC5cclxuICAgICAgICBpZiAoIXRoaXMudW5zaWduZWQgJiZcclxuICAgICAgICAgICAgdGhpcy5oaWdoID09PSAtMHg4MDAwMDAwMCAmJlxyXG4gICAgICAgICAgICBkaXZpc29yLmxvdyA9PT0gLTEgJiYgZGl2aXNvci5oaWdoID09PSAtMSkge1xyXG4gICAgICAgICAgICAvLyBiZSBjb25zaXN0ZW50IHdpdGggbm9uLXdhc20gY29kZSBwYXRoXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbG93ID0gKHRoaXMudW5zaWduZWQgPyB3YXNtLmRpdl91IDogd2FzbS5kaXZfcykoXHJcbiAgICAgICAgICAgIHRoaXMubG93LFxyXG4gICAgICAgICAgICB0aGlzLmhpZ2gsXHJcbiAgICAgICAgICAgIGRpdmlzb3IubG93LFxyXG4gICAgICAgICAgICBkaXZpc29yLmhpZ2hcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyhsb3csIHdhc20uZ2V0X2hpZ2goKSwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICB2YXIgYXBwcm94LCByZW0sIHJlcztcclxuICAgIGlmICghdGhpcy51bnNpZ25lZCkge1xyXG4gICAgICAgIC8vIFRoaXMgc2VjdGlvbiBpcyBvbmx5IHJlbGV2YW50IGZvciBzaWduZWQgbG9uZ3MgYW5kIGlzIGRlcml2ZWQgZnJvbSB0aGVcclxuICAgICAgICAvLyBjbG9zdXJlIGxpYnJhcnkgYXMgYSB3aG9sZS5cclxuICAgICAgICBpZiAodGhpcy5lcShNSU5fVkFMVUUpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmVxKE9ORSkgfHwgZGl2aXNvci5lcShORUdfT05FKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBNSU5fVkFMVUU7ICAvLyByZWNhbGwgdGhhdCAtTUlOX1ZBTFVFID09IE1JTl9WQUxVRVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaXZpc29yLmVxKE1JTl9WQUxVRSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT05FO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgfG90aGVyfCA+PSAyLCBzbyB8dGhpcy9vdGhlcnwgPCB8TUlOX1ZBTFVFfC5cclxuICAgICAgICAgICAgICAgIHZhciBoYWxmVGhpcyA9IHRoaXMuc2hyKDEpO1xyXG4gICAgICAgICAgICAgICAgYXBwcm94ID0gaGFsZlRoaXMuZGl2KGRpdmlzb3IpLnNobCgxKTtcclxuICAgICAgICAgICAgICAgIGlmIChhcHByb3guZXEoWkVSTykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGl2aXNvci5pc05lZ2F0aXZlKCkgPyBPTkUgOiBORUdfT05FO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW0gPSB0aGlzLnN1YihkaXZpc29yLm11bChhcHByb3gpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBhcHByb3guYWRkKHJlbS5kaXYoZGl2aXNvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRpdmlzb3IuZXEoTUlOX1ZBTFVFKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5zaWduZWQgPyBVWkVSTyA6IFpFUk87XHJcbiAgICAgICAgaWYgKHRoaXMuaXNOZWdhdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXZpc29yLmlzTmVnYXRpdmUoKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5lZygpLmRpdihkaXZpc29yLm5lZygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmVnKCkuZGl2KGRpdmlzb3IpLm5lZygpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGl2aXNvci5pc05lZ2F0aXZlKCkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRpdihkaXZpc29yLm5lZygpKS5uZWcoKTtcclxuICAgICAgICByZXMgPSBaRVJPO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBUaGUgYWxnb3JpdGhtIGJlbG93IGhhcyBub3QgYmVlbiBtYWRlIGZvciB1bnNpZ25lZCBsb25ncy4gSXQncyB0aGVyZWZvcmVcclxuICAgICAgICAvLyByZXF1aXJlZCB0byB0YWtlIHNwZWNpYWwgY2FyZSBvZiB0aGUgTVNCIHByaW9yIHRvIHJ1bm5pbmcgaXQuXHJcbiAgICAgICAgaWYgKCFkaXZpc29yLnVuc2lnbmVkKVxyXG4gICAgICAgICAgICBkaXZpc29yID0gZGl2aXNvci50b1Vuc2lnbmVkKCk7XHJcbiAgICAgICAgaWYgKGRpdmlzb3IuZ3QodGhpcykpXHJcbiAgICAgICAgICAgIHJldHVybiBVWkVSTztcclxuICAgICAgICBpZiAoZGl2aXNvci5ndCh0aGlzLnNocnUoMSkpKSAvLyAxNSA+Pj4gMSA9IDcgOyB3aXRoIGRpdmlzb3IgPSA4IDsgdHJ1ZVxyXG4gICAgICAgICAgICByZXR1cm4gVU9ORTtcclxuICAgICAgICByZXMgPSBVWkVSTztcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXBlYXQgdGhlIGZvbGxvd2luZyB1bnRpbCB0aGUgcmVtYWluZGVyIGlzIGxlc3MgdGhhbiBvdGhlcjogIGZpbmQgYVxyXG4gICAgLy8gZmxvYXRpbmctcG9pbnQgdGhhdCBhcHByb3hpbWF0ZXMgcmVtYWluZGVyIC8gb3RoZXIgKmZyb20gYmVsb3cqLCBhZGQgdGhpc1xyXG4gICAgLy8gaW50byB0aGUgcmVzdWx0LCBhbmQgc3VidHJhY3QgaXQgZnJvbSB0aGUgcmVtYWluZGVyLiAgSXQgaXMgY3JpdGljYWwgdGhhdFxyXG4gICAgLy8gdGhlIGFwcHJveGltYXRlIHZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcmVhbCB2YWx1ZSBzbyB0aGF0IHRoZVxyXG4gICAgLy8gcmVtYWluZGVyIG5ldmVyIGJlY29tZXMgbmVnYXRpdmUuXHJcbiAgICByZW0gPSB0aGlzO1xyXG4gICAgd2hpbGUgKHJlbS5ndGUoZGl2aXNvcikpIHtcclxuICAgICAgICAvLyBBcHByb3hpbWF0ZSB0aGUgcmVzdWx0IG9mIGRpdmlzaW9uLiBUaGlzIG1heSBiZSBhIGxpdHRsZSBncmVhdGVyIG9yXHJcbiAgICAgICAgLy8gc21hbGxlciB0aGFuIHRoZSBhY3R1YWwgdmFsdWUuXHJcbiAgICAgICAgYXBwcm94ID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihyZW0udG9OdW1iZXIoKSAvIGRpdmlzb3IudG9OdW1iZXIoKSkpO1xyXG5cclxuICAgICAgICAvLyBXZSB3aWxsIHR3ZWFrIHRoZSBhcHByb3hpbWF0ZSByZXN1bHQgYnkgY2hhbmdpbmcgaXQgaW4gdGhlIDQ4LXRoIGRpZ2l0IG9yXHJcbiAgICAgICAgLy8gdGhlIHNtYWxsZXN0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0LCB3aGljaGV2ZXIgaXMgbGFyZ2VyLlxyXG4gICAgICAgIHZhciBsb2cyID0gTWF0aC5jZWlsKE1hdGgubG9nKGFwcHJveCkgLyBNYXRoLkxOMiksXHJcbiAgICAgICAgICAgIGRlbHRhID0gKGxvZzIgPD0gNDgpID8gMSA6IHBvd19kYmwoMiwgbG9nMiAtIDQ4KSxcclxuXHJcbiAgICAgICAgLy8gRGVjcmVhc2UgdGhlIGFwcHJveGltYXRpb24gdW50aWwgaXQgaXMgc21hbGxlciB0aGFuIHRoZSByZW1haW5kZXIuICBOb3RlXHJcbiAgICAgICAgLy8gdGhhdCBpZiBpdCBpcyB0b28gbGFyZ2UsIHRoZSBwcm9kdWN0IG92ZXJmbG93cyBhbmQgaXMgbmVnYXRpdmUuXHJcbiAgICAgICAgICAgIGFwcHJveFJlcyA9IGZyb21OdW1iZXIoYXBwcm94KSxcclxuICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcclxuICAgICAgICB3aGlsZSAoYXBwcm94UmVtLmlzTmVnYXRpdmUoKSB8fCBhcHByb3hSZW0uZ3QocmVtKSkge1xyXG4gICAgICAgICAgICBhcHByb3ggLT0gZGVsdGE7XHJcbiAgICAgICAgICAgIGFwcHJveFJlcyA9IGZyb21OdW1iZXIoYXBwcm94LCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICAgICAgYXBwcm94UmVtID0gYXBwcm94UmVzLm11bChkaXZpc29yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFdlIGtub3cgdGhlIGFuc3dlciBjYW4ndCBiZSB6ZXJvLi4uIGFuZCBhY3R1YWxseSwgemVybyB3b3VsZCBjYXVzZVxyXG4gICAgICAgIC8vIGluZmluaXRlIHJlY3Vyc2lvbiBzaW5jZSB3ZSB3b3VsZCBtYWtlIG5vIHByb2dyZXNzLlxyXG4gICAgICAgIGlmIChhcHByb3hSZXMuaXNaZXJvKCkpXHJcbiAgICAgICAgICAgIGFwcHJveFJlcyA9IE9ORTtcclxuXHJcbiAgICAgICAgcmVzID0gcmVzLmFkZChhcHByb3hSZXMpO1xyXG4gICAgICAgIHJlbSA9IHJlbS5zdWIoYXBwcm94UmVtKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgZGl2aWRlZCBieSB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI2RpdmlkZX0uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFF1b3RpZW50XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLmRpdiA9IExvbmdQcm90b3R5cGUuZGl2aWRlO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5tb2R1bG8gPSBmdW5jdGlvbiBtb2R1bG8oZGl2aXNvcikge1xyXG4gICAgaWYgKCFpc0xvbmcoZGl2aXNvcikpXHJcbiAgICAgICAgZGl2aXNvciA9IGZyb21WYWx1ZShkaXZpc29yKTtcclxuXHJcbiAgICAvLyB1c2Ugd2FzbSBzdXBwb3J0IGlmIHByZXNlbnRcclxuICAgIGlmICh3YXNtKSB7XHJcbiAgICAgICAgdmFyIGxvdyA9ICh0aGlzLnVuc2lnbmVkID8gd2FzbS5yZW1fdSA6IHdhc20ucmVtX3MpKFxyXG4gICAgICAgICAgICB0aGlzLmxvdyxcclxuICAgICAgICAgICAgdGhpcy5oaWdoLFxyXG4gICAgICAgICAgICBkaXZpc29yLmxvdyxcclxuICAgICAgICAgICAgZGl2aXNvci5oaWdoXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gZnJvbUJpdHMobG93LCB3YXNtLmdldF9oaWdoKCksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnN1Yih0aGlzLmRpdihkaXZpc29yKS5tdWwoZGl2aXNvcikpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIG1vZHVsbyB0aGUgc3BlY2lmaWVkLiBUaGlzIGlzIGFuIGFsaWFzIG9mIHtAbGluayBMb25nI21vZHVsb30uXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IGRpdmlzb3IgRGl2aXNvclxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFJlbWFpbmRlclxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS5tb2QgPSBMb25nUHJvdG90eXBlLm1vZHVsbztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyBtb2R1bG8gdGhlIHNwZWNpZmllZC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNtb2R1bG99LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBkaXZpc29yIERpdmlzb3JcclxuICogQHJldHVybnMgeyFMb25nfSBSZW1haW5kZXJcclxuICovXHJcbkxvbmdQcm90b3R5cGUucmVtID0gTG9uZ1Byb3RvdHlwZS5tb2R1bG87XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYml0d2lzZSBOT1Qgb2YgdGhpcyBMb25nLlxyXG4gKiBAcmV0dXJucyB7IUxvbmd9XHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLm5vdCA9IGZ1bmN0aW9uIG5vdCgpIHtcclxuICAgIHJldHVybiBmcm9tQml0cyh+dGhpcy5sb3csIH50aGlzLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGJpdHdpc2UgQU5EIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICovXHJcbkxvbmdQcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kKG90aGVyKSB7XHJcbiAgICBpZiAoIWlzTG9uZyhvdGhlcikpXHJcbiAgICAgICAgb3RoZXIgPSBmcm9tVmFsdWUob3RoZXIpO1xyXG4gICAgcmV0dXJuIGZyb21CaXRzKHRoaXMubG93ICYgb3RoZXIubG93LCB0aGlzLmhpZ2ggJiBvdGhlci5oaWdoLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBiaXR3aXNlIE9SIG9mIHRoaXMgTG9uZyBhbmQgdGhlIHNwZWNpZmllZC5cclxuICogQHBhcmFtIHshTG9uZ3xudW1iZXJ8c3RyaW5nfSBvdGhlciBPdGhlciBMb25nXHJcbiAqIEByZXR1cm5zIHshTG9uZ31cclxuICovXHJcbkxvbmdQcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvcihvdGhlcikge1xyXG4gICAgaWYgKCFpc0xvbmcob3RoZXIpKVxyXG4gICAgICAgIG90aGVyID0gZnJvbVZhbHVlKG90aGVyKTtcclxuICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyB8IG90aGVyLmxvdywgdGhpcy5oaWdoIHwgb3RoZXIuaGlnaCwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgYml0d2lzZSBYT1Igb2YgdGhpcyBMb25nIGFuZCB0aGUgZ2l2ZW4gb25lLlxyXG4gKiBAcGFyYW0geyFMb25nfG51bWJlcnxzdHJpbmd9IG90aGVyIE90aGVyIExvbmdcclxuICogQHJldHVybnMgeyFMb25nfVxyXG4gKi9cclxuTG9uZ1Byb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3Iob3RoZXIpIHtcclxuICAgIGlmICghaXNMb25nKG90aGVyKSlcclxuICAgICAgICBvdGhlciA9IGZyb21WYWx1ZShvdGhlcik7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3cgXiBvdGhlci5sb3csIHRoaXMuaGlnaCBeIG90aGVyLmhpZ2gsIHRoaXMudW5zaWduZWQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBzaGlmdGVkIHRvIHRoZSBsZWZ0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNoaWZ0TGVmdCA9IGZ1bmN0aW9uIHNoaWZ0TGVmdChudW1CaXRzKSB7XHJcbiAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICBpZiAoKG51bUJpdHMgJj0gNjMpID09PSAwKVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgZWxzZSBpZiAobnVtQml0cyA8IDMyKVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmxvdyA8PCBudW1CaXRzLCAodGhpcy5oaWdoIDw8IG51bUJpdHMpIHwgKHRoaXMubG93ID4+PiAoMzIgLSBudW1CaXRzKSksIHRoaXMudW5zaWduZWQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cygwLCB0aGlzLmxvdyA8PCAobnVtQml0cyAtIDMyKSwgdGhpcy51bnNpZ25lZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIHNoaWZ0ZWQgdG8gdGhlIGxlZnQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdExlZnR9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc2hsID0gTG9uZ1Byb3RvdHlwZS5zaGlmdExlZnQ7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGlzIExvbmcgd2l0aCBiaXRzIGFyaXRobWV0aWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNoaWZ0UmlnaHQgPSBmdW5jdGlvbiBzaGlmdFJpZ2h0KG51bUJpdHMpIHtcclxuICAgIGlmIChpc0xvbmcobnVtQml0cykpXHJcbiAgICAgICAgbnVtQml0cyA9IG51bUJpdHMudG9JbnQoKTtcclxuICAgIGlmICgobnVtQml0cyAmPSA2MykgPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICBlbHNlIGlmIChudW1CaXRzIDwgMzIpXHJcbiAgICAgICAgcmV0dXJuIGZyb21CaXRzKCh0aGlzLmxvdyA+Pj4gbnVtQml0cykgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG51bUJpdHMpKSwgdGhpcy5oaWdoID4+IG51bUJpdHMsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBmcm9tQml0cyh0aGlzLmhpZ2ggPj4gKG51bUJpdHMgLSAzMiksIHRoaXMuaGlnaCA+PSAwID8gMCA6IC0xLCB0aGlzLnVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgYXJpdGhtZXRpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0fS5cclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNociA9IExvbmdQcm90b3R5cGUuc2hpZnRSaWdodDtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoaXMgTG9uZyB3aXRoIGJpdHMgbG9naWNhbGx5IHNoaWZ0ZWQgdG8gdGhlIHJpZ2h0IGJ5IHRoZSBnaXZlbiBhbW91bnQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfCFMb25nfSBudW1CaXRzIE51bWJlciBvZiBiaXRzXHJcbiAqIEByZXR1cm5zIHshTG9uZ30gU2hpZnRlZCBMb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZCA9IGZ1bmN0aW9uIHNoaWZ0UmlnaHRVbnNpZ25lZChudW1CaXRzKSB7XHJcbiAgICBpZiAoaXNMb25nKG51bUJpdHMpKVxyXG4gICAgICAgIG51bUJpdHMgPSBudW1CaXRzLnRvSW50KCk7XHJcbiAgICBudW1CaXRzICY9IDYzO1xyXG4gICAgaWYgKG51bUJpdHMgPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgaGlnaCA9IHRoaXMuaGlnaDtcclxuICAgICAgICBpZiAobnVtQml0cyA8IDMyKSB7XHJcbiAgICAgICAgICAgIHZhciBsb3cgPSB0aGlzLmxvdztcclxuICAgICAgICAgICAgcmV0dXJuIGZyb21CaXRzKChsb3cgPj4+IG51bUJpdHMpIHwgKGhpZ2ggPDwgKDMyIC0gbnVtQml0cykpLCBoaWdoID4+PiBudW1CaXRzLCB0aGlzLnVuc2lnbmVkKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG51bUJpdHMgPT09IDMyKVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoaGlnaCwgMCwgdGhpcy51bnNpZ25lZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gZnJvbUJpdHMoaGlnaCA+Pj4gKG51bUJpdHMgLSAzMiksIDAsIHRoaXMudW5zaWduZWQpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0VW5zaWduZWR9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc2hydSA9IExvbmdQcm90b3R5cGUuc2hpZnRSaWdodFVuc2lnbmVkO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhpcyBMb25nIHdpdGggYml0cyBsb2dpY2FsbHkgc2hpZnRlZCB0byB0aGUgcmlnaHQgYnkgdGhlIGdpdmVuIGFtb3VudC4gVGhpcyBpcyBhbiBhbGlhcyBvZiB7QGxpbmsgTG9uZyNzaGlmdFJpZ2h0VW5zaWduZWR9LlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtudW1iZXJ8IUxvbmd9IG51bUJpdHMgTnVtYmVyIG9mIGJpdHNcclxuICogQHJldHVybnMgeyFMb25nfSBTaGlmdGVkIExvbmdcclxuICovXHJcbkxvbmdQcm90b3R5cGUuc2hyX3UgPSBMb25nUHJvdG90eXBlLnNoaWZ0UmlnaHRVbnNpZ25lZDtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIExvbmcgdG8gc2lnbmVkLlxyXG4gKiBAcmV0dXJucyB7IUxvbmd9IFNpZ25lZCBsb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvU2lnbmVkID0gZnVuY3Rpb24gdG9TaWduZWQoKSB7XHJcbiAgICBpZiAoIXRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgZmFsc2UpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byB1bnNpZ25lZC5cclxuICogQHJldHVybnMgeyFMb25nfSBVbnNpZ25lZCBsb25nXHJcbiAqL1xyXG5Mb25nUHJvdG90eXBlLnRvVW5zaWduZWQgPSBmdW5jdGlvbiB0b1Vuc2lnbmVkKCkge1xyXG4gICAgaWYgKHRoaXMudW5zaWduZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICByZXR1cm4gZnJvbUJpdHModGhpcy5sb3csIHRoaXMuaGlnaCwgdHJ1ZSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydHMgdGhpcyBMb25nIHRvIGl0cyBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBsZSBXaGV0aGVyIGxpdHRsZSBvciBiaWcgZW5kaWFuLCBkZWZhdWx0cyB0byBiaWcgZW5kaWFuXHJcbiAqIEByZXR1cm5zIHshQXJyYXkuPG51bWJlcj59IEJ5dGUgcmVwcmVzZW50YXRpb25cclxuICovXHJcbkxvbmdQcm90b3R5cGUudG9CeXRlcyA9IGZ1bmN0aW9uIHRvQnl0ZXMobGUpIHtcclxuICAgIHJldHVybiBsZSA/IHRoaXMudG9CeXRlc0xFKCkgOiB0aGlzLnRvQnl0ZXNCRSgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgbGl0dGxlIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICovXHJcbkxvbmdQcm90b3R5cGUudG9CeXRlc0xFID0gZnVuY3Rpb24gdG9CeXRlc0xFKCkge1xyXG4gICAgdmFyIGhpID0gdGhpcy5oaWdoLFxyXG4gICAgICAgIGxvID0gdGhpcy5sb3c7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGxvICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgbG8gPj4+ICA4ICYgMHhmZixcclxuICAgICAgICBsbyA+Pj4gMTYgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAyNCAgICAgICAsXHJcbiAgICAgICAgaGkgICAgICAgICYgMHhmZixcclxuICAgICAgICBoaSA+Pj4gIDggJiAweGZmLFxyXG4gICAgICAgIGhpID4+PiAxNiAmIDB4ZmYsXHJcbiAgICAgICAgaGkgPj4+IDI0XHJcbiAgICBdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgTG9uZyB0byBpdHMgYmlnIGVuZGlhbiBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcmV0dXJucyB7IUFycmF5LjxudW1iZXI+fSBCaWcgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICovXHJcbkxvbmdQcm90b3R5cGUudG9CeXRlc0JFID0gZnVuY3Rpb24gdG9CeXRlc0JFKCkge1xyXG4gICAgdmFyIGhpID0gdGhpcy5oaWdoLFxyXG4gICAgICAgIGxvID0gdGhpcy5sb3c7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGhpID4+PiAyNCAgICAgICAsXHJcbiAgICAgICAgaGkgPj4+IDE2ICYgMHhmZixcclxuICAgICAgICBoaSA+Pj4gIDggJiAweGZmLFxyXG4gICAgICAgIGhpICAgICAgICAmIDB4ZmYsXHJcbiAgICAgICAgbG8gPj4+IDI0ICAgICAgICxcclxuICAgICAgICBsbyA+Pj4gMTYgJiAweGZmLFxyXG4gICAgICAgIGxvID4+PiAgOCAmIDB4ZmYsXHJcbiAgICAgICAgbG8gICAgICAgICYgMHhmZlxyXG4gICAgXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBieXRlIHJlcHJlc2VudGF0aW9uLlxyXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gYnl0ZXMgQnl0ZSByZXByZXNlbnRhdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGxlIFdoZXRoZXIgbGl0dGxlIG9yIGJpZyBlbmRpYW4sIGRlZmF1bHRzIHRvIGJpZyBlbmRpYW5cclxuICogQHJldHVybnMge0xvbmd9IFRoZSBjb3JyZXNwb25kaW5nIExvbmcgdmFsdWVcclxuICovXHJcbkxvbmcuZnJvbUJ5dGVzID0gZnVuY3Rpb24gZnJvbUJ5dGVzKGJ5dGVzLCB1bnNpZ25lZCwgbGUpIHtcclxuICAgIHJldHVybiBsZSA/IExvbmcuZnJvbUJ5dGVzTEUoYnl0ZXMsIHVuc2lnbmVkKSA6IExvbmcuZnJvbUJ5dGVzQkUoYnl0ZXMsIHVuc2lnbmVkKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTG9uZyBmcm9tIGl0cyBsaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb24uXHJcbiAqIEBwYXJhbSB7IUFycmF5LjxudW1iZXI+fSBieXRlcyBMaXR0bGUgZW5kaWFuIGJ5dGUgcmVwcmVzZW50YXRpb25cclxuICogQHBhcmFtIHtib29sZWFuPX0gdW5zaWduZWQgV2hldGhlciB1bnNpZ25lZCBvciBub3QsIGRlZmF1bHRzIHRvIHNpZ25lZFxyXG4gKiBAcmV0dXJucyB7TG9uZ30gVGhlIGNvcnJlc3BvbmRpbmcgTG9uZyB2YWx1ZVxyXG4gKi9cclxuTG9uZy5mcm9tQnl0ZXNMRSA9IGZ1bmN0aW9uIGZyb21CeXRlc0xFKGJ5dGVzLCB1bnNpZ25lZCkge1xyXG4gICAgcmV0dXJuIG5ldyBMb25nKFxyXG4gICAgICAgIGJ5dGVzWzBdICAgICAgIHxcclxuICAgICAgICBieXRlc1sxXSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbMl0gPDwgMTYgfFxyXG4gICAgICAgIGJ5dGVzWzNdIDw8IDI0LFxyXG4gICAgICAgIGJ5dGVzWzRdICAgICAgIHxcclxuICAgICAgICBieXRlc1s1XSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbNl0gPDwgMTYgfFxyXG4gICAgICAgIGJ5dGVzWzddIDw8IDI0LFxyXG4gICAgICAgIHVuc2lnbmVkXHJcbiAgICApO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBMb25nIGZyb20gaXRzIGJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvbi5cclxuICogQHBhcmFtIHshQXJyYXkuPG51bWJlcj59IGJ5dGVzIEJpZyBlbmRpYW4gYnl0ZSByZXByZXNlbnRhdGlvblxyXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB1bnNpZ25lZCBXaGV0aGVyIHVuc2lnbmVkIG9yIG5vdCwgZGVmYXVsdHMgdG8gc2lnbmVkXHJcbiAqIEByZXR1cm5zIHtMb25nfSBUaGUgY29ycmVzcG9uZGluZyBMb25nIHZhbHVlXHJcbiAqL1xyXG5Mb25nLmZyb21CeXRlc0JFID0gZnVuY3Rpb24gZnJvbUJ5dGVzQkUoYnl0ZXMsIHVuc2lnbmVkKSB7XHJcbiAgICByZXR1cm4gbmV3IExvbmcoXHJcbiAgICAgICAgYnl0ZXNbNF0gPDwgMjQgfFxyXG4gICAgICAgIGJ5dGVzWzVdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1s2XSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbN10sXHJcbiAgICAgICAgYnl0ZXNbMF0gPDwgMjQgfFxyXG4gICAgICAgIGJ5dGVzWzFdIDw8IDE2IHxcclxuICAgICAgICBieXRlc1syXSA8PCAgOCB8XHJcbiAgICAgICAgYnl0ZXNbM10sXHJcbiAgICAgICAgdW5zaWduZWRcclxuICAgICk7XHJcbn07XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBDb2xvcjMge1xuICByOiBudW1iZXJcbiAgZzogbnVtYmVyXG4gIGI6IG51bWJlclxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29sb3IzKCk6IENvbG9yMyB7XG4gIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAgfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDb2xvcjMgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBDb2xvcjMsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5yICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLnIpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmcgIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UuZylcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuYiAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyOSkuZmxvYXQobWVzc2FnZS5iKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogQ29sb3IzIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb2xvcjMoKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLnIgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLmcgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLmIgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBMb25nIGZyb20gJ2xvbmcnXG5pbXBvcnQgeyBDb2xvcjMgfSBmcm9tICcuL2NvbW1vbi9Db2xvcjMuZ2VuJ1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJBdmF0YXJTaGFwZSB7XG4gIGlkOiBzdHJpbmdcbiAgbmFtZT86IHN0cmluZyB8IHVuZGVmaW5lZFxuICBib2R5U2hhcGU/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgc2tpbkNvbG9yPzogQ29sb3IzIHwgdW5kZWZpbmVkXG4gIGhhaXJDb2xvcj86IENvbG9yMyB8IHVuZGVmaW5lZFxuICBleWVDb2xvcj86IENvbG9yMyB8IHVuZGVmaW5lZFxuICB3ZWFyYWJsZXM6IHN0cmluZ1tdXG4gIGV4cHJlc3Npb25UcmlnZ2VySWQ/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgZXhwcmVzc2lvblRyaWdnZXJUaW1lc3RhbXA/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgc3RpY2tlclRyaWdnZXJJZD86IHN0cmluZyB8IHVuZGVmaW5lZFxuICBzdGlja2VyVHJpZ2dlclRpbWVzdGFtcD86IG51bWJlciB8IHVuZGVmaW5lZFxuICB0YWxraW5nPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJBdmF0YXJTaGFwZSgpOiBQQkF2YXRhclNoYXBlIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogJycsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGJvZHlTaGFwZTogdW5kZWZpbmVkLFxuICAgIHNraW5Db2xvcjogdW5kZWZpbmVkLFxuICAgIGhhaXJDb2xvcjogdW5kZWZpbmVkLFxuICAgIGV5ZUNvbG9yOiB1bmRlZmluZWQsXG4gICAgd2VhcmFibGVzOiBbXSxcbiAgICBleHByZXNzaW9uVHJpZ2dlcklkOiB1bmRlZmluZWQsXG4gICAgZXhwcmVzc2lvblRyaWdnZXJUaW1lc3RhbXA6IHVuZGVmaW5lZCxcbiAgICBzdGlja2VyVHJpZ2dlcklkOiB1bmRlZmluZWQsXG4gICAgc3RpY2tlclRyaWdnZXJUaW1lc3RhbXA6IHVuZGVmaW5lZCxcbiAgICB0YWxraW5nOiB1bmRlZmluZWRcbiAgfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQQkF2YXRhclNoYXBlID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJBdmF0YXJTaGFwZSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLmlkICE9PSAnJykge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuaWQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxOCkuc3RyaW5nKG1lc3NhZ2UubmFtZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuYm9keVNoYXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLmJvZHlTaGFwZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc2tpbkNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5za2luQ29sb3IsIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuaGFpckNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5oYWlyQ29sb3IsIHdyaXRlci51aW50MzIoNDIpLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZXllQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgQ29sb3IzLmVuY29kZShtZXNzYWdlLmV5ZUNvbG9yLCB3cml0ZXIudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLndlYXJhYmxlcykge1xuICAgICAgd3JpdGVyLnVpbnQzMig1OCkuc3RyaW5nKHYhKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5leHByZXNzaW9uVHJpZ2dlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNjYpLnN0cmluZyhtZXNzYWdlLmV4cHJlc3Npb25UcmlnZ2VySWQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmV4cHJlc3Npb25UcmlnZ2VyVGltZXN0YW1wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNzIpLmludDY0KG1lc3NhZ2UuZXhwcmVzc2lvblRyaWdnZXJUaW1lc3RhbXApXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnN0aWNrZXJUcmlnZ2VySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4Mikuc3RyaW5nKG1lc3NhZ2Uuc3RpY2tlclRyaWdnZXJJZClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc3RpY2tlclRyaWdnZXJUaW1lc3RhbXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4OCkuaW50NjQobWVzc2FnZS5zdGlja2VyVHJpZ2dlclRpbWVzdGFtcClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudGFsa2luZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDk2KS5ib29sKG1lc3NhZ2UudGFsa2luZylcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCQXZhdGFyU2hhcGUge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQXZhdGFyU2hhcGUoKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmlkID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UubmFtZSA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLmJvZHlTaGFwZSA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLnNraW5Db2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIG1lc3NhZ2UuaGFpckNvbG9yID0gQ29sb3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgbWVzc2FnZS5leWVDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIG1lc3NhZ2Uud2VhcmFibGVzLnB1c2gocmVhZGVyLnN0cmluZygpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICBtZXNzYWdlLmV4cHJlc3Npb25UcmlnZ2VySWQgPSByZWFkZXIuc3RyaW5nKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgbWVzc2FnZS5leHByZXNzaW9uVHJpZ2dlclRpbWVzdGFtcCA9IGxvbmdUb051bWJlcihyZWFkZXIuaW50NjQoKSBhcyBMb25nKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgbWVzc2FnZS5zdGlja2VyVHJpZ2dlcklkID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBtZXNzYWdlLnN0aWNrZXJUcmlnZ2VyVGltZXN0YW1wID0gbG9uZ1RvTnVtYmVyKHJlYWRlci5pbnQ2NCgpIGFzIExvbmcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICBtZXNzYWdlLnRhbGtpbmcgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG5cbmRlY2xhcmUgdmFyIHNlbGY6IGFueSB8IHVuZGVmaW5lZFxuZGVjbGFyZSB2YXIgd2luZG93OiBhbnkgfCB1bmRlZmluZWRcbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55IHwgdW5kZWZpbmVkXG52YXIgZ2xvYmFsVGhpczogYW55ID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGdsb2JhbFRoaXNcbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIHNlbGZcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gd2luZG93XG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGdsb2JhbFxuICB0aHJvdyAnVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0J1xufSkoKVxuXG5mdW5jdGlvbiBsb25nVG9OdW1iZXIobG9uZzogTG9uZyk6IG51bWJlciB7XG4gIGlmIChsb25nLmd0KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkge1xuICAgIHRocm93IG5ldyBnbG9iYWxUaGlzLkVycm9yKCdWYWx1ZSBpcyBsYXJnZXIgdGhhbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUicpXG4gIH1cbiAgcmV0dXJuIGxvbmcudG9OdW1iZXIoKVxufVxuXG5pZiAoX20wLnV0aWwuTG9uZyAhPT0gTG9uZykge1xuICBfbTAudXRpbC5Mb25nID0gTG9uZyBhcyBhbnlcbiAgX20wLmNvbmZpZ3VyZSgpXG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCQXZhdGFyU2hhcGUgfSBmcm9tICcuL3BiL0F2YXRhclNoYXBlLmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwODBcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEF2YXRhclNoYXBlU2NoZW1hOiBJU2NoZW1hPFBCQXZhdGFyU2hhcGU+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCQXZhdGFyU2hhcGUsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQkF2YXRhclNoYXBlLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQkF2YXRhclNoYXBlIHtcbiAgICByZXR1cm4gUEJBdmF0YXJTaGFwZS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCQXZhdGFyU2hhcGUge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQkF2YXRhclNoYXBlLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJCaWxsYm9hcmQge1xuICAvKiogZGVmYXVsdD10cnVlICovXG4gIHg/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PXRydWUgKi9cbiAgeT86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQ9dHJ1ZSAqL1xuICB6PzogYm9vbGVhbiB8IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJCaWxsYm9hcmQoKTogUEJCaWxsYm9hcmQge1xuICByZXR1cm4geyB4OiB1bmRlZmluZWQsIHk6IHVuZGVmaW5lZCwgejogdW5kZWZpbmVkIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJCaWxsYm9hcmQgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQkJpbGxib2FyZCwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLnggIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4KS5ib29sKG1lc3NhZ2UueClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UueSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2UueSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UueiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UueilcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCQmlsbGJvYXJkIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkJpbGxib2FyZCgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UueCA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS55ID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLnogPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCQmlsbGJvYXJkIH0gZnJvbSAnLi9wYi9CaWxsYm9hcmQuZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTA5MFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQmlsbGJvYXJkU2NoZW1hOiBJU2NoZW1hPFBCQmlsbGJvYXJkPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBQQkJpbGxib2FyZCwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCQmlsbGJvYXJkLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQkJpbGxib2FyZCB7XG4gICAgcmV0dXJuIFBCQmlsbGJvYXJkLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJCaWxsYm9hcmQge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQkJpbGxib2FyZC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSlcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSAncHJvdG9idWZqcy9taW5pbWFsJ1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSAnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBCQm94U2hhcGUge1xuICAvKiogQGRlcHJlY2F0ZWQgdXNlIE1lc2hDb2xsaWRlciBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNjYgKi9cbiAgd2l0aENvbGxpc2lvbnM/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgTWVzaENvbGxpZGVyIGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM2NiAqL1xuICBpc1BvaW50ZXJCbG9ja2VyPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIEhpZGRlbkNvbXBvbmVudCBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNTMgKi9cbiAgdmlzaWJsZT86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgdXZzOiBudW1iZXJbXVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJCb3hTaGFwZSgpOiBQQkJveFNoYXBlIHtcbiAgcmV0dXJuIHsgd2l0aENvbGxpc2lvbnM6IHVuZGVmaW5lZCwgaXNQb2ludGVyQmxvY2tlcjogdW5kZWZpbmVkLCB2aXNpYmxlOiB1bmRlZmluZWQsIHV2czogW10gfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQQkJveFNoYXBlID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJCb3hTaGFwZSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLndpdGhDb2xsaXNpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLndpdGhDb2xsaXNpb25zKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTYpLmJvb2wobWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS52aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS52aXNpYmxlKVxuICAgIH1cbiAgICB3cml0ZXIudWludDMyKDM0KS5mb3JrKClcbiAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS51dnMpIHtcbiAgICAgIHdyaXRlci5mbG9hdCh2KVxuICAgIH1cbiAgICB3cml0ZXIubGRlbGltKClcbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJCb3hTaGFwZSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJCb3hTaGFwZSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlciA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS52aXNpYmxlID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCBlbmQyID0gcmVhZGVyLnVpbnQzMigpICsgcmVhZGVyLnBvc1xuICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQyKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UudXZzLnB1c2gocmVhZGVyLmZsb2F0KCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UudXZzLnB1c2gocmVhZGVyLmZsb2F0KCkpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQkJveFNoYXBlIH0gZnJvbSAnLi9wYi9Cb3hTaGFwZS5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDEzXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBCb3hTaGFwZVNjaGVtYTogSVNjaGVtYTxQQkJveFNoYXBlPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBQQkJveFNoYXBlLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJCb3hTaGFwZS5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJCb3hTaGFwZSB7XG4gICAgcmV0dXJuIFBCQm94U2hhcGUuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQkJveFNoYXBlIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJCb3hTaGFwZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSlcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IENhbWVyYU1vZGVWYWx1ZSB9IGZyb20gJy4vY29tbW9uL0NhbWVyYU1vZGVWYWx1ZS5nZW4nXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBQQkNhbWVyYU1vZGUge1xuICBtb2RlOiBDYW1lcmFNb2RlVmFsdWVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCQ2FtZXJhTW9kZSgpOiBQQkNhbWVyYU1vZGUge1xuICByZXR1cm4geyBtb2RlOiAwIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJDYW1lcmFNb2RlID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJDYW1lcmFNb2RlLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UubW9kZSAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4KS5pbnQzMihtZXNzYWdlLm1vZGUpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQkNhbWVyYU1vZGUge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCQ2FtZXJhTW9kZSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UubW9kZSA9IHJlYWRlci5pbnQzMigpIGFzIGFueVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQkNhbWVyYU1vZGUgfSBmcm9tICcuL3BiL0NhbWVyYU1vZGUuZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTA3MlxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ2FtZXJhTW9kZVNjaGVtYTogSVNjaGVtYTxQQkNhbWVyYU1vZGU+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCQ2FtZXJhTW9kZSwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCQ2FtZXJhTW9kZS5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJDYW1lcmFNb2RlIHtcbiAgICByZXR1cm4gUEJDYW1lcmFNb2RlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJDYW1lcmFNb2RlIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJDYW1lcmFNb2RlLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQ2FtZXJhTW9kZVZhbHVlIH0gZnJvbSAnLi9jb21tb24vQ2FtZXJhTW9kZVZhbHVlLmdlbidcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICcuL2NvbW1vbi9WZWN0b3IzLmdlbidcbmltcG9ydCBfbTAgZnJvbSAncHJvdG9idWZqcy9taW5pbWFsJ1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSAnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBCQ2FtZXJhTW9kZUFyZWEge1xuICBhcmVhOiBWZWN0b3IzIHwgdW5kZWZpbmVkXG4gIG1vZGU6IENhbWVyYU1vZGVWYWx1ZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJDYW1lcmFNb2RlQXJlYSgpOiBQQkNhbWVyYU1vZGVBcmVhIHtcbiAgcmV0dXJuIHsgYXJlYTogdW5kZWZpbmVkLCBtb2RlOiAwIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJDYW1lcmFNb2RlQXJlYSA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCQ2FtZXJhTW9kZUFyZWEsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5hcmVhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2UuYXJlYSwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5tb2RlICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLm1vZGUpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQkNhbWVyYU1vZGVBcmVhIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkNhbWVyYU1vZGVBcmVhKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS5hcmVhID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UubW9kZSA9IHJlYWRlci5pbnQzMigpIGFzIGFueVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQkNhbWVyYU1vZGVBcmVhIH0gZnJvbSAnLi9wYi9DYW1lcmFNb2RlQXJlYS5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDcxXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDYW1lcmFNb2RlQXJlYVNjaGVtYTogSVNjaGVtYTxQQkNhbWVyYU1vZGVBcmVhPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBQQkNhbWVyYU1vZGVBcmVhLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJDYW1lcmFNb2RlQXJlYS5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJDYW1lcmFNb2RlQXJlYSB7XG4gICAgcmV0dXJuIFBCQ2FtZXJhTW9kZUFyZWEuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQkNhbWVyYU1vZGVBcmVhIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJDYW1lcmFNb2RlQXJlYS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSlcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSAncHJvdG9idWZqcy9taW5pbWFsJ1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSAnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBCQ3lsaW5kZXJTaGFwZSB7XG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgTWVzaENvbGxpZGVyIGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM2NiAqL1xuICB3aXRoQ29sbGlzaW9ucz86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBNZXNoQ29sbGlkZXIgaW5zdGVhZCBodHRwczovL2dpdGh1Yi5jb20vZGVjZW50cmFsYW5kL3Nkay9pc3N1ZXMvMzY2ICovXG4gIGlzUG9pbnRlckJsb2NrZXI/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgSGlkZGVuQ29tcG9uZW50IGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM1MyAqL1xuICB2aXNpYmxlPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD0xLjAgKi9cbiAgcmFkaXVzVG9wPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PTEuMCAqL1xuICByYWRpdXNCb3R0b20/OiBudW1iZXIgfCB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCQ3lsaW5kZXJTaGFwZSgpOiBQQkN5bGluZGVyU2hhcGUge1xuICByZXR1cm4ge1xuICAgIHdpdGhDb2xsaXNpb25zOiB1bmRlZmluZWQsXG4gICAgaXNQb2ludGVyQmxvY2tlcjogdW5kZWZpbmVkLFxuICAgIHZpc2libGU6IHVuZGVmaW5lZCxcbiAgICByYWRpdXNUb3A6IHVuZGVmaW5lZCxcbiAgICByYWRpdXNCb3R0b206IHVuZGVmaW5lZFxuICB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCQ3lsaW5kZXJTaGFwZSA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCQ3lsaW5kZXJTaGFwZSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLndpdGhDb2xsaXNpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLndpdGhDb2xsaXNpb25zKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTYpLmJvb2wobWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS52aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjQpLmJvb2wobWVzc2FnZS52aXNpYmxlKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5yYWRpdXNUb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS5yYWRpdXNUb3ApXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnJhZGl1c0JvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDQ1KS5mbG9hdChtZXNzYWdlLnJhZGl1c0JvdHRvbSlcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCQ3lsaW5kZXJTaGFwZSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJDeWxpbmRlclNoYXBlKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS53aXRoQ29sbGlzaW9ucyA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLnZpc2libGUgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UucmFkaXVzVG9wID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgbWVzc2FnZS5yYWRpdXNCb3R0b20gPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQkN5bGluZGVyU2hhcGUgfSBmcm9tICcuL3BiL0N5bGluZGVyU2hhcGUuZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTAxNlxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ3lsaW5kZXJTaGFwZVNjaGVtYTogSVNjaGVtYTxQQkN5bGluZGVyU2hhcGU+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCQ3lsaW5kZXJTaGFwZSwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCQ3lsaW5kZXJTaGFwZS5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJDeWxpbmRlclNoYXBlIHtcbiAgICByZXR1cm4gUEJDeWxpbmRlclNoYXBlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJDeWxpbmRlclNoYXBlIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJDeWxpbmRlclNoYXBlLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJHTFRGU2hhcGUge1xuICAvKiogQGRlcHJlY2F0ZWQgdXNlIE1lc2hDb2xsaWRlciBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNjYgKi9cbiAgd2l0aENvbGxpc2lvbnM/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgTWVzaENvbGxpZGVyIGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM2NiAqL1xuICBpc1BvaW50ZXJCbG9ja2VyPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIEhpZGRlbkNvbXBvbmVudCBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNTMgKi9cbiAgdmlzaWJsZT86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgc3JjOiBzdHJpbmdcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCR0xURlNoYXBlKCk6IFBCR0xURlNoYXBlIHtcbiAgcmV0dXJuIHsgd2l0aENvbGxpc2lvbnM6IHVuZGVmaW5lZCwgaXNQb2ludGVyQmxvY2tlcjogdW5kZWZpbmVkLCB2aXNpYmxlOiB1bmRlZmluZWQsIHNyYzogJycgfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQQkdMVEZTaGFwZSA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCR0xURlNoYXBlLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4KS5ib29sKG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmlzUG9pbnRlckJsb2NrZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLmlzUG9pbnRlckJsb2NrZXIpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnZpc2libGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNCkuYm9vbChtZXNzYWdlLnZpc2libGUpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNyYyAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMzQpLnN0cmluZyhtZXNzYWdlLnNyYylcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCR0xURlNoYXBlIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQkdMVEZTaGFwZSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlciA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS52aXNpYmxlID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLnNyYyA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQkdMVEZTaGFwZSB9IGZyb20gJy4vcGIvR0xURlNoYXBlLmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwNDFcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEdMVEZTaGFwZVNjaGVtYTogSVNjaGVtYTxQQkdMVEZTaGFwZT4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJHTFRGU2hhcGUsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQkdMVEZTaGFwZS5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJHTFRGU2hhcGUge1xuICAgIHJldHVybiBQQkdMVEZTaGFwZS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCR0xURlNoYXBlIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJHTFRGU2hhcGUuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBDb2xvcjMgfSBmcm9tICcuL2NvbW1vbi9Db2xvcjMuZ2VuJ1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBjb25zdCBlbnVtIFRleHR1cmVXcmFwTW9kZSB7XG4gIFJlcGVhdCA9IDAsXG4gIENsYW1wID0gMSxcbiAgTWlycm9yID0gMixcbiAgTWlycm9yT25jZSA9IDMsXG4gIFVOUkVDT0dOSVpFRCA9IC0xXG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEZpbHRlck1vZGUge1xuICBQb2ludCA9IDAsXG4gIEJpbGluZWFyID0gMSxcbiAgVHJpbGluZWFyID0gMixcbiAgVU5SRUNPR05JWkVEID0gLTFcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gVHJhbnNwYXJlbmN5TW9kZSB7XG4gIE9wYXF1ZSA9IDAsXG4gIEFscGhhVGVzdCA9IDEsXG4gIEFscGhhQmxlbmQgPSAyLFxuICBBbHBoYVRlc3RBbmRBbHBoYUJsZW5kID0gMyxcbiAgQXV0byA9IDQsXG4gIFVOUkVDT0dOSVpFRCA9IC0xXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJNYXRlcmlhbCB7XG4gIC8qKiBkZWZhdWx0ID0gbnVsbCAqL1xuICB0ZXh0dXJlPzogUEJNYXRlcmlhbF9UZXh0dXJlIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0ID0gMC41LiByYW5nZSB2YWx1ZTogZnJvbSAwIHRvIDEgKi9cbiAgYWxwaGFUZXN0PzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0ID0gIHRydWUgKi9cbiAgY2FzdFNoYWRvd3M/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0ID0gbnVsbCAqL1xuICBhbHBoYVRleHR1cmU/OiBQQk1hdGVyaWFsX1RleHR1cmUgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQgPSBudWxsICovXG4gIGVtaXNzaXZlVGV4dHVyZT86IFBCTWF0ZXJpYWxfVGV4dHVyZSB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdCA9IG51bGwgKi9cbiAgYnVtcFRleHR1cmU/OiBQQk1hdGVyaWFsX1RleHR1cmUgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQgPSB3aGl0ZTsgKi9cbiAgYWxiZWRvQ29sb3I/OiBDb2xvcjMgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQgPSBibGFjazsgKi9cbiAgZW1pc3NpdmVDb2xvcj86IENvbG9yMyB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdCA9IHdoaXRlOyAqL1xuICByZWZsZWN0aXZpdHlDb2xvcj86IENvbG9yMyB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdCA9IFRyYW5zcGFyZW5jeU1vZGUuQXV0byAqL1xuICB0cmFuc3BhcmVuY3lNb2RlPzogVHJhbnNwYXJlbmN5TW9kZSB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdCA9IDAuNSAqL1xuICBtZXRhbGxpYz86IG51bWJlciB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdCA9IDAuNSAqL1xuICByb3VnaG5lc3M/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQgPSAxICovXG4gIGdsb3NzaW5lc3M/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQgPSAxICovXG4gIHNwZWN1bGFySW50ZW5zaXR5PzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0ID0gMiAqL1xuICBlbWlzc2l2ZUludGVuc2l0eT86IG51bWJlciB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdCA9IDEgKi9cbiAgZGlyZWN0SW50ZW5zaXR5PzogbnVtYmVyIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJNYXRlcmlhbF9UZXh0dXJlIHtcbiAgc3JjOiBzdHJpbmdcbiAgLyoqIGRlZmF1bHQgPSBUZXh0dXJlV3JhcE1vZGUuQ2xhbXAgKi9cbiAgd3JhcE1vZGU/OiBUZXh0dXJlV3JhcE1vZGUgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQgPSBGaWx0ZXJNb2RlLkJpbGluZWFyICovXG4gIGZpbHRlck1vZGU/OiBGaWx0ZXJNb2RlIHwgdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk1hdGVyaWFsKCk6IFBCTWF0ZXJpYWwge1xuICByZXR1cm4ge1xuICAgIHRleHR1cmU6IHVuZGVmaW5lZCxcbiAgICBhbHBoYVRlc3Q6IHVuZGVmaW5lZCxcbiAgICBjYXN0U2hhZG93czogdW5kZWZpbmVkLFxuICAgIGFscGhhVGV4dHVyZTogdW5kZWZpbmVkLFxuICAgIGVtaXNzaXZlVGV4dHVyZTogdW5kZWZpbmVkLFxuICAgIGJ1bXBUZXh0dXJlOiB1bmRlZmluZWQsXG4gICAgYWxiZWRvQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBlbWlzc2l2ZUNvbG9yOiB1bmRlZmluZWQsXG4gICAgcmVmbGVjdGl2aXR5Q29sb3I6IHVuZGVmaW5lZCxcbiAgICB0cmFuc3BhcmVuY3lNb2RlOiB1bmRlZmluZWQsXG4gICAgbWV0YWxsaWM6IHVuZGVmaW5lZCxcbiAgICByb3VnaG5lc3M6IHVuZGVmaW5lZCxcbiAgICBnbG9zc2luZXNzOiB1bmRlZmluZWQsXG4gICAgc3BlY3VsYXJJbnRlbnNpdHk6IHVuZGVmaW5lZCxcbiAgICBlbWlzc2l2ZUludGVuc2l0eTogdW5kZWZpbmVkLFxuICAgIGRpcmVjdEludGVuc2l0eTogdW5kZWZpbmVkXG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJNYXRlcmlhbCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCTWF0ZXJpYWwsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS50ZXh0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFBCTWF0ZXJpYWxfVGV4dHVyZS5lbmNvZGUobWVzc2FnZS50ZXh0dXJlLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmFscGhhVGVzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDIxKS5mbG9hdChtZXNzYWdlLmFscGhhVGVzdClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuY2FzdFNoYWRvd3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNCkuYm9vbChtZXNzYWdlLmNhc3RTaGFkb3dzKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5hbHBoYVRleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgUEJNYXRlcmlhbF9UZXh0dXJlLmVuY29kZShtZXNzYWdlLmFscGhhVGV4dHVyZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5lbWlzc2l2ZVRleHR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgUEJNYXRlcmlhbF9UZXh0dXJlLmVuY29kZShtZXNzYWdlLmVtaXNzaXZlVGV4dHVyZSwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5idW1wVGV4dHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBQQk1hdGVyaWFsX1RleHR1cmUuZW5jb2RlKG1lc3NhZ2UuYnVtcFRleHR1cmUsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuYWxiZWRvQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgQ29sb3IzLmVuY29kZShtZXNzYWdlLmFsYmVkb0NvbG9yLCB3cml0ZXIudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmVtaXNzaXZlQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgQ29sb3IzLmVuY29kZShtZXNzYWdlLmVtaXNzaXZlQ29sb3IsIHdyaXRlci51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucmVmbGVjdGl2aXR5Q29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgQ29sb3IzLmVuY29kZShtZXNzYWdlLnJlZmxlY3Rpdml0eUNvbG9yLCB3cml0ZXIudWludDMyKDc0KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnRyYW5zcGFyZW5jeU1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4MCkuaW50MzIobWVzc2FnZS50cmFuc3BhcmVuY3lNb2RlKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5tZXRhbGxpYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDkzKS5mbG9hdChtZXNzYWdlLm1ldGFsbGljKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMDEpLmZsb2F0KG1lc3NhZ2Uucm91Z2huZXNzKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5nbG9zc2luZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTA5KS5mbG9hdChtZXNzYWdlLmdsb3NzaW5lc3MpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNwZWN1bGFySW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTE3KS5mbG9hdChtZXNzYWdlLnNwZWN1bGFySW50ZW5zaXR5KVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5lbWlzc2l2ZUludGVuc2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEyNSkuZmxvYXQobWVzc2FnZS5lbWlzc2l2ZUludGVuc2l0eSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZGlyZWN0SW50ZW5zaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTMzKS5mbG9hdChtZXNzYWdlLmRpcmVjdEludGVuc2l0eSlcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCTWF0ZXJpYWwge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWF0ZXJpYWwoKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLnRleHR1cmUgPSBQQk1hdGVyaWFsX1RleHR1cmUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLmFscGhhVGVzdCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIG1lc3NhZ2UuY2FzdFNoYWRvd3MgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UuYWxwaGFUZXh0dXJlID0gUEJNYXRlcmlhbF9UZXh0dXJlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgbWVzc2FnZS5lbWlzc2l2ZVRleHR1cmUgPSBQQk1hdGVyaWFsX1RleHR1cmUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBtZXNzYWdlLmJ1bXBUZXh0dXJlID0gUEJNYXRlcmlhbF9UZXh0dXJlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgbWVzc2FnZS5hbGJlZG9Db2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgIG1lc3NhZ2UuZW1pc3NpdmVDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgIG1lc3NhZ2UucmVmbGVjdGl2aXR5Q29sb3IgPSBDb2xvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgbWVzc2FnZS50cmFuc3BhcmVuY3lNb2RlID0gcmVhZGVyLmludDMyKCkgYXMgYW55XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBtZXNzYWdlLm1ldGFsbGljID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgIG1lc3NhZ2Uucm91Z2huZXNzID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIG1lc3NhZ2UuZ2xvc3NpbmVzcyA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICBtZXNzYWdlLnNwZWN1bGFySW50ZW5zaXR5ID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgIG1lc3NhZ2UuZW1pc3NpdmVJbnRlbnNpdHkgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgbWVzc2FnZS5kaXJlY3RJbnRlbnNpdHkgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNYXRlcmlhbF9UZXh0dXJlKCk6IFBCTWF0ZXJpYWxfVGV4dHVyZSB7XG4gIHJldHVybiB7IHNyYzogJycsIHdyYXBNb2RlOiB1bmRlZmluZWQsIGZpbHRlck1vZGU6IHVuZGVmaW5lZCB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCTWF0ZXJpYWxfVGV4dHVyZSA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCTWF0ZXJpYWxfVGV4dHVyZSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLnNyYyAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnNyYylcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uud3JhcE1vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS53cmFwTW9kZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZmlsdGVyTW9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI0KS5pbnQzMihtZXNzYWdlLmZpbHRlck1vZGUpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQk1hdGVyaWFsX1RleHR1cmUge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWF0ZXJpYWxfVGV4dHVyZSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2Uuc3JjID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2Uud3JhcE1vZGUgPSByZWFkZXIuaW50MzIoKSBhcyBhbnlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5maWx0ZXJNb2RlID0gcmVhZGVyLmludDMyKCkgYXMgYW55XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCTWF0ZXJpYWwgfSBmcm9tICcuL3BiL01hdGVyaWFsLmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwMTdcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IE1hdGVyaWFsU2NoZW1hOiBJU2NoZW1hPFBCTWF0ZXJpYWw+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCTWF0ZXJpYWwsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQk1hdGVyaWFsLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQk1hdGVyaWFsIHtcbiAgICByZXR1cm4gUEJNYXRlcmlhbC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCTWF0ZXJpYWwge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQk1hdGVyaWFsLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJNZXNoUmVuZGVyZXIge1xuICBib3g6IFBCTWVzaFJlbmRlcmVyX0JveE1lc2ggfCB1bmRlZmluZWRcbiAgc3BoZXJlOiBQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoIHwgdW5kZWZpbmVkXG4gIGN5bGluZGVyOiBQQk1lc2hSZW5kZXJlcl9DeWxpbmRlck1lc2ggfCB1bmRlZmluZWRcbiAgcGxhbmU6IFBCTWVzaFJlbmRlcmVyX1BsYW5lTWVzaCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBCTWVzaFJlbmRlcmVyX0JveE1lc2gge1xuICB1dnM6IG51bWJlcltdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoIHtcbiAgLyoqIGRlZmF1bHQ9MS4wICovXG4gIHJhZGl1c1RvcD86IG51bWJlciB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD0xLjAgKi9cbiAgcmFkaXVzQm90dG9tPzogbnVtYmVyIHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoIHtcbiAgdXZzOiBudW1iZXJbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBCTWVzaFJlbmRlcmVyX1NwaGVyZU1lc2gge31cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWVzaFJlbmRlcmVyKCk6IFBCTWVzaFJlbmRlcmVyIHtcbiAgcmV0dXJuIHsgYm94OiB1bmRlZmluZWQsIHNwaGVyZTogdW5kZWZpbmVkLCBjeWxpbmRlcjogdW5kZWZpbmVkLCBwbGFuZTogdW5kZWZpbmVkIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJNZXNoUmVuZGVyZXIgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQk1lc2hSZW5kZXJlciwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLmJveCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoLmVuY29kZShtZXNzYWdlLmJveCwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5zcGhlcmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaC5lbmNvZGUobWVzc2FnZS5zcGhlcmUsIHdyaXRlci51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuY3lsaW5kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoLmVuY29kZShtZXNzYWdlLmN5bGluZGVyLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnBsYW5lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFBCTWVzaFJlbmRlcmVyX1BsYW5lTWVzaC5lbmNvZGUobWVzc2FnZS5wbGFuZSwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJNZXNoUmVuZGVyZXIge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWVzaFJlbmRlcmVyKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS5ib3ggPSBQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5zcGhlcmUgPSBQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5jeWxpbmRlciA9IFBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UucGxhbmUgPSBQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2guZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfQm94TWVzaCgpOiBQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoIHtcbiAgcmV0dXJuIHsgdXZzOiBbXSB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCTWVzaFJlbmRlcmVyX0JveE1lc2ggPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQk1lc2hSZW5kZXJlcl9Cb3hNZXNoLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpXG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UudXZzKSB7XG4gICAgICB3cml0ZXIuZmxvYXQodilcbiAgICB9XG4gICAgd3JpdGVyLmxkZWxpbSgpXG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCTWVzaFJlbmRlcmVyX0JveE1lc2gge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCTWVzaFJlbmRlcmVyX0JveE1lc2goKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCBlbmQyID0gcmVhZGVyLnVpbnQzMigpICsgcmVhZGVyLnBvc1xuICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQyKSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UudXZzLnB1c2gocmVhZGVyLmZsb2F0KCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UudXZzLnB1c2gocmVhZGVyLmZsb2F0KCkpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoKCk6IFBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaCB7XG4gIHJldHVybiB7IHJhZGl1c1RvcDogdW5kZWZpbmVkLCByYWRpdXNCb3R0b206IHVuZGVmaW5lZCB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCTWVzaFJlbmRlcmVyX0N5bGluZGVyTWVzaCwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLnJhZGl1c1RvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEzKS5mbG9hdChtZXNzYWdlLnJhZGl1c1RvcClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucmFkaXVzQm90dG9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjEpLmZsb2F0KG1lc3NhZ2UucmFkaXVzQm90dG9tKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJNZXNoUmVuZGVyZXJfQ3lsaW5kZXJNZXNoIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hSZW5kZXJlcl9DeWxpbmRlck1lc2goKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLnJhZGl1c1RvcCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UucmFkaXVzQm90dG9tID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWVzaFJlbmRlcmVyX1BsYW5lTWVzaCgpOiBQQk1lc2hSZW5kZXJlcl9QbGFuZU1lc2gge1xuICByZXR1cm4geyB1dnM6IFtdIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpXG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UudXZzKSB7XG4gICAgICB3cml0ZXIuZmxvYXQodilcbiAgICB9XG4gICAgd3JpdGVyLmxkZWxpbSgpXG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCTWVzaFJlbmRlcmVyX1BsYW5lTWVzaCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJNZXNoUmVuZGVyZXJfUGxhbmVNZXNoKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3NcbiAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kMikge1xuICAgICAgICAgICAgICBtZXNzYWdlLnV2cy5wdXNoKHJlYWRlci5mbG9hdCgpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlLnV2cy5wdXNoKHJlYWRlci5mbG9hdCgpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCTWVzaFJlbmRlcmVyX1NwaGVyZU1lc2goKTogUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaCB7XG4gIHJldHVybiB7fVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoID0ge1xuICBlbmNvZGUoXzogUEJNZXNoUmVuZGVyZXJfU3BoZXJlTWVzaCwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk1lc2hSZW5kZXJlcl9TcGhlcmVNZXNoKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cbiIsImltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi8uLi9zY2hlbWFzL0lTY2hlbWEnXG5pbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgUEJNZXNoUmVuZGVyZXIgfSBmcm9tICcuL3BiL01lc2hSZW5kZXJlci5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDE4XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBNZXNoUmVuZGVyZXJTY2hlbWE6IElTY2hlbWE8UEJNZXNoUmVuZGVyZXI+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCTWVzaFJlbmRlcmVyLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJNZXNoUmVuZGVyZXIuZW5jb2RlKHZhbHVlKVxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbilcbiAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpXG4gIH0sXG4gIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IFBCTWVzaFJlbmRlcmVyIHtcbiAgICByZXR1cm4gUEJNZXNoUmVuZGVyZXIuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQk1lc2hSZW5kZXJlciB7XG4gICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgcmV0dXJuIFBCTWVzaFJlbmRlcmVyLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQ29sb3IzIH0gZnJvbSAnLi9jb21tb24vQ29sb3IzLmdlbidcbmltcG9ydCBfbTAgZnJvbSAncHJvdG9idWZqcy9taW5pbWFsJ1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSAnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBCTkZUU2hhcGUge1xuICAvKiogQGRlcHJlY2F0ZWQgdXNlIE1lc2hDb2xsaWRlciBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNjYgKi9cbiAgd2l0aENvbGxpc2lvbnM/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgTWVzaENvbGxpZGVyIGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM2NiAqL1xuICBpc1BvaW50ZXJCbG9ja2VyPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIEhpZGRlbkNvbXBvbmVudCBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNTMgKi9cbiAgdmlzaWJsZT86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgc3JjOiBzdHJpbmdcbiAgYXNzZXRJZD86IHN0cmluZyB8IHVuZGVmaW5lZFxuICBzdHlsZT86IG51bWJlciB8IHVuZGVmaW5lZFxuICBjb2xvcj86IENvbG9yMyB8IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJORlRTaGFwZSgpOiBQQk5GVFNoYXBlIHtcbiAgcmV0dXJuIHtcbiAgICB3aXRoQ29sbGlzaW9uczogdW5kZWZpbmVkLFxuICAgIGlzUG9pbnRlckJsb2NrZXI6IHVuZGVmaW5lZCxcbiAgICB2aXNpYmxlOiB1bmRlZmluZWQsXG4gICAgc3JjOiAnJyxcbiAgICBhc3NldElkOiB1bmRlZmluZWQsXG4gICAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgICBjb2xvcjogdW5kZWZpbmVkXG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJORlRTaGFwZSA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCTkZUU2hhcGUsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS53aXRoQ29sbGlzaW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDgpLmJvb2wobWVzc2FnZS53aXRoQ29sbGlzaW9ucylcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlcilcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudmlzaWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UudmlzaWJsZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc3JjICE9PSAnJykge1xuICAgICAgd3JpdGVyLnVpbnQzMigzNCkuc3RyaW5nKG1lc3NhZ2Uuc3JjKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5hc3NldElkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNDIpLnN0cmluZyhtZXNzYWdlLmFzc2V0SWQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNDgpLmludDMyKG1lc3NhZ2Uuc3R5bGUpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5jb2xvciwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJORlRTaGFwZSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJORlRTaGFwZSgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlciA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS52aXNpYmxlID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLnNyYyA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBtZXNzYWdlLmFzc2V0SWQgPSByZWFkZXIuc3RyaW5nKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgbWVzc2FnZS5zdHlsZSA9IHJlYWRlci5pbnQzMigpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIG1lc3NhZ2UuY29sb3IgPSBDb2xvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQk5GVFNoYXBlIH0gZnJvbSAnLi9wYi9ORlRTaGFwZS5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDQwXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBORlRTaGFwZVNjaGVtYTogSVNjaGVtYTxQQk5GVFNoYXBlPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBQQk5GVFNoYXBlLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJORlRTaGFwZS5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJORlRTaGFwZSB7XG4gICAgcmV0dXJuIFBCTkZUU2hhcGUuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQk5GVFNoYXBlIHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJORlRTaGFwZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSlcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IEFjdGlvbkJ1dHRvbiB9IGZyb20gJy4vY29tbW9uL0FjdGlvbkJ1dHRvbi5nZW4nXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBQQk9uUG9pbnRlckRvd24ge1xuICAvKiogZGVmYXVsdD1BY3Rpb25CdXR0b24uQU5ZICovXG4gIGJ1dHRvbj86IEFjdGlvbkJ1dHRvbiB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD0nSW50ZXJhY3QnICovXG4gIGhvdmVyVGV4dD86IHN0cmluZyB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD0xMCAqL1xuICBtYXhEaXN0YW5jZT86IG51bWJlciB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD10cnVlICovXG4gIHNob3dGZWVkYmFjaz86IGJvb2xlYW4gfCB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCT25Qb2ludGVyRG93bigpOiBQQk9uUG9pbnRlckRvd24ge1xuICByZXR1cm4geyBidXR0b246IHVuZGVmaW5lZCwgaG92ZXJUZXh0OiB1bmRlZmluZWQsIG1heERpc3RhbmNlOiB1bmRlZmluZWQsIHNob3dGZWVkYmFjazogdW5kZWZpbmVkIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJPblBvaW50ZXJEb3duID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJPblBvaW50ZXJEb3duLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UuYnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5idXR0b24pXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmhvdmVyVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5ob3ZlclRleHQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm1heERpc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjkpLmZsb2F0KG1lc3NhZ2UubWF4RGlzdGFuY2UpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNob3dGZWVkYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDMyKS5ib29sKG1lc3NhZ2Uuc2hvd0ZlZWRiYWNrKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJPblBvaW50ZXJEb3duIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQk9uUG9pbnRlckRvd24oKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmJ1dHRvbiA9IHJlYWRlci5pbnQzMigpIGFzIGFueVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLmhvdmVyVGV4dCA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLm1heERpc3RhbmNlID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgbWVzc2FnZS5zaG93RmVlZGJhY2sgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCT25Qb2ludGVyRG93biB9IGZyb20gJy4vcGIvT25Qb2ludGVyRG93bi5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDYwXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBPblBvaW50ZXJEb3duU2NoZW1hOiBJU2NoZW1hPFBCT25Qb2ludGVyRG93bj4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJPblBvaW50ZXJEb3duLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJPblBvaW50ZXJEb3duLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQk9uUG9pbnRlckRvd24ge1xuICAgIHJldHVybiBQQk9uUG9pbnRlckRvd24uZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQk9uUG9pbnRlckRvd24ge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQk9uUG9pbnRlckRvd24uZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBBY3Rpb25CdXR0b24gfSBmcm9tICcuL2NvbW1vbi9BY3Rpb25CdXR0b24uZ2VuJ1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vY29tbW9uL1ZlY3RvcjMuZ2VuJ1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJPblBvaW50ZXJEb3duUmVzdWx0IHtcbiAgYnV0dG9uOiBBY3Rpb25CdXR0b25cbiAgbWVzaE5hbWU6IHN0cmluZ1xuICBvcmlnaW46IFZlY3RvcjMgfCB1bmRlZmluZWRcbiAgZGlyZWN0aW9uOiBWZWN0b3IzIHwgdW5kZWZpbmVkXG4gIHBvaW50OiBWZWN0b3IzIHwgdW5kZWZpbmVkXG4gIG5vcm1hbDogVmVjdG9yMyB8IHVuZGVmaW5lZFxuICBkaXN0YW5jZTogbnVtYmVyXG4gIHRpbWVzdGFtcDogbnVtYmVyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQk9uUG9pbnRlckRvd25SZXN1bHQoKTogUEJPblBvaW50ZXJEb3duUmVzdWx0IHtcbiAgcmV0dXJuIHtcbiAgICBidXR0b246IDAsXG4gICAgbWVzaE5hbWU6ICcnLFxuICAgIG9yaWdpbjogdW5kZWZpbmVkLFxuICAgIGRpcmVjdGlvbjogdW5kZWZpbmVkLFxuICAgIHBvaW50OiB1bmRlZmluZWQsXG4gICAgbm9ybWFsOiB1bmRlZmluZWQsXG4gICAgZGlzdGFuY2U6IDAsXG4gICAgdGltZXN0YW1wOiAwXG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJPblBvaW50ZXJEb3duUmVzdWx0ID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJPblBvaW50ZXJEb3duUmVzdWx0LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UuYnV0dG9uICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5pbnQzMihtZXNzYWdlLmJ1dHRvbilcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubWVzaE5hbWUgIT09ICcnKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI2KS5zdHJpbmcobWVzc2FnZS5tZXNoTmFtZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uub3JpZ2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2Uub3JpZ2luLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmRpcmVjdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLmRpcmVjdGlvbiwgd3JpdGVyLnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5wb2ludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLnBvaW50LCB3cml0ZXIudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm5vcm1hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBWZWN0b3IzLmVuY29kZShtZXNzYWdlLm5vcm1hbCwgd3JpdGVyLnVpbnQzMig1OCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5kaXN0YW5jZSAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig2OSkuZmxvYXQobWVzc2FnZS5kaXN0YW5jZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudGltZXN0YW1wICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDcyKS5pbnQzMihtZXNzYWdlLnRpbWVzdGFtcClcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCT25Qb2ludGVyRG93blJlc3VsdCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJPblBvaW50ZXJEb3duUmVzdWx0KClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5idXR0b24gPSByZWFkZXIuaW50MzIoKSBhcyBhbnlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5tZXNoTmFtZSA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLm9yaWdpbiA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBtZXNzYWdlLmRpcmVjdGlvbiA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBtZXNzYWdlLnBvaW50ID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIG1lc3NhZ2Uubm9ybWFsID0gVmVjdG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgIG1lc3NhZ2UuZGlzdGFuY2UgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICBtZXNzYWdlLnRpbWVzdGFtcCA9IHJlYWRlci5pbnQzMigpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCT25Qb2ludGVyRG93blJlc3VsdCB9IGZyb20gJy4vcGIvT25Qb2ludGVyRG93blJlc3VsdC5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDY2XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBPblBvaW50ZXJEb3duUmVzdWx0U2NoZW1hOiBJU2NoZW1hPFBCT25Qb2ludGVyRG93blJlc3VsdD4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJPblBvaW50ZXJEb3duUmVzdWx0LCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJPblBvaW50ZXJEb3duUmVzdWx0LmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQk9uUG9pbnRlckRvd25SZXN1bHQge1xuICAgIHJldHVybiBQQk9uUG9pbnRlckRvd25SZXN1bHQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQk9uUG9pbnRlckRvd25SZXN1bHQge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQk9uUG9pbnRlckRvd25SZXN1bHQuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBBY3Rpb25CdXR0b24gfSBmcm9tICcuL2NvbW1vbi9BY3Rpb25CdXR0b24uZ2VuJ1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJPblBvaW50ZXJVcCB7XG4gIC8qKiBkZWZhdWx0PUFjdGlvbkJ1dHRvbi5BTlkgKi9cbiAgYnV0dG9uPzogQWN0aW9uQnV0dG9uIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PSdJbnRlcmFjdCcgKi9cbiAgaG92ZXJUZXh0Pzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PTEwICovXG4gIG1heERpc3RhbmNlPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PXRydWUgKi9cbiAgc2hvd0ZlZWRiYWNrPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJPblBvaW50ZXJVcCgpOiBQQk9uUG9pbnRlclVwIHtcbiAgcmV0dXJuIHsgYnV0dG9uOiB1bmRlZmluZWQsIGhvdmVyVGV4dDogdW5kZWZpbmVkLCBtYXhEaXN0YW5jZTogdW5kZWZpbmVkLCBzaG93RmVlZGJhY2s6IHVuZGVmaW5lZCB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCT25Qb2ludGVyVXAgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQk9uUG9pbnRlclVwLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UuYnV0dG9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5idXR0b24pXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmhvdmVyVGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5ob3ZlclRleHQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm1heERpc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjkpLmZsb2F0KG1lc3NhZ2UubWF4RGlzdGFuY2UpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNob3dGZWVkYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDMyKS5ib29sKG1lc3NhZ2Uuc2hvd0ZlZWRiYWNrKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJPblBvaW50ZXJVcCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJPblBvaW50ZXJVcCgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UuYnV0dG9uID0gcmVhZGVyLmludDMyKCkgYXMgYW55XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuaG92ZXJUZXh0ID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIG1lc3NhZ2UubWF4RGlzdGFuY2UgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLnNob3dGZWVkYmFjayA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cbiIsImltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi8uLi9zY2hlbWFzL0lTY2hlbWEnXG5pbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgUEJPblBvaW50ZXJVcCB9IGZyb20gJy4vcGIvT25Qb2ludGVyVXAuZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTA2MVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgT25Qb2ludGVyVXBTY2hlbWE6IElTY2hlbWE8UEJPblBvaW50ZXJVcD4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJPblBvaW50ZXJVcCwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCT25Qb2ludGVyVXAuZW5jb2RlKHZhbHVlKVxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbilcbiAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpXG4gIH0sXG4gIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IFBCT25Qb2ludGVyVXAge1xuICAgIHJldHVybiBQQk9uUG9pbnRlclVwLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJPblBvaW50ZXJVcCB7XG4gICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgcmV0dXJuIFBCT25Qb2ludGVyVXAuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBBY3Rpb25CdXR0b24gfSBmcm9tICcuL2NvbW1vbi9BY3Rpb25CdXR0b24uZ2VuJ1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vY29tbW9uL1ZlY3RvcjMuZ2VuJ1xuaW1wb3J0IF9tMCBmcm9tICdwcm90b2J1ZmpzL21pbmltYWwnXG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvYnVmUGFja2FnZSA9ICcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgUEJPblBvaW50ZXJVcFJlc3VsdCB7XG4gIGJ1dHRvbjogQWN0aW9uQnV0dG9uXG4gIG1lc2hOYW1lOiBzdHJpbmdcbiAgb3JpZ2luOiBWZWN0b3IzIHwgdW5kZWZpbmVkXG4gIGRpcmVjdGlvbjogVmVjdG9yMyB8IHVuZGVmaW5lZFxuICBwb2ludDogVmVjdG9yMyB8IHVuZGVmaW5lZFxuICBub3JtYWw6IFZlY3RvcjMgfCB1bmRlZmluZWRcbiAgZGlzdGFuY2U6IG51bWJlclxuICB0aW1lc3RhbXA6IG51bWJlclxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJPblBvaW50ZXJVcFJlc3VsdCgpOiBQQk9uUG9pbnRlclVwUmVzdWx0IHtcbiAgcmV0dXJuIHtcbiAgICBidXR0b246IDAsXG4gICAgbWVzaE5hbWU6ICcnLFxuICAgIG9yaWdpbjogdW5kZWZpbmVkLFxuICAgIGRpcmVjdGlvbjogdW5kZWZpbmVkLFxuICAgIHBvaW50OiB1bmRlZmluZWQsXG4gICAgbm9ybWFsOiB1bmRlZmluZWQsXG4gICAgZGlzdGFuY2U6IDAsXG4gICAgdGltZXN0YW1wOiAwXG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJPblBvaW50ZXJVcFJlc3VsdCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCT25Qb2ludGVyVXBSZXN1bHQsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5idXR0b24gIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UuYnV0dG9uKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5tZXNoTmFtZSAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLm1lc2hOYW1lKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5vcmlnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgVmVjdG9yMy5lbmNvZGUobWVzc2FnZS5vcmlnaW4sIHdyaXRlci51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuZGlyZWN0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2UuZGlyZWN0aW9uLCB3cml0ZXIudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnBvaW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2UucG9pbnQsIHdyaXRlci51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uubm9ybWFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFZlY3RvcjMuZW5jb2RlKG1lc3NhZ2Uubm9ybWFsLCB3cml0ZXIudWludDMyKDU4KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmRpc3RhbmNlICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDY5KS5mbG9hdChtZXNzYWdlLmRpc3RhbmNlKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS50aW1lc3RhbXAgIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoNzIpLmludDMyKG1lc3NhZ2UudGltZXN0YW1wKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJPblBvaW50ZXJVcFJlc3VsdCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJPblBvaW50ZXJVcFJlc3VsdCgpXG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKVxuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuYnV0dG9uID0gcmVhZGVyLmludDMyKCkgYXMgYW55XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIG1lc3NhZ2UubWVzaE5hbWUgPSByZWFkZXIuc3RyaW5nKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgbWVzc2FnZS5vcmlnaW4gPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgbWVzc2FnZS5kaXJlY3Rpb24gPSBWZWN0b3IzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgbWVzc2FnZS5wb2ludCA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICBtZXNzYWdlLm5vcm1hbCA9IFZlY3RvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICBtZXNzYWdlLmRpc3RhbmNlID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgbWVzc2FnZS50aW1lc3RhbXAgPSByZWFkZXIuaW50MzIoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQk9uUG9pbnRlclVwUmVzdWx0IH0gZnJvbSAnLi9wYi9PblBvaW50ZXJVcFJlc3VsdC5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDY1XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBPblBvaW50ZXJVcFJlc3VsdFNjaGVtYTogSVNjaGVtYTxQQk9uUG9pbnRlclVwUmVzdWx0PiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBQQk9uUG9pbnRlclVwUmVzdWx0LCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJPblBvaW50ZXJVcFJlc3VsdC5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJPblBvaW50ZXJVcFJlc3VsdCB7XG4gICAgcmV0dXJuIFBCT25Qb2ludGVyVXBSZXN1bHQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQk9uUG9pbnRlclVwUmVzdWx0IHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJPblBvaW50ZXJVcFJlc3VsdC5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSlcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCBfbTAgZnJvbSAncHJvdG9idWZqcy9taW5pbWFsJ1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSAnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBCUGxhbmVTaGFwZSB7XG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgTWVzaENvbGxpZGVyIGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM2NiAqL1xuICB3aXRoQ29sbGlzaW9ucz86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBNZXNoQ29sbGlkZXIgaW5zdGVhZCBodHRwczovL2dpdGh1Yi5jb20vZGVjZW50cmFsYW5kL3Nkay9pc3N1ZXMvMzY2ICovXG4gIGlzUG9pbnRlckJsb2NrZXI/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgSGlkZGVuQ29tcG9uZW50IGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM1MyAqL1xuICB2aXNpYmxlPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICB1dnM6IG51bWJlcltdXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlBsYW5lU2hhcGUoKTogUEJQbGFuZVNoYXBlIHtcbiAgcmV0dXJuIHsgd2l0aENvbGxpc2lvbnM6IHVuZGVmaW5lZCwgaXNQb2ludGVyQmxvY2tlcjogdW5kZWZpbmVkLCB2aXNpYmxlOiB1bmRlZmluZWQsIHV2czogW10gfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQQlBsYW5lU2hhcGUgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQlBsYW5lU2hhcGUsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS53aXRoQ29sbGlzaW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDgpLmJvb2wobWVzc2FnZS53aXRoQ29sbGlzaW9ucylcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE2KS5ib29sKG1lc3NhZ2UuaXNQb2ludGVyQmxvY2tlcilcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UudmlzaWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI0KS5ib29sKG1lc3NhZ2UudmlzaWJsZSlcbiAgICB9XG4gICAgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpXG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UudXZzKSB7XG4gICAgICB3cml0ZXIuZmxvYXQodilcbiAgICB9XG4gICAgd3JpdGVyLmxkZWxpbSgpXG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCUGxhbmVTaGFwZSB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJQbGFuZVNoYXBlKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS53aXRoQ29sbGlzaW9ucyA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLnZpc2libGUgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zXG4gICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZS51dnMucHVzaChyZWFkZXIuZmxvYXQoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZS51dnMucHVzaChyZWFkZXIuZmxvYXQoKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCUGxhbmVTaGFwZSB9IGZyb20gJy4vcGIvUGxhbmVTaGFwZS5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDE0XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQbGFuZVNoYXBlU2NoZW1hOiBJU2NoZW1hPFBCUGxhbmVTaGFwZT4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJQbGFuZVNoYXBlLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJQbGFuZVNoYXBlLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQlBsYW5lU2hhcGUge1xuICAgIHJldHVybiBQQlBsYW5lU2hhcGUuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQlBsYW5lU2hhcGUge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQlBsYW5lU2hhcGUuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBQQlBvaW50ZXJMb2NrIHtcbiAgaXNQb2ludGVyTG9ja2VkOiBib29sZWFuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlBvaW50ZXJMb2NrKCk6IFBCUG9pbnRlckxvY2sge1xuICByZXR1cm4geyBpc1BvaW50ZXJMb2NrZWQ6IGZhbHNlIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJQb2ludGVyTG9jayA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCUG9pbnRlckxvY2ssIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5pc1BvaW50ZXJMb2NrZWQgPT09IHRydWUpIHtcbiAgICAgIHdyaXRlci51aW50MzIoOCkuYm9vbChtZXNzYWdlLmlzUG9pbnRlckxvY2tlZClcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlclxuICB9LFxuXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFBCUG9pbnRlckxvY2sge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCUG9pbnRlckxvY2soKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmlzUG9pbnRlckxvY2tlZCA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlXG4gIH1cbn1cbiIsImltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi8uLi9zY2hlbWFzL0lTY2hlbWEnXG5pbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgUEJQb2ludGVyTG9jayB9IGZyb20gJy4vcGIvUG9pbnRlckxvY2suZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTA3NFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUG9pbnRlckxvY2tTY2hlbWE6IElTY2hlbWE8UEJQb2ludGVyTG9jaz4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJQb2ludGVyTG9jaywgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCUG9pbnRlckxvY2suZW5jb2RlKHZhbHVlKVxuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHdyaXRlci5maW5pc2goKSwgMCwgd3JpdGVyLmxlbilcbiAgICBidWlsZGVyLndyaXRlQnVmZmVyKGJ1ZmZlciwgZmFsc2UpXG4gIH0sXG4gIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IFBCUG9pbnRlckxvY2sge1xuICAgIHJldHVybiBQQlBvaW50ZXJMb2NrLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJQb2ludGVyTG9jayB7XG4gICAgLy8gVE9ETzogdGhpcyBpcyBhIGhhY2suXG4gICAgcmV0dXJuIFBCUG9pbnRlckxvY2suZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBQQlNwaGVyZVNoYXBlIHtcbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBNZXNoQ29sbGlkZXIgaW5zdGVhZCBodHRwczovL2dpdGh1Yi5jb20vZGVjZW50cmFsYW5kL3Nkay9pc3N1ZXMvMzY2ICovXG4gIHdpdGhDb2xsaXNpb25zPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICAvKiogQGRlcHJlY2F0ZWQgdXNlIE1lc2hDb2xsaWRlciBpbnN0ZWFkIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNlbnRyYWxhbmQvc2RrL2lzc3Vlcy8zNjYgKi9cbiAgaXNQb2ludGVyQmxvY2tlcj86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgLyoqIEBkZXByZWNhdGVkIHVzZSBIaWRkZW5Db21wb25lbnQgaW5zdGVhZCBodHRwczovL2dpdGh1Yi5jb20vZGVjZW50cmFsYW5kL3Nkay9pc3N1ZXMvMzUzICovXG4gIHZpc2libGU/OiBib29sZWFuIHwgdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlNwaGVyZVNoYXBlKCk6IFBCU3BoZXJlU2hhcGUge1xuICByZXR1cm4geyB3aXRoQ29sbGlzaW9uczogdW5kZWZpbmVkLCBpc1BvaW50ZXJCbG9ja2VyOiB1bmRlZmluZWQsIHZpc2libGU6IHVuZGVmaW5lZCB9XG59XG5cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFBCU3BoZXJlU2hhcGUgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQlNwaGVyZVNoYXBlLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig4KS5ib29sKG1lc3NhZ2Uud2l0aENvbGxpc2lvbnMpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmlzUG9pbnRlckJsb2NrZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNikuYm9vbChtZXNzYWdlLmlzUG9pbnRlckJsb2NrZXIpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnZpc2libGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNCkuYm9vbChtZXNzYWdlLnZpc2libGUpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQlNwaGVyZVNoYXBlIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlNwaGVyZVNoYXBlKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS53aXRoQ29sbGlzaW9ucyA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5pc1BvaW50ZXJCbG9ja2VyID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLnZpc2libGUgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCU3BoZXJlU2hhcGUgfSBmcm9tICcuL3BiL1NwaGVyZVNoYXBlLmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwMTVcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFNwaGVyZVNoYXBlU2NoZW1hOiBJU2NoZW1hPFBCU3BoZXJlU2hhcGU+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFBCU3BoZXJlU2hhcGUsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQlNwaGVyZVNoYXBlLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQlNwaGVyZVNoYXBlIHtcbiAgICByZXR1cm4gUEJTcGhlcmVTaGFwZS5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCU3BoZXJlU2hhcGUge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQlNwaGVyZVNoYXBlLmRlY29kZShuZXcgVWludDhBcnJheSgpKVxuICB9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgQ29sb3IzIH0gZnJvbSAnLi9jb21tb24vQ29sb3IzLmdlbidcbmltcG9ydCBfbTAgZnJvbSAncHJvdG9idWZqcy9taW5pbWFsJ1xuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90b2J1ZlBhY2thZ2UgPSAnJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFBCVGV4dFNoYXBlIHtcbiAgdGV4dDogc3RyaW5nXG4gIC8qKiBAZGVwcmVjYXRlZCB1c2UgSGlkZGVuQ29tcG9uZW50IGluc3RlYWQgaHR0cHM6Ly9naXRodWIuY29tL2RlY2VudHJhbGFuZC9zZGsvaXNzdWVzLzM1MyAqL1xuICB2aXNpYmxlPzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICBmb250Pzogc3RyaW5nIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PTEuMGYgKi9cbiAgb3BhY2l0eT86IG51bWJlciB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD0xMCAqL1xuICBmb250U2l6ZT86IG51bWJlciB8IHVuZGVmaW5lZFxuICBmb250QXV0b1NpemU/OiBib29sZWFuIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PSdjZW50ZXInICovXG4gIGhUZXh0QWxpZ24/OiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQ9J2NlbnRlcicgKi9cbiAgdlRleHRBbGlnbj86IHN0cmluZyB8IHVuZGVmaW5lZFxuICAvKiogZGVmYXVsdD0xICovXG4gIHdpZHRoPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PTEgKi9cbiAgaGVpZ2h0PzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIHBhZGRpbmdUb3A/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgcGFkZGluZ1JpZ2h0PzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIHBhZGRpbmdCb3R0b20/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgcGFkZGluZ0xlZnQ/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgbGluZVNwYWNpbmc/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgbGluZUNvdW50PzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIHRleHRXcmFwcGluZz86IGJvb2xlYW4gfCB1bmRlZmluZWRcbiAgc2hhZG93Qmx1cj86IG51bWJlciB8IHVuZGVmaW5lZFxuICBzaGFkb3dPZmZzZXRYPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIHNoYWRvd09mZnNldFk/OiBudW1iZXIgfCB1bmRlZmluZWRcbiAgb3V0bGluZVdpZHRoPzogbnVtYmVyIHwgdW5kZWZpbmVkXG4gIC8qKiBkZWZhdWx0PSgxLjAsMS4wLDEuMCkgKi9cbiAgc2hhZG93Q29sb3I/OiBDb2xvcjMgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQ9KDEuMCwxLjAsMS4wKSAqL1xuICBvdXRsaW5lQ29sb3I/OiBDb2xvcjMgfCB1bmRlZmluZWRcbiAgLyoqIGRlZmF1bHQ9KDEuMCwxLjAsMS4wKSAqL1xuICB0ZXh0Q29sb3I/OiBDb2xvcjMgfCB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFzZVBCVGV4dFNoYXBlKCk6IFBCVGV4dFNoYXBlIHtcbiAgcmV0dXJuIHtcbiAgICB0ZXh0OiAnJyxcbiAgICB2aXNpYmxlOiB1bmRlZmluZWQsXG4gICAgZm9udDogdW5kZWZpbmVkLFxuICAgIG9wYWNpdHk6IHVuZGVmaW5lZCxcbiAgICBmb250U2l6ZTogdW5kZWZpbmVkLFxuICAgIGZvbnRBdXRvU2l6ZTogdW5kZWZpbmVkLFxuICAgIGhUZXh0QWxpZ246IHVuZGVmaW5lZCxcbiAgICB2VGV4dEFsaWduOiB1bmRlZmluZWQsXG4gICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBwYWRkaW5nVG9wOiB1bmRlZmluZWQsXG4gICAgcGFkZGluZ1JpZ2h0OiB1bmRlZmluZWQsXG4gICAgcGFkZGluZ0JvdHRvbTogdW5kZWZpbmVkLFxuICAgIHBhZGRpbmdMZWZ0OiB1bmRlZmluZWQsXG4gICAgbGluZVNwYWNpbmc6IHVuZGVmaW5lZCxcbiAgICBsaW5lQ291bnQ6IHVuZGVmaW5lZCxcbiAgICB0ZXh0V3JhcHBpbmc6IHVuZGVmaW5lZCxcbiAgICBzaGFkb3dCbHVyOiB1bmRlZmluZWQsXG4gICAgc2hhZG93T2Zmc2V0WDogdW5kZWZpbmVkLFxuICAgIHNoYWRvd09mZnNldFk6IHVuZGVmaW5lZCxcbiAgICBvdXRsaW5lV2lkdGg6IHVuZGVmaW5lZCxcbiAgICBzaGFkb3dDb2xvcjogdW5kZWZpbmVkLFxuICAgIG91dGxpbmVDb2xvcjogdW5kZWZpbmVkLFxuICAgIHRleHRDb2xvcjogdW5kZWZpbmVkXG4gIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJUZXh0U2hhcGUgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBQQlRleHRTaGFwZSwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLnRleHQgIT09ICcnKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEwKS5zdHJpbmcobWVzc2FnZS50ZXh0KVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS52aXNpYmxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTYpLmJvb2wobWVzc2FnZS52aXNpYmxlKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5mb250ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjYpLnN0cmluZyhtZXNzYWdlLmZvbnQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm9wYWNpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigzNykuZmxvYXQobWVzc2FnZS5vcGFjaXR5KVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5mb250U2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDQ1KS5mbG9hdChtZXNzYWdlLmZvbnRTaXplKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5mb250QXV0b1NpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig0OCkuYm9vbChtZXNzYWdlLmZvbnRBdXRvU2l6ZSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuaFRleHRBbGlnbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDU4KS5zdHJpbmcobWVzc2FnZS5oVGV4dEFsaWduKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS52VGV4dEFsaWduICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNjYpLnN0cmluZyhtZXNzYWdlLnZUZXh0QWxpZ24pXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoNzcpLmZsb2F0KG1lc3NhZ2Uud2lkdGgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDg1KS5mbG9hdChtZXNzYWdlLmhlaWdodClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucGFkZGluZ1RvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDkzKS5mbG9hdChtZXNzYWdlLnBhZGRpbmdUb3ApXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnBhZGRpbmdSaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEwMSkuZmxvYXQobWVzc2FnZS5wYWRkaW5nUmlnaHQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnBhZGRpbmdCb3R0b20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMDkpLmZsb2F0KG1lc3NhZ2UucGFkZGluZ0JvdHRvbSlcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucGFkZGluZ0xlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMTcpLmZsb2F0KG1lc3NhZ2UucGFkZGluZ0xlZnQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmxpbmVTcGFjaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTI1KS5mbG9hdChtZXNzYWdlLmxpbmVTcGFjaW5nKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5saW5lQ291bnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMjgpLmludDMyKG1lc3NhZ2UubGluZUNvdW50KVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS50ZXh0V3JhcHBpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMzYpLmJvb2wobWVzc2FnZS50ZXh0V3JhcHBpbmcpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNoYWRvd0JsdXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNDkpLmZsb2F0KG1lc3NhZ2Uuc2hhZG93Qmx1cilcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uuc2hhZG93T2Zmc2V0WCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE1NykuZmxvYXQobWVzc2FnZS5zaGFkb3dPZmZzZXRYKVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5zaGFkb3dPZmZzZXRZICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTY1KS5mbG9hdChtZXNzYWdlLnNoYWRvd09mZnNldFkpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm91dGxpbmVXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDE3MykuZmxvYXQobWVzc2FnZS5vdXRsaW5lV2lkdGgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnNoYWRvd0NvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5zaGFkb3dDb2xvciwgd3JpdGVyLnVpbnQzMigxNzgpLmZvcmsoKSkubGRlbGltKClcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2Uub3V0bGluZUNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIENvbG9yMy5lbmNvZGUobWVzc2FnZS5vdXRsaW5lQ29sb3IsIHdyaXRlci51aW50MzIoMTg2KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnRleHRDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2UudGV4dENvbG9yLCB3cml0ZXIudWludDMyKDE5NCkuZm9yaygpKS5sZGVsaW0oKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJUZXh0U2hhcGUge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpXG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGhcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVBCVGV4dFNoYXBlKClcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpXG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS50ZXh0ID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UudmlzaWJsZSA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5mb250ID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2Uub3BhY2l0eSA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIG1lc3NhZ2UuZm9udFNpemUgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBtZXNzYWdlLmZvbnRBdXRvU2l6ZSA9IHJlYWRlci5ib29sKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgbWVzc2FnZS5oVGV4dEFsaWduID0gcmVhZGVyLnN0cmluZygpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgIG1lc3NhZ2UudlRleHRBbGlnbiA9IHJlYWRlci5zdHJpbmcoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICBtZXNzYWdlLndpZHRoID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIG1lc3NhZ2UuaGVpZ2h0ID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIG1lc3NhZ2UucGFkZGluZ1RvcCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICBtZXNzYWdlLnBhZGRpbmdSaWdodCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBtZXNzYWdlLnBhZGRpbmdCb3R0b20gPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgbWVzc2FnZS5wYWRkaW5nTGVmdCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICBtZXNzYWdlLmxpbmVTcGFjaW5nID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgIG1lc3NhZ2UubGluZUNvdW50ID0gcmVhZGVyLmludDMyKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgIG1lc3NhZ2UudGV4dFdyYXBwaW5nID0gcmVhZGVyLmJvb2woKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgbWVzc2FnZS5zaGFkb3dCbHVyID0gcmVhZGVyLmZsb2F0KClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgIG1lc3NhZ2Uuc2hhZG93T2Zmc2V0WCA9IHJlYWRlci5mbG9hdCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICBtZXNzYWdlLnNoYWRvd09mZnNldFkgPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgbWVzc2FnZS5vdXRsaW5lV2lkdGggPSByZWFkZXIuZmxvYXQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgbWVzc2FnZS5zaGFkb3dDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMzpcbiAgICAgICAgICBtZXNzYWdlLm91dGxpbmVDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICBtZXNzYWdlLnRleHRDb2xvciA9IENvbG9yMy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCVGV4dFNoYXBlIH0gZnJvbSAnLi9wYi9UZXh0U2hhcGUuZ2VuJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMTAzMFxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgVGV4dFNoYXBlU2NoZW1hOiBJU2NoZW1hPFBCVGV4dFNoYXBlPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBQQlRleHRTaGFwZSwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGNvbnN0IHdyaXRlciA9IFBCVGV4dFNoYXBlLmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQlRleHRTaGFwZSB7XG4gICAgcmV0dXJuIFBCVGV4dFNoYXBlLmRlY29kZShyZWFkZXIuYnVmZmVyKCksIHJlYWRlci5yZW1haW5pbmdCeXRlcygpKVxuICB9LFxuICBjcmVhdGUoKTogUEJUZXh0U2hhcGUge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQlRleHRTaGFwZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoKSlcbiAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbmltcG9ydCB7IENvbG9yMyB9IGZyb20gJy4vY29tbW9uL0NvbG9yMy5nZW4nXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBQQlVpVGV4dCB7XG4gIHRleHQ6IHN0cmluZ1xuICB0ZXh0Q29sb3I6IENvbG9yMyB8IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXNlUEJVaVRleHQoKTogUEJVaVRleHQge1xuICByZXR1cm4geyB0ZXh0OiAnJywgdGV4dENvbG9yOiB1bmRlZmluZWQgfVxufVxuXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBQQlVpVGV4dCA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IFBCVWlUZXh0LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UudGV4dCAhPT0gJycpIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLnRleHQpXG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnRleHRDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBDb2xvcjMuZW5jb2RlKG1lc3NhZ2UudGV4dENvbG9yLCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpXG4gICAgfVxuICAgIHJldHVybiB3cml0ZXJcbiAgfSxcblxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBQQlVpVGV4dCB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dClcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlUEJVaVRleHQoKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLnRleHQgPSByZWFkZXIuc3RyaW5nKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS50ZXh0Q29sb3IgPSBDb2xvcjMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uLy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBQQlVpVGV4dCB9IGZyb20gJy4vcGIvVWlUZXh0LmdlbidcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBPTkVOVF9JRCA9IDEwNTJcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IFVpVGV4dFNjaGVtYTogSVNjaGVtYTxQQlVpVGV4dD4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJVaVRleHQsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCB3cml0ZXIgPSBQQlVpVGV4dC5lbmNvZGUodmFsdWUpXG4gICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkod3JpdGVyLmZpbmlzaCgpLCAwLCB3cml0ZXIubGVuKVxuICAgIGJ1aWxkZXIud3JpdGVCdWZmZXIoYnVmZmVyLCBmYWxzZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogUEJVaVRleHQge1xuICAgIHJldHVybiBQQlVpVGV4dC5kZWNvZGUocmVhZGVyLmJ1ZmZlcigpLCByZWFkZXIucmVtYWluaW5nQnl0ZXMoKSlcbiAgfSxcbiAgY3JlYXRlKCk6IFBCVWlUZXh0IHtcbiAgICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjay5cbiAgICByZXR1cm4gUEJVaVRleHQuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgX20wIGZyb20gJ3Byb3RvYnVmanMvbWluaW1hbCdcblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgcHJvdG9idWZQYWNrYWdlID0gJydcblxuZXhwb3J0IGludGVyZmFjZSBQQlZpc2liaWxpdHlDb21wb25lbnQge1xuICAvKiogZGVmYXVsdD10cnVlICovXG4gIHZpc2libGU/OiBib29sZWFuIHwgdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQQlZpc2liaWxpdHlDb21wb25lbnQoKTogUEJWaXNpYmlsaXR5Q29tcG9uZW50IHtcbiAgcmV0dXJuIHsgdmlzaWJsZTogdW5kZWZpbmVkIH1cbn1cblxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgUEJWaXNpYmlsaXR5Q29tcG9uZW50ID0ge1xuICBlbmNvZGUobWVzc2FnZTogUEJWaXNpYmlsaXR5Q29tcG9uZW50LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UudmlzaWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB3cml0ZXIudWludDMyKDgpLmJvb2wobWVzc2FnZS52aXNpYmxlKVxuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyXG4gIH0sXG5cbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogUEJWaXNpYmlsaXR5Q29tcG9uZW50IHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KVxuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoXG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQQlZpc2liaWxpdHlDb21wb25lbnQoKVxuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKClcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLnZpc2libGUgPSByZWFkZXIuYm9vbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNylcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG59XG4iLCJpbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IFBCVmlzaWJpbGl0eUNvbXBvbmVudCB9IGZyb20gJy4vcGIvVmlzaWJpbGl0eUNvbXBvbmVudC5nZW4nXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfSUQgPSAxMDgxXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBWaXNpYmlsaXR5Q29tcG9uZW50U2NoZW1hOiBJU2NoZW1hPFBCVmlzaWJpbGl0eUNvbXBvbmVudD4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogUEJWaXNpYmlsaXR5Q29tcG9uZW50LCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgY29uc3Qgd3JpdGVyID0gUEJWaXNpYmlsaXR5Q29tcG9uZW50LmVuY29kZSh2YWx1ZSlcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheSh3cml0ZXIuZmluaXNoKCksIDAsIHdyaXRlci5sZW4pXG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihidWZmZXIsIGZhbHNlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBQQlZpc2liaWxpdHlDb21wb25lbnQge1xuICAgIHJldHVybiBQQlZpc2liaWxpdHlDb21wb25lbnQuZGVjb2RlKHJlYWRlci5idWZmZXIoKSwgcmVhZGVyLnJlbWFpbmluZ0J5dGVzKCkpXG4gIH0sXG4gIGNyZWF0ZSgpOiBQQlZpc2liaWxpdHlDb21wb25lbnQge1xuICAgIC8vIFRPRE86IHRoaXMgaXMgYSBoYWNrLlxuICAgIHJldHVybiBQQlZpc2liaWxpdHlDb21wb25lbnQuZGVjb2RlKG5ldyBVaW50OEFycmF5KCkpXG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgSUVuZ2luZSB9IGZyb20gJy4uLy4uL2VuZ2luZS90eXBlcydcbmltcG9ydCAqIGFzIFRyYW5zZm9ybVNjaGVtYSBmcm9tICcuLi9sZWdhY3kvVHJhbnNmb3JtJ1xuaW1wb3J0ICogYXMgQW5pbWF0b3JTY2hlbWEgZnJvbSAnLi9BbmltYXRvci5nZW4nXG5pbXBvcnQgKiBhcyBBdWRpb1NvdXJjZVNjaGVtYSBmcm9tICcuL0F1ZGlvU291cmNlLmdlbidcbmltcG9ydCAqIGFzIEF2YXRhckF0dGFjaFNjaGVtYSBmcm9tICcuL0F2YXRhckF0dGFjaC5nZW4nXG5pbXBvcnQgKiBhcyBBdmF0YXJNb2RpZmllckFyZWFTY2hlbWEgZnJvbSAnLi9BdmF0YXJNb2RpZmllckFyZWEuZ2VuJ1xuaW1wb3J0ICogYXMgQXZhdGFyU2hhcGVTY2hlbWEgZnJvbSAnLi9BdmF0YXJTaGFwZS5nZW4nXG5pbXBvcnQgKiBhcyBCaWxsYm9hcmRTY2hlbWEgZnJvbSAnLi9CaWxsYm9hcmQuZ2VuJ1xuaW1wb3J0ICogYXMgQm94U2hhcGVTY2hlbWEgZnJvbSAnLi9Cb3hTaGFwZS5nZW4nXG5pbXBvcnQgKiBhcyBDYW1lcmFNb2RlU2NoZW1hIGZyb20gJy4vQ2FtZXJhTW9kZS5nZW4nXG5pbXBvcnQgKiBhcyBDYW1lcmFNb2RlQXJlYVNjaGVtYSBmcm9tICcuL0NhbWVyYU1vZGVBcmVhLmdlbidcbmltcG9ydCAqIGFzIEN5bGluZGVyU2hhcGVTY2hlbWEgZnJvbSAnLi9DeWxpbmRlclNoYXBlLmdlbidcbmltcG9ydCAqIGFzIEdMVEZTaGFwZVNjaGVtYSBmcm9tICcuL0dMVEZTaGFwZS5nZW4nXG5pbXBvcnQgKiBhcyBNYXRlcmlhbFNjaGVtYSBmcm9tICcuL01hdGVyaWFsLmdlbidcbmltcG9ydCAqIGFzIE1lc2hSZW5kZXJlclNjaGVtYSBmcm9tICcuL01lc2hSZW5kZXJlci5nZW4nXG5pbXBvcnQgKiBhcyBORlRTaGFwZVNjaGVtYSBmcm9tICcuL05GVFNoYXBlLmdlbidcbmltcG9ydCAqIGFzIE9uUG9pbnRlckRvd25TY2hlbWEgZnJvbSAnLi9PblBvaW50ZXJEb3duLmdlbidcbmltcG9ydCAqIGFzIE9uUG9pbnRlckRvd25SZXN1bHRTY2hlbWEgZnJvbSAnLi9PblBvaW50ZXJEb3duUmVzdWx0LmdlbidcbmltcG9ydCAqIGFzIE9uUG9pbnRlclVwU2NoZW1hIGZyb20gJy4vT25Qb2ludGVyVXAuZ2VuJ1xuaW1wb3J0ICogYXMgT25Qb2ludGVyVXBSZXN1bHRTY2hlbWEgZnJvbSAnLi9PblBvaW50ZXJVcFJlc3VsdC5nZW4nXG5pbXBvcnQgKiBhcyBQbGFuZVNoYXBlU2NoZW1hIGZyb20gJy4vUGxhbmVTaGFwZS5nZW4nXG5pbXBvcnQgKiBhcyBQb2ludGVyTG9ja1NjaGVtYSBmcm9tICcuL1BvaW50ZXJMb2NrLmdlbidcbmltcG9ydCAqIGFzIFNwaGVyZVNoYXBlU2NoZW1hIGZyb20gJy4vU3BoZXJlU2hhcGUuZ2VuJ1xuaW1wb3J0ICogYXMgVGV4dFNoYXBlU2NoZW1hIGZyb20gJy4vVGV4dFNoYXBlLmdlbidcbmltcG9ydCAqIGFzIFVpVGV4dFNjaGVtYSBmcm9tICcuL1VpVGV4dC5nZW4nXG5pbXBvcnQgKiBhcyBWaXNpYmlsaXR5Q29tcG9uZW50U2NoZW1hIGZyb20gJy4vVmlzaWJpbGl0eUNvbXBvbmVudC5nZW4nXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVMaWJyYXJ5Q29tcG9uZW50cyh7XG4gIGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWFcbn06IFBpY2s8SUVuZ2luZSwgJ2RlZmluZUNvbXBvbmVudEZyb21TY2hlbWEnPikge1xuICByZXR1cm4ge1xuXHRcdEFuaW1hdG9yOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKEFuaW1hdG9yU2NoZW1hLkFuaW1hdG9yU2NoZW1hLCBBbmltYXRvclNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdEF1ZGlvU291cmNlOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKEF1ZGlvU291cmNlU2NoZW1hLkF1ZGlvU291cmNlU2NoZW1hLCBBdWRpb1NvdXJjZVNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdEF2YXRhckF0dGFjaDogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShBdmF0YXJBdHRhY2hTY2hlbWEuQXZhdGFyQXR0YWNoU2NoZW1hLCBBdmF0YXJBdHRhY2hTY2hlbWEuQ09NUE9ORU5UX0lEKSxcblx0XHRBdmF0YXJNb2RpZmllckFyZWE6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoQXZhdGFyTW9kaWZpZXJBcmVhU2NoZW1hLkF2YXRhck1vZGlmaWVyQXJlYVNjaGVtYSwgQXZhdGFyTW9kaWZpZXJBcmVhU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0QXZhdGFyU2hhcGU6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoQXZhdGFyU2hhcGVTY2hlbWEuQXZhdGFyU2hhcGVTY2hlbWEsIEF2YXRhclNoYXBlU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0QmlsbGJvYXJkOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKEJpbGxib2FyZFNjaGVtYS5CaWxsYm9hcmRTY2hlbWEsIEJpbGxib2FyZFNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdEJveFNoYXBlOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKEJveFNoYXBlU2NoZW1hLkJveFNoYXBlU2NoZW1hLCBCb3hTaGFwZVNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdENhbWVyYU1vZGU6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoQ2FtZXJhTW9kZVNjaGVtYS5DYW1lcmFNb2RlU2NoZW1hLCBDYW1lcmFNb2RlU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0Q2FtZXJhTW9kZUFyZWE6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoQ2FtZXJhTW9kZUFyZWFTY2hlbWEuQ2FtZXJhTW9kZUFyZWFTY2hlbWEsIENhbWVyYU1vZGVBcmVhU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0Q3lsaW5kZXJTaGFwZTogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShDeWxpbmRlclNoYXBlU2NoZW1hLkN5bGluZGVyU2hhcGVTY2hlbWEsIEN5bGluZGVyU2hhcGVTY2hlbWEuQ09NUE9ORU5UX0lEKSxcblx0XHRHTFRGU2hhcGU6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoR0xURlNoYXBlU2NoZW1hLkdMVEZTaGFwZVNjaGVtYSwgR0xURlNoYXBlU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0TWF0ZXJpYWw6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoTWF0ZXJpYWxTY2hlbWEuTWF0ZXJpYWxTY2hlbWEsIE1hdGVyaWFsU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0TWVzaFJlbmRlcmVyOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKE1lc2hSZW5kZXJlclNjaGVtYS5NZXNoUmVuZGVyZXJTY2hlbWEsIE1lc2hSZW5kZXJlclNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdE5GVFNoYXBlOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKE5GVFNoYXBlU2NoZW1hLk5GVFNoYXBlU2NoZW1hLCBORlRTaGFwZVNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdE9uUG9pbnRlckRvd246IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoT25Qb2ludGVyRG93blNjaGVtYS5PblBvaW50ZXJEb3duU2NoZW1hLCBPblBvaW50ZXJEb3duU2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0T25Qb2ludGVyRG93blJlc3VsdDogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShPblBvaW50ZXJEb3duUmVzdWx0U2NoZW1hLk9uUG9pbnRlckRvd25SZXN1bHRTY2hlbWEsIE9uUG9pbnRlckRvd25SZXN1bHRTY2hlbWEuQ09NUE9ORU5UX0lEKSxcblx0XHRPblBvaW50ZXJVcDogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShPblBvaW50ZXJVcFNjaGVtYS5PblBvaW50ZXJVcFNjaGVtYSwgT25Qb2ludGVyVXBTY2hlbWEuQ09NUE9ORU5UX0lEKSxcblx0XHRPblBvaW50ZXJVcFJlc3VsdDogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShPblBvaW50ZXJVcFJlc3VsdFNjaGVtYS5PblBvaW50ZXJVcFJlc3VsdFNjaGVtYSwgT25Qb2ludGVyVXBSZXN1bHRTY2hlbWEuQ09NUE9ORU5UX0lEKSxcblx0XHRQbGFuZVNoYXBlOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFBsYW5lU2hhcGVTY2hlbWEuUGxhbmVTaGFwZVNjaGVtYSwgUGxhbmVTaGFwZVNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdFBvaW50ZXJMb2NrOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFBvaW50ZXJMb2NrU2NoZW1hLlBvaW50ZXJMb2NrU2NoZW1hLCBQb2ludGVyTG9ja1NjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdFNwaGVyZVNoYXBlOiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFNwaGVyZVNoYXBlU2NoZW1hLlNwaGVyZVNoYXBlU2NoZW1hLCBTcGhlcmVTaGFwZVNjaGVtYS5DT01QT05FTlRfSUQpLFxuXHRcdFRleHRTaGFwZTogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShUZXh0U2hhcGVTY2hlbWEuVGV4dFNoYXBlU2NoZW1hLCBUZXh0U2hhcGVTY2hlbWEuQ09NUE9ORU5UX0lEKSxcblx0XHRVaVRleHQ6IGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoVWlUZXh0U2NoZW1hLlVpVGV4dFNjaGVtYSwgVWlUZXh0U2NoZW1hLkNPTVBPTkVOVF9JRCksXG5cdFx0VmlzaWJpbGl0eUNvbXBvbmVudDogZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYShWaXNpYmlsaXR5Q29tcG9uZW50U2NoZW1hLlZpc2liaWxpdHlDb21wb25lbnRTY2hlbWEsIFZpc2liaWxpdHlDb21wb25lbnRTY2hlbWEuQ09NUE9ORU5UX0lEKSxcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBJU2NoZW1hIH0gZnJvbSAnLi4vLi4vc2NoZW1hcy9JU2NoZW1hJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vLi4vZW5naW5lL2VudGl0eSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBDb21wb25lbnREZWZpbml0aW9uLCBJRW5naW5lIH0gZnJvbSAnLi4vLi4vZW5naW5lJ1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UX0lEID0gMVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgVHJhbnNmb3JtVHlwZSA9IHtcbiAgcG9zaXRpb246IHsgeDogbnVtYmVyOyB5OiBudW1iZXI7IHo6IG51bWJlciB9XG4gIHJvdGF0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB6OiBudW1iZXI7IHc6IG51bWJlciB9XG4gIHNjYWxlOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB6OiBudW1iZXIgfVxuICBwYXJlbnQ/OiBFbnRpdHlcbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IFRSQU5TRk9STV9MRU5HVEggPSA0NFxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgVHJhbnNmb3JtU2NoZW1hOiBJU2NoZW1hPFRyYW5zZm9ybVR5cGU+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IFRyYW5zZm9ybVR5cGUsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCBwdHIgPSBidWlsZGVyLmluY3JlbWVudFdyaXRlT2Zmc2V0KFRSQU5TRk9STV9MRU5HVEgpXG4gICAgYnVpbGRlci5zZXRGbG9hdDMyKHB0ciwgdmFsdWUucG9zaXRpb24ueClcbiAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgNCwgdmFsdWUucG9zaXRpb24ueSlcbiAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgOCwgdmFsdWUucG9zaXRpb24ueilcbiAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMTIsIHZhbHVlLnJvdGF0aW9uLngpXG4gICAgYnVpbGRlci5zZXRGbG9hdDMyKHB0ciArIDE2LCB2YWx1ZS5yb3RhdGlvbi55KVxuICAgIGJ1aWxkZXIuc2V0RmxvYXQzMihwdHIgKyAyMCwgdmFsdWUucm90YXRpb24ueilcbiAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMjQsIHZhbHVlLnJvdGF0aW9uLncpXG4gICAgYnVpbGRlci5zZXRGbG9hdDMyKHB0ciArIDI4LCB2YWx1ZS5zY2FsZS54KVxuICAgIGJ1aWxkZXIuc2V0RmxvYXQzMihwdHIgKyAzMiwgdmFsdWUuc2NhbGUueSlcbiAgICBidWlsZGVyLnNldEZsb2F0MzIocHRyICsgMzYsIHZhbHVlLnNjYWxlLnopXG4gICAgYnVpbGRlci5zZXRVaW50MzIocHRyICsgNDAsIHZhbHVlLnBhcmVudCB8fCAwKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBUcmFuc2Zvcm1UeXBlIHtcbiAgICBjb25zdCBwdHIgPSByZWFkZXIuaW5jcmVtZW50UmVhZE9mZnNldChUUkFOU0ZPUk1fTEVOR1RIKVxuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjoge1xuICAgICAgICB4OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIpLFxuICAgICAgICB5OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyA0KSxcbiAgICAgICAgejogcmVhZGVyLmdldEZsb2F0MzIocHRyICsgOClcbiAgICAgIH0sXG4gICAgICByb3RhdGlvbjoge1xuICAgICAgICB4OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyAxMiksXG4gICAgICAgIHk6IHJlYWRlci5nZXRGbG9hdDMyKHB0ciArIDE2KSxcbiAgICAgICAgejogcmVhZGVyLmdldEZsb2F0MzIocHRyICsgMjApLFxuICAgICAgICB3OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyAyNClcbiAgICAgIH0sXG4gICAgICBzY2FsZToge1xuICAgICAgICB4OiByZWFkZXIuZ2V0RmxvYXQzMihwdHIgKyAyOCksXG4gICAgICAgIHk6IHJlYWRlci5nZXRGbG9hdDMyKHB0ciArIDMyKSxcbiAgICAgICAgejogcmVhZGVyLmdldEZsb2F0MzIocHRyICsgMzYpXG4gICAgICB9LFxuICAgICAgcGFyZW50OiByZWFkZXIuZ2V0VWludDMyKHB0ciArIDQwKSBhcyBFbnRpdHlcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZSgpOiBUcmFuc2Zvcm1UeXBlIHtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zaXRpb246IHsgeDogMCwgeTogMCwgejogMCB9LFxuICAgICAgc2NhbGU6IHsgeDogMSwgeTogMSwgejogMSB9LFxuICAgICAgcm90YXRpb246IHsgeDogMCwgeTogMCwgejogMCwgdzogMSB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVUcmFuc2Zvcm1Db21wb25lbnQoe1xuICBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hXG59OiBQaWNrPElFbmdpbmUsICdkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hJz4pOiBDb21wb25lbnREZWZpbml0aW9uPFxuICBJU2NoZW1hPFRyYW5zZm9ybVR5cGU+LFxuICBQYXJ0aWFsPFRyYW5zZm9ybVR5cGU+XG4+IHtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEoVHJhbnNmb3JtU2NoZW1hLCBDT01QT05FTlRfSUQpXG59XG4iLCJpbXBvcnQgeyBQcmVFbmdpbmUgfSBmcm9tICcuLi9lbmdpbmUnXG5pbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vc2NoZW1hcy9JU2NoZW1hJ1xuXG5pbXBvcnQgeyBkZWZpbmVMaWJyYXJ5Q29tcG9uZW50cyB9IGZyb20gJy4vZ2VuZXJhdGVkL2luZGV4LmdlbidcbmltcG9ydCAqIGFzIE1lc2hSZW5kZXJlclNjaGVtYSBmcm9tICcuL2dlbmVyYXRlZC9NZXNoUmVuZGVyZXIuZ2VuJ1xuaW1wb3J0IHsgUEJNZXNoUmVuZGVyZXIgfSBmcm9tICcuL2dlbmVyYXRlZC9wYi9NZXNoUmVuZGVyZXIuZ2VuJ1xuaW1wb3J0IHsgZGVmaW5lVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9sZWdhY3kvVHJhbnNmb3JtJ1xuXG5leHBvcnQgZW51bSBDT01QT05FTlRfSUQge1xuICBTWU5DID0gMTAwMFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgU2RrQ29tcG9uZW50cyA9IFJldHVyblR5cGU8dHlwZW9mIGRlZmluZVNka0NvbXBvbmVudHM+XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVTZGtDb21wb25lbnRzKGVuZ2luZTogUHJlRW5naW5lKSB7XG4gIGNvbnN0IGF1dG9nZW5lcmF0ZWRDb21wb25lbnRzID0gZGVmaW5lTGlicmFyeUNvbXBvbmVudHMoZW5naW5lKVxuICBlbmdpbmUucmVtb3ZlQ29tcG9uZW50RGVmaW5pdGlvbihhdXRvZ2VuZXJhdGVkQ29tcG9uZW50cy5NZXNoUmVuZGVyZXIuX2lkKVxuICByZXR1cm4ge1xuICAgIC4uLmF1dG9nZW5lcmF0ZWRDb21wb25lbnRzLFxuICAgIFRyYW5zZm9ybTogZGVmaW5lVHJhbnNmb3JtQ29tcG9uZW50KGVuZ2luZSksXG4gICAgTWVzaFJlbmRlcmVyOiBlbmdpbmUuZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYTxcbiAgICAgIElTY2hlbWE8UEJNZXNoUmVuZGVyZXI+LFxuICAgICAgUGFydGlhbDxQQk1lc2hSZW5kZXJlcj5cbiAgICA+KE1lc2hSZW5kZXJlclNjaGVtYS5NZXNoUmVuZGVyZXJTY2hlbWEsIE1lc2hSZW5kZXJlclNjaGVtYS5DT01QT05FTlRfSUQpXG4gIH1cbn1cbiIsImltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi9JU2NoZW1hJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIElBcnJheTxUPih0eXBlOiBJU2NoZW1hPFQ+KTogSVNjaGVtYTxBcnJheTxUPj4ge1xuICByZXR1cm4ge1xuICAgIHNlcmlhbGl6ZSh2YWx1ZTogQXJyYXk8VD4sIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICAgIGJ1aWxkZXIud3JpdGVVaW50MzIodmFsdWUubGVuZ3RoKVxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgIHR5cGUuc2VyaWFsaXplKGl0ZW0sIGJ1aWxkZXIpXG4gICAgICB9XG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBBcnJheTxUPiB7XG4gICAgICBjb25zdCBuZXdBcnJheTogQXJyYXk8VD4gPSBbXVxuICAgICAgY29uc3QgbGVuZ3RoID0gcmVhZGVyLnJlYWRVaW50MzIoKVxuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBuZXdBcnJheS5wdXNoKHR5cGUuZGVzZXJpYWxpemUocmVhZGVyKSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdBcnJheVxuICAgIH0sXG4gICAgY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uL0lTY2hlbWEnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgQm9vbDogSVNjaGVtYTxib29sZWFuPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBib29sZWFuLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgYnVpbGRlci53cml0ZUludDgodmFsdWUgPyAxIDogMClcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHJlYWRlci5yZWFkSW50OCgpID09PSAxXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuIiwiaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi9JU2NoZW1hJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIElFbnVtPFQ+KHR5cGU6IElTY2hlbWE8YW55Pik6IElTY2hlbWE8VD4ge1xuICByZXR1cm4ge1xuICAgIHNlcmlhbGl6ZSh2YWx1ZTogVCwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgICAgdHlwZS5zZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpXG4gICAgfSxcbiAgICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBUIHtcbiAgICAgIHJldHVybiB0eXBlLmRlc2VyaWFsaXplKHJlYWRlcilcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB0eXBlLmNyZWF0ZSgpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uL0lTY2hlbWEnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRmxvYXQzMjogSVNjaGVtYTxudW1iZXI+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IG51bWJlciwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGJ1aWxkZXIud3JpdGVGbG9hdDMyKHZhbHVlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBudW1iZXIge1xuICAgIHJldHVybiByZWFkZXIucmVhZEZsb2F0MzIoKVxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIDAuMFxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRmxvYXQ2NDogSVNjaGVtYTxudW1iZXI+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IG51bWJlciwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGJ1aWxkZXIud3JpdGVGbG9hdDY0KHZhbHVlKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBudW1iZXIge1xuICAgIHJldHVybiByZWFkZXIucmVhZEZsb2F0NjQoKVxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIDAuMFxuICB9XG59XG4iLCJpbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi9CeXRlQnVmZmVyJ1xuaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4uL0lTY2hlbWEnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgSW50NjQ6IElTY2hlbWE8bnVtYmVyPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBudW1iZXIsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBidWlsZGVyLndyaXRlSW50NjQoQmlnSW50KHZhbHVlKSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTnVtYmVyKHJlYWRlci5yZWFkSW50NjQoKSlcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIHJldHVybiAwXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBJbnQzMjogSVNjaGVtYTxudW1iZXI+ID0ge1xuICBzZXJpYWxpemUodmFsdWU6IG51bWJlciwgYnVpbGRlcjogQnl0ZUJ1ZmZlcik6IHZvaWQge1xuICAgIGJ1aWxkZXIud3JpdGVJbnQzMih2YWx1ZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWRJbnQzMigpXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICByZXR1cm4gMFxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgSW50MTY6IElTY2hlbWE8bnVtYmVyPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBudW1iZXIsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBidWlsZGVyLndyaXRlSW50MTYodmFsdWUpXG4gIH0sXG4gIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHJlYWRlci5yZWFkSW50MTYoKVxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEludDg6IElTY2hlbWE8bnVtYmVyPiA9IHtcbiAgc2VyaWFsaXplKHZhbHVlOiBudW1iZXIsIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICBidWlsZGVyLndyaXRlSW50OCh2YWx1ZSlcbiAgfSxcbiAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcmVhZGVyLnJlYWRJbnQ4KClcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIHJldHVybiAwXG4gIH1cbn1cbiIsImltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi4vSVNjaGVtYSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBGbGF0U3RyaW5nOiBJU2NoZW1hPHN0cmluZz4gPSB7XG4gIHNlcmlhbGl6ZSh2YWx1ZTogc3RyaW5nLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgYnVpbGRlci53cml0ZUJ1ZmZlcihuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodmFsdWUpKVxuICB9LFxuICBkZXNlcmlhbGl6ZShyZWFkZXI6IEJ5dGVCdWZmZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUocmVhZGVyLnJlYWRCdWZmZXIoKSlcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIHJldHVybiAnJ1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRWNzU3RyaW5nID0gRmxhdFN0cmluZ1xuIiwiaW1wb3J0IHsgQnl0ZUJ1ZmZlciB9IGZyb20gJy4uL3NlcmlhbGl6YXRpb24vQnl0ZUJ1ZmZlcidcbmltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuL0lTY2hlbWEnXG5pbXBvcnQgeyBUb09wdGlvbmFsIH0gZnJvbSAnLi90eXBpbmcnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNwZWMge1xuICBba2V5OiBzdHJpbmddOiBJU2NoZW1hXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBSZXN1bHQ8VCBleHRlbmRzIFNwZWM+ID0gVG9PcHRpb25hbDx7XG4gIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgSVNjaGVtYVxuICAgID8gUmV0dXJuVHlwZTxUW0tdWydkZXNlcmlhbGl6ZSddPlxuICAgIDogVFtLXSBleHRlbmRzIFNwZWNcbiAgICA/IFJlc3VsdDxUW0tdPlxuICAgIDogbmV2ZXJcbn0+XG5cbmV4cG9ydCB0eXBlIE1hcFNjaGVtYVR5cGU8VCBleHRlbmRzIFNwZWM+ID0gSVNjaGVtYTxSZXN1bHQ8VD4+XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gSU1hcDxUIGV4dGVuZHMgU3BlYz4oc3BlYzogVCk6IElTY2hlbWE8UmVzdWx0PFQ+PiB7XG4gIHJldHVybiB7XG4gICAgc2VyaWFsaXplKHZhbHVlOiBSZXN1bHQ8VD4sIGJ1aWxkZXI6IEJ5dGVCdWZmZXIpOiB2b2lkIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNwZWMpIHtcbiAgICAgICAgLy8gVE9ETzogYXMgYW55XG4gICAgICAgIHNwZWNba2V5XS5zZXJpYWxpemUoKHZhbHVlIGFzIGFueSlba2V5XSwgYnVpbGRlcilcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc2VyaWFsaXplKHJlYWRlcjogQnl0ZUJ1ZmZlcik6IFJlc3VsdDxUPiB7XG4gICAgICBjb25zdCBuZXdWYWx1ZTogUmVzdWx0PFQ+ID0ge30gYXMgYW55XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBzcGVjKSB7XG4gICAgICAgIC8vIFRPRE86IGFzIGFueVxuICAgICAgICA7KG5ld1ZhbHVlIGFzIGFueSlba2V5XSA9IHNwZWNba2V5XS5kZXNlcmlhbGl6ZShyZWFkZXIpXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3VmFsdWVcbiAgICB9LFxuICAgIGNyZWF0ZSgpIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlOiBSZXN1bHQ8VD4gPSB7fSBhcyBhbnlcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHNwZWMpIHtcbiAgICAgICAgLy8gVE9ETzogYXMgYW55XG4gICAgICAgIDsobmV3VmFsdWUgYXMgYW55KVtrZXldID0gc3BlY1trZXldLmNyZWF0ZSgpXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3VmFsdWVcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBJU2NoZW1hIH0gZnJvbSAnLi9JU2NoZW1hJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIElPcHRpb25hbDxUPihzcGVjOiBJU2NoZW1hPFQ+KTogSVNjaGVtYTxUIHwgdW5kZWZpbmVkPiB7XG4gIHJldHVybiB7XG4gICAgc2VyaWFsaXplKHZhbHVlOiBUIHwgdW5kZWZpbmVkLCBidWlsZGVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgYnVpbGRlci53cml0ZUludDgoMSlcbiAgICAgICAgc3BlYy5zZXJpYWxpemUodmFsdWUsIGJ1aWxkZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWlsZGVyLndyaXRlSW50OCgwKVxuICAgICAgfVxuICAgIH0sXG4gICAgZGVzZXJpYWxpemUocmVhZGVyOiBCeXRlQnVmZmVyKTogVCB8IHVuZGVmaW5lZCB7XG4gICAgICBjb25zdCBleGlzdHMgPSByZWFkZXIucmVhZEludDgoKVxuICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICByZXR1cm4gc3BlYy5kZXNlcmlhbGl6ZShyZWFkZXIpXG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGUoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBJQXJyYXkgfSBmcm9tICcuL0FycmF5J1xuaW1wb3J0IHsgQm9vbCB9IGZyb20gJy4vYmFzaWMvQm9vbGVhbidcbmltcG9ydCB7IElFbnVtIH0gZnJvbSAnLi9iYXNpYy9FbnVtJ1xuaW1wb3J0IHsgRmxvYXQzMiwgRmxvYXQ2NCB9IGZyb20gJy4vYmFzaWMvRmxvYXQnXG5pbXBvcnQgeyBJbnQxNiwgSW50MzIsIEludDgsIEludDY0IGFzIGlJbnQ2NCB9IGZyb20gJy4vYmFzaWMvSW50ZWdlcidcbmltcG9ydCB7IEVjc1N0cmluZyB9IGZyb20gJy4vYmFzaWMvU3RyaW5nJ1xuaW1wb3J0IHsgSVNjaGVtYSB9IGZyb20gJy4vSVNjaGVtYSdcbmltcG9ydCB7IElNYXAgfSBmcm9tICcuL01hcCdcbmltcG9ydCB7IElPcHRpb25hbCB9IGZyb20gJy4vT3B0aW9uYWwnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgbmFtZXNwYWNlIFNjaGVtYXMge1xuICBleHBvcnQgdHlwZSBTY2hlbWFUeXBlID0gSVNjaGVtYVxuXG4gIGV4cG9ydCBjb25zdCBCb29sZWFuID0gQm9vbFxuXG4gIGV4cG9ydCBjb25zdCBTdHJpbmcgPSBFY3NTdHJpbmdcblxuICBleHBvcnQgY29uc3QgRmxvYXQgPSBGbG9hdDMyXG4gIGV4cG9ydCBjb25zdCBEb3VibGUgPSBGbG9hdDY0XG5cbiAgZXhwb3J0IGNvbnN0IEJ5dGUgPSBJbnQ4XG4gIGV4cG9ydCBjb25zdCBTaG9ydCA9IEludDE2XG4gIGV4cG9ydCBjb25zdCBJbnQgPSBJbnQzMlxuICBleHBvcnQgY29uc3QgSW50NjQgPSBpSW50NjRcblxuICBleHBvcnQgY29uc3QgTnVtYmVyID0gRmxvYXQzMlxuXG4gIGV4cG9ydCBjb25zdCBFbnVtID0gSUVudW1cbiAgZXhwb3J0IGNvbnN0IEFycmF5ID0gSUFycmF5XG4gIGV4cG9ydCBjb25zdCBNYXAgPSBJTWFwXG4gIGV4cG9ydCBjb25zdCBPcHRpb25hbCA9IElPcHRpb25hbFxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmR0UHJvdG9jb2wgPSBleHBvcnRzLnN0YXRlSXRlcmF0b3IgPSBleHBvcnRzLnNhbWVEYXRhID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbi8qKlxuICogQ29tcGFyZSByYXcgZGF0YS5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBzYW1lRGF0YShhLCBiKSB7XG4gICAgLy8gQXQgcmVmZXJlbmNlIGxldmVsXG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChhIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiBiIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEuYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgICAgIGlmIChhIGluc3RhbmNlb2YgQnVmZmVyICYmIGIgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgICAgIC8vIERlZXAgbGV2ZWxcbiAgICAgICAgICAgIHJldHVybiBhLmVxdWFscyhiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnNhbWVEYXRhID0gc2FtZURhdGE7XG4vKipcbiAqIFN0YXRlIGl0ZXJhdG9yXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24qIHN0YXRlSXRlcmF0b3Ioc3RhdGUpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXkxLCB2YWx1ZTFdIG9mIHN0YXRlLmVudHJpZXMoKSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXkyLCB2YWx1ZTJdIG9mIHZhbHVlMS5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHlpZWxkIFtrZXkxLCBrZXkyLCB2YWx1ZTJdO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5zdGF0ZUl0ZXJhdG9yID0gc3RhdGVJdGVyYXRvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQ1JEVCBwcm90b2NvbC5cbiAqIFN0b3JlcyB0aGUgbGF0ZXN0IHN0YXRlLCBhbmQgZGVjaWRlcyB3aGVuZXZlciB3ZSBoYXZlXG4gKiB0byBwcm9jZXNzIGFuZCBzdG9yZSB0aGUgbmV3IGRhdGEgaW4gY2FzZSBpdHMgYW4gdXBkYXRlLCBvclxuICogdG8gZGlzY2FyZCBhbmQgc2VuZCBvdXIgbG9jYWwgdmFsdWUgY2F1c2UgcmVtb3RlIGl0J3Mgb3V0ZGF0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZHRQcm90b2NvbCgpIHtcbiAgICAvKipcbiAgICAgKiBMb2NhbCBzdGF0ZSB3aGVyZSB3ZSBzdG9yZSB0aGUgbGF0ZXN0IGxhbXBvcnQgdGltZXN0YW1wXG4gICAgICogYW5kIHRoZSByYXcgZGF0YSB2YWx1ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbnN0IHN0YXRlID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIFdlIHNob3VsZCBjYWxsIHRoaXMgZm4gaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSBzdGF0ZVxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKGtleTEsIGtleTIsIGRhdGEsIHJlbW90ZVRpbWVzdGFtcCkge1xuICAgICAgICBjb25zdCBrZXkxVmFsdWUgPSBzdGF0ZS5nZXQoa2V5MSk7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGgubWF4KHJlbW90ZVRpbWVzdGFtcCwga2V5MVZhbHVlPy5nZXQoa2V5Mik/LnRpbWVzdGFtcCB8fCAwKTtcbiAgICAgICAgaWYgKGtleTFWYWx1ZSkge1xuICAgICAgICAgICAga2V5MVZhbHVlLnNldChrZXkyLCB7IHRpbWVzdGFtcCwgZGF0YSB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0tleTFWYWx1ZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIG5ld0tleTFWYWx1ZS5zZXQoa2V5MiwgeyB0aW1lc3RhbXAsIGRhdGEgfSk7XG4gICAgICAgICAgICBzdGF0ZS5zZXQoa2V5MSwgbmV3S2V5MVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB0aW1lc3RhbXAsIGRhdGEgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGV2ZW50IGZvciB0aGUgc3BlY2lmaWVkIGtleSBhbmQgc3RvcmUgdGhlIG5ldyBkYXRhIGFuZFxuICAgICAqIGxhbXBvcnQgdGltZXN0bWFwIGluY3JlbWVudGVkIGJ5IG9uZSBpbiB0aGUgc3RhdGUuXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGtleTEsIGtleTIsIGRhdGEpIHtcbiAgICAgICAgLy8gSW5jcmVtZW50IHRoZSB0aW1lc3RhbXBcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gKHN0YXRlLmdldChrZXkxKT8uZ2V0KGtleTIpPy50aW1lc3RhbXAgfHwgMCkgKyAxO1xuICAgICAgICB1cGRhdGVTdGF0ZShrZXkxLCBrZXkyLCBkYXRhLCB0aW1lc3RhbXApO1xuICAgICAgICByZXR1cm4geyBrZXkxLCBrZXkyLCBkYXRhLCB0aW1lc3RhbXAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgcmVjZWl2ZWQgbWVzc2FnZSBvbmx5IGlmIHRoZSBsYW1wb3J0IG51bWJlciByZWNpZXZlZCBpcyBoaWdoZXJcbiAgICAgKiB0aGFuIHRoZSBzdG9yZWQgb25lLiBJZiBpdHMgbG93ZXIsIHdlIHNwcmVhZCBpdCB0byB0aGUgbmV0d29yayB0byBjb3JyZWN0IHRoZSBwZWVyLlxuICAgICAqIElmIHRoZXkgYXJlIGVxdWFsLCB0aGUgYmlnZ2VyIHJhdyBkYXRhIHdpbnMuXG4gIFxuICAgICAqIFJldHVybnMgdGhlIHJlY2lldmVkIGRhdGEgaWYgdGhlIGxhbXBvcnQgbnVtYmVyIHdhcyBiaWdnZXIgdGhhbiBvdXJzLlxuICAgICAqIElmIGl0IHdhcyBhbiBvdXRkYXRlZCBtZXNzYWdlLCB0aGVuIHdlIHJldHVybiB2b2lkXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgeyBrZXkxLCBrZXkyLCBkYXRhLCB0aW1lc3RhbXAgfSA9IG1lc3NhZ2U7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBzdGF0ZS5nZXQoa2V5MSk/LmdldChrZXkyKTtcbiAgICAgICAgLy8gVGhlIHJlY2VpdmVkIG1lc3NhZ2UgaXMgPiB0aGFuIG91ciBjdXJyZW50IHZhbHVlLCB1cGRhdGUgb3VyIHN0YXRlLlxuICAgICAgICBpZiAoIWN1cnJlbnQgfHwgY3VycmVudC50aW1lc3RhbXAgPCB0aW1lc3RhbXApIHtcbiAgICAgICAgICAgIHVwZGF0ZVN0YXRlKGtleTEsIGtleTIsIGRhdGEsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdXRkYXRlZCBNZXNzYWdlLiBSZXNlbmQgb3VyIHN0YXRlIG1lc3NhZ2UgdGhyb3VnaCB0aGUgd2lyZS5cbiAgICAgICAgaWYgKGN1cnJlbnQudGltZXN0YW1wID4gdGltZXN0YW1wKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleTEsXG4gICAgICAgICAgICAgICAga2V5MixcbiAgICAgICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBjdXJyZW50LnRpbWVzdGFtcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTYW1lIGRhdGEsIHNhbWUgdGltZXN0YW1wLiBXZWlyZG8gZWNobyBtZXNzYWdlLlxuICAgICAgICBpZiAoc2FtZURhdGEoY3VycmVudC5kYXRhLCBkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmFjZSBjb25kaXRpb24sIHNhbWUgdGltZXN0YW1wIGRpZmYgZGF0YS5cbiAgICAgICAgZnVuY3Rpb24gY29tcGFyZURhdGEoY3VycmVudCwgZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQgPiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJlRGF0YShjdXJyZW50LmRhdGEsIGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGtleTEsXG4gICAgICAgICAgICAgICAga2V5MixcbiAgICAgICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBjdXJyZW50LnRpbWVzdGFtcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVTdGF0ZShrZXkxLCBrZXkyLCBkYXRhLCB0aW1lc3RhbXApLmRhdGE7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNyZWF0ZUV2ZW50LFxuICAgICAgICBwcm9jZXNzTWVzc2FnZSxcbiAgICAgICAgZ2V0U3RhdGVcbiAgICB9O1xufVxuZXhwb3J0cy5jcmR0UHJvdG9jb2wgPSBjcmR0UHJvdG9jb2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCIvKipcbiAqIFRha2UgdGhlIG1heCBiZXR3ZWVuIGN1cnJlbnRTaXplIGFuZCBpbnRlbmRlZFNpemUgYW5kIHRoZW4gcGx1cyAxMDI0LiBUaGVuLFxuICogIGZpbmQgdGhlIG5leHQgbmVhcmVyIG11bHRpcGxlIG9mIDEwMjQuXG4gKiBAcGFyYW0gY3VycmVudFNpemUgLSBudW1iZXJcbiAqIEBwYXJhbSBpbnRlbmRlZFNpemUgLSBudW1iZXJcbiAqIEByZXR1cm5zIHRoZSBjYWxjdWxhdGVkIG51bWJlclxuICovXG5mdW5jdGlvbiBnZXROZXh0U2l6ZShjdXJyZW50U2l6ZTogbnVtYmVyLCBpbnRlbmRlZFNpemU6IG51bWJlcikge1xuICBjb25zdCBtaW5OZXdTaXplID0gTWF0aC5tYXgoY3VycmVudFNpemUsIGludGVuZGVkU2l6ZSkgKyAxMDI0XG4gIHJldHVybiBNYXRoLmNlaWwobWluTmV3U2l6ZSAvIDEwMjQpICogMTAyNFxufVxuXG4vKipcbiAqIEBwYXJhbSB3cml0aW5nIC0gd3JpdGluZyBvcHRpb24sIHNlZSBvYmplY3Qgc3BlY3MuXG4gKiBAcGFyYW0gcmVhZGluZyAtIHJlYWRpbmcgb3B0aW9uLCBzZWUgb2JqZWN0IHNwZWNzLlxuICogQHBhcmFtIGluaXRpYWxDYXBhY2l0eSAtIEluaXRpYWwgY2FwYWNpdHkgb2YgYnVmZmVyIHRvIGFsbG9jYXRlLCBpZ25vcmVkIGlmIHlvdSB1c2Ugd3JpdGluZyBvciByZWFkaW5nIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVCeXRlQnVmZmVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gYSBidWZmZXIgYWxyZWFkeSBhbGxvY2F0ZWQgdG8gcmVhZCBmcm9tIHRoZXJlLlxuICAgKiBAcGFyYW0gY3VycmVudE9mZnNldCAtIHNldCB0aGUgY3Vyc29yIHdoZXJlIGJlZ2lucyB0byByZWFkLiBEZWZhdWx0IDBcbiAgICogQHBhcmFtIGxlbmd0aCAtIGRlbGltaXRlIHdoZXJlIHRoZSB2YWxpZCBkYXRhIGVuZHMuIERlZmF1bHQ6IGJ1ZmZlci5sZW5ndGhcbiAgICovXG4gIHJlYWRpbmc/OiB7XG4gICAgYnVmZmVyOiBVaW50OEFycmF5XG4gICAgbGVuZ3RoPzogbnVtYmVyXG4gICAgY3VycmVudE9mZnNldDogbnVtYmVyXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGJ1ZmZlciAtIGEgYnVmZmVyIGFscmVhZHkgYWxsb2NhdGVkIHRvIHdyaXRlIHRoZXJlLlxuICAgKiBAcGFyYW0gY3VycmVudE9mZnNldCAtIHNldCB0aGUgY3Vyc29yIHRvIG5vdCBzdGFydCB3cml0aW5nIGZyb20gdGhlIGJlZ2luIG9mIGl0LiBEZWZhdWx0IDBcbiAgICovXG4gIHdyaXRpbmc/OiB7XG4gICAgYnVmZmVyOiBVaW50OEFycmF5XG4gICAgY3VycmVudE9mZnNldD86IG51bWJlclxuICB9XG5cbiAgaW5pdGlhbENhcGFjaXR5PzogbnVtYmVyXG59XG5cbmNvbnN0IGRlZmF1bHRJbml0aWFsQ2FwYWNpdHkgPSAxMDI0MFxuXG4vKipcbiAqIEJ5dGVCdWZmZXIgaXMgYSB3cmFwcGVyIG9mIERhdGFWaWV3IHdoaWNoIGFsc28gYWRkcyBhIHJlYWQgYW5kIHdyaXRlIG9mZnNldC5cbiAqICBBbHNvIGluIGEgd3JpdGUgb3BlcmF0aW9uIGl0IHJlc2l6ZXMgdGhlIGJ1ZmZlciBpcyBiZWluZyB1c2VkIGlmIGl0IG5lZWRzLlxuICpcbiAqIC0gVXNlIHJlYWQgYW5kIHdyaXRlIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIG9yIGNvbnN1bWUgZGF0YS5cbiAqIC0gVXNlIHNldCBhbmQgZ2V0IG9ubHkgaWYgeW91IGFyZSBzdXJlIHRoYXQgeW91J3JlIGRvaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQnl0ZUJ1ZmZlcihvcHRpb25zOiBDcmVhdGVCeXRlQnVmZmVyT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGluaXRpYWxST2Zmc2V0OiBudW1iZXIgPSBvcHRpb25zLnJlYWRpbmc/LmN1cnJlbnRPZmZzZXQgfHwgMFxuICBsZXQgaW5pdGlhbEJ1ZmZlcjogVWludDhBcnJheSB8IG51bGwgPSBudWxsXG4gIGxldCBpbml0aWFsV09mZnNldDogbnVtYmVyID0gMFxuXG4gIGlmIChvcHRpb25zLndyaXRpbmcpIHtcbiAgICBpbml0aWFsQnVmZmVyID0gb3B0aW9ucy53cml0aW5nLmJ1ZmZlclxuICAgIGlmIChvcHRpb25zLndyaXRpbmcuY3VycmVudE9mZnNldCkge1xuICAgICAgaW5pdGlhbFdPZmZzZXQgPSBvcHRpb25zLndyaXRpbmcuY3VycmVudE9mZnNldFxuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLnJlYWRpbmcpIHtcbiAgICBpbml0aWFsQnVmZmVyID0gb3B0aW9ucy5yZWFkaW5nLmJ1ZmZlclxuICAgIGluaXRpYWxXT2Zmc2V0ID0gb3B0aW9ucy5yZWFkaW5nLmxlbmd0aCB8fCBvcHRpb25zLnJlYWRpbmcuYnVmZmVyLmxlbmd0aFxuICB9IGVsc2Uge1xuICAgIGluaXRpYWxCdWZmZXIgPSBuZXcgVWludDhBcnJheShcbiAgICAgIG9wdGlvbnMuaW5pdGlhbENhcGFjaXR5IHx8IGRlZmF1bHRJbml0aWFsQ2FwYWNpdHlcbiAgICApXG4gIH1cblxuICBsZXQgYnVmZmVyOiBVaW50OEFycmF5ID0gaW5pdGlhbEJ1ZmZlciFcbiAgbGV0IHZpZXc6IERhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlci5idWZmZXIsIGJ1ZmZlci5ieXRlT2Zmc2V0KVxuICBsZXQgd29mZnNldDogbnVtYmVyID0gaW5pdGlhbFdPZmZzZXRcbiAgbGV0IHJvZmZzZXQ6IG51bWJlciA9IGluaXRpYWxST2Zmc2V0XG5cbiAgLyoqXG4gICAqIEluY3JlZW1lbnQgdGhlIHdyaXRlIG9mZnNldCBhbmQgcmVzaXplIHRoZSBidWZmZXIgaWYgaXQgbmVlZHMuXG4gICAqL1xuICBjb25zdCB3b0FkZCA9IChhbW91bnQ6IG51bWJlcikgPT4ge1xuICAgIGlmICh3b2Zmc2V0ICsgYW1vdW50ID4gYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgIGNvbnN0IG5ld3NpemUgPSBnZXROZXh0U2l6ZShidWZmZXIuYnl0ZUxlbmd0aCwgd29mZnNldCArIGFtb3VudClcbiAgICAgIGNvbnN0IG5ld0J1ZmZlciA9IG5ldyBVaW50OEFycmF5KG5ld3NpemUpXG4gICAgICBuZXdCdWZmZXIuc2V0KGJ1ZmZlcilcbiAgICAgIGJ1ZmZlciA9IG5ld0J1ZmZlclxuICAgICAgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIuYnVmZmVyKVxuICAgIH1cblxuICAgIHdvZmZzZXQgKz0gYW1vdW50XG4gICAgcmV0dXJuIHdvZmZzZXQgLSBhbW91bnRcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnQgdGhlIHJlYWQgb2Zmc2V0IGFuZCB0aHJvdyBhbiBlcnJvciBpZiBpdCdzIHRyeWluZyB0byByZWFkXG4gICAqICBvdXRzaWRlIHRoZSBib3VuZHMuXG4gICAqL1xuICBjb25zdCByb0FkZCA9IChhbW91bnQ6IG51bWJlcikgPT4ge1xuICAgIGlmIChyb2Zmc2V0ICsgYW1vdW50ID4gd29mZnNldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdXRzaWRlIG9mIHRoZSBib3VuZHMgb2Ygd3JpdGVuIGRhdGEuJylcbiAgICB9XG5cbiAgICByb2Zmc2V0ICs9IGFtb3VudFxuICAgIHJldHVybiByb2Zmc2V0IC0gYW1vdW50XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRoZSBlbnRpcmUgY3VycmVudCBVaW50OEFycmF5LlxuICAgICAqXG4gICAgICogV0FSTklORzogaWYgdGhlIGJ1ZmZlciBncm93cywgdGhlIHZpZXcgaGFkIGNoYW5nZWQgaXRzZWxmLFxuICAgICAqICBhbmQgdGhlIHJlZmVyZW5jZSB3aWxsIGJlIGEgaW52YWxpZCBvbmUuXG4gICAgICovXG4gICAgYnVmZmVyKCk6IFVpbnQ4QXJyYXkge1xuICAgICAgcmV0dXJuIGJ1ZmZlclxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIGNhcGFjaXR5IG9mIHRoZSBjdXJyZW50IGJ1ZmZlclxuICAgICAqL1xuICAgIGJ1ZmZlckxlbmd0aCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5sZW5ndGhcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFJlc2V0cyBieXRlQnVmZmVyIHRvIGF2b2lkIGNyZWF0aW5nIGEgbmV3IG9uZVxuICAgICAqL1xuICAgIHJlc2V0QnVmZmVyKCk6IHZvaWQge1xuICAgICAgcm9mZnNldCA9IDBcbiAgICAgIHdvZmZzZXQgPSAwXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCByZWFkIG9mZnNldFxuICAgICAqL1xuICAgIGN1cnJlbnRSZWFkT2Zmc2V0KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gcm9mZnNldFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgd3JpdGUgb2Zmc2V0XG4gICAgICovXG4gICAgY3VycmVudFdyaXRlT2Zmc2V0KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gd29mZnNldFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmVhZGluZyBwdXJwb3NlXG4gICAgICogUmV0dXJucyB0aGUgcHJldml1b3Mgb2Zmc3NldCBzaXplIGJlZm9yZSBpbmNyZW1lbnRpbmdcbiAgICAgKi9cbiAgICBpbmNyZW1lbnRSZWFkT2Zmc2V0KGFtb3VudDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiByb0FkZChhbW91bnQpXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBIb3cgbWFueSBieXRlcyBhcmUgYXZhaWxhYmxlIHRvIHJlYWQuXG4gICAgICovXG4gICAgcmVtYWluaW5nQnl0ZXMoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB3b2Zmc2V0IC0gcm9mZnNldFxuICAgIH0sXG4gICAgcmVhZEZsb2F0MzIoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB2aWV3LmdldEZsb2F0MzIocm9BZGQoNCkpXG4gICAgfSxcbiAgICByZWFkRmxvYXQ2NCgpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQ2NChyb0FkZCg4KSlcbiAgICB9LFxuICAgIHJlYWRJbnQ4KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRJbnQ4KHJvQWRkKDEpKVxuICAgIH0sXG4gICAgcmVhZEludDE2KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRJbnQxNihyb0FkZCgyKSlcbiAgICB9LFxuICAgIHJlYWRJbnQzMigpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0SW50MzIocm9BZGQoNCkpXG4gICAgfSxcbiAgICByZWFkSW50NjQoKTogYmlnaW50IHtcbiAgICAgIHJldHVybiB2aWV3LmdldEJpZ0ludDY0KHJvQWRkKDgpKVxuICAgIH0sXG4gICAgcmVhZFVpbnQ4KCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRVaW50OChyb0FkZCgxKSlcbiAgICB9LFxuICAgIHJlYWRVaW50MTYoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB2aWV3LmdldFVpbnQxNihyb0FkZCgyKSlcbiAgICB9LFxuICAgIHJlYWRVaW50MzIoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB2aWV3LmdldFVpbnQzMihyb0FkZCg0KSlcbiAgICB9LFxuICAgIHJlYWRVaW50NjQoKTogYmlnaW50IHtcbiAgICAgIHJldHVybiB2aWV3LmdldEJpZ1VpbnQ2NChyb0FkZCg4KSlcbiAgICB9LFxuICAgIHJlYWRCdWZmZXIoKSB7XG4gICAgICBjb25zdCBsZW5ndGggPSB2aWV3LmdldFVpbnQzMihyb0FkZCg0KSlcbiAgICAgIHJldHVybiBidWZmZXIuc3ViYXJyYXkocm9BZGQobGVuZ3RoKSwgcm9BZGQoMCkpXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBXcml0aW5nIHB1cnBvc2VcbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBJbmNyZW1lbnQgb2Zmc2V0XG4gICAgICogQHBhcmFtIGFtb3VudCAtIGhvdyBtYW55IGJ5dGVzXG4gICAgICogQHJldHVybnMgVGhlIG9mZnNldCB3aGVuIHRoaXMgcmVzZXJ2aW5nIHN0YXJ0cy5cbiAgICAgKi9cbiAgICBpbmNyZW1lbnRXcml0ZU9mZnNldChhbW91bnQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gd29BZGQoYW1vdW50KVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyB3cml0ZW4gaW4gdGhlIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBzaXplKCk6IG51bWJlciB7XG4gICAgICByZXR1cm4gd29mZnNldFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGFrZSBjYXJlIHVzaW5nIHRoaXMgZnVuY3Rpb24sIGlmIHlvdSBtb2RpZnkgdGhlIGRhdGEgYWZ0ZXIsIHRoZVxuICAgICAqIHJldHVybmVkIHN1YmFycmF5IHdpbGwgY2hhbmdlIHRvby4gSWYgeW91J2xsIG1vZGlmeSB0aGUgY29udGVudCBvZiB0aGVcbiAgICAgKiBieXRlYnVmZmVyLCBtYXliZSB5b3Ugd2FudCB0byB1c2UgdG9Db3BpZWRCaW5hcnkoKVxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHN1YmFycmF5IGZyb20gMCB0byBvZmZzZXQgYXMgcmVmZXJlbmNlLlxuICAgICAqL1xuICAgIHRvQmluYXJ5KCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5zdWJhcnJheSgwLCB3b2Zmc2V0KVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTYWZlIGNvcGllZCBidWZmZXIgb2YgdGhlIGN1cnJlbnQgZGF0YSBvZiBCeXRlQnVmZmVyXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc3ViYXJyYXkgZnJvbSAwIHRvIG9mZnNldC5cbiAgICAgKi9cbiAgICB0b0NvcGllZEJpbmFyeSgpIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzLnRvQmluYXJ5KCkpXG4gICAgfSxcblxuICAgIHdyaXRlQnVmZmVyKHZhbHVlOiBVaW50OEFycmF5LCB3cml0ZUxlbmd0aDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgIGlmICh3cml0ZUxlbmd0aCkge1xuICAgICAgICB0aGlzLndyaXRlVWludDMyKHZhbHVlLmJ5dGVMZW5ndGgpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG8gPSB3b0FkZCh2YWx1ZS5ieXRlTGVuZ3RoKVxuICAgICAgYnVmZmVyLnNldCh2YWx1ZSwgbylcbiAgICB9LFxuICAgIHdyaXRlRmxvYXQzMih2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBvID0gd29BZGQoNClcbiAgICAgIHZpZXcuc2V0RmxvYXQzMihvLCB2YWx1ZSlcbiAgICB9LFxuICAgIHdyaXRlRmxvYXQ2NCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBvID0gd29BZGQoOClcbiAgICAgIHZpZXcuc2V0RmxvYXQ2NChvLCB2YWx1ZSlcbiAgICB9LFxuICAgIHdyaXRlSW50OCh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBvID0gd29BZGQoMSlcbiAgICAgIHZpZXcuc2V0SW50OChvLCB2YWx1ZSlcbiAgICB9LFxuICAgIHdyaXRlSW50MTYodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgbyA9IHdvQWRkKDIpXG4gICAgICB2aWV3LnNldEludDE2KG8sIHZhbHVlKVxuICAgIH0sXG4gICAgd3JpdGVJbnQzMih2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBvID0gd29BZGQoNClcbiAgICAgIHZpZXcuc2V0SW50MzIobywgdmFsdWUpXG4gICAgfSxcbiAgICB3cml0ZUludDY0KHZhbHVlOiBiaWdpbnQpOiB2b2lkIHtcbiAgICAgIGNvbnN0IG8gPSB3b0FkZCg4KVxuICAgICAgdmlldy5zZXRCaWdJbnQ2NChvLCB2YWx1ZSlcbiAgICB9LFxuICAgIHdyaXRlVWludDgodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgbyA9IHdvQWRkKDEpXG4gICAgICB2aWV3LnNldFVpbnQ4KG8sIHZhbHVlKVxuICAgIH0sXG4gICAgd3JpdGVVaW50MTYodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgY29uc3QgbyA9IHdvQWRkKDIpXG4gICAgICB2aWV3LnNldFVpbnQxNihvLCB2YWx1ZSlcbiAgICB9LFxuICAgIHdyaXRlVWludDMyKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIGNvbnN0IG8gPSB3b0FkZCg0KVxuICAgICAgdmlldy5zZXRVaW50MzIobywgdmFsdWUpXG4gICAgfSxcbiAgICB3cml0ZVVpbnQ2NCh2YWx1ZTogYmlnaW50KTogdm9pZCB7XG4gICAgICBjb25zdCBvID0gd29BZGQoOClcbiAgICAgIHZpZXcuc2V0QmlnVWludDY0KG8sIHZhbHVlKVxuICAgIH0sXG4gICAgLy8gRGF0YXZpZXcgUHJveHlcbiAgICBnZXRGbG9hdDMyKG9mZnNldDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiB2aWV3LmdldEZsb2F0MzIob2Zmc2V0KVxuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NChvZmZzZXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRGbG9hdDY0KG9mZnNldClcbiAgICB9LFxuICAgIGdldEludDgob2Zmc2V0OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0SW50OChvZmZzZXQpXG4gICAgfSxcbiAgICBnZXRJbnQxNihvZmZzZXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRJbnQxNihvZmZzZXQpXG4gICAgfSxcbiAgICBnZXRJbnQzMihvZmZzZXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRJbnQzMihvZmZzZXQpXG4gICAgfSxcbiAgICBnZXRJbnQ2NChvZmZzZXQ6IG51bWJlcik6IGJpZ2ludCB7XG4gICAgICByZXR1cm4gdmlldy5nZXRCaWdJbnQ2NChvZmZzZXQpXG4gICAgfSxcbiAgICBnZXRVaW50OChvZmZzZXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRVaW50OChvZmZzZXQpXG4gICAgfSxcbiAgICBnZXRVaW50MTYob2Zmc2V0OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0VWludDE2KG9mZnNldClcbiAgICB9LFxuICAgIGdldFVpbnQzMihvZmZzZXQ6IG51bWJlcik6IG51bWJlciB7XG4gICAgICByZXR1cm4gdmlldy5nZXRVaW50MzIob2Zmc2V0KVxuICAgIH0sXG4gICAgZ2V0VWludDY0KG9mZnNldDogbnVtYmVyKTogYmlnaW50IHtcbiAgICAgIHJldHVybiB2aWV3LmdldEJpZ1VpbnQ2NChvZmZzZXQpXG4gICAgfSxcbiAgICBzZXRGbG9hdDMyKG9mZnNldDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB2aWV3LnNldEZsb2F0MzIob2Zmc2V0LCB2YWx1ZSlcbiAgICB9LFxuICAgIHNldEZsb2F0NjQob2Zmc2V0OiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHZpZXcuc2V0RmxvYXQ2NChvZmZzZXQsIHZhbHVlKVxuICAgIH0sXG4gICAgc2V0SW50OChvZmZzZXQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgdmlldy5zZXRJbnQ4KG9mZnNldCwgdmFsdWUpXG4gICAgfSxcbiAgICBzZXRJbnQxNihvZmZzZXQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgdmlldy5zZXRJbnQxNihvZmZzZXQsIHZhbHVlKVxuICAgIH0sXG4gICAgc2V0SW50MzIob2Zmc2V0OiBudW1iZXIsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgIHZpZXcuc2V0SW50MzIob2Zmc2V0LCB2YWx1ZSlcbiAgICB9LFxuICAgIHNldEludDY0KG9mZnNldDogbnVtYmVyLCB2YWx1ZTogYmlnaW50KTogdm9pZCB7XG4gICAgICB2aWV3LnNldEJpZ0ludDY0KG9mZnNldCwgdmFsdWUpXG4gICAgfSxcbiAgICBzZXRVaW50OChvZmZzZXQ6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgdmlldy5zZXRVaW50OChvZmZzZXQsIHZhbHVlKVxuICAgIH0sXG4gICAgc2V0VWludDE2KG9mZnNldDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB2aWV3LnNldFVpbnQxNihvZmZzZXQsIHZhbHVlKVxuICAgIH0sXG4gICAgc2V0VWludDMyKG9mZnNldDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICB2aWV3LnNldFVpbnQzMihvZmZzZXQsIHZhbHVlKVxuICAgIH0sXG4gICAgc2V0VWludDY0KG9mZnNldDogbnVtYmVyLCB2YWx1ZTogYmlnaW50KTogdm9pZCB7XG4gICAgICB2aWV3LnNldEJpZ1VpbnQ2NChvZmZzZXQsIHZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgQnl0ZUJ1ZmZlciA9IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUJ5dGVCdWZmZXI+XG4iLCIvKipcbiAqIFRoZSB3aXJlIG1lc3NhZ2UgaXMgdGhlIHRvcC1sZXZlbCBtZXNzYWdlIHRoYXQgY2FuIGJlIHBhY2tlZFxuICogIGluc2lkZSBpdCBjYW4gY29udGFpbiBhIGRhdGEgd2l0aCBhbm90aGVyIHN0cnVjdHVyZSBvciBwcm90b2NvbFxuICpcbiAqIEVhY2ggd2lyZSBtZXNzYWdlIGhhcyB0aHJlZSBwcmltaXRpdmUgcHJvcGVydHkgdGhhdCBpdCdsbCBuZXZlciBjaGFuZ2VcbiAqICAgLS0tPiBsZW5ndGggICAgICAgIHVpbnQzMiAobWVzc2FnZSBzaXplIHVwIHRvIDQsMjk0LDk2NywyOTUpXG4gKiAgIC0tLT4gdmVyc2lvbiAgICAgICB1aW50MzIgKGZvciBub3cganVzdCBhIG51bWJlciB3aGljaCBpcyB6ZXJvKVxuICogICAtLS0+IG1lc3NhZ2UgdHlwZSAgdWludDMyXG4gKiBUaGUgbGVuZ3RoIGluZGljYXRlcyBob3cgbWFueSBieXRlcyBhcmUgYWJvdmUgc2VsZiwgdGhlIHZlcnNpb24gaW5cbiAqIGNvbWJpbmF0aW9uIHdpdGggbWVzc2FnZSB0eXBlIGRlZmluZXMgdGhlIHNldCBvZiBoYW5kbGVycyB0aGF0IHdpbGwgYmVcbiAqIGF2YWlsYWJsZSB0byBwcm9jZXNzIHRoZSBtZXNzYWdlXG4gKlxuICovXG5cbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuL0J5dGVCdWZmZXInXG5cbnR5cGUgVWludDMyID0gbnVtYmVyXG5cbmV4cG9ydCBuYW1lc3BhY2UgV2lyZU1lc3NhZ2Uge1xuICBleHBvcnQgZW51bSBFbnVtIHtcbiAgICBSRVNFUlZFRCA9IDAsXG5cbiAgICAvLyBDb21wb25lbnQgT3BlcmF0aW9uXG4gICAgUFVUX0NPTVBPTkVOVCA9IDEsXG4gICAgREVMRVRFX0NPTVBPTkVOVCA9IDIsXG5cbiAgICBNQVhfTUVTU0FHRV9UWVBFXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGxlbmd0aCAtIFVpbnQzMiB0aGUgbGVuZ3RoIG9mIGFsbCBtZXNzYWdlIChpbmNsdWRpbmcgdGhlIGhlYWRlcilcbiAgICogQHBhcmFtIHR5cGUgLSBkZWZpbmUgdGhlIGZ1bmN0aW9uIHdoaWNoIGhhbmRsZXMgdGhlIGRhdGFcbiAgICovXG4gIGV4cG9ydCB0eXBlIEhlYWRlciA9IHtcbiAgICBsZW5ndGg6IFVpbnQzMlxuICAgIHR5cGU6IFVpbnQzMlxuICB9XG5cbiAgZXhwb3J0IGNvbnN0IEhFQURFUl9MRU5HVEggPSA4XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBpZiB0aGUgbWVzc2FnZSBpbmNvbWluZyBpcyBjb21wbGV0ZWRcbiAgICogQHBhcmFtIGJ1ZiAtIEJ5dGVCdWZmZXJcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZShidWY6IEJ5dGVCdWZmZXIpIHtcbiAgICBjb25zdCByZW0gPSBidWYucmVtYWluaW5nQnl0ZXMoKVxuICAgIGlmIChyZW0gPCBIRUFERVJfTEVOR1RIKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBtZXNzYWdlTGVuZ3RoID0gYnVmLmdldFVpbnQzMihidWYuY3VycmVudFJlYWRPZmZzZXQoKSlcbiAgICBpZiAocmVtIDwgbWVzc2FnZUxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZWFkSGVhZGVyKGJ1ZjogQnl0ZUJ1ZmZlcik6IEhlYWRlciB8IG51bGwge1xuICAgIGlmICghdmFsaWRhdGUoYnVmKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGVuZ3RoOiBidWYucmVhZFVpbnQzMigpLFxuICAgICAgdHlwZTogYnVmLnJlYWRVaW50MzIoKSBhcyBFbnVtXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdpcmVNZXNzYWdlXG4iLCJpbXBvcnQgeyBDb21wb25lbnREZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vZW5naW5lL2NvbXBvbmVudCdcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uLy4uL2VuZ2luZS9lbnRpdHknXG5pbXBvcnQgeyBCeXRlQnVmZmVyIH0gZnJvbSAnLi4vQnl0ZUJ1ZmZlcidcbmltcG9ydCBXaXJlTWVzc2FnZSBmcm9tICcuLi93aXJlTWVzc2FnZSdcblxuZXhwb3J0IG5hbWVzcGFjZSBDb21wb25lbnRPcGVyYXRpb24ge1xuICAvKipcbiAgICogQHBhcmFtIGVudGl0eSAtIFVpbnQzMiBudW1iZXIgb2YgdGhlIGVudGl0eVxuICAgKiBAcGFyYW0gY29tcG9uZW50SWQgLSBVaW50MzIgbnVtYmVyIG9mIGlkXG4gICAqIEBwYXJhbSB0aW1lc3RhbXAgLSBVaW50NjQgTGFtcG9ydCB0aW1lc3RhbXBcbiAgICogQHBhcmFtIGRhdGEgLSBVaW50OFtdIGRhdGEgb2YgY29tcG9uZW50XG4gICAqL1xuICBleHBvcnQgdHlwZSBJUHV0Q29tcG9uZW50ID0ge1xuICAgIGVudGl0eTogRW50aXR5XG4gICAgY29tcG9uZW50SWQ6IG51bWJlclxuICAgIHRpbWVzdGFtcDogbnVtYmVyXG4gICAgZGF0YTogVWludDhBcnJheVxuICB9XG4gIGV4cG9ydCB0eXBlIElEZWxldGVDb21wb25lbnQgPSB7XG4gICAgZW50aXR5OiBFbnRpdHlcbiAgICBjb21wb25lbnRJZDogbnVtYmVyXG4gICAgdGltZXN0YW1wOiBudW1iZXJcbiAgICBkYXRhPzogdW5kZWZpbmVkXG4gIH1cblxuICBleHBvcnQgY29uc3QgTUVTU0FHRV9IRUFERVJfTEVOR1RIID0gMjBcbiAgLyoqXG4gICAqIENhbGwgdGhpcyBmdW5jdGlvbiBmb3IgYW4gb3B0aW1hbCB3cml0aW5nIGRhdGEgcGFzc2luZyB0aGUgQnl0ZUJ1ZmZlclxuICAgKiAgYWxyZWFkeSBhbGxvY2F0ZWRcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiB3cml0ZShcbiAgICB0eXBlOiBXaXJlTWVzc2FnZS5FbnVtLFxuICAgIGVudGl0eTogRW50aXR5LFxuICAgIHRpbWVzdGFtcDogbnVtYmVyLFxuICAgIGNvbXBvbmVudERlZmluaXRpb246IENvbXBvbmVudERlZmluaXRpb24sXG4gICAgYnVmOiBCeXRlQnVmZmVyXG4gICkge1xuICAgIC8vIHJlc2VydmUgdGhlIGJlZ2lubmluZ1xuICAgIGNvbnN0IHN0YXJ0TWVzc2FnZU9mZnNldCA9IGJ1Zi5pbmNyZW1lbnRXcml0ZU9mZnNldChcbiAgICAgIFdpcmVNZXNzYWdlLkhFQURFUl9MRU5HVEggKyBNRVNTQUdFX0hFQURFUl9MRU5HVEhcbiAgICApXG5cbiAgICAvLyB3cml0ZSBib2R5XG4gICAgaWYgKHR5cGUgPT09IFdpcmVNZXNzYWdlLkVudW0uUFVUX0NPTVBPTkVOVCkge1xuICAgICAgY29tcG9uZW50RGVmaW5pdGlvbi53cml0ZVRvQnl0ZUJ1ZmZlcihlbnRpdHksIGJ1ZilcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZUxlbmd0aCA9IGJ1Zi5zaXplKCkgLSBzdGFydE1lc3NhZ2VPZmZzZXRcblxuICAgIC8vIFdyaXRlIFdpcmVNZXNzYWdlIGhlYWRlclxuICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0LCBtZXNzYWdlTGVuZ3RoKVxuICAgIGJ1Zi5zZXRVaW50MzIoc3RhcnRNZXNzYWdlT2Zmc2V0ICsgNCwgdHlwZSlcblxuICAgIC8vIFdyaXRlIENvbXBvbmVudE9wZXJhdGlvbiBoZWFkZXJcbiAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDgsIGVudGl0eSlcbiAgICBidWYuc2V0VWludDMyKHN0YXJ0TWVzc2FnZU9mZnNldCArIDEyLCBjb21wb25lbnREZWZpbml0aW9uLl9pZClcbiAgICBidWYuc2V0VWludDY0KHN0YXJ0TWVzc2FnZU9mZnNldCArIDE2LCBCaWdJbnQodGltZXN0YW1wKSlcbiAgICBidWYuc2V0VWludDMyKFxuICAgICAgc3RhcnRNZXNzYWdlT2Zmc2V0ICsgMjQsXG4gICAgICBtZXNzYWdlTGVuZ3RoIC0gTUVTU0FHRV9IRUFERVJfTEVOR1RIIC0gV2lyZU1lc3NhZ2UuSEVBREVSX0xFTkdUSFxuICAgIClcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByZWFkKFxuICAgIGJ1ZjogQnl0ZUJ1ZmZlclxuICApOiAoV2lyZU1lc3NhZ2UuSGVhZGVyICYgKElQdXRDb21wb25lbnQgfCBJRGVsZXRlQ29tcG9uZW50KSkgfCBudWxsIHtcbiAgICBjb25zdCBoZWFkZXIgPSBXaXJlTWVzc2FnZS5yZWFkSGVhZGVyKGJ1ZilcblxuICAgIGlmICghaGVhZGVyKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGNvbW1vbiA9IHtcbiAgICAgIC4uLmhlYWRlcixcbiAgICAgIGVudGl0eTogYnVmLnJlYWRVaW50MzIoKSBhcyBFbnRpdHksXG4gICAgICBjb21wb25lbnRJZDogYnVmLnJlYWRJbnQzMigpLFxuICAgICAgdGltZXN0YW1wOiBOdW1iZXIoYnVmLnJlYWRVaW50NjQoKSlcbiAgICB9XG5cbiAgICBpZiAoaGVhZGVyLnR5cGUgPT09IFdpcmVNZXNzYWdlLkVudW0uREVMRVRFX0NPTVBPTkVOVCkge1xuICAgICAgcmV0dXJuIGNvbW1vblxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5jb21tb24sXG4gICAgICBkYXRhOiBidWYucmVhZEJ1ZmZlcigpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBjcmR0UHJvdG9jb2wsIE1lc3NhZ2UgYXMgQ3JkdE1lc3NhZ2UgfSBmcm9tICdAZGNsL2NyZHQnXG5cbmltcG9ydCB0eXBlIHsgUHJlRW5naW5lIH0gZnJvbSAnLi4vLi4vZW5naW5lJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vLi4vZW5naW5lL2VudGl0eSdcbmltcG9ydCB7IGNyZWF0ZUJ5dGVCdWZmZXIgfSBmcm9tICcuLi8uLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBDb21wb25lbnRPcGVyYXRpb24gYXMgTWVzc2FnZSB9IGZyb20gJy4uLy4uL3NlcmlhbGl6YXRpb24vY3JkdC9jb21wb25lbnRPcGVyYXRpb24nXG5pbXBvcnQgV2lyZU1lc3NhZ2UgZnJvbSAnLi4vLi4vc2VyaWFsaXphdGlvbi93aXJlTWVzc2FnZSdcbmltcG9ydCB7IFRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0cy90eXBlcydcbmltcG9ydCB7IFJlY2VpdmVNZXNzYWdlLCBUcmFuc3BvcnRNZXNzYWdlIH0gZnJvbSAnLi90eXBlcydcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZHRTY2VuZVN5c3RlbSh7XG4gIGVuZ2luZSxcbiAgdHJhbnNwb3J0c1xufToge1xuICBlbmdpbmU6IFByZUVuZ2luZVxuICB0cmFuc3BvcnRzOiBUcmFuc3BvcnRbXVxufSkge1xuICAvLyBDUkRUIENsaWVudFxuICBjb25zdCBjcmR0Q2xpZW50ID0gY3JkdFByb3RvY29sPFVpbnQ4QXJyYXk+KClcbiAgLy8gTWVzc2FnZXMgdGhhdCB3ZSByZWNlaXZlZCBhdCB0cmFuc3BvcnQub25NZXNzYWdlIHdhaXRpbmcgdG8gYmUgcHJvY2Vzc2VkXG4gIGNvbnN0IHJlY2VpdmVkTWVzc2FnZXM6IFJlY2VpdmVNZXNzYWdlW10gPSBbXVxuICAvLyBNZXNzYWdlcyBhbHJlYWR5IHByb2Nlc3NlZCBieSB0aGUgZW5naW5lIGJ1dCB0aGF0IHdlIG5lZWQgdG8gYnJvYWRjYXN0IHRvIG90aGVyIHRyYW5zcG9ydHMuXG4gIGNvbnN0IHRyYW5zcG9ydE1lc3NhZ2VzOiBUcmFuc3BvcnRNZXNzYWdlW10gPSBbXVxuICAvLyBNYXAgb2YgZW50aXRpZXMgYWxyZWFkeSBwcm9jZXNzZWQgYXQgbGVhc3Qgb25jZVxuXG4gIHRyYW5zcG9ydHMuZm9yRWFjaChcbiAgICAodHJhbnNwb3J0KSA9PiAodHJhbnNwb3J0Lm9ubWVzc2FnZSA9IHBhcnNlQ2h1bmtNZXNzYWdlKHRyYW5zcG9ydC50eXBlKSlcbiAgKVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdHJhbnNwb3J0VHlwZSB0cmFucG9ydCBpZCB0byBpZGVudGl5IG1lc3NhZ2VzXG4gICAqIEByZXR1cm5zIGEgZnVuY3Rpb24gdG8gcHJvY2VzcyByZWNlaXZlZCBtZXNzYWdlc1xuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VDaHVua01lc3NhZ2UodHJhbnNwb3J0VHlwZTogc3RyaW5nKSB7XG4gICAgLyoqXG4gICAgICogUmVjZWl2ZXMgYSBjaHVuayBvZiBiaW5hcnkgbWVzc2FnZXMgYW5kIHN0b3JlcyBhbGwgdGhlIHZhbGlkXG4gICAgICogQ29tcG9uZW50IE9wZXJhdGlvbiBNZXNzYWdlcyBhdCBtZXNzYWdlcyBxdWV1ZVxuICAgICAqIEBwYXJhbSBjaHVua01lc3NhZ2UgQSBjaHVuayBvZiBiaW5hcnkgbWVzc2FnZXNcbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gcGFyc2VDaHVua01lc3NhZ2UoY2h1bmtNZXNzYWdlOiBVaW50OEFycmF5KSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBjcmVhdGVCeXRlQnVmZmVyKHtcbiAgICAgICAgcmVhZGluZzogeyBidWZmZXI6IGNodW5rTWVzc2FnZSwgY3VycmVudE9mZnNldDogMCB9XG4gICAgICB9KVxuXG4gICAgICB3aGlsZSAoV2lyZU1lc3NhZ2UudmFsaWRhdGUoYnVmZmVyKSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBidWZmZXIuY3VycmVudFJlYWRPZmZzZXQoKVxuICAgICAgICBjb25zdCBtZXNzYWdlID0gTWVzc2FnZS5yZWFkKGJ1ZmZlcikhXG5cbiAgICAgICAgY29uc3QgeyB0eXBlLCBlbnRpdHksIGNvbXBvbmVudElkLCBkYXRhLCB0aW1lc3RhbXAgfSA9IG1lc3NhZ2VcbiAgICAgICAgcmVjZWl2ZWRNZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGVudGl0eSxcbiAgICAgICAgICBjb21wb25lbnRJZCxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIHRpbWVzdGFtcCxcbiAgICAgICAgICB0cmFuc3BvcnRUeXBlLFxuICAgICAgICAgIG1lc3NhZ2VCdWZmZXI6IGJ1ZmZlclxuICAgICAgICAgICAgLmJ1ZmZlcigpXG4gICAgICAgICAgICAuc3ViYXJyYXkob2Zmc2V0LCBidWZmZXIuY3VycmVudFJlYWRPZmZzZXQoKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuZCBjbGVhciB0aGUgbWVzc2FlcyBxdWV1ZVxuICAgKiBAcmV0dXJucyBtZXNzYWdlcyByZWNpZXZlZCBieSB0aGUgdHJhbnNwb3J0IHRvIHByb2Nlc3Mgb24gdGhlIG5leHQgdGlja1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZXM8VCA9IHVua25vd24+KHZhbHVlOiBUW10pIHtcbiAgICBjb25zdCBtZXNzYWdlc1RvUHJvY2VzcyA9IEFycmF5LmZyb20odmFsdWUpXG4gICAgdmFsdWUubGVuZ3RoID0gMFxuICAgIHJldHVybiBtZXNzYWdlc1RvUHJvY2Vzc1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZm4gd2lsbCBiZSBjYWxsZWQgb24gZXZlcnkgdGljay5cbiAgICogUHJvY2VzcyBhbGwgdGhlIG1lc3NhZ2VzIHF1ZXVlIHJlY2VpdmVkIGJ5IHRoZSB0cmFuc3BvcnRcbiAgICovXG4gIGZ1bmN0aW9uIHJlY2VpdmVNZXNzYWdlcygpIHtcbiAgICBjb25zdCBtZXNzYWdlc1RvUHJvY2VzcyA9IGdldE1lc3NhZ2VzKHJlY2VpdmVkTWVzc2FnZXMpXG4gICAgZm9yIChjb25zdCB0cmFuc3BvcnQgb2YgdHJhbnNwb3J0cykge1xuICAgICAgY29uc3QgYnVmZmVyID0gY3JlYXRlQnl0ZUJ1ZmZlcigpXG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXNUb1Byb2Nlc3MpIHtcbiAgICAgICAgY29uc3QgeyBkYXRhLCB0aW1lc3RhbXAsIGNvbXBvbmVudElkLCBlbnRpdHksIHR5cGUgfSA9IG1lc3NhZ2VcbiAgICAgICAgY29uc3QgY3JkdE1lc3NhZ2U6IENyZHRNZXNzYWdlPFVpbnQ4QXJyYXk+ID0ge1xuICAgICAgICAgIGtleTE6IGVudGl0eSxcbiAgICAgICAgICBrZXkyOiBjb21wb25lbnRJZCxcbiAgICAgICAgICBkYXRhOiBkYXRhIHx8IG51bGwsXG4gICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXBcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBlbmdpbmUuZ2V0Q29tcG9uZW50KGNvbXBvbmVudElkKVxuICAgICAgICBjb25zdCBjdXJyZW50ID0gY3JkdENsaWVudC5wcm9jZXNzTWVzc2FnZShjcmR0TWVzc2FnZSlcblxuICAgICAgICAvLyBDUkRUIG91dGRhdGVkIG1lc3NhZ2UuIFJlc2VuZCB0aGlzIG1lc3NhZ2UgdGhyb3VnaCB0aGUgd2lyZVxuICAgICAgICBpZiAoY3JkdE1lc3NhZ2UgIT09IGN1cnJlbnQpIHtcbiAgICAgICAgICBjb25zdCB0eXBlID0gY29tcG9uZW50LmhhcyhlbnRpdHkpXG4gICAgICAgICAgICA/IFdpcmVNZXNzYWdlLkVudW0uUFVUX0NPTVBPTkVOVFxuICAgICAgICAgICAgOiBXaXJlTWVzc2FnZS5FbnVtLkRFTEVURV9DT01QT05FTlRcbiAgICAgICAgICBNZXNzYWdlLndyaXRlKHR5cGUsIGVudGl0eSwgY3VycmVudC50aW1lc3RhbXAsIGNvbXBvbmVudCwgYnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFByb2Nlc3MgQ1JEVCBNZXNzYWdlXG4gICAgICAgICAgaWYgKHR5cGUgPT09IFdpcmVNZXNzYWdlLkVudW0uREVMRVRFX0NPTVBPTkVOVCkge1xuICAgICAgICAgICAgY29tcG9uZW50LmRlbGV0ZUZyb20oZW50aXR5KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICByZWFkaW5nOiB7IGJ1ZmZlcjogbWVzc2FnZS5kYXRhISwgY3VycmVudE9mZnNldDogMCB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiYiA9IGNyZWF0ZUJ5dGVCdWZmZXIob3B0cylcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGVuZ2luZSBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbXBvbmVudC51cHNlcnRGcm9tQmluYXJ5KG1lc3NhZ2UuZW50aXR5LCBiYilcbiAgICAgICAgICAgIGNvbXBvbmVudC5jbGVhckRpcnR5KClcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gQWRkIG1lc3NhZ2UgdG8gdHJhbnNwb3J0IHF1ZXVlIHRvIGJlIHByb2Nlc3NlZCBieSBvdGhlcnMgdHJhbnNwb3J0c1xuICAgICAgICAgIHRyYW5zcG9ydE1lc3NhZ2VzLnB1c2gobWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYnVmZmVyLnNpemUoKSkge1xuICAgICAgICB0cmFuc3BvcnQuc2VuZChidWZmZXIudG9CaW5hcnkoKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZXMgdGhlIGRpcnR5IG1hcCBhbmQgZ2VuZXJhdGVzIGNyZHQgbWVzc2FnZXMgdG8gYmUgc2VuZFxuICAgKiBAcGFyYW0gZGlydHlNYXAgYSBtYXAgb2YgeyBlbnRpdGllczogW2NvbXBvbmVudElkXSB9XG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlcyhkaXJ0eU1hcDogTWFwPEVudGl0eSwgU2V0PG51bWJlcj4+KSB7XG4gICAgLy8gQ1JEVCBNZXNzYWdlcyB3aWxsIGJlIHRoZSBtZXJnZSBiZXR3ZWVuIHRoZSByZWNpZXZlZCB0cmFuc3BvcnQgbWVzc2FnZXMgYW5kIHRoZSBuZXcgY3JkdCBtZXNzYWdlc1xuICAgIGNvbnN0IGNyZHRNZXNzYWdlcyA9IGdldE1lc3NhZ2VzKHRyYW5zcG9ydE1lc3NhZ2VzKVxuICAgIGNvbnN0IGJ1ZmZlciA9IGNyZWF0ZUJ5dGVCdWZmZXIoKVxuXG4gICAgZm9yIChjb25zdCBbZW50aXR5LCBjb21wb25lbnRzSWRdIG9mIGRpcnR5TWFwKSB7XG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudElkIG9mIGNvbXBvbmVudHNJZCkge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBlbmdpbmUuZ2V0Q29tcG9uZW50KGNvbXBvbmVudElkKVxuICAgICAgICBjb25zdCBlbnRpdHlDb21wb25lbnQgPSBjb21wb25lbnQuaGFzKGVudGl0eSlcbiAgICAgICAgICA/IGNvbXBvbmVudC50b0JpbmFyeShlbnRpdHkpLnRvQmluYXJ5KClcbiAgICAgICAgICA6IG51bGxcbiAgICAgICAgY29uc3QgZXZlbnQgPSBjcmR0Q2xpZW50LmNyZWF0ZUV2ZW50KFxuICAgICAgICAgIGVudGl0eSxcbiAgICAgICAgICBjb21wb25lbnRJZCxcbiAgICAgICAgICBlbnRpdHlDb21wb25lbnRcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBvZmZzZXQgPSBidWZmZXIuY3VycmVudFdyaXRlT2Zmc2V0KClcbiAgICAgICAgY29uc3QgdHlwZSA9IGNvbXBvbmVudC5oYXMoZW50aXR5KVxuICAgICAgICAgID8gV2lyZU1lc3NhZ2UuRW51bS5QVVRfQ09NUE9ORU5UXG4gICAgICAgICAgOiBXaXJlTWVzc2FnZS5FbnVtLkRFTEVURV9DT01QT05FTlRcbiAgICAgICAgY29uc3QgdHJhbnNwb3J0TWVzc2FnZTogT21pdDxUcmFuc3BvcnRNZXNzYWdlLCAnbWVzc2FnZUJ1ZmZlcic+ID0ge1xuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgY29tcG9uZW50SWQsXG4gICAgICAgICAgZW50aXR5LFxuICAgICAgICAgIHRpbWVzdGFtcDogZXZlbnQudGltZXN0YW1wXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zcG9ydHMuc29tZSgodCkgPT4gdC5maWx0ZXIodHJhbnNwb3J0TWVzc2FnZSkpKSB7XG4gICAgICAgICAgTWVzc2FnZS53cml0ZSh0eXBlLCBlbnRpdHksIGV2ZW50LnRpbWVzdGFtcCwgY29tcG9uZW50LCBidWZmZXIpXG4gICAgICAgICAgY3JkdE1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgLi4udHJhbnNwb3J0TWVzc2FnZSxcbiAgICAgICAgICAgIG1lc3NhZ2VCdWZmZXI6IGJ1ZmZlclxuICAgICAgICAgICAgICAuYnVmZmVyKClcbiAgICAgICAgICAgICAgLnN1YmFycmF5KG9mZnNldCwgYnVmZmVyLmN1cnJlbnRXcml0ZU9mZnNldCgpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZW5kIG1lc3NhZ2VzIHRvIHRyYW5zcG9ydHNcbiAgICBjb25zdCB0cmFuc3BvcnRCdWZmZXIgPSBjcmVhdGVCeXRlQnVmZmVyKClcbiAgICBmb3IgKGNvbnN0IHRyYW5zcG9ydCBvZiB0cmFuc3BvcnRzKSB7XG4gICAgICB0cmFuc3BvcnRCdWZmZXIucmVzZXRCdWZmZXIoKVxuICAgICAgZm9yIChjb25zdCBtZXNzYWdlIG9mIGNyZHRNZXNzYWdlcykge1xuICAgICAgICBpZiAodHJhbnNwb3J0LmZpbHRlcihtZXNzYWdlKSkge1xuICAgICAgICAgIHRyYW5zcG9ydEJ1ZmZlci53cml0ZUJ1ZmZlcihtZXNzYWdlLm1lc3NhZ2VCdWZmZXIsIGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNwb3J0QnVmZmVyLnNpemUoKSkge1xuICAgICAgICB0cmFuc3BvcnQuc2VuZCh0cmFuc3BvcnRCdWZmZXIudG9CaW5hcnkoKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZU1lc3NhZ2VzLFxuICAgIHJlY2VpdmVNZXNzYWdlc1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnREZWZpbml0aW9uIH0gZnJvbSAnLi9jb21wb25lbnQnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBEZWVwUmVhZG9ubHlNYXA8SywgVj4gPSBSZWFkb25seU1hcDxcbiAgRGVlcFJlYWRvbmx5PEs+LFxuICBEZWVwUmVhZG9ubHk8Vj5cbj5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBEZWVwUmVhZG9ubHlTZXQ8VD4gPSBSZWFkb25seVNldDxEZWVwUmVhZG9ubHk8VD4+XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgRGVlcFJlYWRvbmx5T2JqZWN0PFQ+ID0ge1xuICByZWFkb25seSBbSyBpbiBrZXlvZiBUXTogRGVlcFJlYWRvbmx5PFRbS10+XG59XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgUmVhZG9ubHlQcmltaXRpdmUgPVxuICB8IG51bWJlclxuICB8IHN0cmluZ1xuICB8IG51bWJlcltdXG4gIHwgc3RyaW5nW11cbiAgfCBib29sZWFuXG4gIHwgYm9vbGVhbltdXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBSZWFkb25seUNvbXBvbmVudFNjaGVtYTxcbiAgVCBleHRlbmRzIFtDb21wb25lbnREZWZpbml0aW9uLCAuLi5Db21wb25lbnREZWZpbml0aW9uW11dXG4+ID0ge1xuICBbSyBpbiBrZXlvZiBUXTogVFtLXSBleHRlbmRzIENvbXBvbmVudERlZmluaXRpb25cbiAgICA/IFJldHVyblR5cGU8VFtLXVsnZ2V0J10+XG4gICAgOiBuZXZlclxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgRGVlcFJlYWRvbmx5PFQ+ID0gVCBleHRlbmRzIFJlYWRvbmx5UHJpbWl0aXZlXG4gID8gVFxuICA6IFQgZXh0ZW5kcyBNYXA8aW5mZXIgSywgaW5mZXIgVj5cbiAgPyBEZWVwUmVhZG9ubHlNYXA8SywgVj5cbiAgOiBUIGV4dGVuZHMgU2V0PGluZmVyIE0+XG4gID8gRGVlcFJlYWRvbmx5U2V0PE0+XG4gIDogRGVlcFJlYWRvbmx5T2JqZWN0PFQ+XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwUmVhZG9ubHk8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgdmFsOiBUXG4pOiBEZWVwUmVhZG9ubHk8VD4ge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7IC4uLnZhbCB9KSBhcyBEZWVwUmVhZG9ubHk8VD5cbn1cbiIsImltcG9ydCB0eXBlIHsgSVNjaGVtYSB9IGZyb20gJy4uL3NjaGVtYXMvSVNjaGVtYSdcbmltcG9ydCB7IEJ5dGVCdWZmZXIsIGNyZWF0ZUJ5dGVCdWZmZXIgfSBmcm9tICcuLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2VudGl0eSdcbmltcG9ydCB7IGRlZXBSZWFkb25seSwgRGVlcFJlYWRvbmx5IH0gZnJvbSAnLi9yZWFkb25seSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEVjc1Jlc3VsdDxUIGV4dGVuZHMgSVNjaGVtYT4gPSBUIGV4dGVuZHMgSVNjaGVtYVxuICA/IFJldHVyblR5cGU8VFsnZGVzZXJpYWxpemUnXT5cbiAgOiBuZXZlclxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgQ29tcG9uZW50VHlwZTxUIGV4dGVuZHMgSVNjaGVtYT4gPSBFY3NSZXN1bHQ8VD5cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIENvbXBvbmVudERlZmluaXRpb248XG4gIFQgZXh0ZW5kcyBJU2NoZW1hID0gSVNjaGVtYTxhbnk+LFxuICBDb25zdHJ1Y3RvclR5cGUgPSBDb21wb25lbnRUeXBlPFQ+XG4+ID0ge1xuICBfaWQ6IG51bWJlclxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIGN1cnJlbnQgY29tcG9uZW50XG4gICAqL1xuICBkZWZhdWx0KCk6IERlZXBSZWFkb25seTxDb21wb25lbnRUeXBlPFQ+PlxuXG4gIC8qKlxuICAgKiBHZXQgaWYgdGhlIGVudGl0eSBoYXMgdGhpcyBjb21wb25lbnRcbiAgICogQHBhcmFtIGVudGl0eVxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBteUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICAgKiBUcmFuc2Zvcm0uaGFzKG15RW50aXR5KSAvLyByZXR1cm4gZmFsc2VcbiAgICogVHJhbnNmb3JtLmNyZWF0ZShteUVudGl0eSlcbiAgICogVHJhbnNmb3JtLmhhcyhteUVudGl0eSkgLy8gcmV0dXJuIHRydWVcbiAgICogYGBgXG4gICAqL1xuICBoYXMoZW50aXR5OiBFbnRpdHkpOiBib29sZWFuXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVhZG9ubHkgY29tcG9uZW50IG9mIHRoZSBlbnRpdHkgKHRvIG11dGF0ZSBpdCwgdXNlIGdldE11dGFibGUgaW5zdGVhZCksIHRocm93IGFuIGVycm9yIGlmIHRoZSBlbnRpdHkgZG9lc24ndCBoYXZlIHRoZSBjb21wb25lbnQuXG4gICAqIEBwYXJhbSBlbnRpdHlcbiAgICogQHJldHVyblxuICAgKiBFeGFtcGxlOlxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBteUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICAgKiBUcmFuc2Zvcm0uY3JlYXRlKG15RW50aXR5KVxuICAgKiBjb25zdCB0cmFuc2Zvcm0gPSBUcmFuc2Zvcm0uZ2V0KG15RW50aXR5KSAvLyByZXR1cm4gdHJ1ZVxuICAgKiBsb2codHJhbnNmb3JtLnBvc2l0aW9uLnggPT09IDApIC8vIGxvZyAndHJ1ZSdcbiAgICpcbiAgICogdHJhbnNmb3JtLnBvc2l0aW9uLnkgPSAxMCAvLyBpbGxlZ2FsIHN0YXRlbWVudCwgdG8gbXV0YXRlIHRoZSBjb21wb25lbnQgdXNlIGdldE11dGFibGVcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IG90aGVyRW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gICAqIFRyYW5zZm9ybS5nZXQob3RoZXJFbnRpdHkpIC8vIHRocm93IGFuIGVycm9yISFcbiAgICogYGBgXG4gICAqL1xuICBnZXQoZW50aXR5OiBFbnRpdHkpOiBEZWVwUmVhZG9ubHk8Q29tcG9uZW50VHlwZTxUPj5cblxuICAvKipcbiAgICogR2V0IHRoZSByZWFkb25seSBjb21wb25lbnQgb2YgdGhlIGVudGl0eSAodG8gbXV0YXRlIGl0LCB1c2UgZ2V0TXV0YWJsZSBpbnN0ZWFkKSwgb3IgbnVsbCBpZiB0aGUgZW50aXR5IGRvZXNuJ3QgaGF2ZSB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gZW50aXR5XG4gICAqIEByZXR1cm5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogYGBgdHNcbiAgICogY29uc3Qgb3RoZXJFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgICogbG9nKFRyYW5zZm9ybS5nZXQob3RoZXJFbnRpdHkpID09PSBudWxsKSAvLyBsb2cgJ3RydWUnXG4gICAqIGBgYFxuICAgKi9cbiAgZ2V0T3JOdWxsKGVudGl0eTogRW50aXR5KTogRGVlcFJlYWRvbmx5PENvbXBvbmVudFR5cGU8VD4+IHwgbnVsbFxuXG4gIC8qKlxuICAgKiBBZGQgdGhlIGN1cnJlbnQgY29tcG9uZW50IHRvIGFuIGVudGl0eSwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGNvbXBvbmVudCBhbHJlYWR5IGV4aXN0cyAodXNlIGBjcmVhdGVPclJlcGxhY2VgIGluc3RlYWQpLlxuICAgKiAtIEludGVybmFsIGNvbW1lbnQ6IFRoaXMgbWV0aG9kIGFkZHMgdGhlIDxlbnRpdHksY29tcG9uZW50PiB0byB0aGUgbGlzdCB0byBiZSByZXZpZXdlZCBuZXh0IGZyYW1lXG4gICAqIEBwYXJhbSBlbnRpdHlcbiAgICogQHBhcmFtIHZhbCBUaGUgaW5pdGlhbCB2YWx1ZVxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBteUVudGl0eSA9IGVuZ2luZS5hZGRFbnRpdHkoKVxuICAgKiBUcmFuc2Zvcm0uY3JlYXRlKG15RW50aXR5LCB7IC4uLlRyYW5zZm9ybS5kZWZhdWx0KCksIHBvc2l0aW9uOiB7eDogNCwgeTogMCwgejogNH0gfSkgLy8gb2shXG4gICAqIFRyYW5zZm9ybS5jcmVhdGUobXlFbnRpdHkpIC8vIHRocm93IGFuIGVycm9yLCB0aGUgYFRyYW5zZm9ybWAgY29tcG9uZW50IGFscmVhZHkgZXhpc3RzIGluIGBteUVudGl0eWBcbiAgICogYGBgYFxuICAgKi9cbiAgY3JlYXRlKGVudGl0eTogRW50aXR5LCB2YWw/OiBDb25zdHJ1Y3RvclR5cGUpOiBDb21wb25lbnRUeXBlPFQ+XG4gIC8qKlxuICAgKiBBZGQgdGhlIGN1cnJlbnQgY29tcG9uZW50IHRvIGFuIGVudGl0eSBvciByZXBsYWNlIHRoZSBjb250ZW50IGlmIHRoZSBlbnRpdHkgYWxyZWFkeSBoYXMgdGhlIGNvbXBvbmVudFxuICAgKiAtIEludGVybmFsIGNvbW1lbnQ6IFRoaXMgbWV0aG9kIGFkZHMgdGhlIDxlbnRpdHksY29tcG9uZW50PiB0byB0aGUgbGlzdCB0byBiZSByZXZpZXdlZCBuZXh0IGZyYW1lXG4gICAqIEBwYXJhbSBlbnRpdHlcbiAgICogQHBhcmFtIHZhbCBUaGUgaW5pdGlhbCBvciBuZXcgdmFsdWVcbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogYGBgdHNcbiAgICogY29uc3QgbXlFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgICogVHJhbnNmb3JtLmNyZWF0ZShteUVudGl0eSkgLy8gb2shXG4gICAqIFRyYW5zZm9ybS5jcmVhdGVPclJlcGxhY2UobXlFbnRpdHksIHsgLi4uVHJhbnNmb3JtLmRlZmF1bHQoKSwgcG9zaXRpb246IHt4OiA0LCB5OiAwLCB6OiA0fSB9KSAvLyBvayFcbiAgICogYGBgYFxuICAgKi9cbiAgY3JlYXRlT3JSZXBsYWNlKGVudGl0eTogRW50aXR5LCB2YWw/OiBDb21wb25lbnRUeXBlPFQ+KTogQ29tcG9uZW50VHlwZTxUPlxuXG4gIC8qKlxuICAgKiBEZWxldGUgdGhlIGN1cnJlbnQgY29tcG9uZW50IHRvIGFuIGVudGl0eSwgcmV0dXJuIG51bGwgaWYgdGhlIGVudGl0eSBkb2Vzbid0IGhhdmUgdGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICAgKiAtIEludGVybmFsIGNvbW1lbnQ6IFRoaXMgbWV0aG9kIGFkZHMgdGhlIDxlbnRpdHksY29tcG9uZW50PiB0byB0aGUgbGlzdCB0byBiZSByZXZpZXdlZCBuZXh0IGZyYW1lXG4gICAqIEBwYXJhbSBlbnRpdHlcbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogYGBgdHNcbiAgICogY29uc3QgbXlFbnRpdHkgPSBlbmdpbmUuYWRkRW50aXR5KClcbiAgICogVHJhbnNmb3JtLmNyZWF0ZShteUVudGl0eSkgLy8gb2shXG4gICAqIFRyYW5zZm9ybS5kZWxldGVGcm9tKG15RW50aXR5KSAvLyByZXR1cm4gdGhlIGNvbXBvbmVudFxuICAgKiBUcmFuc2Zvcm0uZGVsZXRlRnJvbShteUVudGl0eSkgLy8gcmV0dXJuIG51bGxcbiAgICogYGBgYFxuICAgKi9cbiAgZGVsZXRlRnJvbShlbnRpdHk6IEVudGl0eSk6IENvbXBvbmVudFR5cGU8VD4gfCBudWxsXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbXV0YWJsZSBjb21wb25lbnQgb2YgdGhlIGVudGl0eSwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGVudGl0eSBkb2Vzbid0IGhhdmUgdGhlIGNvbXBvbmVudC5cbiAgICogLSBJbnRlcm5hbCBjb21tZW50OiBUaGlzIG1ldGhvZCBhZGRzIHRoZSA8ZW50aXR5LGNvbXBvbmVudD4gdG8gdGhlIGxpc3QgdG8gYmUgcmV2aWV3ZWQgbmV4dCBmcmFtZVxuICAgKiBAcGFyYW0gZW50aXR5XG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IG15RW50aXR5ID0gZW5naW5lLmFkZEVudGl0eSgpXG4gICAqIFRyYW5zZm9ybS5jcmVhdGUobXlFbnRpdHkpXG4gICAqIFRyYW5zZm9ybS5nZXRNdXRhYmxlKG15RW50aXR5KS5wb3NpdGlvbiA9IHt4OiA0LCB5OiAwLCB6OiA0fVxuICAgKiBgYGBgXG4gICAqL1xuICBnZXRNdXRhYmxlKGVudGl0eTogRW50aXR5KTogQ29tcG9uZW50VHlwZTxUPlxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG11dGFibGUgY29tcG9uZW50IG9mIHRoZSBlbnRpdHksIHJldHVybiBudWxsIGlmIHRoZSBlbnRpdHkgZG9lc24ndCBoYXZlIHRoZSBjb21wb25lbnQuXG4gICAqIC0gSW50ZXJuYWwgY29tbWVudDogVGhpcyBtZXRob2QgYWRkcyB0aGUgPGVudGl0eSxjb21wb25lbnQ+IHRvIHRoZSBsaXN0IHRvIGJlIHJldmlld2VkIG5leHQgZnJhbWVcbiAgICogQHBhcmFtIGVudGl0eVxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKiBgYGB0c1xuICAgKiBjb25zdCB0cmFuc2Zvcm0gPSBUcmFuc2Zvcm0uZ2V0TXV0YWJsZU9yTnVsbChteUVudGl0eSlcbiAgICogaWYgKHRyYW5zZm9ybSkge1xuICAgKiAgIHRyYW5zZm9ybS5wb3NpdGlvbiA9IHt4OiA0LCB5OiAwLCB6OiA0fVxuICAgKiB9XG4gICAqIGBgYGBcbiAgICovXG4gIGdldE11dGFibGVPck51bGwoZW50aXR5OiBFbnRpdHkpOiBDb21wb25lbnRUeXBlPFQ+IHwgbnVsbFxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIGVudGl0eVxuICAgKiBAcGFyYW0gZGF0YVxuICAgKi9cbiAgdXBzZXJ0RnJvbUJpbmFyeShlbnRpdHk6IEVudGl0eSwgZGF0YTogQnl0ZUJ1ZmZlcik6IENvbXBvbmVudFR5cGU8VD4gfCBudWxsXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIGVudGl0eVxuICAgKiBAcGFyYW0gZGF0YVxuICAgKi9cbiAgdXBkYXRlRnJvbUJpbmFyeShlbnRpdHk6IEVudGl0eSwgZGF0YTogQnl0ZUJ1ZmZlcik6IENvbXBvbmVudFR5cGU8VD4gfCBudWxsXG5cbiAgLy8gYWxsb2NhdGVzIGEgYnVmZmVyIGFuZCByZXR1cm5zIG5ldyBidWZmZXJcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0gZW50aXR5XG4gICAqL1xuICB0b0JpbmFyeShlbnRpdHk6IEVudGl0eSk6IEJ5dGVCdWZmZXJcblxuICAvLyB3cml0ZXMgdG8gYSBwcmUtYWxsb2NhdGVkIGJ1ZmZlclxuICB3cml0ZVRvQnl0ZUJ1ZmZlcihlbnRpdHk6IEVudGl0eSwgYnVmZmVyOiBCeXRlQnVmZmVyKTogdm9pZFxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWwgVXNlIGVuZ2luZS5nZXRFbnRpdGllc1dpdGgoQ29tcG9uZW50KSBpbnN0ZWFkLlxuICAgKiBHZXQgdGhlIGl0ZXJhdG9yIHRvIGV2ZXJ5IGVudGl0eSBoYXMgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgaXRlcmF0b3IoKTogSXRlcmFibGU8W0VudGl0eSwgQ29tcG9uZW50VHlwZTxUPl0+XG5cbiAgLy8gRGlydHlcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGlydHlJdGVyYXRvcigpOiBJdGVyYWJsZTxFbnRpdHk+XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNsZWFyRGlydHkoKTogdm9pZFxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBpc0RpcnR5KGVudGl0eTogRW50aXR5KTogYm9vbGVhblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50PFxuICBUIGV4dGVuZHMgSVNjaGVtYSxcbiAgQ29uc3RydWN0b3JUeXBlID0gQ29tcG9uZW50VHlwZTxUPlxuPihcbiAgY29tcG9uZW50SWQ6IG51bWJlcixcbiAgc3BlYzogVCxcbiAgY29uc3RydWN0b3JEZWZhdWx0PzogQ29uc3RydWN0b3JUeXBlXG4gIC8vIG1ldGE6IHsgc3luY0ZsYWdzIH1cbik6IENvbXBvbmVudERlZmluaXRpb248VCwgQ29uc3RydWN0b3JUeXBlPiB7XG4gIGNvbnN0IGRhdGEgPSBuZXcgTWFwPEVudGl0eSwgQ29tcG9uZW50VHlwZTxUPj4oKVxuICBjb25zdCBkaXJ0eUl0ZXJhdG9yID0gbmV3IFNldDxFbnRpdHk+KClcblxuICBjb25zdCBkZWZhdWx0QnVmZmVyID0gY3JlYXRlQnl0ZUJ1ZmZlcigpXG4gIGlmIChjb25zdHJ1Y3RvckRlZmF1bHQpIHtcbiAgICBzcGVjLnNlcmlhbGl6ZShjb25zdHJ1Y3RvckRlZmF1bHQsIGRlZmF1bHRCdWZmZXIpXG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUoKSB7XG4gICAgaWYgKGNvbnN0cnVjdG9yRGVmYXVsdCkge1xuICAgICAgcmV0dXJuIHNwZWMuZGVzZXJpYWxpemUoXG4gICAgICAgIGNyZWF0ZUJ5dGVCdWZmZXIoe1xuICAgICAgICAgIHdyaXRpbmc6IHtcbiAgICAgICAgICAgIGJ1ZmZlcjogZGVmYXVsdEJ1ZmZlci5idWZmZXIoKSxcbiAgICAgICAgICAgIGN1cnJlbnRPZmZzZXQ6IGRlZmF1bHRCdWZmZXIuY3VycmVudFdyaXRlT2Zmc2V0KClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzcGVjLmNyZWF0ZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZmlsbFZhbHVlKHZhbHVlOiBDb25zdHJ1Y3RvclR5cGUpIHtcbiAgICByZXR1cm4geyAuLi5nZXREZWZhdWx0VmFsdWUoKSwgLi4udmFsdWUgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBfaWQ6IGNvbXBvbmVudElkLFxuICAgIGRlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXREZWZhdWx0VmFsdWUoKVxuICAgIH0sXG4gICAgaXNEaXJ0eTogZnVuY3Rpb24gKGVudGl0eTogRW50aXR5KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZGlydHlJdGVyYXRvci5oYXMoZW50aXR5KVxuICAgIH0sXG4gICAgaGFzOiBmdW5jdGlvbiAoZW50aXR5OiBFbnRpdHkpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBkYXRhLmhhcyhlbnRpdHkpXG4gICAgfSxcbiAgICBkZWxldGVGcm9tOiBmdW5jdGlvbiAoZW50aXR5OiBFbnRpdHkpOiBDb21wb25lbnRUeXBlPFQ+IHwgbnVsbCB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBkYXRhLmdldChlbnRpdHkpXG4gICAgICBkYXRhLmRlbGV0ZShlbnRpdHkpXG4gICAgICBkaXJ0eUl0ZXJhdG9yLmFkZChlbnRpdHkpXG4gICAgICByZXR1cm4gY29tcG9uZW50IHx8IG51bGxcbiAgICB9LFxuICAgIGdldE9yTnVsbDogZnVuY3Rpb24gKFxuICAgICAgZW50aXR5OiBFbnRpdHlcbiAgICApOiBEZWVwUmVhZG9ubHk8Q29tcG9uZW50VHlwZTxUPj4gfCBudWxsIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRhdGEuZ2V0KGVudGl0eSlcbiAgICAgIHJldHVybiBjb21wb25lbnQgPyBkZWVwUmVhZG9ubHkoY29tcG9uZW50KSA6IG51bGxcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gKGVudGl0eTogRW50aXR5KTogRGVlcFJlYWRvbmx5PENvbXBvbmVudFR5cGU8VD4+IHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRhdGEuZ2V0KGVudGl0eSlcbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgW2dldEZyb21dIENvbXBvbmVudCAke2NvbXBvbmVudElkfSBmb3IgJHtlbnRpdHl9IG5vdCBmb3VuZGBcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZXBSZWFkb25seShjb21wb25lbnQpXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIChcbiAgICAgIGVudGl0eTogRW50aXR5LFxuICAgICAgdmFsdWU/OiBDb25zdHJ1Y3RvclR5cGVcbiAgICApOiBDb21wb25lbnRUeXBlPFQ+IHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRhdGEuZ2V0KGVudGl0eSlcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBbY3JlYXRlXSBDb21wb25lbnQgJHtjb21wb25lbnRJZH0gZm9yICR7ZW50aXR5fSBhbHJlYWR5IGV4aXN0c2BcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgY29uc3QgdXNlZFZhbHVlID1cbiAgICAgICAgdmFsdWUgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRWYWx1ZSgpIDogcHJlZmlsbFZhbHVlKHZhbHVlKVxuICAgICAgZGF0YS5zZXQoZW50aXR5LCB1c2VkVmFsdWUpXG4gICAgICBkaXJ0eUl0ZXJhdG9yLmFkZChlbnRpdHkpXG4gICAgICByZXR1cm4gdXNlZFZhbHVlXG4gICAgfSxcbiAgICBjcmVhdGVPclJlcGxhY2U6IGZ1bmN0aW9uIChcbiAgICAgIGVudGl0eTogRW50aXR5LFxuICAgICAgdmFsdWU/OiBDb25zdHJ1Y3RvclR5cGVcbiAgICApOiBDb21wb25lbnRUeXBlPFQ+IHtcbiAgICAgIGNvbnN0IHVzZWRWYWx1ZSA9XG4gICAgICAgIHZhbHVlID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0VmFsdWUoKSA6IHByZWZpbGxWYWx1ZSh2YWx1ZSlcbiAgICAgIGRhdGEuc2V0KGVudGl0eSwgdXNlZFZhbHVlISlcbiAgICAgIGRpcnR5SXRlcmF0b3IuYWRkKGVudGl0eSlcbiAgICAgIHJldHVybiB1c2VkVmFsdWUhXG4gICAgfSxcbiAgICBnZXRNdXRhYmxlT3JOdWxsOiBmdW5jdGlvbiAoZW50aXR5OiBFbnRpdHkpOiBDb21wb25lbnRUeXBlPFQ+IHwgbnVsbCB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBkYXRhLmdldChlbnRpdHkpXG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgICAgZGlydHlJdGVyYXRvci5hZGQoZW50aXR5KVxuICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgIH0sXG4gICAgZ2V0TXV0YWJsZTogZnVuY3Rpb24gKGVudGl0eTogRW50aXR5KTogQ29tcG9uZW50VHlwZTxUPiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmdldE11dGFibGVPck51bGwoZW50aXR5KVxuICAgICAgaWYgKGNvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFttdXRhYmxlXSBDb21wb25lbnQgJHtjb21wb25lbnRJZH0gZm9yICR7ZW50aXR5fSBub3QgZm91bmRgXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICAgIGl0ZXJhdG9yOiBmdW5jdGlvbiogKCk6IEl0ZXJhYmxlPFtFbnRpdHksIENvbXBvbmVudFR5cGU8VD5dPiB7XG4gICAgICBmb3IgKGNvbnN0IFtlbnRpdHksIGNvbXBvbmVudF0gb2YgZGF0YSkge1xuICAgICAgICB5aWVsZCBbZW50aXR5LCBjb21wb25lbnRdXG4gICAgICB9XG4gICAgfSxcbiAgICBkaXJ0eUl0ZXJhdG9yOiBmdW5jdGlvbiogKCk6IEl0ZXJhYmxlPEVudGl0eT4ge1xuICAgICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZGlydHlJdGVyYXRvcikge1xuICAgICAgICB5aWVsZCBlbnRpdHlcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvQmluYXJ5KGVudGl0eTogRW50aXR5KTogQnl0ZUJ1ZmZlciB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBkYXRhLmdldChlbnRpdHkpXG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFt0b0JpbmFyeV0gQ29tcG9uZW50ICR7Y29tcG9uZW50SWR9IGZvciAke2VudGl0eX0gbm90IGZvdW5kYFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdyaXRlQnVmZmVyID0gY3JlYXRlQnl0ZUJ1ZmZlcigpXG4gICAgICBzcGVjLnNlcmlhbGl6ZShjb21wb25lbnQsIHdyaXRlQnVmZmVyKVxuICAgICAgcmV0dXJuIHdyaXRlQnVmZmVyXG4gICAgfSxcbiAgICB3cml0ZVRvQnl0ZUJ1ZmZlcihlbnRpdHk6IEVudGl0eSwgYnVmZmVyOiBCeXRlQnVmZmVyKTogdm9pZCB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBkYXRhLmdldChlbnRpdHkpXG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFt3cml0ZVRvQnl0ZUJ1ZmZlcl0gQ29tcG9uZW50ICR7Y29tcG9uZW50SWR9IGZvciAke2VudGl0eX0gbm90IGZvdW5kYFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHNwZWMuc2VyaWFsaXplKGNvbXBvbmVudCwgYnVmZmVyKVxuICAgIH0sXG4gICAgdXBkYXRlRnJvbUJpbmFyeShcbiAgICAgIGVudGl0eTogRW50aXR5LFxuICAgICAgYnVmZmVyOiBCeXRlQnVmZmVyXG4gICAgKTogQ29tcG9uZW50VHlwZTxUPiB8IG51bGwge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gZGF0YS5nZXQoZW50aXR5KVxuICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBbdXBkYXRlRnJvbUJpbmFyeV0gQ29tcG9uZW50ICR7Y29tcG9uZW50SWR9IGZvciAke2VudGl0eX0gbm90IGZvdW5kYFxuICAgICAgICApXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy51cHNlcnRGcm9tQmluYXJ5KGVudGl0eSwgYnVmZmVyKVxuICAgIH0sXG4gICAgdXBzZXJ0RnJvbUJpbmFyeShcbiAgICAgIGVudGl0eTogRW50aXR5LFxuICAgICAgYnVmZmVyOiBCeXRlQnVmZmVyXG4gICAgKTogQ29tcG9uZW50VHlwZTxUPiB8IG51bGwge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBzcGVjLmRlc2VyaWFsaXplKGJ1ZmZlcilcbiAgICAgIGRhdGEuc2V0KGVudGl0eSwgbmV3VmFsdWUpXG4gICAgICBkaXJ0eUl0ZXJhdG9yLmFkZChlbnRpdHkpXG4gICAgICByZXR1cm4gbmV3VmFsdWVcbiAgICB9LFxuICAgIGNsZWFyRGlydHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRpcnR5SXRlcmF0b3IuY2xlYXIoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi9lbnRpdHknXG5cbmV4cG9ydCBuYW1lc3BhY2UgRW50aXR5VXRpbHMge1xuICAvKipcbiAgICogUmFuZ2UgaXMgdGhlIGZpcnN0IGVsZW1lbnQgYW5kIHRoZSBsYXN0IHBvc3NpYmxlIGVsZW1lbnQsIHRoZXkgYm90aCBhcmUgaW5jbHVkZWQgaW4gdGhlIGludGVydmFsLlxuICAgKiBbc3RhcnQsIGVuZF1cbiAgICovXG4gIGV4cG9ydCB0eXBlIEVudGl0eVJhbmdlID0gcmVhZG9ubHkgW251bWJlciwgbnVtYmVyXVxuXG4gIGV4cG9ydCBjb25zdCBNQVhfRU5USVRJRVMgPSAweGZmZmZmZmZmXG4gIGV4cG9ydCBjb25zdCBEWU5BTUlDX0VOVElUSUVTX1NUQVJUX0FUID0gMTAwZTNcbiAgZXhwb3J0IGNvbnN0IFJFU0VSVkVEX1NUQVRJQ19FTlRJVElFUyA9IDUxMlxuXG4gIGV4cG9ydCBjb25zdCBSRVNFUlZFRF9FTlRJVElFU19SQU5HRTogRW50aXR5UmFuZ2UgPSBbXG4gICAgMCxcbiAgICBSRVNFUlZFRF9TVEFUSUNfRU5USVRJRVMgLSAxXG4gIF1cblxuICBleHBvcnQgY29uc3QgU1RBVElDX0VOVElUSUVTX1JBTkdFOiBFbnRpdHlSYW5nZSA9IFtcbiAgICBSRVNFUlZFRF9TVEFUSUNfRU5USVRJRVMsXG4gICAgRFlOQU1JQ19FTlRJVElFU19TVEFSVF9BVCAtIDFcbiAgXVxuXG4gIGV4cG9ydCBjb25zdCBEWU5BTUlDX0VOVElUSUVTX1JBTkdFOiBFbnRpdHlSYW5nZSA9IFtcbiAgICBEWU5BTUlDX0VOVElUSUVTX1NUQVJUX0FULFxuICAgIE1BWF9FTlRJVElFU1xuICBdXG5cbiAgZnVuY3Rpb24gaXNJblJhbmdlKGVudGl0eTogRW50aXR5LCByYW5nZTogRW50aXR5UmFuZ2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZW50aXR5ID49IHJhbmdlWzBdICYmIGVudGl0eSA8PSByYW5nZVsxXVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzRHluYW1pY0VudGl0eShlbnRpdHk6IEVudGl0eSkge1xuICAgIHJldHVybiBpc0luUmFuZ2UoZW50aXR5LCBEWU5BTUlDX0VOVElUSUVTX1JBTkdFKVxuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzU3RhdGljRW50aXR5KGVudGl0eTogRW50aXR5KSB7XG4gICAgcmV0dXJuIGlzSW5SYW5nZShlbnRpdHksIFNUQVRJQ19FTlRJVElFU19SQU5HRSlcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1Jlc2VydmVkRW50aXR5KGVudGl0eTogRW50aXR5KSB7XG4gICAgcmV0dXJuIGlzSW5SYW5nZShlbnRpdHksIFJFU0VSVkVEX0VOVElUSUVTX1JBTkdFKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEVudGl0eVV0aWxzXG4iLCJpbXBvcnQgeyBFbnRpdHlVdGlscyB9IGZyb20gJy4vZW50aXR5LXV0aWxzJ1xuXG5kZWNsYXJlIGNvbnN0IGVudGl0eVN5bWJvbDogdW5pcXVlIHN5bWJvbFxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEVudGl0eSA9IG51bWJlciAmIHsgW2VudGl0eVN5bWJvbF06IHRydWUgfVxuXG5leHBvcnQgZnVuY3Rpb24gRW50aXR5Q29udGFpbmVyKCkge1xuICBjb25zdCBzdGF0aWNFbnRpdHkgPSBFbnRpdHkoRW50aXR5VXRpbHMuU1RBVElDX0VOVElUSUVTX1JBTkdFKVxuICBjb25zdCBkeW5hbWljRW50aXR5ID0gRW50aXR5KEVudGl0eVV0aWxzLkRZTkFNSUNfRU5USVRJRVNfUkFOR0UpXG4gIHJldHVybiB7XG4gICAgZ2VuZXJhdGVFbnRpdHkoZHluYW1pYzogYm9vbGVhbiA9IGZhbHNlKTogRW50aXR5IHtcbiAgICAgIGlmIChkeW5hbWljKSB7XG4gICAgICAgIHJldHVybiBkeW5hbWljRW50aXR5LmdlbmVyYXRlRW50aXR5KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNFbnRpdHkuZ2VuZXJhdGVFbnRpdHkoKVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlRW50aXR5KGVudGl0eTogRW50aXR5KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzdGF0aWNFbnRpdHkucmVtb3ZlRW50aXR5KGVudGl0eSkgfHwgZHluYW1pY0VudGl0eS5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgICAgKVxuICAgIH0sXG4gICAgaXNFbnRpdHlFeGlzdHMoZW50aXR5OiBFbnRpdHkpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIEVudGl0eVV0aWxzLmlzUmVzZXJ2ZWRFbnRpdHkoZW50aXR5KSB8fFxuICAgICAgICBzdGF0aWNFbnRpdHkuZ2V0RXhpc3RpbmdFbnRpdGllcygpLmhhcyhlbnRpdHkpIHx8XG4gICAgICAgIGR5bmFtaWNFbnRpdHkuZ2V0RXhpc3RpbmdFbnRpdGllcygpLmhhcyhlbnRpdHkpXG4gICAgICApXG4gICAgfSxcbiAgICBnZXRFeGlzdGluZ0VudGl0aWVzKCk6IFNldDxFbnRpdHk+IHtcbiAgICAgIHJldHVybiBuZXcgU2V0KFtcbiAgICAgICAgLi4uc3RhdGljRW50aXR5LmdldEV4aXN0aW5nRW50aXRpZXMoKSxcbiAgICAgICAgLi4uZHluYW1pY0VudGl0eS5nZXRFeGlzdGluZ0VudGl0aWVzKClcbiAgICAgIF0pXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEVudGl0eShyYW5nZTogRW50aXR5VXRpbHMuRW50aXR5UmFuZ2UpIHtcbiAgZnVuY3Rpb24gY3JlYXRlRW50aXR5KGVudGl0eTogbnVtYmVyKTogRW50aXR5IHtcbiAgICByZXR1cm4gZW50aXR5IGFzIEVudGl0eVxuICB9XG5cbiAgbGV0IGVudGl0eUNvdW50ZXIgPSByYW5nZVswXVxuICBjb25zdCB1c2VkRW50aXRpZXM6IFNldDxFbnRpdHk+ID0gbmV3IFNldCgpXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVFbnRpdHkoKTogRW50aXR5IHtcbiAgICBpZiAoZW50aXR5Q291bnRlciA+PSByYW5nZVsxXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSXQgZmFpbHMgdHJ5aW5nIHRvIGdlbmVyYXRlIGFuIGVudGl0eSBvdXQgb2YgcmFuZ2UgWyR7cmFuZ2VbMF19LCAke3JhbmdlWzFdfV0uYFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGVudGl0eSA9IGNyZWF0ZUVudGl0eShlbnRpdHlDb3VudGVyKVxuICAgIGVudGl0eUNvdW50ZXIrK1xuXG4gICAgdXNlZEVudGl0aWVzLmFkZChlbnRpdHkpXG4gICAgcmV0dXJuIGVudGl0eVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRW50aXR5KGVudGl0eTogRW50aXR5KSB7XG4gICAgcmV0dXJuIHVzZWRFbnRpdGllcy5kZWxldGUoZW50aXR5KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRFeGlzdGluZ0VudGl0aWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodXNlZEVudGl0aWVzKVxuICAgIH0sXG4gICAgZ2VuZXJhdGVFbnRpdHksXG4gICAgcmVtb3ZlRW50aXR5XG4gIH1cbn1cbiIsIi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBVcGRhdGUgPSAoZHQ6IG51bWJlcikgPT4gdm9pZFxuXG5leHBvcnQgY29uc3QgU1lTVEVNU19SRUdVTEFSX1BSSU9SSVRZID0gMTAwZTNcblxudHlwZSBTeXN0ZW1JdGVtID0ge1xuICBmbjogVXBkYXRlXG4gIHByaW9yaXR5OiBudW1iZXJcbiAgbmFtZT86IHN0cmluZ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3lzdGVtQ29udGFpbmVyKCkge1xuICBjb25zdCBzeXN0ZW1zOiBTeXN0ZW1JdGVtW10gPSBbXVxuXG4gIGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgc3lzdGVtcy5zb3J0KChhLCBiKSA9PiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZChmbjogVXBkYXRlLCBwcmlvcml0eTogbnVtYmVyLCBuYW1lPzogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHN5c3RlbXMuZmluZCgoaXRlbSkgPT4gaXRlbS5mbiA9PT0gZm4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N5c3RlbSBhbHJlYWR5IGFkZGVkJylcbiAgICB9IGVsc2UgaWYgKG5hbWUgJiYgc3lzdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N5c3RlbSBuYW1lIGFscmVhZHkgdXNlZCcpXG4gICAgfVxuXG4gICAgc3lzdGVtcy5wdXNoKHtcbiAgICAgIGZuLFxuICAgICAgcHJpb3JpdHksXG4gICAgICBuYW1lXG4gICAgfSlcbiAgICBzb3J0KClcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZShzZWxlY3Rvcjogc3RyaW5nIHwgVXBkYXRlKSB7XG4gICAgbGV0IGluZGV4ID0gLTFcblxuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpbmRleCA9IHN5c3RlbXMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLm5hbWUgPT09IHNlbGVjdG9yKVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IHN5c3RlbXMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLmZuID09PSBzZWxlY3RvcilcbiAgICB9XG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBzeXN0ZW1zLnNwbGljZShpbmRleCwgMSlcbiAgICBzb3J0KClcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGQsXG4gICAgcmVtb3ZlLFxuICAgIGdldFN5c3RlbXMoKSB7XG4gICAgICByZXR1cm4gc3lzdGVtc1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgZGVmaW5lU2RrQ29tcG9uZW50cyB9IGZyb20gJy4uL2NvbXBvbmVudHMnXG5pbXBvcnQgeyBTY2hlbWFzIH0gZnJvbSAnLi4vc2NoZW1hcydcbmltcG9ydCB7IElTY2hlbWEgfSBmcm9tICcuLi9zY2hlbWFzL0lTY2hlbWEnXG5pbXBvcnQgeyBSZXN1bHQsIFNwZWMgfSBmcm9tICcuLi9zY2hlbWFzL01hcCdcbmltcG9ydCB7IEJ5dGVCdWZmZXIgfSBmcm9tICcuLi9zZXJpYWxpemF0aW9uL0J5dGVCdWZmZXInXG5pbXBvcnQgeyBjcmR0U2NlbmVTeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW1zL2NyZHQnXG5pbXBvcnQge1xuICBDb21wb25lbnREZWZpbml0aW9uLFxuICBDb21wb25lbnRUeXBlLFxuICBkZWZpbmVDb21wb25lbnQgYXMgZGVmQ29tcG9uZW50XG59IGZyb20gJy4vY29tcG9uZW50J1xuaW1wb3J0IHsgRW50aXR5LCBFbnRpdHlDb250YWluZXIgfSBmcm9tICcuL2VudGl0eSdcbmltcG9ydCB7IFN5c3RlbUNvbnRhaW5lciwgU1lTVEVNU19SRUdVTEFSX1BSSU9SSVRZLCBVcGRhdGUgfSBmcm9tICcuL3N5c3RlbXMnXG5pbXBvcnQgdHlwZSB7IElFbmdpbmVQYXJhbXMgfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHsgSUVuZ2luZSB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBSZWFkb25seUNvbXBvbmVudFNjaGVtYSB9IGZyb20gJy4vcmVhZG9ubHknXG5cbmV4cG9ydCAqIGZyb20gJy4vcmVhZG9ubHknXG5leHBvcnQgKiBmcm9tICcuL3R5cGVzJ1xuZXhwb3J0IHsgQ29tcG9uZW50VHlwZSwgRW50aXR5LCBCeXRlQnVmZmVyLCBDb21wb25lbnREZWZpbml0aW9uIH1cblxuZnVuY3Rpb24gcHJlRW5naW5lKCkge1xuICBjb25zdCBlbnRpdHlDb250YWluZXIgPSBFbnRpdHlDb250YWluZXIoKVxuICBjb25zdCBjb21wb25lbnRzRGVmaW5pdGlvbiA9IG5ldyBNYXA8bnVtYmVyLCBDb21wb25lbnREZWZpbml0aW9uPGFueT4+KClcbiAgLy8gVE9ETzogZmluZCBhIHdheSB0byBtYWtlIHRoaXMgd29yay5cbiAgLy8gTWF5YmUgYSBwcm94eS9jYWxsYmFjayB0byBiZSB1cC10by1kYXRlXG4gIGNvbnN0IGVudGl0aWVzQ29tcG9uZW50ID0gbmV3IE1hcDxcbiAgICBudW1iZXIsXG4gICAgU2V0PENvbXBvbmVudERlZmluaXRpb248YW55PlsnX2lkJ10+XG4gID4oKVxuICBjb25zdCBzeXN0ZW1zID0gU3lzdGVtQ29udGFpbmVyKClcblxuICBmdW5jdGlvbiBhZGRTeXN0ZW0oXG4gICAgZm46IFVwZGF0ZSxcbiAgICBwcmlvcml0eTogbnVtYmVyID0gU1lTVEVNU19SRUdVTEFSX1BSSU9SSVRZLFxuICAgIG5hbWU/OiBzdHJpbmdcbiAgKSB7XG4gICAgc3lzdGVtcy5hZGQoZm4sIHByaW9yaXR5LCBuYW1lKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlU3lzdGVtKHNlbGVjdG9yOiBzdHJpbmcgfCBVcGRhdGUpIHtcbiAgICByZXR1cm4gc3lzdGVtcy5yZW1vdmUoc2VsZWN0b3IpXG4gIH1cblxuICBmdW5jdGlvbiBhZGRFbnRpdHkoZHluYW1pYzogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgLy8gZW50aXRpZXNDb21wbm9uZW50LnNldChlbnRpdHksIG5ldyBTZXQoKSlcbiAgICBjb25zdCBlbnRpdHkgPSBlbnRpdHlDb250YWluZXIuZ2VuZXJhdGVFbnRpdHkoZHluYW1pYylcbiAgICByZXR1cm4gZW50aXR5XG4gIH1cblxuICBmdW5jdGlvbiBhZGREeW5hbWljRW50aXR5KCkge1xuICAgIHJldHVybiBhZGRFbnRpdHkodHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUVudGl0eShlbnRpdHk6IEVudGl0eSkge1xuICAgIGZvciAoY29uc3QgWywgY29tcG9uZW50XSBvZiBjb21wb25lbnRzRGVmaW5pdGlvbikge1xuICAgICAgaWYgKGNvbXBvbmVudC5oYXMoZW50aXR5KSkge1xuICAgICAgICBjb21wb25lbnQuZGVsZXRlRnJvbShlbnRpdHkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudGl0eUNvbnRhaW5lci5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50RnJvbVNjaGVtYTxcbiAgICBUIGV4dGVuZHMgSVNjaGVtYSxcbiAgICBDb25zdHJ1Y3RvclR5cGUgPSBDb21wb25lbnRUeXBlPFQ+XG4gID4oXG4gICAgc3BlYzogVCxcbiAgICBjb21wb25lbnRJZDogbnVtYmVyLFxuICAgIGNvbnN0cnVjdG9yRGVmYXVsdD86IENvbnN0cnVjdG9yVHlwZVxuICApOiBDb21wb25lbnREZWZpbml0aW9uPFQsIENvbnN0cnVjdG9yVHlwZT4ge1xuICAgIGlmIChjb21wb25lbnRzRGVmaW5pdGlvbi5nZXQoY29tcG9uZW50SWQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCAke2NvbXBvbmVudElkfSBhbHJlYWR5IGRlY2xhcmVkYClcbiAgICB9XG4gICAgY29uc3QgbmV3Q29tcG9uZW50ID0gZGVmQ29tcG9uZW50PFQsIENvbnN0cnVjdG9yVHlwZT4oXG4gICAgICBjb21wb25lbnRJZCxcbiAgICAgIHNwZWMsXG4gICAgICBjb25zdHJ1Y3RvckRlZmF1bHRcbiAgICApXG4gICAgY29tcG9uZW50c0RlZmluaXRpb24uc2V0KGNvbXBvbmVudElkLCBuZXdDb21wb25lbnQpXG4gICAgcmV0dXJuIG5ld0NvbXBvbmVudFxuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50PFxuICAgIFQgZXh0ZW5kcyBTcGVjLFxuICAgIENvbnN0cnVjdG9yVHlwZSA9IFBhcnRpYWw8UmVzdWx0PFQ+PlxuICA+KFxuICAgIHNwZWM6IFQsXG4gICAgY29tcG9uZW50SWQ6IG51bWJlcixcbiAgICBjb25zdHJ1Y3RvckRlZmF1bHQ/OiBDb25zdHJ1Y3RvclR5cGVcbiAgKTogQ29tcG9uZW50RGVmaW5pdGlvbjxJU2NoZW1hPFJlc3VsdDxUPj4sIENvbnN0cnVjdG9yVHlwZT4ge1xuICAgIHJldHVybiBkZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hKFxuICAgICAgU2NoZW1hcy5NYXAoc3BlYyksXG4gICAgICBjb21wb25lbnRJZCxcbiAgICAgIGNvbnN0cnVjdG9yRGVmYXVsdFxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbXBvbmVudDxUIGV4dGVuZHMgSVNjaGVtYT4oXG4gICAgY29tcG9uZW50SWQ6IG51bWJlclxuICApOiBDb21wb25lbnREZWZpbml0aW9uPFQ+IHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRzRGVmaW5pdGlvbi5nZXQoY29tcG9uZW50SWQpXG4gICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NvbXBvbmVudCBub3QgZm91bmQuIFlvdSBuZWVkIHRvIGRlY2xhcmUgdGhlIGNvbXBvbmVudHMgYXQgdGhlIGJlZ2lubmlnIG9mIHRoZSBlbmdpbmUgZGVjbGFyYXRpb24nXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnRcbiAgfVxuXG4gIGZ1bmN0aW9uKiBnZXRFbnRpdGllc1dpdGg8XG4gICAgVCBleHRlbmRzIFtDb21wb25lbnREZWZpbml0aW9uLCAuLi5Db21wb25lbnREZWZpbml0aW9uW11dXG4gID4oLi4uY29tcG9uZW50czogVCk6IEl0ZXJhYmxlPFtFbnRpdHksIC4uLlJlYWRvbmx5Q29tcG9uZW50U2NoZW1hPFQ+XT4ge1xuICAgIGZvciAoY29uc3QgW2VudGl0eSwgLi4uZ3JvdXBDb21wXSBvZiBnZXRDb21wb25lbnREZWZHcm91cCguLi5jb21wb25lbnRzKSkge1xuICAgICAgeWllbGQgW2VudGl0eSwgLi4uZ3JvdXBDb21wLm1hcCgoYykgPT4gYy5nZXQoZW50aXR5KSldIGFzIFtcbiAgICAgICAgRW50aXR5LFxuICAgICAgICAuLi5SZWFkb25seUNvbXBvbmVudFNjaGVtYTxUPlxuICAgICAgXVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uKiBnZXRDb21wb25lbnREZWZHcm91cDxUIGV4dGVuZHMgQ29tcG9uZW50RGVmaW5pdGlvbltdPihcbiAgICAuLi5hcmdzOiBUXG4gICk6IEl0ZXJhYmxlPFtFbnRpdHksIC4uLlRdPiB7XG4gICAgY29uc3QgW2ZpcnN0Q29tcG9uZW50RGVmLCAuLi5jb21wb25lbnREZWZpbml0aW9uc10gPSBhcmdzXG4gICAgZm9yIChjb25zdCBbZW50aXR5XSBvZiBmaXJzdENvbXBvbmVudERlZi5pdGVyYXRvcigpKSB7XG4gICAgICBsZXQgbWF0Y2hlcyA9IHRydWVcbiAgICAgIGZvciAoY29uc3QgY29tcG9uZW50RGVmIG9mIGNvbXBvbmVudERlZmluaXRpb25zKSB7XG4gICAgICAgIGlmICghY29tcG9uZW50RGVmLmhhcyhlbnRpdHkpKSB7XG4gICAgICAgICAgbWF0Y2hlcyA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICB5aWVsZCBbZW50aXR5LCAuLi5hcmdzXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFN5c3RlbXMoKSB7XG4gICAgcmV0dXJuIHN5c3RlbXMuZ2V0U3lzdGVtcygpXG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVDb21wb25lbnREZWZpbml0aW9uKGNvbXBvbmVudElkOiBudW1iZXIpIHtcbiAgICBjb21wb25lbnRzRGVmaW5pdGlvbi5kZWxldGUoY29tcG9uZW50SWQpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVudGl0aWVzQ29tcG9uZW50LFxuICAgIGNvbXBvbmVudHNEZWZpbml0aW9uLFxuICAgIGFkZEVudGl0eSxcbiAgICBhZGREeW5hbWljRW50aXR5LFxuICAgIHJlbW92ZUVudGl0eSxcbiAgICBhZGRTeXN0ZW0sXG4gICAgZ2V0U3lzdGVtcyxcbiAgICByZW1vdmVTeXN0ZW0sXG4gICAgZGVmaW5lQ29tcG9uZW50LFxuICAgIGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWEsXG4gICAgZ2V0RW50aXRpZXNXaXRoLFxuICAgIGdldENvbXBvbmVudCxcbiAgICByZW1vdmVDb21wb25lbnREZWZpbml0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFByZUVuZ2luZSA9IFJldHVyblR5cGU8dHlwZW9mIHByZUVuZ2luZT5cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBFbmdpbmUoeyB0cmFuc3BvcnRzIH06IElFbmdpbmVQYXJhbXMgPSB7fSk6IElFbmdpbmUge1xuICBjb25zdCBlbmdpbmUgPSBwcmVFbmdpbmUoKVxuICBjb25zdCBjcmR0U3lzdGVtID0gY3JkdFNjZW5lU3lzdGVtKHsgZW5naW5lLCB0cmFuc3BvcnRzOiB0cmFuc3BvcnRzIHx8IFtdIH0pXG4gIGNvbnN0IGJhc2VDb21wb25lbnRzID0gZGVmaW5lU2RrQ29tcG9uZW50cyhlbmdpbmUpXG5cbiAgZnVuY3Rpb24gdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICBjcmR0U3lzdGVtLnJlY2VpdmVNZXNzYWdlcygpXG5cbiAgICBmb3IgKGNvbnN0IHN5c3RlbSBvZiBlbmdpbmUuZ2V0U3lzdGVtcygpKSB7XG4gICAgICBzeXN0ZW0uZm4oZHQpXG4gICAgfVxuXG4gICAgLy8gU2VsZWN0ZWQgY29tcG9uZW50cyB0aGF0IG9ubHkgZXhpc3Qgb25lIGZyYW1lXG4gICAgLy8gIHRoZW4sIHRoZXkgYXJlIGRlbGV0ZWQgYnV0IHRoZWlyIGNyZHQgc3RhdGUga2VlcHNcbiAgICBjb25zdCByZW1vdmVTZWxlY3RlZENvbXBvbmVudHMgPSBbXG4gICAgICBiYXNlQ29tcG9uZW50cy5PblBvaW50ZXJEb3duUmVzdWx0LFxuICAgICAgYmFzZUNvbXBvbmVudHMuT25Qb2ludGVyVXBSZXN1bHRcbiAgICBdXG4gICAgY29uc3QgZXhjbHVkZUNvbXBvbmVudElkcyA9IHJlbW92ZVNlbGVjdGVkQ29tcG9uZW50cy5tYXAoKGl0ZW0pID0+IGl0ZW0uX2lkKVxuICAgIGZvciAoY29uc3QgY29tcG9uZW50RGVmIG9mIHJlbW92ZVNlbGVjdGVkQ29tcG9uZW50cykge1xuICAgICAgZm9yIChjb25zdCBbZW50aXR5XSBvZiBlbmdpbmUuZ2V0RW50aXRpZXNXaXRoKGNvbXBvbmVudERlZikpIHtcbiAgICAgICAgY29tcG9uZW50RGVmLmRlbGV0ZUZyb20oZW50aXR5KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IFBlcmYgdGlwXG4gICAgLy8gU2hvdWxkIHdlIGFkZCBzb21lIGRpcnR5SXRlcmF0b3JTZXQgYXQgZW5naW5lIGxldmVsIHNvIHdlIGRvbnQgaGF2ZVxuICAgIC8vIHRvIGl0ZXJhdGUgYWxsIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbnMgdG8gZ2V0IHRoZSBkaXJ0eSBvbmVzID9cbiAgICBjb25zdCBkaXJ0eVNldCA9IG5ldyBNYXA8RW50aXR5LCBTZXQ8bnVtYmVyPj4oKVxuICAgIGZvciAoY29uc3QgW2NvbXBvbmVudElkLCBkZWZpbml0aW9uXSBvZiBlbmdpbmUuY29tcG9uZW50c0RlZmluaXRpb24pIHtcbiAgICAgIGlmIChleGNsdWRlQ29tcG9uZW50SWRzLmluY2x1ZGVzKGNvbXBvbmVudElkKSkgY29udGludWVcblxuICAgICAgZm9yIChjb25zdCBlbnRpdHkgb2YgZGVmaW5pdGlvbi5kaXJ0eUl0ZXJhdG9yKCkpIHtcbiAgICAgICAgaWYgKCFkaXJ0eVNldC5oYXMoZW50aXR5KSkge1xuICAgICAgICAgIGRpcnR5U2V0LnNldChlbnRpdHksIG5ldyBTZXQoKSlcbiAgICAgICAgfVxuICAgICAgICBkaXJ0eVNldC5nZXQoZW50aXR5KSEuYWRkKGNvbXBvbmVudElkKVxuICAgICAgfVxuICAgIH1cbiAgICBjcmR0U3lzdGVtLmNyZWF0ZU1lc3NhZ2VzKGRpcnR5U2V0KVxuXG4gICAgZm9yIChjb25zdCBbX2NvbXBvbmVudElkLCBkZWZpbml0aW9uXSBvZiBlbmdpbmUuY29tcG9uZW50c0RlZmluaXRpb24pIHtcbiAgICAgIGRlZmluaXRpb24uY2xlYXJEaXJ0eSgpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRFbnRpdHk6IGVuZ2luZS5hZGRFbnRpdHksXG4gICAgYWRkRHluYW1pY0VudGl0eTogZW5naW5lLmFkZER5bmFtaWNFbnRpdHksXG4gICAgcmVtb3ZlRW50aXR5OiBlbmdpbmUucmVtb3ZlRW50aXR5LFxuICAgIGFkZFN5c3RlbTogZW5naW5lLmFkZFN5c3RlbSxcbiAgICByZW1vdmVTeXN0ZW06IGVuZ2luZS5yZW1vdmVTeXN0ZW0sXG4gICAgZGVmaW5lQ29tcG9uZW50OiBlbmdpbmUuZGVmaW5lQ29tcG9uZW50LFxuICAgIGRlZmluZUNvbXBvbmVudEZyb21TY2hlbWE6IGVuZ2luZS5kZWZpbmVDb21wb25lbnRGcm9tU2NoZW1hLFxuICAgIGdldEVudGl0aWVzV2l0aDogZW5naW5lLmdldEVudGl0aWVzV2l0aCxcbiAgICBnZXRDb21wb25lbnQ6IGVuZ2luZS5nZXRDb21wb25lbnQsXG4gICAgcmVtb3ZlQ29tcG9uZW50RGVmaW5pdGlvbjogZW5naW5lLnJlbW92ZUNvbXBvbmVudERlZmluaXRpb24sXG4gICAgdXBkYXRlLFxuICAgIGJhc2VDb21wb25lbnRzXG4gIH1cbn1cbiIsIi8qKiBAcHVibGljICovXG5leHBvcnQgZW51bSBFQ1NDb21wb25lbnRJRHMge1xuXHRUcmFuc2Zvcm0gPSAxLFxuXHRBbmltYXRvciA9IDEwNDIsXG5cdEF1ZGlvU291cmNlID0gMTAyMCxcblx0QXZhdGFyQXR0YWNoID0gMTA3Myxcblx0QXZhdGFyTW9kaWZpZXJBcmVhID0gMTA3MCxcblx0QXZhdGFyU2hhcGUgPSAxMDgwLFxuXHRCaWxsYm9hcmQgPSAxMDkwLFxuXHRCb3hTaGFwZSA9IDEwMTMsXG5cdENhbWVyYU1vZGUgPSAxMDcyLFxuXHRDYW1lcmFNb2RlQXJlYSA9IDEwNzEsXG5cdEN5bGluZGVyU2hhcGUgPSAxMDE2LFxuXHRHTFRGU2hhcGUgPSAxMDQxLFxuXHRNYXRlcmlhbCA9IDEwMTcsXG5cdE1lc2hSZW5kZXJlciA9IDEwMTgsXG5cdE5GVFNoYXBlID0gMTA0MCxcblx0T25Qb2ludGVyRG93biA9IDEwNjAsXG5cdE9uUG9pbnRlckRvd25SZXN1bHQgPSAxMDY2LFxuXHRPblBvaW50ZXJVcCA9IDEwNjEsXG5cdE9uUG9pbnRlclVwUmVzdWx0ID0gMTA2NSxcblx0UGxhbmVTaGFwZSA9IDEwMTQsXG5cdFBvaW50ZXJMb2NrID0gMTA3NCxcblx0U3BoZXJlU2hhcGUgPSAxMDE1LFxuXHRUZXh0U2hhcGUgPSAxMDMwLFxuXHRVaVRleHQgPSAxMDUyLFxuXHRWaXNpYmlsaXR5Q29tcG9uZW50ID0gMTA4MSxcbn1cbiIsImltcG9ydCB7IFRyYW5zcG9ydE1lc3NhZ2UgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IFRyYW5zcG9ydCB9IGZyb20gJy4vdHlwZXMnXG5pbXBvcnQgeyBFQ1NDb21wb25lbnRJRHMgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL2dlbmVyYXRlZC9pZHMuZ2VuJ1xuXG5jb25zdCBjb21wb25lbnRJZHMgPSBPYmplY3QudmFsdWVzKEVDU0NvbXBvbmVudElEcylcbiAgLmZpbHRlcigoYSkgPT4gdHlwZW9mIGEgPT09ICdudW1iZXInKVxuICAubWFwKE51bWJlcilcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyVHJhbnNwb3J0KCk6IFRyYW5zcG9ydCB7XG4gIGlmICh0eXBlb2YgZGNsID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFRPRE86IHJlcGxhY2Ugd2l0aCBuZXcgcnBjXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0Nhbm5vdCBjcmVhdGUgY3JlYXRlUmVuZGVyZXJUcmFuc3BvcnQgd2l0aG91dCBnbG9iYWwgZGNsIG9iamVjdCdcbiAgICApXG4gIH1cblxuICBjb25zdCB0eXBlID0gJ3JlbmRlcmVyJ1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgc2VuZChtZXNzYWdlOiBVaW50OEFycmF5KTogdm9pZCB7XG4gICAgICAvLyBUT0RPOiByZXBsYWNlIHdpdGggbmV3IHJwY1xuICAgICAgZGNsXG4gICAgICAgIC5jYWxsUnBjKCdAZGVjZW50cmFsYW5kL0V4cGVyaW1lbnRhbEFQSScsICdzZW5kVG9SZW5kZXJlcicsIFtcbiAgICAgICAgICB7IGRhdGE6IG5ldyBVaW50OEFycmF5KG1lc3NhZ2UpIH1cbiAgICAgICAgXSlcbiAgICAgICAgLmNhdGNoKGRjbC5lcnJvcilcbiAgICB9LFxuICAgIGZpbHRlcihtZXNzYWdlOiBUcmFuc3BvcnRNZXNzYWdlKTogYm9vbGVhbiB7XG4gICAgICAvLyBFY2hvIG1lc3NhZ2UsIGlnbm9yZSB0aGVtXG4gICAgICBpZiAobWVzc2FnZS50cmFuc3BvcnRUeXBlID09PSB0eXBlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IHNlbmQgcmVuZGVyZXIgY29tcG9uZW50cyAoUHJvdG8gR2VuZXJhdGVkKVxuICAgICAgaWYgKCFjb21wb25lbnRJZHMuaW5jbHVkZXMobWVzc2FnZS5jb21wb25lbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhIW1lc3NhZ2VcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFRyYW5zcG9ydE1lc3NhZ2UgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IFRyYW5zcG9ydCB9IGZyb20gJy4vdHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXR3b3JrVHJhbnNwb3J0KCk6IFRyYW5zcG9ydCB7XG4gIC8vIGNvbnN0IHJwYyA9IG5ldyBScGNUcmFuc3BvcnQoKVxuICBmdW5jdGlvbiBzZW5kKC4uLl9hcmdzOiBhbnlbXSkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdOZXR3b3JrTWVzc2FnZSBTZW50OiAnLCAuLi5hcmdzKVxuICB9XG5cbiAgY29uc3QgdHlwZSA9ICduZXR3b3JrLXRyYW5zcG9ydCdcbiAgcmV0dXJuIHtcbiAgICBzZW5kLFxuICAgIHR5cGUsXG4gICAgZmlsdGVyKG1lc3NhZ2U6IFRyYW5zcG9ydE1lc3NhZ2UpOiBib29sZWFuIHtcbiAgICAgIC8vIEVjaG8gbWVzc2FnZSwgaWdub3JlIHRoZW1cbiAgICAgIGlmIChtZXNzYWdlLnRyYW5zcG9ydFR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIC8vIFRPRE86IFN0YXRpYyBlbnRpdGllcyAmIE5ldHdvcmsgY29tcG9uZW50c1xuXG4gICAgICByZXR1cm4gISFtZXNzYWdlIC8vIHZhbGlkQ29tcG9uZW50cy5pbmNsdWRlcyhjb21wb25lbnRJZClcbiAgICB9XG4gIH1cbn1cbiIsIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQGRjbC9wb3NpeFwiIC8+XG5cbi8qKlxuICogQGFscGhhICogVGhpcyBmaWxlIGluaXRpYWxpemF0aW9uIGlzIGFuIGFscGhhIG9uZS4gVGhpcyBpcyBiYXNlZCBvbiB0aGUgb2xkLWVjc1xuICogaW5pdCBhbmQgaXQnbGwgYmUgY2hhbmdpbmcuXG4gKi9cblxuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnLi4vZW5naW5lJ1xuaW1wb3J0IHsgY3JlYXRlUmVuZGVyZXJUcmFuc3BvcnQgfSBmcm9tICcuLi9zeXN0ZW1zL2NyZHQvdHJhbnNwb3J0cy9yZW5kZXJlclRyYW5zcG9ydCdcbmltcG9ydCB7IGNyZWF0ZU5ldHdvcmtUcmFuc3BvcnQgfSBmcm9tICcuLi9zeXN0ZW1zL2NyZHQvdHJhbnNwb3J0cy9uZXR3b3JrVHJhbnNwb3J0J1xuXG5jb25zdCByZW5kZXJlclRyYW5zcG9ydCA9IGNyZWF0ZVJlbmRlcmVyVHJhbnNwb3J0KClcbmV4cG9ydCBjb25zdCBlbmdpbmUgPSBFbmdpbmUoe1xuICB0cmFuc3BvcnRzOiBbcmVuZGVyZXJUcmFuc3BvcnQsIGNyZWF0ZU5ldHdvcmtUcmFuc3BvcnQoKV1cbn0pXG5cbmlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICBkY2wubG9hZE1vZHVsZSgnQGRlY2VudHJhbGFuZC9FeHBlcmltZW50YWxBUEknLCB7fSkuY2F0Y2goZGNsLmVycm9yKVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHB1bGxSZW5kZXJlck1lc3NhZ2VzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZGNsLmNhbGxScGMoXG4gICAgICAnQGRlY2VudHJhbGFuZC9FeHBlcmltZW50YWxBUEknLFxuICAgICAgJ21lc3NhZ2VGcm9tUmVuZGVyZXInLFxuICAgICAgW11cbiAgICApXG5cbiAgICBpZiAocmVzcG9uc2UuZGF0YT8ubGVuZ3RoKSB7XG4gICAgICBpZiAocmVuZGVyZXJUcmFuc3BvcnQub25tZXNzYWdlKSB7XG4gICAgICAgIGZvciAoY29uc3QgYnl0ZUFycmF5IG9mIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICByZW5kZXJlclRyYW5zcG9ydC5vbm1lc3NhZ2UoYnl0ZUFycmF5KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGNsLm9uVXBkYXRlKChkdDogbnVtYmVyKSA9PiB7XG4gICAgcHVsbFJlbmRlcmVyTWVzc2FnZXMoKVxuICAgICAgLmNhdGNoKGRjbC5lcnJvcilcbiAgICAgIC5maW5hbGx5KCgpID0+IGVuZ2luZS51cGRhdGUoZHQpKVxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgbG9nID0gZGNsLmxvZ1xuZXhwb3J0IGNvbnN0IGVycm9yID0gZGNsLmVycm9yXG4iLCJpbXBvcnQgeyBlbmdpbmUgfSBmcm9tICcuLi8uLi9ydW50aW1lL2luaXRpYWxpemF0aW9uJ1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFRyYW5zZm9ybSA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5UcmFuc2Zvcm1cbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgQW5pbWF0b3IgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQW5pbWF0b3Jcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgQXVkaW9Tb3VyY2UgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQXVkaW9Tb3VyY2Vcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgQXZhdGFyQXR0YWNoID0gZW5naW5lLmJhc2VDb21wb25lbnRzLkF2YXRhckF0dGFjaFxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBBdmF0YXJNb2RpZmllckFyZWEgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQXZhdGFyTW9kaWZpZXJBcmVhXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IEF2YXRhclNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLkF2YXRhclNoYXBlXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IEJpbGxib2FyZCA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5CaWxsYm9hcmRcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgQm94U2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQm94U2hhcGVcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgQ2FtZXJhTW9kZSA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5DYW1lcmFNb2RlXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IENhbWVyYU1vZGVBcmVhID0gZW5naW5lLmJhc2VDb21wb25lbnRzLkNhbWVyYU1vZGVBcmVhXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IEN5bGluZGVyU2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQ3lsaW5kZXJTaGFwZVxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBHTFRGU2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuR0xURlNoYXBlXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IE1hdGVyaWFsID0gZW5naW5lLmJhc2VDb21wb25lbnRzLk1hdGVyaWFsXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IE1lc2hSZW5kZXJlciA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5NZXNoUmVuZGVyZXJcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgTkZUU2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuTkZUU2hhcGVcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgT25Qb2ludGVyRG93biA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5PblBvaW50ZXJEb3duXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IE9uUG9pbnRlckRvd25SZXN1bHQgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuT25Qb2ludGVyRG93blJlc3VsdFxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBPblBvaW50ZXJVcCA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5PblBvaW50ZXJVcFxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBPblBvaW50ZXJVcFJlc3VsdCA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5PblBvaW50ZXJVcFJlc3VsdFxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBQbGFuZVNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlBsYW5lU2hhcGVcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgUG9pbnRlckxvY2sgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuUG9pbnRlckxvY2tcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgU3BoZXJlU2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuU3BoZXJlU2hhcGVcbi8qKiBAcHVibGljICovXG5leHBvcnQgY29uc3QgVGV4dFNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlRleHRTaGFwZVxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBjb25zdCBVaVRleHQgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuVWlUZXh0XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGNvbnN0IFZpc2liaWxpdHlDb21wb25lbnQgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuVmlzaWJpbGl0eUNvbXBvbmVudFxuIiwiaW1wb3J0IHsgZW5naW5lIH0gZnJvbSAnLi4vLi4vcnVudGltZS9pbml0aWFsaXphdGlvbidcbi8qKiBAcHVibGljICovXG5leHBvcnQgbmFtZXNwYWNlIENvbXBvbmVudHMge1xuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgVHJhbnNmb3JtID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlRyYW5zZm9ybVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgQW5pbWF0b3IgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQW5pbWF0b3Jcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IEF1ZGlvU291cmNlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLkF1ZGlvU291cmNlXG5cdC8qKiBAcHVibGljICovXG5cdGV4cG9ydCBjb25zdCBBdmF0YXJBdHRhY2ggPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQXZhdGFyQXR0YWNoXG5cdC8qKiBAcHVibGljICovXG5cdGV4cG9ydCBjb25zdCBBdmF0YXJNb2RpZmllckFyZWEgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQXZhdGFyTW9kaWZpZXJBcmVhXG5cdC8qKiBAcHVibGljICovXG5cdGV4cG9ydCBjb25zdCBBdmF0YXJTaGFwZSA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5BdmF0YXJTaGFwZVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgQmlsbGJvYXJkID0gZW5naW5lLmJhc2VDb21wb25lbnRzLkJpbGxib2FyZFxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgQm94U2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQm94U2hhcGVcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IENhbWVyYU1vZGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQ2FtZXJhTW9kZVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgQ2FtZXJhTW9kZUFyZWEgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQ2FtZXJhTW9kZUFyZWFcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IEN5bGluZGVyU2hhcGUgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuQ3lsaW5kZXJTaGFwZVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgR0xURlNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLkdMVEZTaGFwZVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgTWF0ZXJpYWwgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuTWF0ZXJpYWxcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IE1lc2hSZW5kZXJlciA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5NZXNoUmVuZGVyZXJcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IE5GVFNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLk5GVFNoYXBlXG5cdC8qKiBAcHVibGljICovXG5cdGV4cG9ydCBjb25zdCBPblBvaW50ZXJEb3duID0gZW5naW5lLmJhc2VDb21wb25lbnRzLk9uUG9pbnRlckRvd25cblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IE9uUG9pbnRlckRvd25SZXN1bHQgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuT25Qb2ludGVyRG93blJlc3VsdFxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgT25Qb2ludGVyVXAgPSBlbmdpbmUuYmFzZUNvbXBvbmVudHMuT25Qb2ludGVyVXBcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IE9uUG9pbnRlclVwUmVzdWx0ID0gZW5naW5lLmJhc2VDb21wb25lbnRzLk9uUG9pbnRlclVwUmVzdWx0XG5cdC8qKiBAcHVibGljICovXG5cdGV4cG9ydCBjb25zdCBQbGFuZVNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlBsYW5lU2hhcGVcblx0LyoqIEBwdWJsaWMgKi9cblx0ZXhwb3J0IGNvbnN0IFBvaW50ZXJMb2NrID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlBvaW50ZXJMb2NrXG5cdC8qKiBAcHVibGljICovXG5cdGV4cG9ydCBjb25zdCBTcGhlcmVTaGFwZSA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5TcGhlcmVTaGFwZVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgVGV4dFNoYXBlID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlRleHRTaGFwZVxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgVWlUZXh0ID0gZW5naW5lLmJhc2VDb21wb25lbnRzLlVpVGV4dFxuXHQvKiogQHB1YmxpYyAqL1xuXHRleHBvcnQgY29uc3QgVmlzaWJpbGl0eUNvbXBvbmVudCA9IGVuZ2luZS5iYXNlQ29tcG9uZW50cy5WaXNpYmlsaXR5Q29tcG9uZW50XG59XG4iXSwibmFtZXMiOlsicmVxdWlyZSQkMCIsInJlcXVpcmUkJDEiLCJyZXF1aXJlJCQyIiwidGhpcyIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDYiLCJyZXF1aXJlJCQ3IiwiZ2xvYmFsIiwiX20wIiwiQ09NUE9ORU5UX0lEIiwiZ2xvYmFsVGhpcyIsIkxvbmciLCJBbmltYXRvclNjaGVtYS5BbmltYXRvclNjaGVtYSIsIkFuaW1hdG9yU2NoZW1hLkNPTVBPTkVOVF9JRCIsIkF1ZGlvU291cmNlU2NoZW1hLkF1ZGlvU291cmNlU2NoZW1hIiwiQXVkaW9Tb3VyY2VTY2hlbWEuQ09NUE9ORU5UX0lEIiwiQXZhdGFyQXR0YWNoU2NoZW1hLkF2YXRhckF0dGFjaFNjaGVtYSIsIkF2YXRhckF0dGFjaFNjaGVtYS5DT01QT05FTlRfSUQiLCJBdmF0YXJNb2RpZmllckFyZWFTY2hlbWEuQXZhdGFyTW9kaWZpZXJBcmVhU2NoZW1hIiwiQXZhdGFyTW9kaWZpZXJBcmVhU2NoZW1hLkNPTVBPTkVOVF9JRCIsIkF2YXRhclNoYXBlU2NoZW1hLkF2YXRhclNoYXBlU2NoZW1hIiwiQXZhdGFyU2hhcGVTY2hlbWEuQ09NUE9ORU5UX0lEIiwiQmlsbGJvYXJkU2NoZW1hLkJpbGxib2FyZFNjaGVtYSIsIkJpbGxib2FyZFNjaGVtYS5DT01QT05FTlRfSUQiLCJCb3hTaGFwZVNjaGVtYS5Cb3hTaGFwZVNjaGVtYSIsIkJveFNoYXBlU2NoZW1hLkNPTVBPTkVOVF9JRCIsIkNhbWVyYU1vZGVTY2hlbWEuQ2FtZXJhTW9kZVNjaGVtYSIsIkNhbWVyYU1vZGVTY2hlbWEuQ09NUE9ORU5UX0lEIiwiQ2FtZXJhTW9kZUFyZWFTY2hlbWEuQ2FtZXJhTW9kZUFyZWFTY2hlbWEiLCJDYW1lcmFNb2RlQXJlYVNjaGVtYS5DT01QT05FTlRfSUQiLCJDeWxpbmRlclNoYXBlU2NoZW1hLkN5bGluZGVyU2hhcGVTY2hlbWEiLCJDeWxpbmRlclNoYXBlU2NoZW1hLkNPTVBPTkVOVF9JRCIsIkdMVEZTaGFwZVNjaGVtYS5HTFRGU2hhcGVTY2hlbWEiLCJHTFRGU2hhcGVTY2hlbWEuQ09NUE9ORU5UX0lEIiwiTWF0ZXJpYWxTY2hlbWEuTWF0ZXJpYWxTY2hlbWEiLCJNYXRlcmlhbFNjaGVtYS5DT01QT05FTlRfSUQiLCJNZXNoUmVuZGVyZXJTY2hlbWEuTWVzaFJlbmRlcmVyU2NoZW1hIiwiTWVzaFJlbmRlcmVyU2NoZW1hLkNPTVBPTkVOVF9JRCIsIk5GVFNoYXBlU2NoZW1hLk5GVFNoYXBlU2NoZW1hIiwiTkZUU2hhcGVTY2hlbWEuQ09NUE9ORU5UX0lEIiwiT25Qb2ludGVyRG93blNjaGVtYS5PblBvaW50ZXJEb3duU2NoZW1hIiwiT25Qb2ludGVyRG93blNjaGVtYS5DT01QT05FTlRfSUQiLCJPblBvaW50ZXJEb3duUmVzdWx0U2NoZW1hLk9uUG9pbnRlckRvd25SZXN1bHRTY2hlbWEiLCJPblBvaW50ZXJEb3duUmVzdWx0U2NoZW1hLkNPTVBPTkVOVF9JRCIsIk9uUG9pbnRlclVwU2NoZW1hLk9uUG9pbnRlclVwU2NoZW1hIiwiT25Qb2ludGVyVXBTY2hlbWEuQ09NUE9ORU5UX0lEIiwiT25Qb2ludGVyVXBSZXN1bHRTY2hlbWEuT25Qb2ludGVyVXBSZXN1bHRTY2hlbWEiLCJPblBvaW50ZXJVcFJlc3VsdFNjaGVtYS5DT01QT05FTlRfSUQiLCJQbGFuZVNoYXBlU2NoZW1hLlBsYW5lU2hhcGVTY2hlbWEiLCJQbGFuZVNoYXBlU2NoZW1hLkNPTVBPTkVOVF9JRCIsIlBvaW50ZXJMb2NrU2NoZW1hLlBvaW50ZXJMb2NrU2NoZW1hIiwiUG9pbnRlckxvY2tTY2hlbWEuQ09NUE9ORU5UX0lEIiwiU3BoZXJlU2hhcGVTY2hlbWEuU3BoZXJlU2hhcGVTY2hlbWEiLCJTcGhlcmVTaGFwZVNjaGVtYS5DT01QT05FTlRfSUQiLCJUZXh0U2hhcGVTY2hlbWEuVGV4dFNoYXBlU2NoZW1hIiwiVGV4dFNoYXBlU2NoZW1hLkNPTVBPTkVOVF9JRCIsIlVpVGV4dFNjaGVtYS5VaVRleHRTY2hlbWEiLCJVaVRleHRTY2hlbWEuQ09NUE9ORU5UX0lEIiwiVmlzaWJpbGl0eUNvbXBvbmVudFNjaGVtYS5WaXNpYmlsaXR5Q29tcG9uZW50U2NoZW1hIiwiVmlzaWJpbGl0eUNvbXBvbmVudFNjaGVtYS5DT01QT05FTlRfSUQiLCJTY2hlbWFzIiwiaUludDY0IiwiV2lyZU1lc3NhZ2UiLCJjcmR0UHJvdG9jb2wiLCJNZXNzYWdlIiwiZGVmQ29tcG9uZW50IiwiZGVmaW5lQ29tcG9uZW50IiwiQ29tcG9uZW50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FDQSxNQUFNLENBQUMsY0FBYyxDQUFBLE9BQUEsRUFBVSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztHQUM5RCxPQUFrQixDQUFBLE9BQUEsR0FBQSxLQUFLLENBQUMsQ0FBQztHQUt6QixDQUFDLFVBQVUsT0FBTyxFQUFFO0NBQ3BCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLE1BQUksU0FBUyxNQUFNO0NBQ25CO0NBQ0E7Q0FDQTtPQUNJLENBQUMsR0FBRyxDQUFDO0NBQ1Q7Q0FDQTtDQUNBO09BQ0ksQ0FBQyxHQUFHLENBQUM7Q0FDVDtDQUNBO0NBQ0E7T0FDSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1dBQ0gsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDdEI7Q0FDTCxNQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0NBQzVCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLE1BQUksU0FBUyxHQUFHLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRTtDQUNuQyxVQUFRLE9BQU87ZUFDSCxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztlQUN4QixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQztlQUN4QixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FB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LENBQUMsRUFBRTtXQUN2QixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUM7V0FDM0IsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDakQ7Q0FDQSxVQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQzVDLFVBQVEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDNUMsVUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztDQUM1QyxVQUFRLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDN0M7Q0FDQSxVQUFRLE9BQU87Q0FDZixjQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtDQUN2RCxjQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtDQUN2RCxjQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtDQUN2RCxXQUFT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QUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ2pFLFVBQVEsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUM1QixVQUFRLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDNUIsVUFBUSxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQzVCLFVBQVEsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUM1QixVQUFRLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDNUIsVUFBUSxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQzVCLFVBQVEsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztDQUNqQyxVQUFRLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7Q0FDakMsVUFBUSxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1dBQ3pCLE1BQU0sSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3JDLFVBQVEsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUM7Q0FDcEMsVUFBUSxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7ZUFDVixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztDQUMxQyxjQUFZLFVBQVUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztDQUNyQyxjQUFZLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO2VBQ2hCLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQztlQUNqQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUM7ZUFDakMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUks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R0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1dBQzdCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDdEMsVUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0NBQy9DLFVBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztDQUMvQyxVQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7Q0FDL0MsVUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzFDO0NBQ0wsTUFBSSxVQUFVLENBQUMseUJBQXlCLEdBQUcseUJBQXlCLENBQUM7Q0FDckU7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLE1BQUksU0FBUyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFO0NBQ3JELFVBQVEsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztDQUMvQjtXQUNRLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDbEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUNsRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FB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O0NBQ0E7T0FDSSxTQUFTLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRTtDQUM3QyxVQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ2pGLFVBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUNsRixVQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ2pGLFVBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RTtDQUNMLE1BQUksVUFBVSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7Q0FDN0MsTUFBSSxTQUFTLFNBQVMsQ0FB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R0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1dBQ3pCO0FBQ1Q7Q0FDQTtVQUNRLE9BQU8sQ0FBQyxhQUFhLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0NBQy9FO1VBQ1EsT0FBTyxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUM7QUFDL0U7Q0FDQSxTQUFRLFNBQVMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRTtjQUNsQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2NBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ2xDLGFBQVksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7V0FDakI7QUFDVDtDQUNBLFNBQVEsU0FBUyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO2NBQ2xDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Y0FDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDbEMsYUFBWSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztXQUNqQjtBQUNUO0NBQ0E7VUFDUSxPQUFPLENBQUMsWUFBWSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztD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QUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDbEMsV0FBUyxNQUFNLElBQUksRUFBRSxHQUFHLElBQUksRUFBRTtlQUNsQixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQztlQUN2QyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUMxQyxNQUFNLElBQUksQ0FBQyxFQUFFLEdBQUcsTUFBTSxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sTUFBTSxNQUFNLEVBQUU7Q0FDdEcsY0FBWSxFQUFFLEdBQUcsT0FBTyxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7ZUFDckQsRUFBRSxDQUFDLENBQUM7ZUFDSixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEdBQUcsQ0FBQztDQUNuRCxjQUFZLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztDQUNuRCxjQUFZLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztlQUN2QyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEdBQUcsQ0FBQztDQUNuRCxXQUFTLE1BQU07ZUFDSCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEdBQUcsQ0FBQztDQUNuRCxjQUFZLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxH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QUM7Q0FDL0MsTUFBSyxDQUFDO0NBQ04sRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxNQUFNLEdBQUc7TUFDMUMsT0FBTyxNQUFNLENBQUMsWUFBWTtDQUM5QixTQUFRLElBQUksQ0FBQyxFQUFFLFVBQVUsR0FBRztDQUM1QixTQUFRLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQUc7Q0FDNUIsU0FBUSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxHQUFHO0NBQzVCLFNBQVEsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFO0NBQ3RCLFNBQVEsSUFBSSxDQUFDLEVBQUUsVUFBVSxHQUFHO0NBQzVCLFNBQVEsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRztDQUM1QixTQUFRLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEdBQUc7Q0FDNUIsU0FBUSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUU7Q0FDdEIsTUFBSyxDQUFDO0NBQ04sRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxRQUFRLEdBQUc7TUFDOUMsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7TUFDM0IsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQztDQUM5RCxLQUFJLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMscUJBQXFCLElBQUksTUFBTSxDQUFDLENBQUM7TUFDMUQsT0FBTyxJQUFJLENBQUM7Q0FDaEIsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNB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QkFBQSxFQUF5QixDQUFDO0FBQzFDO0NBQ0EsQ0FBQSxJQUFJLFlBQVksQ0FBQztBQUNqQjtDQUNBLENBQUEsSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVE7Q0FDN0IsS0FBSSxNQUFNLE1BQU0sSUFBSSxDQUFDLE1BQU07Q0FDM0IsS0FBSSxJQUFJLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQztBQUMxQjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDMUI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDakI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDbkI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7QUFDMUI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7R0FDbEI7QUFDRDtDQUNBO0VBQ0EsU0FBUyxJQUFJLEdBQUcsRUFBRTtBQUNsQjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxTQUFTLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDdkI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQzVCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxLQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUM1QjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDMUI7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0dBQzdCO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxTQUFTLE1BQU0sR0FBRztBQUNsQjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNqQjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkM7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzFCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxLQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtHQUNDO0FBQ0Q7Q0FDQSxDQUFBLElBQUksTUFBTSxHQUFHLFNBQVMsTUFBTSxHQUFHO01BQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU07WUFDWixTQUFTLG1CQUFtQixHQUFHO2NBQzdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsYUFBYSxHQUFHO0NBQzdELGlCQUFnQixPQUFPLElBQUksWUFBWSxFQUFFLENBQUM7Q0FDMUMsY0FBYSxHQUFHLENBQUM7V0FDUjtDQUNUO1lBQ1UsU0FBUyxZQUFZLEdBQUc7Q0FDbEMsYUFBWSxPQUFPLElBQUksTUFBTSxFQUFFLENBQUM7Q0FDaEMsVUFBUyxDQUFDO0NBQ1YsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3pCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsTUFBTSxDQUFDLEtBQUssR0FBRyxTQUFTLEtBQUssQ0FBQyxJQUFJLEVBQUU7TUFDaEMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDaEMsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztNQUNwQixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxRTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0NBQ3JELEtBQUksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3RELEtBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7TUFDaEIsT0FBTyxJQUFJLENBQUM7Q0FDaEIsRUFBQyxDQUFDO0FBQ0Y7Q0FDQSxDQUFBLFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO01BQzlCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0dBQ3hCO0FBQ0Q7Q0FDQSxDQUFBLFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0NBQ3RDLEtBQUksT0FBTyxHQUFHLEdBQUcsR0FBRyxFQUFFO1VBQ2QsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7VUFDN0IsR0FBRyxNQUFNLENBQUMsQ0FBQztPQUNkO0NBQ0wsS0FBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0dBQ2xCO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUU7Q0FDNUIsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztDQUNuQixLQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0NBQzFCLEtBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7R0FDbEI7QUFDRDtFQUNBLFFBQVEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDakQsQ0FBQSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxhQUFhLENBQUM7QUFDdEM7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0VBQ0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0NBQ3ZEO0NBQ0E7Q0FDQSxLQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksUUFBUTtDQUMxRCxTQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssS0FBSyxDQUFDO29CQUNWLEdBQUcsU0FBUyxDQUFDO0NBQy9CLFdBQVUsS0FBSyxHQUFHLEtBQUssT0FBTyxDQUFDO0NBQy9CLFdBQVUsS0FBSyxHQUFHLE9BQU8sS0FBSyxDQUFDO0NBQy9CLFdBQVUsS0FBSyxHQUFHLFNBQVMsR0FBRyxDQUFDO0NBQy9CLCtCQUE4QixDQUFDO0NBQy9CLEtBQUksS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDO01BQ1osT0FBTyxJQUFJLENBQUM7Q0FDaEIsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7TUFDakQsT0FBTyxLQUFLLEdBQUcsQ0FBQztDQUNwQixXQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ25FLFdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUM3QixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7Q0FDdkQsS0FBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7Q0FDekQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQSxDQUFBLFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0NBQ3RDLEtBQUksT0FBTyxHQUFHLENBQUMsRUFBRSxFQUFFO0NBQ25CLFNBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3hDLFNBQVEsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztDQUNyRCxTQUFRLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO09BQ2pCO0NBQ0wsS0FBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFO0NBQ3pCLFNBQVEsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1VBQ2hDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7T0FDekI7TUFDRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO0dBQ3ZCO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7TUFDbkQsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNwQyxLQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0NBQzFELEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNqRDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtFQUNBLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsWUFBWSxDQUFDLEtBQUssRUFBRTtDQUN2RCxLQUFJLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Q0FDL0MsS0FBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUMxRCxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUU7Q0FDbkQsS0FBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ25ELEVBQUMsQ0FBQztBQUNGO0NBQ0EsQ0FBQSxTQUFTLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtNQUNqQyxHQUFHLENBQUMsR0FBRyxLQUFLLElBQUksR0FBRyxXQUFXLEdBQUcsQ0FBQztDQUN0QyxLQUFJLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUM7Q0FDdEMsS0FBSSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxFQUFFLElBQUksR0FBRyxDQUFDO01BQ2xDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztHQUM5QjtBQUNEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtFQUNBLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFNBQVMsYUFBYSxDQUFDLEtBQUssRUFBRTtDQUN6RCxLQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztDQUNwRCxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtFQUNBLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3JEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0VBQ0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFO01BQ3JELElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDaEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNoRixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0VBQ0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDckQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7Q0FDckQsS0FBSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQ3pELEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0VBQ0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxZQUFZLENBQUMsS0FBSyxFQUFFO0NBQ3ZELEtBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUMxRCxFQUFDLENBQUM7QUFDRjtFQUNBLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUc7UUFDbkMsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7VUFDckMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7T0FDckI7Q0FDTDtRQUNNLFNBQVMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0NBQzdDLFNBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDO2NBQy9CLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xDLE1BQUssQ0FBQztBQUNOO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtFQUNBLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtNQUNqRCxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztNQUM3QixJQUFJLENBQUMsR0FBRztVQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzNDLEtBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0NBQzlCLFNBQVEsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1VBQ25ELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztVQUM3QixLQUFLLEdBQUcsR0FBRyxDQUFDO09BQ2Y7Q0FDTCxLQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztDQUMxRCxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7RUFDQSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7TUFDbkQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUNqQyxLQUFJLE9BQU8sR0FBRztDQUNkLFdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDO1lBQzlDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN0QyxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsSUFBSSxHQUFHO01BQ3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDbEMsS0FBSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvQyxLQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLENBQUM7Q0FDaEIsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxLQUFLLEdBQUc7Q0FDMUMsS0FBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7VUFDYixJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1VBQy9CLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7VUFDL0IsSUFBSSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztVQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0NBQ3ZDLE1BQUssTUFBTTtDQUNYLFNBQVEsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDbkQsU0FBUSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztPQUNqQjtNQUNELE9BQU8sSUFBSSxDQUFDO0NBQ2hCLEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsTUFBTSxHQUFHO0NBQzVDLEtBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7Q0FDeEIsU0FBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7Q0FDeEIsU0FBUSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztNQUNwQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ3pCLElBQUksR0FBRyxFQUFFO1VBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztDQUNuQyxTQUFRLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0NBQ3pCLFNBQVEsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUM7T0FDbkI7TUFDRCxPQUFPLElBQUksQ0FBQztDQUNoQixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxTQUFTLE1BQU0sR0FBRztDQUM1QyxLQUFJLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtVQUNyQixHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztVQUN2QyxHQUFHLElBQUksQ0FBQyxDQUFDO01BQ2IsT0FBTyxJQUFJLEVBQUU7Q0FDakIsU0FBUSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3BDLFNBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUM7Q0FDeEIsU0FBUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztPQUNwQjtDQUNMO01BQ0ksT0FBTyxHQUFHLENBQUM7Q0FDZixFQUFDLENBQUM7QUFDRjtDQUNBLENBQUEsTUFBTSxDQUFDLFVBQVUsR0FBRyxTQUFTLGFBQWEsRUFBRTtNQUN4QyxZQUFZLEdBQUcsYUFBYSxDQUFDO0NBQ2pDLEtBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQztDQUM3QixLQUFJLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztHQUM3QixDQUFBOzs7Ozs7Ozs7O0NDL2NELENBQWMsYUFBQSxHQUFHLFlBQVksQ0FBQztBQUM5QjtDQUNBO0VBQ0EsSUFBSSxNQUFNLEdBQUdBLGFBQUEsRUFBbUIsQ0FBQztDQUNqQyxDQUFBLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQ3RGO0VBQ0EsSUFBSSxJQUFJLEdBQUdDLGdCQUFBLEVBQXlCLENBQUM7QUFDckM7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLFNBQVMsWUFBWSxHQUFHO0NBQ3hCLEtBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNyQjtBQUNEO0VBQ0EsWUFBWSxDQUFDLFVBQVUsR0FBRyxZQUFZO0NBQ3RDO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLEtBQUksWUFBWSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7QUFDbEQ7TUFDSSxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsWUFBWSxVQUFVLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxLQUFLO1lBQ2hJLFNBQVMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDN0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDNUI7V0FDUztDQUNUO1lBQ1UsU0FBUyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxJQUFJLEdBQUcsQ0FBQyxJQUFJO0NBQ3RCLGFBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQy9CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTTtjQUNqQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNsQyxVQUFTLENBQUM7Q0FDVixFQUFDLENBQUM7QUFDRjtBQUNBO0NBQ0E7Q0FDQTtDQUNBO0VBQ0EsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsU0FBUyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7Q0FDbEUsS0FBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1VBQ3BCLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztNQUMvQyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztDQUNqQyxLQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDckIsS0FBSSxJQUFJLEdBQUc7Q0FDWCxTQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztNQUMxRCxPQUFPLElBQUksQ0FBQztDQUNoQixFQUFDLENBQUM7QUFDRjtDQUNBLENBQUEsU0FBUyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtDQUMxQyxLQUFJLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFO0NBQ3ZCLFNBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztXQUM5QixJQUFJLEdBQUcsQ0FBQyxTQUFTO1VBQ2xCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ2hDO1VBQ1EsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7R0FDM0I7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtFQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFNBQVMsbUJBQW1CLENBQUMsS0FBSyxFQUFFO01BQ2hFLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzVDLEtBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNyQixLQUFJLElBQUksR0FBRztVQUNILElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO01BQzlDLE9BQU8sSUFBSSxDQUFDO0NBQ2hCLEVBQUMsQ0FBQztBQUNGO0FBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7QUFDQTtFQUNBLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQTs7Ozs7Ozs7OztDQ25GekIsQ0FBYyxNQUFBLEdBQUcsTUFBTSxDQUFDO0FBQ3hCO0VBQ0EsSUFBSSxJQUFJLFFBQVFELGdCQUFBLEVBQXlCLENBQUM7QUFDMUM7Q0FDQSxDQUFBLElBQUksWUFBWSxDQUFDO0FBQ2pCO0NBQ0EsQ0FBQSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUTtDQUM3QixLQUFJLElBQUksUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzFCO0NBQ0E7Q0FDQSxDQUFBLFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUU7TUFDMUMsT0FBTyxVQUFVLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLElBQUksV0FBVyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDNUc7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtFQUNBLFNBQVMsTUFBTSxDQUFDLE1BQU0sRUFBRTtBQUN4QjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUN0QjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNqQjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7R0FDNUI7QUFDRDtDQUNBLENBQUEsSUFBSSxZQUFZLEdBQUcsT0FBTyxVQUFVLEtBQUssV0FBVztDQUNwRCxPQUFNLFNBQVMsa0JBQWtCLENBQUMsTUFBTSxFQUFFO1VBQ2xDLElBQUksTUFBTSxZQUFZLFVBQVUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztDQUNqRSxhQUFZLE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDdEMsU0FBUSxNQUFNLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO09BQ2pDO0NBQ0w7Q0FDQSxPQUFNLFNBQVMsWUFBWSxDQUFDLE1BQU0sRUFBRTtDQUNwQyxTQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7Q0FDakMsYUFBWSxPQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ3RDLFNBQVEsTUFBTSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN0QyxNQUFLLENBQUM7QUFDTjtDQUNBLENBQUEsSUFBSSxNQUFNLEdBQUcsU0FBUyxNQUFNLEdBQUc7TUFDM0IsT0FBTyxJQUFJLENBQUMsTUFBTTtDQUN0QixXQUFVLFNBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO2NBQ25DLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRTtrQkFDbkQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7Q0FDbkQsdUJBQXNCLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQztDQUM5QztDQUNBLHVCQUFzQixZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7ZUFDOUIsRUFBRSxNQUFNLENBQUMsQ0FBQztXQUNkO0NBQ1Q7Q0FDQSxXQUFVLFlBQVksQ0FBQztDQUN2QixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3pCO0VBQ0EsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSwrQkFBK0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ2pIO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtFQUNBLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxpQkFBaUIsR0FBRztDQUN4RCxLQUFJLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztNQUN2QixPQUFPLFNBQVMsV0FBVyxHQUFHO0NBQ2xDLFNBQVEsS0FBSyxHQUFHLFVBQVUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxLQUFLLENBQUM7Q0FDL0csU0FBUSxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxLQUFLLENBQUM7Q0FDL0csU0FBUSxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxLQUFLLENBQUM7Q0FDL0csU0FBUSxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxLQUFLLENBQUM7Q0FDL0csU0FBUSxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxLQUFLLENBQUM7QUFDL0c7Q0FDQTtVQUNRLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO0NBQ3hDLGFBQVksSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0NBQ2hDLGFBQVksTUFBTSxlQUFlLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1dBQ25DO1VBQ0QsT0FBTyxLQUFLLENBQUM7Q0FDckIs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Q0FDQTtBQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0FBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7QUFDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtBQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFNBQVMsU0FBUyxHQUFHO0NBQzdDLEtBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0NBQy9CLEVBQUMsQ0FBQztBQUNGO0NBQ0EsQ0FBQSxTQUFTLGVBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFO0NBQ25DLEtBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0NBQ3hCLGFBQVksR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0NBQzdCLGFBQVksR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFO2NBQ2xCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztHQUNyQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFNBQVMsWUFBWSxHQUFHO0FBQ25EO0NBQ0E7TUFDSSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHO0NBQy9CLFNBQVEsTUFBTSxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDO0NBQ0EsS0FBSSxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDcEQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxhQUFh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RSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtDQUNob0MsSUFBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7R0FDbEIsQ0FBQyxPQUFPLENBQUMsRUFBRTtDQUNaO0dBQ0M7QUFDRDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEs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LElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3ZCO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDM0I7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsSUFBSSxrQkFBa0IsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BFO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztBQUM3QztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDakQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7QUFDM0I7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUNuQztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsS0FBSyxHQUFHLFNBQVMsS0FBSyxHQUFHO0NBQ3ZDLEtBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7Q0FDckQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFFBQVEsR0FBRyxTQUFTLFFBQVEsR0FBRztNQUN6QyxJQUFJLElBQUksQ0FBQyxRQUFRO0NBQ3JCLFNBQVEsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksY0FBYyxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDdkUsS0FBSSxPQUFPLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDekQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFFBQVEsR0FBRyxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUU7Q0FDbEQsS0FBSSxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztDQUN4QixLQUFJLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSztDQUMvQixTQUFRLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ2xDLEtBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1VBQ2IsT0FBTyxHQUFHLENBQUM7Q0FDbkIsS0FBSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtDQUMzQixTQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRTtDQUNoQztDQUNBO0NBQ0EsYUFBWSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO0NBQzdDLGlCQUFnQixHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7Q0FDekMsaUJBQWdCLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNwRCxhQUFZLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1dBQzdEO0NBQ1QsYUFBWSxPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQy9DO0FBQ0w7Q0FDQTtDQUNBO0NBQ0EsS0FBSSxJQUFJLFlBQVksR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1VBQzNELEdBQUcsR0FBRyxJQUFJLENBQUM7Q0FDbkIsS0FBSSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7TUFDaEIsT0FBTyxJQUFJLEVBQUU7VUFDVCxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQztDQUMxQyxhQUFZLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO2NBQ3hELE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1VBQ3BDLEdBQUcsR0FBRyxNQUFNLENBQUM7Q0FDckIsU0FBUSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Q0FDeEIsYUFBWSxPQUFPLE1BQU0sR0FBRyxNQUFNLENBQUM7ZUFDdEI7Q0FDYixhQUFZLE9BQU8sTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDO0NBQ3BDLGlCQUFnQixNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQztDQUN0QyxhQUFZLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztXQUNqQztPQUNKO0NBQ0wsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFdBQVcsR0FBRyxTQUFTLFdBQVcsR0FBRztDQUNuRCxLQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztDQUNyQixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsbUJBQW1CLEdBQUcsU0FBUyxtQkFBbUIsR0FBRztDQUNuRSxLQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7Q0FDM0IsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFVBQVUsR0FBRyxTQUFTLFVBQVUsR0FBRztDQUNqRCxLQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztDQUNwQixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxrQkFBa0IsR0FBRztDQUNqRSxLQUFJLE9BQU8sSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7Q0FDMUIsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLGFBQWEsR0FBRyxTQUFTLGFBQWEsR0FBRztDQUN2RCxLQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtDQUN6QixTQUFRLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO0NBQ3BFLEtBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO01BQ2hELEtBQUssSUFBSSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFO1VBQzdCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUM7Q0FDbkMsYUFBWSxNQUFNO0NBQ2xCLEtBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7Q0FDL0MsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLE1BQU0sR0FBRyxTQUFTLE1BQU0sR0FBRztDQUN6QyxLQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7Q0FDN0MsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO0FBQ3pDO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxVQUFVLEdBQUcsU0FBUyxVQUFVLEdBQUc7TUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7Q0FDM0MsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFVBQVUsR0FBRyxTQUFTLFVBQVUsR0FBRztNQUM3QyxPQUFPLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7Q0FDM0MsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLEtBQUssR0FBRyxTQUFTLEtBQUssR0FBRztNQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQ2hDLEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxNQUFNLEdBQUcsU0FBUyxNQUFNLEdBQUc7TUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNoQyxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxNQUFNLEdBQUcsU0FBUyxNQUFNLENBQUMsS0FBSyxFQUFFO0NBQzlDLEtBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7Q0FDdEIsU0FBUSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO01BQzdCLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxFQUFFLE1BQU0sQ0FBQztVQUN6RixPQUFPLEtBQUssQ0FBQztDQUNyQixLQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQztDQUM5RCxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLEVBQUUsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDO0FBQ3hDO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFNBQVMsR0FBRyxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUU7TUFDaEQsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLGlCQUFpQixLQUFLLENBQUMsQ0FBQztDQUMzQyxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO0FBQzVDO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUM7QUFDM0M7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsUUFBUSxHQUFHLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRTtNQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJLGlCQUFpQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDaEQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztBQUMxQztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxlQUFlLEdBQUcsU0FBUyxlQUFlLENBQUMsS0FBSyxFQUFFO01BQzVELE9BQU8sSUFBSSxDQUFDLElBQUksaUJBQWlCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUNqRCxFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFDO0FBQ2xEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQyxlQUFlLENBQUM7QUFDakQ7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsV0FBVyxHQUFHLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtNQUNwRCxPQUFPLElBQUksQ0FBQyxJQUFJLGlCQUFpQixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDaEQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQztBQUM3QztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxrQkFBa0IsR0FBRyxTQUFTLGtCQUFrQixDQUFDLEtBQUssRUFBRTtNQUNsRSxPQUFPLElBQUksQ0FBQyxJQUFJLGlCQUFpQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDakQsRUFBQyxDQUFDO0FBQ0Y7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixDQUFDO0FBQ3JEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztBQUNwRDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Q0FDaEQsS0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztDQUN0QixTQUFRLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDakMsS0FBSSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1VBQ2QsT0FBTyxDQUFDLENBQUM7Q0FDakIsS0FBSSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFO0NBQ25DLFNBQVEsUUFBUSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztDQUN0QyxLQUFJLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUTtVQUNwQixPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQ2xCLEtBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxRQUFRO1VBQ3BCLE9BQU8sQ0FBQyxDQUFDO0NBQ2pCO0NBQ0EsS0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7Q0FDdEIsU0FBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ3JEO0NBQ0EsS0FBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2pJLEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQztBQUMzQztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsTUFBTSxHQUFHLFNBQVMsTUFBTSxHQUFHO01BQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDO1VBQ3BDLE9BQU8sU0FBUyxDQUFDO01BQ3JCLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMvQixFQUFDLENBQUM7QUFDRjtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztBQUN6QztDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxDQUFBLGFBQWEsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLENBQUMsTUFBTSxFQUFFO0NBQ3pDLEtBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7Q0FDdkIsU0FBUSxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DO0NBQ0E7QUFDQTtNQUNJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO01BQzNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO01BQzdCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDO01BQzFCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ2hDO01BQ0ksSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7TUFDN0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7TUFDL0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7TUFDNUIsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDbEM7Q0FDQSxLQUFJLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztDQUMzQyxLQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3JCLEtBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxFQUFFLENBQUM7TUFDbEIsR0FBRyxJQUFJLE1BQU0sQ0FBQztDQUNsQixLQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3JCLEtBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxFQUFFLENBQUM7TUFDbEIsR0FBRyxJQUFJLE1BQU0sQ0FBQztDQUNsQixLQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ3JCLEtBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxFQUFFLENBQUM7TUFDbEIsR0FBRyxJQUFJLE1BQU0sQ0FBQztDQUNsQixLQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO01BQ2pCLEdBQUcsSUFBSSxNQUFNLENBQUM7TUFDZCxPQUFPLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsSUFBSSxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0NBQ3pFLEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLENBQUEsYUFBYSxDQUFDLFFBQVEsR0FBRyxTQUFTLFFBQVEsQ0FBQyxVQUFVLEVBQUU7Q0FDdkQsS0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztDQUMzQixTQUFRLFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7TUFDdkMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0NBQ3RDLEVBQUMsQ0FBQztBQUNGO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7QUFDM0M7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsQ0FBQSxhQUFhLENBQUMsUUFBUSxHQUFHLFNBQVMsUUFBUSxDQUFDLFVBQVUsRUFBRTtDQUN2RCxLQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtVQUNiLE9BQU8sSUFBSSxDQUFDO0NBQ3BCLEtBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7Q0FDM0IsU0FBUSxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzNDO0NBQ0E7TUFDSSxJQUFJLElBQUksRUFBRTtVQUNOLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUc7NkJBQ1IsSUFBSSxDQUFDLElBQUk7NkJBQ1QsVUFBVSxDQUFDLEdBQUc7Q0FDekMsNEJBQTJCLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM1QyxTQUFRLE9BQU8sUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO09BQ3hEO0FBQ0w7Q0FDQSxLQUFJLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtVQUNuQixPQUFPLElBQUksQ0FBQztDQUNwQixLQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7VUFDbEIsT0FBTyxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztDQUNyRCxLQUFJLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUM7VUFDeEIsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQztBQUMvQztDQUNBLEtBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUU7Q0FDM0IsU0FBUSxJQUFJLFVBQVUsQ0FBQyxVQUFVLEVBQUU7Q0FDbkMsYUFBWSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7Q0FDcEQ7Q0FDQSxhQUFZLE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztDQUNwRCxNQUFLLE1BQU0sSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFO0NBQ3RDLFNBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2hEO0NBQ0E7Q0FDQSxLQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQztDQUN4RCxTQUFRLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xGO0NBQ0E7Q0FDQTtBQUNBO01BQ0ksSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7TUFDM0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7TUFDN0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUM7TUFDMUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDaEM7TUFDSSxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQztNQUNqQyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztNQUNuQyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNoQyxJQUFJLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUN0QztDQUNBLEtBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0NBQzNDLEtBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7Q0FDckIsS0FBSSxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNsQixHQUFHLElBQUksTUFBTSxDQUFDO0NBQ2xCLEtBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7Q0FDckIsS0FBSSxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNsQixHQUFHLElBQUksTUFBTSxDQUFDO0NBQ2xCLEtBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7Q0FDckIsS0FBSSxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNsQixHQUFHLElBQUksTUFBTSxDQUFDO0NBQ2xCLEtBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7Q0FDckIsS0FBSSxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNsQixHQUFHLElBQUksTUFBTSxDQUFDO0NBQ2xCLEtBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7Q0FDckIsS0FBSSxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNsQixHQUFHLElBQUksTUFBTSxDQUFDO0NBQ2xCLEtBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7Q0FDckIsS0FBSSxHQUFHLElBQUksR0FBRyxLQUFLLEVBQUUsQ0FBQztNQUNsQixHQUFHLElBQUksTUFB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RSxLQUFLLEVBQUUsRUFBRTtDQUNyQixZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtDQUNyQyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO0NBQzlCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0NBQ3ZDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Q0FDbkMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7Q0FDNUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTthQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ3BFLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7YUFDbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNwRSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO2FBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDbkUsU0FBQTtDQUNELFFBQUEsS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO2FBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUUsQ0FBQyxDQUFBO0NBQzdCLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLG1CQUFtQixLQUFLLFNBQVMsRUFBRTtDQUM3QyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0NBQ3RELFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLDBCQUEwQixLQUFLLFNBQVMsRUFBRTtDQUNwRCxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0NBQzVELFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtDQUMxQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0NBQ25ELFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLHVCQUF1QixLQUFLLFNBQVMsRUFBRTtDQUNqRCxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0NBQ3pELFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7Q0FDakMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7Q0FDeEMsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyx1QkFBdUIsRUFBRSxDQUFBO0NBQ3pDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7cUJBQzVCLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDOUIsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO3FCQUNuQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDMUQsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQzFELE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO3FCQUN6RCxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO3FCQUNKLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO3FCQUN2QyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDN0MsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztxQkFDSixPQUFPLENBQUMsMEJBQTBCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQVUsQ0FBQyxDQUFBO3FCQUN6RSxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxFQUFFO0NBQ0wsb0JBQUEsT0FBTyxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDMUMsTUFBSztDQUNQLGdCQUFBLEtBQUssRUFBRTtxQkFDTCxPQUFPLENBQUMsdUJBQXVCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQVUsQ0FBQyxDQUFBO3FCQUN0RSxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxFQUFFO0NBQ0wsb0JBQUEsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQy9CLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRixDQUFBO0NBS0QsSUFBSUUsWUFBVSxHQUFRLENBQUMsTUFBSztLQUMxQixJQUFJLE9BQU9BLFlBQVUsS0FBSyxXQUFXO0NBQUUsUUFBQSxPQUFPQSxZQUFVLENBQUE7S0FDeEQsSUFBSSxPQUFPLElBQUksS0FBSyxXQUFXO0NBQUUsUUFBQSxPQUFPLElBQUksQ0FBQTtLQUM1QyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVc7Q0FBRSxRQUFBLE9BQU8sTUFBTSxDQUFBO0tBQ2hELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVztDQUFFLFFBQUEsT0FBTyxNQUFNLENBQUE7Q0FDaEQsSUFBQSxNQUFNLGdDQUFnQyxDQUFBO0NBQ3hDLENBQUMsR0FBRyxDQUFBO0NBRUosU0FBUyxZQUFZLENBQUMsSUFBVSxFQUFBO0tBQzlCLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtDQUNwQyxRQUFBLE1BQU0sSUFBSUEsWUFBVSxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFBO0NBQzNFLEtBQUE7Q0FDRCxJQUFBLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0NBQ3hCLENBQUM7Q0FFRCxJQUFJRixjQUFHLENBQUMsSUFBSSxDQUFDLElBQUksS0FBS0csV0FBSSxFQUFFO0NBQzFCLElBQUFILGNBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHRyxXQUFXLENBQUE7S0FDM0JILGNBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtDQUNoQjs7Q0M3SkQ7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxpQkFBaUIsR0FBMkI7S0FDdkQsU0FBUyxDQUFDLEtBQW9CLEVBQUUsT0FBbUIsRUFBQTtTQUNqRCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO01BQ3RFO0tBQ0QsTUFBTSxHQUFBOztTQUVKLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUE7TUFDOUM7RUFDRjs7Q0N6QkQ7Q0FrQkEsU0FBUyxxQkFBcUIsR0FBQTtDQUM1QixJQUFBLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFBO0NBQ3JELENBQUM7Q0FHRDs7Q0FFRztDQUNJLE1BQU0sV0FBVyxHQUFHO0tBQ3pCLE1BQU0sQ0FBQyxPQUFvQixFQUFFLE1BQUEsR0FBcUJELGNBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUE7Q0FDbkUsUUFBQSxJQUFJLE9BQU8sQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO0NBQzNCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ2pDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7Q0FDM0IsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7Q0FDbEMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtDQUMzQixZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtDQUNsQyxTQUFBO0NBQ0QsUUFBQSxPQUFPLE1BQU0sQ0FBQTtNQUNkO0tBRUQsTUFBTSxDQUFDLEtBQThCLEVBQUUsTUFBZSxFQUFBO1NBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWUEsY0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMxRSxRQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtDQUNqRSxRQUFBLE1BQU0sT0FBTyxHQUFHLHFCQUFxQixFQUFFLENBQUE7Q0FDdkMsUUFBQSxPQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDZixnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDekIsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO3FCQUN6QixNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3pCLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0MzREQ7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxlQUFlLEdBQXlCO0tBQ25ELFNBQVMsQ0FBQyxLQUFrQixFQUFFLE9BQW1CLEVBQUE7U0FDL0MsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN4QyxRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQzdELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7TUFDbkM7Q0FDRCxJQUFBLFdBQVcsQ0FBQyxNQUFrQixFQUFBO0NBQzVCLFFBQUEsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQTtNQUNwRTtLQUNELE1BQU0sR0FBQTs7U0FFSixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQzVDO0VBQ0Y7O0NDekJEO0NBbUJBLFNBQVMsb0JBQW9CLEdBQUE7Q0FDM0IsSUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUE7Q0FDaEcsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxVQUFVLEdBQUc7S0FDeEIsTUFBTSxDQUFDLE9BQW1CLEVBQUUsTUFBQSxHQUFxQkQsY0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQTtDQUNsRSxRQUFBLElBQUksT0FBTyxDQUFDLGNBQWMsS0FBSyxTQUFTLEVBQUU7Q0FDeEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7Q0FDOUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxFQUFFO0NBQzFDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7Q0FDakQsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtDQUNqQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtDQUN4QyxTQUFBO1NBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtDQUN4QixRQUFBLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtDQUMzQixZQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7Q0FDaEIsU0FBQTtTQUNELE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNmLFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyxvQkFBb0IsRUFBRSxDQUFBO0NBQ3RDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO3FCQUN4QyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQy9CLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7eUJBQ25CLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFBO0NBQ3pDLHdCQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUU7NkJBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0NBQ2pDLHlCQUFBO0NBQ0YscUJBQUE7Q0FBTSx5QkFBQTt5QkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtDQUNqQyxxQkFBQTtxQkFDRCxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDM0VEOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0sY0FBYyxHQUF3QjtLQUNqRCxTQUFTLENBQUMsS0FBaUIsRUFBRSxPQUFtQixFQUFBO1NBQzlDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDdkMsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtDQUM3RCxRQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO01BQ25DO0NBQ0QsSUFBQSxXQUFXLENBQUMsTUFBa0IsRUFBQTtDQUM1QixRQUFBLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7TUFDbkU7S0FDRCxNQUFNLEdBQUE7O1NBRUosT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQTtNQUMzQztFQUNGOztDQ1hELFNBQVMsc0JBQXNCLEdBQUE7Q0FDN0IsSUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFBO0NBQ3BCLENBQUM7Q0FHRDs7Q0FFRztDQUNJLE1BQU0sWUFBWSxHQUFHO0tBQzFCLE1BQU0sQ0FBQyxPQUFxQixFQUFFLE1BQUEsR0FBcUJELGNBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUE7Q0FDcEUsUUFBQSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO0NBQ3RCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0NBQ3JDLFNBQUE7Q0FDRCxRQUFBLE9BQU8sTUFBTSxDQUFBO01BQ2Q7S0FFRCxNQUFNLENBQUMsS0FBOEIsRUFBRSxNQUFlLEVBQUE7U0FDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZQSxjQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJQSxjQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFFLFFBQUEsSUFBSSxHQUFHLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0NBQ2pFLFFBQUEsTUFBTSxPQUFPLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQTtDQUN4QyxRQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7Q0FDdkIsWUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7YUFDM0IsUUFBUSxHQUFHLEtBQUssQ0FBQztDQUNmLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBUyxDQUFBO3FCQUNwQyxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDM0NEOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0sZ0JBQWdCLEdBQTBCO0tBQ3JELFNBQVMsQ0FBQyxLQUFtQixFQUFFLE9BQW1CLEVBQUE7U0FDaEQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN6QyxRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQzdELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7TUFDbkM7Q0FDRCxJQUFBLFdBQVcsQ0FBQyxNQUFrQixFQUFBO0NBQzVCLFFBQUEsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQTtNQUNyRTtLQUNELE1BQU0sR0FBQTs7U0FFSixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQzdDO0VBQ0Y7O0NDVEQsU0FBUywwQkFBMEIsR0FBQTtLQUNqQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUE7Q0FDckMsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxnQkFBZ0IsR0FBRztLQUM5QixNQUFNLENBQUMsT0FBeUIsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQ3hFLFFBQUEsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTthQUM5QixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ2hFLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7Q0FDdEIsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7Q0FDdEMsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRywwQkFBMEIsRUFBRSxDQUFBO0NBQzVDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDdEQsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBUyxDQUFBO3FCQUNwQyxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDbkREOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0sb0JBQW9CLEdBQThCO0tBQzdELFNBQVMsQ0FBQyxLQUF1QixFQUFFLE9BQW1CLEVBQUE7U0FDcEQsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzdDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7TUFDekU7S0FDRCxNQUFNLEdBQUE7O1NBRUosT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQ2pEO0VBQ0Y7O0NDekJEO0NBc0JBLFNBQVMseUJBQXlCLEdBQUE7S0FDaEMsT0FBTztDQUNMLFFBQUEsY0FBYyxFQUFFLFNBQVM7Q0FDekIsUUFBQSxnQkFBZ0IsRUFBRSxTQUFTO0NBQzNCLFFBQUEsT0FBTyxFQUFFLFNBQVM7Q0FDbEIsUUFBQSxTQUFTLEVBQUUsU0FBUztDQUNwQixRQUFBLFlBQVksRUFBRSxTQUFTO01BQ3hCLENBQUE7Q0FDSCxDQUFDO0NBR0Q7O0NBRUc7Q0FDSSxNQUFNLGVBQWUsR0FBRztLQUM3QixNQUFNLENBQUMsT0FBd0IsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQ3ZFLFFBQUEsSUFBSSxPQUFPLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtDQUN4QyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtDQUM5QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7Q0FDMUMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtDQUNqRCxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO0NBQ2pDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQ3hDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Q0FDbkMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7Q0FDM0MsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtDQUN0QyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtDQUM5QyxTQUFBO0NBQ0QsUUFBQSxPQUFPLE1BQU0sQ0FBQTtNQUNkO0tBRUQsTUFBTSxDQUFDLEtBQThCLEVBQUUsTUFBZSxFQUFBO1NBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWUEsY0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMxRSxRQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtDQUNqRSxRQUFBLE1BQU0sT0FBTyxHQUFHLHlCQUF5QixFQUFFLENBQUE7Q0FDM0MsUUFBQSxPQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDZixnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDdEMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3hDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDL0IsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNsQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7cUJBQ3JDLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0NqRkQ7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxtQkFBbUIsR0FBNkI7S0FDM0QsU0FBUyxDQUFDLEtBQXNCLEVBQUUsT0FBbUIsRUFBQTtTQUNuRCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzVDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO01BQ3hFO0tBQ0QsTUFBTSxHQUFBOztTQUVKLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUE7TUFDaEQ7RUFDRjs7Q0N6QkQ7Q0FtQkEsU0FBUyxxQkFBcUIsR0FBQTtDQUM1QixJQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQTtDQUNoRyxDQUFDO0NBR0Q7O0NBRUc7Q0FDSSxNQUFNLFdBQVcsR0FBRztLQUN6QixNQUFNLENBQUMsT0FBb0IsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQ25FLFFBQUEsSUFBSSxPQUFPLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtDQUN4QyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtDQUM5QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7Q0FDMUMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtDQUNqRCxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO0NBQ2pDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQ3hDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxFQUFFLEVBQUU7Q0FDdEIsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDdEMsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyxxQkFBcUIsRUFBRSxDQUFBO0NBQ3ZDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO3FCQUN4QyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQy9CLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDN0IsTUFBSztDQUNQLGdCQUFBO0NBQ0Usb0JBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7cUJBQ3hCLE1BQUs7Q0FDUixhQUFBO0NBQ0YsU0FBQTtDQUNELFFBQUEsT0FBTyxPQUFPLENBQUE7TUFDZjtFQUNGOztDQ2xFRDs7Q0FFRztDQUNJLE1BQU1DLGNBQVksR0FBRyxJQUFJLENBQUE7Q0FFaEM7O0NBRUc7Q0FDSSxNQUFNLGVBQWUsR0FBeUI7S0FDbkQsU0FBUyxDQUFDLEtBQWtCLEVBQUUsT0FBbUIsRUFBQTtTQUMvQyxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQ3hDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO01BQ3BFO0tBQ0QsTUFBTSxHQUFBOztTQUVKLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUE7TUFDNUM7RUFDRjs7Q0N6QkQ7Q0FVQSxJQUFrQixlQU1qQixDQUFBO0NBTkQsQ0FBQSxVQUFrQixlQUFlLEVBQUE7Q0FDL0IsSUFBQSxlQUFBLENBQUEsZUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFFBQVUsQ0FBQTtDQUNWLElBQUEsZUFBQSxDQUFBLGVBQUEsQ0FBQSxPQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxPQUFTLENBQUE7Q0FDVCxJQUFBLGVBQUEsQ0FBQSxlQUFBLENBQUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsUUFBVSxDQUFBO0NBQ1YsSUFBQSxlQUFBLENBQUEsZUFBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFlBQWMsQ0FBQTtDQUNkLElBQUEsZUFBQSxDQUFBLGVBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLGNBQWlCLENBQUE7Q0FDbkIsQ0FBQyxFQU5pQixlQUFlLEtBQWYsZUFBZSxHQU1oQyxFQUFBLENBQUEsQ0FBQSxDQUFBO0NBRUQsSUFBa0IsVUFLakIsQ0FBQTtDQUxELENBQUEsVUFBa0IsVUFBVSxFQUFBO0NBQzFCLElBQUEsVUFBQSxDQUFBLFVBQUEsQ0FBQSxPQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxPQUFTLENBQUE7Q0FDVCxJQUFBLFVBQUEsQ0FBQSxVQUFBLENBQUEsVUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsVUFBWSxDQUFBO0NBQ1osSUFBQSxVQUFBLENBQUEsVUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFdBQWEsQ0FBQTtDQUNiLElBQUEsVUFBQSxDQUFBLFVBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLGNBQWlCLENBQUE7Q0FDbkIsQ0FBQyxFQUxpQixVQUFVLEtBQVYsVUFBVSxHQUszQixFQUFBLENBQUEsQ0FBQSxDQUFBO0NBRUQsSUFBa0IsZ0JBT2pCLENBQUE7Q0FQRCxDQUFBLFVBQWtCLGdCQUFnQixFQUFBO0NBQ2hDLElBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFFBQVUsQ0FBQTtDQUNWLElBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFdBQWEsQ0FBQTtDQUNiLElBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLFlBQWMsQ0FBQTtDQUNkLElBQUEsZ0JBQUEsQ0FBQSxnQkFBQSxDQUFBLHdCQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSx3QkFBMEIsQ0FBQTtDQUMxQixJQUFBLGdCQUFBLENBQUEsZ0JBQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxNQUFRLENBQUE7Q0FDUixJQUFBLGdCQUFBLENBQUEsZ0JBQUEsQ0FBQSxjQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLGNBQWlCLENBQUE7Q0FDbkIsQ0FBQyxFQVBpQixnQkFBZ0IsS0FBaEIsZ0JBQWdCLEdBT2pDLEVBQUEsQ0FBQSxDQUFBLENBQUE7Q0E2Q0QsU0FBUyxvQkFBb0IsR0FBQTtLQUMzQixPQUFPO0NBQ0wsUUFBQSxPQUFPLEVBQUUsU0FBUztDQUNsQixRQUFBLFNBQVMsRUFBRSxTQUFTO0NBQ3BCLFFBQUEsV0FBVyxFQUFFLFNBQVM7Q0FDdEIsUUFBQSxZQUFZLEVBQUUsU0FBUztDQUN2QixRQUFBLGVBQWUsRUFBRSxTQUFTO0NBQzFCLFFBQUEsV0FBVyxFQUFFLFNBQVM7Q0FDdEIsUUFBQSxXQUFXLEVBQUUsU0FBUztDQUN0QixRQUFBLGFBQWEsRUFBRSxTQUFTO0NBQ3hCLFFBQUEsaUJBQWlCLEVBQUUsU0FBUztDQUM1QixRQUFBLGdCQUFnQixFQUFFLFNBQVM7Q0FDM0IsUUFBQSxRQUFRLEVBQUUsU0FBUztDQUNuQixRQUFBLFNBQVMsRUFBRSxTQUFTO0NBQ3BCLFFBQUEsVUFBVSxFQUFFLFNBQVM7Q0FDckIsUUFBQSxpQkFBaUIsRUFBRSxTQUFTO0NBQzVCLFFBQUEsaUJBQWlCLEVBQUUsU0FBUztDQUM1QixRQUFBLGVBQWUsRUFBRSxTQUFTO01BQzNCLENBQUE7Q0FDSCxDQUFDO0NBR0Q7O0NBRUc7Q0FDSSxNQUFNLFVBQVUsR0FBRztLQUN4QixNQUFNLENBQUMsT0FBbUIsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQ2xFLFFBQUEsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTthQUNqQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDOUUsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtDQUNuQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtDQUMzQyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO0NBQ3JDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0NBQzVDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7YUFDdEMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ25GLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7YUFDekMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ3RGLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7YUFDckMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ2xGLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7YUFDckMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUN0RSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssU0FBUyxFQUFFO2FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDeEUsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsaUJBQWlCLEtBQUssU0FBUyxFQUFFO2FBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUM1RSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7Q0FDMUMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtDQUNsRCxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO0NBQ2xDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQzFDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQUU7Q0FDbkMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7Q0FDNUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtDQUNwQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtDQUM3QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7Q0FDM0MsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtDQUNwRCxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7Q0FDM0MsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtDQUNwRCxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxlQUFlLEtBQUssU0FBUyxFQUFFO0NBQ3pDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0NBQ2xELFNBQUE7Q0FDRCxRQUFBLE9BQU8sTUFBTSxDQUFBO01BQ2Q7S0FFRCxNQUFNLENBQUMsS0FBOEIsRUFBRSxNQUFlLEVBQUE7U0FDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZQSxjQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJQSxjQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFFLFFBQUEsSUFBSSxHQUFHLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0NBQ2pFLFFBQUEsTUFBTSxPQUFPLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQTtDQUN0QyxRQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7Q0FDdkIsWUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7YUFDM0IsUUFBUSxHQUFHLEtBQUssQ0FBQztDQUNmLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxPQUFPLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDcEUsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNsQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ25DLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsWUFBWSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3pFLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsZUFBZSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQzVFLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3hFLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO3FCQUM1RCxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDOUQsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxpQkFBaUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDbEUsTUFBSztDQUNQLGdCQUFBLEtBQUssRUFBRTtDQUNMLG9CQUFBLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFTLENBQUE7cUJBQ2hELE1BQUs7Q0FDUCxnQkFBQSxLQUFLLEVBQUU7Q0FDTCxvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtxQkFDakMsTUFBSztDQUNQLGdCQUFBLEtBQUssRUFBRTtDQUNMLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNsQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxFQUFFO0NBQ0wsb0JBQUEsT0FBTyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7cUJBQ25DLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLEVBQUU7Q0FDTCxvQkFBQSxPQUFPLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUMxQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxFQUFFO0NBQ0wsb0JBQUEsT0FBTyxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtxQkFDMUMsTUFBSztDQUNQLGdCQUFBLEtBQUssRUFBRTtDQUNMLG9CQUFBLE9BQU8sQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUN4QyxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0YsQ0FBQTtDQUVELFNBQVMsNEJBQTRCLEdBQUE7Q0FDbkMsSUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQTtDQUNoRSxDQUFDO0NBR0Q7O0NBRUc7Q0FDSSxNQUFNLGtCQUFrQixHQUFHO0tBQ2hDLE1BQU0sQ0FBQyxPQUEyQixFQUFFLE1BQUEsR0FBcUJBLGNBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUE7Q0FDMUUsUUFBQSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFO0NBQ3RCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQ3RDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7Q0FDbEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7Q0FDMUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtDQUNwQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtDQUM1QyxTQUFBO0NBQ0QsUUFBQSxPQUFPLE1BQU0sQ0FBQTtNQUNkO0tBRUQsTUFBTSxDQUFDLEtBQThCLEVBQUUsTUFBZSxFQUFBO1NBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWUEsY0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMxRSxRQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtDQUNqRSxRQUFBLE1BQU0sT0FBTyxHQUFHLDRCQUE0QixFQUFFLENBQUE7Q0FDOUMsUUFBQSxPQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDZixnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDN0IsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBUyxDQUFBO3FCQUN4QyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFTLENBQUE7cUJBQzFDLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0NwUUQ7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxjQUFjLEdBQXdCO0tBQ2pELFNBQVMsQ0FBQyxLQUFpQixFQUFFLE9BQW1CLEVBQUE7U0FDOUMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN2QyxRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQzdELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7TUFDbkM7Q0FDRCxJQUFBLFdBQVcsQ0FBQyxNQUFrQixFQUFBO0NBQzVCLFFBQUEsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQTtNQUNuRTtLQUNELE1BQU0sR0FBQTs7U0FFSixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQzNDO0VBQ0Y7O0NDekJEO0NBaUNBLFNBQVMsd0JBQXdCLEdBQUE7Q0FDL0IsSUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFBO0NBQ3JGLENBQUM7Q0FHRDs7Q0FFRztDQUNJLE1BQU0sY0FBYyxHQUFHO0tBQzVCLE1BQU0sQ0FBQyxPQUF1QixFQUFFLE1BQUEsR0FBcUJELGNBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUE7Q0FDdEUsUUFBQSxJQUFJLE9BQU8sQ0FBQyxHQUFHLEtBQUssU0FBUyxFQUFFO2FBQzdCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUM5RSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO2FBQ2hDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNwRixTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO2FBQ2xDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUN4RixTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO2FBQy9CLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNsRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE1BQU0sQ0FBQTtNQUNkO0tBRUQsTUFBTSxDQUFDLEtBQThCLEVBQUUsTUFBZSxFQUFBO1NBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWUEsY0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMxRSxRQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtDQUNqRSxRQUFBLE1BQU0sT0FBTyxHQUFHLHdCQUF3QixFQUFFLENBQUE7Q0FDMUMsUUFBQSxPQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDZixnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsR0FBRyxHQUFHLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3BFLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsTUFBTSxHQUFHLHlCQUF5QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQzFFLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQzlFLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsS0FBSyxHQUFHLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3hFLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRixDQUFBO0NBRUQsU0FBUyxnQ0FBZ0MsR0FBQTtDQUN2QyxJQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUE7Q0FDcEIsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxzQkFBc0IsR0FBRztLQUNwQyxNQUFNLENBQUMsT0FBK0IsRUFBRSxNQUFBLEdBQXFCQSxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO1NBQzlFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7Q0FDeEIsUUFBQSxLQUFLLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Q0FDM0IsWUFBQSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ2hCLFNBQUE7U0FDRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDZixRQUFBLE9BQU8sTUFBTSxDQUFBO01BQ2Q7S0FFRCxNQUFNLENBQUMsS0FBOEIsRUFBRSxNQUFlLEVBQUE7U0FDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZQSxjQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJQSxjQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFFLFFBQUEsSUFBSSxHQUFHLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0NBQ2pFLFFBQUEsTUFBTSxPQUFPLEdBQUcsZ0NBQWdDLEVBQUUsQ0FBQTtDQUNsRCxRQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7Q0FDdkIsWUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7YUFDM0IsUUFBUSxHQUFHLEtBQUssQ0FBQztDQUNmLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTt5QkFDbkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUE7Q0FDekMsd0JBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRTs2QkFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7Q0FDakMseUJBQUE7Q0FDRixxQkFBQTtDQUFNLHlCQUFBO3lCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0NBQ2pDLHFCQUFBO3FCQUNELE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRixDQUFBO0NBRUQsU0FBUyxxQ0FBcUMsR0FBQTtLQUM1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLENBQUE7Q0FDMUQsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSwyQkFBMkIsR0FBRztLQUN6QyxNQUFNLENBQUMsT0FBb0MsRUFBRSxNQUFBLEdBQXFCQSxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQ25GLFFBQUEsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtDQUNuQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtDQUMzQyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO0NBQ3RDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO0NBQzlDLFNBQUE7Q0FDRCxRQUFBLE9BQU8sTUFBTSxDQUFBO01BQ2Q7S0FFRCxNQUFNLENBQUMsS0FBOEIsRUFBRSxNQUFlLEVBQUE7U0FDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZQSxjQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJQSxjQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFFLFFBQUEsSUFBSSxHQUFHLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0NBQ2pFLFFBQUEsTUFBTSxPQUFPLEdBQUcscUNBQXFDLEVBQUUsQ0FBQTtDQUN2RCxRQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7Q0FDdkIsWUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7YUFDM0IsUUFBUSxHQUFHLEtBQUssQ0FBQztDQUNmLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNsQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7cUJBQ3JDLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRixDQUFBO0NBRUQsU0FBUyxrQ0FBa0MsR0FBQTtDQUN6QyxJQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUE7Q0FDcEIsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSx3QkFBd0IsR0FBRztLQUN0QyxNQUFNLENBQUMsT0FBaUMsRUFBRSxNQUFBLEdBQXFCQSxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO1NBQ2hGLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7Q0FDeEIsUUFBQSxLQUFLLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Q0FDM0IsWUFBQSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ2hCLFNBQUE7U0FDRCxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDZixRQUFBLE9BQU8sTUFBTSxDQUFBO01BQ2Q7S0FFRCxNQUFNLENBQUMsS0FBOEIsRUFBRSxNQUFlLEVBQUE7U0FDcEQsTUFBTSxNQUFNLEdBQUcsS0FBSyxZQUFZQSxjQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJQSxjQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFFLFFBQUEsSUFBSSxHQUFHLEdBQUcsTUFBTSxLQUFLLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFBO0NBQ2pFLFFBQUEsTUFBTSxPQUFPLEdBQUcsa0NBQWtDLEVBQUUsQ0FBQTtDQUNwRCxRQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7Q0FDdkIsWUFBQSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7YUFDM0IsUUFBUSxHQUFHLEtBQUssQ0FBQztDQUNmLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTt5QkFDbkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUE7Q0FDekMsd0JBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRTs2QkFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7Q0FDakMseUJBQUE7Q0FDRixxQkFBQTtDQUFNLHlCQUFBO3lCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0NBQ2pDLHFCQUFBO3FCQUNELE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRixDQUFBO0NBRUQsU0FBUyxtQ0FBbUMsR0FBQTtDQUMxQyxJQUFBLE9BQU8sRUFBRSxDQUFBO0NBQ1gsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSx5QkFBeUIsR0FBRztLQUN2QyxNQUFNLENBQUMsQ0FBNEIsRUFBRSxNQUFBLEdBQXFCQSxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQzNFLFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyxtQ0FBbUMsRUFBRSxDQUFBO0NBQ3JELFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDOU9EOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0sa0JBQWtCLEdBQTRCO0tBQ3pELFNBQVMsQ0FBQyxLQUFxQixFQUFFLE9BQW1CLEVBQUE7U0FDbEQsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMzQyxRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQzdELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7TUFDbkM7Q0FDRCxJQUFBLFdBQVcsQ0FBQyxNQUFrQixFQUFBO0NBQzVCLFFBQUEsT0FBTyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQTtNQUN2RTtLQUNELE1BQU0sR0FBQTs7U0FFSixPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQy9DO0VBQ0Y7O0NDekJEO0NBdUJBLFNBQVMsb0JBQW9CLEdBQUE7S0FDM0IsT0FBTztDQUNMLFFBQUEsY0FBYyxFQUFFLFNBQVM7Q0FDekIsUUFBQSxnQkFBZ0IsRUFBRSxTQUFTO0NBQzNCLFFBQUEsT0FBTyxFQUFFLFNBQVM7Q0FDbEIsUUFBQSxHQUFHLEVBQUUsRUFBRTtDQUNQLFFBQUEsT0FBTyxFQUFFLFNBQVM7Q0FDbEIsUUFBQSxLQUFLLEVBQUUsU0FBUztDQUNoQixRQUFBLEtBQUssRUFBRSxTQUFTO01BQ2pCLENBQUE7Q0FDSCxDQUFDO0NBR0Q7O0NBRUc7Q0FDSSxNQUFNLFVBQVUsR0FBRztLQUN4QixNQUFNLENBQUMsT0FBbUIsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQ2xFLFFBQUEsSUFBSSxPQUFPLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtDQUN4QyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtDQUM5QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7Q0FDMUMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtDQUNqRCxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO0NBQ2pDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQ3hDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLEdBQUcsS0FBSyxFQUFFLEVBQUU7Q0FDdEIsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDdEMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtDQUNqQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtDQUMxQyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO0NBQy9CLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQ3ZDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7YUFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNoRSxTQUFBO0NBQ0QsUUFBQSxPQUFPLE1BQU0sQ0FBQTtNQUNkO0tBRUQsTUFBTSxDQUFDLEtBQThCLEVBQUUsTUFBZSxFQUFBO1NBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWUEsY0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMxRSxRQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtDQUNqRSxRQUFBLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixFQUFFLENBQUE7Q0FDdEMsUUFBQSxPQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDZixnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDdEMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3hDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDL0IsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO3FCQUM3QixNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUE7cUJBQ2pDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtxQkFDOUIsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3RELE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0NoR0Q7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxjQUFjLEdBQXdCO0tBQ2pELFNBQVMsQ0FBQyxLQUFpQixFQUFFLE9BQW1CLEVBQUE7U0FDOUMsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN2QyxRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQzdELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7TUFDbkM7Q0FDRCxJQUFBLFdBQVcsQ0FBQyxNQUFrQixFQUFBO0NBQzVCLFFBQUEsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQTtNQUNuRTtLQUNELE1BQU0sR0FBQTs7U0FFSixPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQzNDO0VBQ0Y7O0NDSkQsU0FBUyx5QkFBeUIsR0FBQTtDQUNoQyxJQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLENBQUE7Q0FDckcsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxlQUFlLEdBQUc7S0FDN0IsTUFBTSxDQUFDLE9BQXdCLEVBQUUsTUFBQSxHQUFxQkQsY0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQTtDQUN2RSxRQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7Q0FDaEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7Q0FDdkMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtDQUNuQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtDQUM1QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO0NBQ3JDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0NBQzdDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7Q0FDdEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7Q0FDN0MsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyx5QkFBeUIsRUFBRSxDQUFBO0NBQzNDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFTLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDbkMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNwQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3BDLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0NwRUQ7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxtQkFBbUIsR0FBNkI7S0FDM0QsU0FBUyxDQUFDLEtBQXNCLEVBQUUsT0FBbUIsRUFBQTtTQUNuRCxNQUFNLE1BQU0sR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzVDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO01BQ3hFO0tBQ0QsTUFBTSxHQUFBOztTQUVKLE9BQU8sZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUE7TUFDaEQ7RUFDRjs7Q0NIRCxTQUFTLCtCQUErQixHQUFBO0tBQ3RDLE9BQU87Q0FDTCxRQUFBLE1BQU0sRUFBRSxDQUFDO0NBQ1QsUUFBQSxRQUFRLEVBQUUsRUFBRTtDQUNaLFFBQUEsTUFBTSxFQUFFLFNBQVM7Q0FDakIsUUFBQSxTQUFTLEVBQUUsU0FBUztDQUNwQixRQUFBLEtBQUssRUFBRSxTQUFTO0NBQ2hCLFFBQUEsTUFBTSxFQUFFLFNBQVM7Q0FDakIsUUFBQSxRQUFRLEVBQUUsQ0FBQztDQUNYLFFBQUEsU0FBUyxFQUFFLENBQUM7TUFDYixDQUFBO0NBQ0gsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxxQkFBcUIsR0FBRztLQUNuQyxNQUFNLENBQUMsT0FBOEIsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQzdFLFFBQUEsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtDQUN4QixZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtDQUN4QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssRUFBRSxFQUFFO0NBQzNCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQzNDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7YUFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNsRSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO2FBQ25DLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDckUsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTthQUMvQixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ2pFLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7YUFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNsRSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO0NBQzFCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQzFDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxDQUFDLEVBQUU7Q0FDM0IsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7Q0FDM0MsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRywrQkFBK0IsRUFBRSxDQUFBO0NBQ2pELFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFTLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDbEMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3hELE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO3FCQUMzRCxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDdkQsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3hELE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtxQkFDakMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNsQyxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDdEdEOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0seUJBQXlCLEdBQW1DO0tBQ3ZFLFNBQVMsQ0FBQyxLQUE0QixFQUFFLE9BQW1CLEVBQUE7U0FDekQsTUFBTSxNQUFNLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQ2xELFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7TUFDOUU7S0FDRCxNQUFNLEdBQUE7O1NBRUosT0FBTyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQ3REO0VBQ0Y7O0NDSkQsU0FBUyx1QkFBdUIsR0FBQTtDQUM5QixJQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLENBQUE7Q0FDckcsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxhQUFhLEdBQUc7S0FDM0IsTUFBTSxDQUFDLE9BQXNCLEVBQUUsTUFBQSxHQUFxQkQsY0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQTtDQUNyRSxRQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7Q0FDaEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7Q0FDdkMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtDQUNuQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtDQUM1QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO0NBQ3JDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0NBQzdDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7Q0FDdEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUE7Q0FDN0MsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyx1QkFBdUIsRUFBRSxDQUFBO0NBQ3pDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFTLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDbkMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNwQyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3BDLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0NwRUQ7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxpQkFBaUIsR0FBMkI7S0FDdkQsU0FBUyxDQUFDLEtBQW9CLEVBQUUsT0FBbUIsRUFBQTtTQUNqRCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO01BQ3RFO0tBQ0QsTUFBTSxHQUFBOztTQUVKLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUE7TUFDOUM7RUFDRjs7Q0NIRCxTQUFTLDZCQUE2QixHQUFBO0tBQ3BDLE9BQU87Q0FDTCxRQUFBLE1BQU0sRUFBRSxDQUFDO0NBQ1QsUUFBQSxRQUFRLEVBQUUsRUFBRTtDQUNaLFFBQUEsTUFBTSxFQUFFLFNBQVM7Q0FDakIsUUFBQSxTQUFTLEVBQUUsU0FBUztDQUNwQixRQUFBLEtBQUssRUFBRSxTQUFTO0NBQ2hCLFFBQUEsTUFBTSxFQUFFLFNBQVM7Q0FDakIsUUFBQSxRQUFRLEVBQUUsQ0FBQztDQUNYLFFBQUEsU0FBUyxFQUFFLENBQUM7TUFDYixDQUFBO0NBQ0gsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxtQkFBbUIsR0FBRztLQUNqQyxNQUFNLENBQUMsT0FBNEIsRUFBRSxNQUFBLEdBQXFCRCxjQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFBO0NBQzNFLFFBQUEsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtDQUN4QixZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtDQUN4QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssRUFBRSxFQUFFO0NBQzNCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQzNDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7YUFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNsRSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO2FBQ25DLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7Q0FDckUsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTthQUMvQixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFBO0NBQ2pFLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7YUFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNsRSxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO0NBQzFCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0NBQzFDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxDQUFDLEVBQUU7Q0FDM0IsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7Q0FDM0MsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyw2QkFBNkIsRUFBRSxDQUFBO0NBQy9DLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFTLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtxQkFDbEMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3hELE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO3FCQUMzRCxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQTtxQkFDdkQsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7cUJBQ3hELE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtxQkFDakMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO3FCQUNsQyxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDdEdEOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0sdUJBQXVCLEdBQWlDO0tBQ25FLFNBQVMsQ0FBQyxLQUEwQixFQUFFLE9BQW1CLEVBQUE7U0FDdkQsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQ2hELFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7TUFDNUU7S0FDRCxNQUFNLEdBQUE7O1NBRUosT0FBTyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQ3BEO0VBQ0Y7O0NDekJEO0NBbUJBLFNBQVMsc0JBQXNCLEdBQUE7Q0FDN0IsSUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUE7Q0FDaEcsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxZQUFZLEdBQUc7S0FDMUIsTUFBTSxDQUFDLE9BQXFCLEVBQUUsTUFBQSxHQUFxQkQsY0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQTtDQUNwRSxRQUFBLElBQUksT0FBTyxDQUFDLGNBQWMsS0FBSyxTQUFTLEVBQUU7Q0FDeEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7Q0FDOUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxFQUFFO0NBQzFDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7Q0FDakQsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtDQUNqQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtDQUN4QyxTQUFBO1NBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtDQUN4QixRQUFBLEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtDQUMzQixZQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7Q0FDaEIsU0FBQTtTQUNELE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtDQUNmLFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyxzQkFBc0IsRUFBRSxDQUFBO0NBQ3hDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3RDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO3FCQUN4QyxNQUFLO0NBQ1AsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQy9CLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7eUJBQ25CLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFBO0NBQ3pDLHdCQUFBLE9BQU8sTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUU7NkJBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFBO0NBQ2pDLHlCQUFBO0NBQ0YscUJBQUE7Q0FBTSx5QkFBQTt5QkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQTtDQUNqQyxxQkFBQTtxQkFDRCxNQUFLO0NBQ1AsZ0JBQUE7Q0FDRSxvQkFBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQTtxQkFDeEIsTUFBSztDQUNSLGFBQUE7Q0FDRixTQUFBO0NBQ0QsUUFBQSxPQUFPLE9BQU8sQ0FBQTtNQUNmO0VBQ0Y7O0NDM0VEOztDQUVHO0NBQ0ksTUFBTUMsY0FBWSxHQUFHLElBQUksQ0FBQTtDQUVoQzs7Q0FFRztDQUNJLE1BQU0sZ0JBQWdCLEdBQTBCO0tBQ3JELFNBQVMsQ0FBQyxLQUFtQixFQUFFLE9BQW1CLEVBQUE7U0FDaEQsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN6QyxRQUFBLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0NBQzdELFFBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7TUFDbkM7Q0FDRCxJQUFBLFdBQVcsQ0FBQyxNQUFrQixFQUFBO0NBQzVCLFFBQUEsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQTtNQUNyRTtLQUNELE1BQU0sR0FBQTs7U0FFSixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFBO01BQzdDO0VBQ0Y7O0NDekJEO0NBYUEsU0FBUyx1QkFBdUIsR0FBQTtDQUM5QixJQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLENBQUE7Q0FDbkMsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxhQUFhLEdBQUc7S0FDM0IsTUFBTSxDQUFDLE9BQXNCLEVBQUUsTUFBQSxHQUFxQkQsY0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQTtDQUNyRSxRQUFBLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxJQUFJLEVBQUU7Q0FDcEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7Q0FDL0MsU0FBQTtDQUNELFFBQUEsT0FBTyxNQUFNLENBQUE7TUFDZDtLQUVELE1BQU0sQ0FBQyxLQUE4QixFQUFFLE1BQWUsRUFBQTtTQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLFlBQVlBLGNBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUlBLGNBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUUsUUFBQSxJQUFJLEdBQUcsR0FBRyxNQUFNLEtBQUssU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUE7Q0FDakUsUUFBQSxNQUFNLE9BQU8sR0FBRyx1QkFBdUIsRUFBRSxDQUFBO0NBQ3pDLFFBQUEsT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRTtDQUN2QixZQUFBLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQTthQUMzQixRQUFRLEdBQUcsS0FBSyxDQUFDO0NBQ2YsZ0JBQUEsS0FBSyxDQUFDO0NBQ0osb0JBQUEsT0FBTyxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3ZDLE1BQUs7Q0FDUCxnQkFBQTtDQUNFLG9CQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO3FCQUN4QixNQUFLO0NBQ1IsYUFBQTtDQUNGLFNBQUE7Q0FDRCxRQUFBLE9BQU8sT0FBTyxDQUFBO01BQ2Y7RUFDRjs7Q0MxQ0Q7O0NBRUc7Q0FDSSxNQUFNQyxjQUFZLEdBQUcsSUFBSSxDQUFBO0NBRWhDOztDQUVHO0NBQ0ksTUFBTSxpQkFBaUIsR0FBMkI7S0FDdkQsU0FBUyxDQUFDLEtBQW9CLEVBQUUsT0FBbUIsRUFBQTtTQUNqRCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO0NBQzFDLFFBQUEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7Q0FDN0QsUUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtNQUNuQztDQUNELElBQUEsV0FBVyxDQUFDLE1BQWtCLEVBQUE7Q0FDNUIsUUFBQSxPQUFPLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFBO01BQ3RFO0tBQ0QsTUFBTSxHQUFBOztTQUVKLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUE7TUFDOUM7RUFDRjs7Q0N6QkQ7Q0FrQkEsU0FBUyx1QkFBdUIsR0FBQTtDQUM5QixJQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQUE7Q0FDdkYsQ0FBQztDQUdEOztDQUVHO0NBQ0ksTUFBTSxhQUFhLEdBQUc7S0FDM0IsTUFBTSxDQUFDLE9BQXNCLEVBQUUsTUFBQSxHQUFxQkQsY0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBQTtDQUNyRSxRQUFBLElBQUksT0FBTyxDQUFDLGNBQWMsS0FBSyxTQUFTLEVBQUU7Q0FDeEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7Q0FDOUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxFQUFFO0NBQzFDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUE7Q0FDakQsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtDQUNqQyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtDQUN4QyxTQUFBO0NBQ0QsUUFBQSxPQUFPLE1BQU0sQ0FBQTtNQUNkO0tBRUQsTUFBTSxDQUFDLEtBQThCLEVBQUUsTUFBZSxFQUFBO1NBQ3BELE1BQU0sTUFBTSxHQUFHLEtBQUssWUFBWUEsY0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEdBQUcsSUFBSUEsY0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUMxRSxRQUFBLElBQUksR0FBRyxHQUFHLE1BQU0sS0FBSyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQTtDQUNqRSxRQUFBLE1BQU0sT0FBTyxHQUFHLHVCQUF1QixFQUFFLENBQUE7Q0FDekMsUUFBQSxPQUFPLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFBO2FBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Q0FDZixnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDdEMsTUFBSztDQUNQLGdCQUFBLEtBQUssQ0FBQztDQUNKLG9CQUFBLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUE7cUJBQ3hDLE1BQUs7Q0FDUCxnQkFBQSxLQUFLLENBQUM7Q0FDSixvQkFBQSxPQUFPLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtxQkFDL0IsTUFBSztDQUNQLGdCQUFBO0NBQ0Usb0JBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUE7cUJBQ3hCLE1BQUs7Q0FDUixhQUFBO0NBQ0YsU0FBQTtDQUNELFFBQUEsT0FBTyxPQUFPLENBQUE7TUFDZjtFQUNGOztDQzNERDs7Q0FFRztDQUNJLE1BQU1DLGNBQVksR0FBRyxJQUFJLENBQUE7Q0FFaEM7O0NBRUc7Q0FDSSxNQUFNLGlCQUFpQixHQUEyQjtLQUN2RCxTQUFTLENBQUMsS0FBb0IsRUFBRSxPQUFtQixFQUFBO1NBQ2pELE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDMUMsUUFBQSxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQTtDQUM3RCxRQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO01BQ25DO0NBQ0QsSUFBQSxXQUFXLENBQUMsTUFBa0IsRUFBQTtDQUM1QixRQUFBLE9BQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7TUFDdEU7S0FDRCxNQUFNLEdBQUE7O1NBRUosT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQTtNQUM5QztFQUNGOztDQ3pCRDtDQStDQSxTQUFTLHFCQUFxQixHQUFBO0tBQzVCLE9BQU87Q0FDTCxRQUFBLElBQUksRUFBRSxFQUFFO0NBQ1IsUUFBQSxPQUFPLEVBQUUsU0FBUztDQUNsQixRQUFBLElBQUksRUFBRSxTQUFTO0NBQ2YsUUFBQSxPQUFPLEVBQUUsU0FBUztDQUNsQixRQUFBLFFBQVEsRUFBRSxTQUFTO0NBQ25CLFFBQUEsWUFBWSxFQUFFLFNBQVM7Q0FDdkIsUUFBQSxVQUFVLEVBQUUsU0FBUztDQUNyQixRQUFBLFVBQVUsRUFBRSxTQUFTO0NBQ3JCLFFBQUEsS0FBSyxFQUFFLFNBQVM7Q0FDaEIsUUFBQSxNQUFNLEVBQUUsU0FBUztDQUNqQixRQUFBLFVBQVUsRUFBRSxTQUFTO0NBQ3JCLFFBQUEsWUFBWSxFQUFFLFNBQVM7Q0FDdkIsUUFBQSxhQUFhLEVBQUUsU0FBUztDQUN4QixRQUFBLFdBQVcsRUFBRSxTQUFTO0NBQ3RCLFFBQUEsV0FBVyxFQUFFLFNBQVM7Q0FDdEIsUUFBQSxTQUFTLEVBQUUsU0FBUztDQUNwQixRQUFBLFlBQVksRUFBRSxTQUFTO0NBQ3ZCLFFBQUEsVUFBVSxFQUFFLFNBQVM7Q0FDckIsUUFBQSxhQUFhLEVBQUUsU0FBUztDQUN4QixRQUFBLGFBQWEsRUFBRSxTQUFTO0NBQ3hCLFFBQUEsWUFBWSxFQUFFLFNBQVM7Q0FDdkIsUUFBQSxXQUFXLEVBQUUsU0FBUztDQUN0QixRQUFBLFlBQVksRUFBRSxTQUFTO0NBQ3ZCLFFBQUEsU0FBUyxFQUFFLFNBQVM7TUFDckIsQ0FBQTtDQUNILENBQUM7Q0FHRDs7Q0FFRztDQUNJLE1BQU0sV0FBVyxHQUFHO0tBQ3pCLE1BQU0sQ0FBQyxPQUFvQixFQUFFLE1BQUEsR0FBcUJELGNBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUE7Q0FDbkUsUUFBQSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO0NBQ3ZCLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0NBQ3ZDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7Q0FDakMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUE7Q0FDeEMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtDQUM5QixZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtDQUN2QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO0NBQ2pDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0NBQ3pDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7Q0FDbEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7Q0FDMUMsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtDQUN0QyxZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtDQUM3QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO0NBQ3BDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0NBQzdDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7Q0FDcEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7Q0FDN0MsU0FBQTtDQUNELFFBQUEsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtDQUMvQixZQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtDQUN2QyxTQUFBO0NBQ0QsUUFBQSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO0NBQ2hDLFlBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0NBQ3hDLFNBQUE7Q0FDRCxRQUFBLElBQUksT0FBTyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7Q0FDcEMsWUFBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7Q0FDNUMsU0FBQTtD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\n",
    "sha256": "0264a7d52d47f4cbf99c9e900fba33cd18138addb343004faf24b70e04c72930"
  },
  {
    "path": "src/systems/move.ts",
    "content": "\"use strict\";\r\nconst seaBed = engine.addEntity();\r\nTransform.create(seaBed, {\r\n    position: { x: 8, y: 0, z: 8 },\r\n    rotation: Quaternion.euler(0, 90, 0),\r\n    scale: { x: 0.8, y: 0.8, z: 0.8 }\r\n});\r\nGLTFShape.create(seaBed, {\r\n    src: 'models/Underwater.gltf',\r\n});\r\ndefine(\"components/path\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.PathDataComponent = void 0;\r\n    const COMPONENT_ID = 2048;\r\n    const Vector3EcsSchema = Schemas.Map({\r\n        x: Schemas.Float,\r\n        y: Schemas.Float,\r\n        z: Schemas.Float\r\n    });\r\n    const QuaternionEcsType = Schemas.Map({\r\n        x: Schemas.Float,\r\n        y: Schemas.Float,\r\n        z: Schemas.Float,\r\n        w: Schemas.Float\r\n    });\r\n    const PathData = {\r\n        path: Schemas.Array(Vector3EcsSchema),\r\n        origin: Schemas.Int,\r\n        target: Schemas.Int,\r\n        startRot: QuaternionEcsType,\r\n        endRot: QuaternionEcsType,\r\n        fraction: Schemas.Float,\r\n        paused: Schemas.Boolean\r\n    };\r\n    exports.PathDataComponent = engine.defineComponent(PathData, COMPONENT_ID);\r\n});\r\ndefine(\"components/swimSpeed\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.SpeedComponent = void 0;\r\n    const COMPONENT_ID = 1111;\r\n    exports.SpeedComponent = engine.defineComponent({ speed: Schemas.Float }, COMPONENT_ID);\r\n});\r\ndefine(\"sharkPath\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.cpoints = void 0;\r\n    exports.cpoints = [\r\n        { x: 12.8, y: 8, z: 3.2 },\r\n        { x: 12.9253376, y: 8.069056, z: 3.3972224000000004 },\r\n        { x: 13.044940800000001, y: 8.124608, z: 3.6420992000000005 },\r\n        { x: 13.158195200000002, y: 8.167232, z: 3.9304448000000005 },\r\n        { x: 13.264486400000001, y: 8.197504, z: 4.2580736 },\r\n        { x: 13.3632, y: 8.216000000000001, z: 4.620800000000001 },\r\n        { x: 13.453721600000002, y: 8.223296, z: 5.0144384 },\r\n        { x: 13.535436800000003, y: 8.219968, z: 5.434803200000001 },\r\n        { x: 13.607731200000002, y: 8.206592, z: 5.877708800000001 },\r\n        { x: 13.6699904, y: 8.183743999999999, z: 6.3389696 },\r\n        { x: 13.7216, y: 8.152, z: 6.8144 },\r\n        { x: 13.761945599999999, y: 8.111936, z: 7.2998144 },\r\n        { x: 13.790412800000002, y: 8.064128, z: 7.7910272 },\r\n        { x: 13.806387200000001, y: 8.009152, z: 8.283852799999998 },\r\n        { x: 13.809254400000002, y: 7.947584, z: 8.7741056 },\r\n        { x: 13.7984, y: 7.880000000000001, z: 9.2576 },\r\n        { x: 13.773209600000001, y: 7.806975999999999, z: 9.7301504 },\r\n        { x: 13.7330688, y: 7.729087999999999, z: 10.1875712 },\r\n        { x: 13.677363200000002, y: 7.646912, z: 10.6256768 },\r\n        { x: 13.6054784, y: 7.561024, z: 11.040281600000004 },\r\n        { x: 13.5168, y: 7.4719999999999995, z: 11.427200000000003 },\r\n        { x: 13.4107136, y: 7.380415999999999, z: 11.782246400000002 },\r\n        { x: 13.2866048, y: 7.286847999999999, z: 12.101235200000001 },\r\n        { x: 13.1438592, y: 7.191872, z: 12.379980800000004 },\r\n        { x: 12.9818624, y: 7.096063999999998, z: 12.6142976 },\r\n        { x: 12.8, y: 7, z: 12.8 },\r\n        { x: 12.583116799999999, y: 6.896691199999999, z: 12.9465856 },\r\n        { x: 12.3193344, y: 6.7796096, z: 13.067084800000002 },\r\n        { x: 12.012953600000001, y: 6.650022399999999, z: 13.1626112 },\r\n        { x: 11.6682752, y: 6.5091968, z: 13.2342784 },\r\n        { x: 11.2896, y: 6.3584, z: 13.2832 },\r\n        { x: 10.8812288, y: 6.1988992, z: 13.310489600000002 },\r\n        { x: 10.4474624, y: 6.031961600000001, z: 13.317260800000001 },\r\n        { x: 9.9926016, y: 5.8588544, z: 13.3046272 },\r\n        { x: 9.5209472, y: 5.6808448, z: 13.273702400000001 },\r\n        { x: 9.0368, y: 5.4992, z: 13.225600000000002 },\r\n        { x: 8.544460800000001, y: 5.3151872000000004, z: 13.1614336 },\r\n        { x: 8.048230400000001, y: 5.130073600000001, z: 13.082316800000001 },\r\n        { x: 7.552409600000001, y: 4.945126400000001, z: 12.989363199999998 },\r\n        { x: 7.0612992000000006, y: 4.761612800000001, z: 12.8836864 },\r\n        { x: 6.5792, y: 4.580800000000001, z: 12.766399999999999 },\r\n        { x: 6.110412800000001, y: 4.4039552, z: 12.6386176 },\r\n        { x: 5.6592384, y: 4.2323456, z: 12.5014528 },\r\n        { x: 5.2299776, y: 4.067238400000001, z: 12.3560192 },\r\n        { x: 4.8269312, y: 3.9099008, z: 12.2034304 },\r\n        { x: 4.4544, y: 3.7616, z: 12.0448 },\r\n        { x: 4.1166848, y: 3.6236032, z: 11.881241600000001 },\r\n        { x: 3.8180863999999994, y: 3.4971775999999997, z: 11.7138688 },\r\n        { x: 3.5629056000000006, y: 3.3835904, z: 11.543795200000002 },\r\n        { x: 3.3554432000000016, y: 3.2841087999999994, z: 11.3721344 },\r\n        { x: 3.2, y: 3.2, z: 11.2 },\r\n        { x: 3.0896128000000003, y: 3.126272, z: 11.0149248 },\r\n        { x: 3.0132224, y: 3.057216, z: 10.8051584 },\r\n        { x: 2.9689856000000003, y: 2.9930240000000006, z: 10.5728896 },\r\n        { x: 2.9550592, y: 2.933888, z: 10.320307199999998 },\r\n        { x: 2.9696, y: 2.8800000000000003, z: 10.0496 },\r\n        { x: 3.0107648000000005, y: 2.831552, z: 9.762956799999998 },\r\n        { x: 3.0767104000000005, y: 2.788736, z: 9.462566399999998 },\r\n        { x: 3.1655936000000002, y: 2.751744, z: 9.150617599999997 },\r\n        { x: 3.2755712000000003, y: 2.720768, z: 8.8292992 },\r\n        { x: 3.4048, y: 2.6960000000000006, z: 8.500799999999998 },\r\n        { x: 3.5514368000000003, y: 2.6776320000000005, z: 8.1673088 },\r\n        { x: 3.7136384000000002, y: 2.6658560000000002, z: 7.831014399999999 },\r\n        { x: 3.8895616, y: 2.660864000000001, z: 7.494105599999999 },\r\n        { x: 4.077363200000001, y: 2.662848, z: 7.158771199999999 },\r\n        { x: 4.2752, y: 2.6720000000000006, z: 6.8271999999999995 },\r\n        { x: 4.4812288, y: 2.6885120000000007, z: 6.5015807999999975 },\r\n        { x: 4.6936064, y: 2.7125760000000003, z: 6.184102399999998 },\r\n        { x: 4.910489600000001, y: 2.7443840000000006, z: 5.8769535999999984 },\r\n        { x: 5.130035200000001, y: 2.784128000000001, z: 5.582323199999998 },\r\n        { x: 5.350400000000002, y: 2.8320000000000007, z: 5.302399999999996 },\r\n        { x: 5.569740800000002, y: 2.8881920000000005, z: 5.039372799999995 },\r\n        { x: 5.786214400000002, y: 2.952896000000001, z: 4.795430399999995 },\r\n        { x: 5.997977600000002, y: 3.026304000000001, z: 4.572761599999995 },\r\n        { x: 6.203187200000001, y: 3.1086080000000016, z: 4.373555199999995 },\r\n        { x: 6.4, y: 3.2, z: 4.2 },\r\n        { x: 6.6019328, y: 3.3079808, z: 4.0412672 },\r\n        { x: 6.822502400000001, y: 3.4385664000000005, z: 3.8856576000000005 },\r\n        { x: 7.059865600000001, y: 3.5897216, z: 3.7340544 },\r\n        { x: 7.312179200000001, y: 3.7594112, z: 3.5873408000000007 },\r\n        { x: 7.5776, y: 3.9456, z: 3.4464000000000006 },\r\n        { x: 7.8542848, y: 4.1462528, z: 3.3121152 },\r\n        { x: 8.140390400000001, y: 4.359334400000001, z: 3.1853696 },\r\n        { x: 8.434073600000001, y: 4.5828096, z: 3.0670464 },\r\n        { x: 8.7334912, y: 4.8146432, z: 2.9580288000000006 },\r\n        { x: 9.0368, y: 5.0527999999999995, z: 2.8592000000000004 },\r\n        { x: 9.3421568, y: 5.2952448, z: 2.7714432 },\r\n        { x: 9.6477184, y: 5.5399424, z: 2.6956416 },\r\n        { x: 9.951641600000002, y: 5.7848576000000005, z: 2.6326784000000005 },\r\n        { x: 10.252083200000001, y: 6.0279552, z: 2.5834368000000003 },\r\n        { x: 10.547200000000002, y: 6.267200000000001, z: 2.548800000000001 },\r\n        { x: 10.8351488, y: 6.5005568, z: 2.5296512000000004 },\r\n        { x: 11.114086400000001, y: 6.725990400000001, z: 2.5268736000000005 },\r\n        { x: 11.382169600000001, y: 6.941465600000002, z: 2.5413504000000002 },\r\n        { x: 11.637555200000001, y: 7.144947200000001, z: 2.5739648000000006 },\r\n        { x: 11.878400000000003, y: 7.3344000000000005, z: 2.6256000000000004 },\r\n        { x: 12.102860800000002, y: 7.507788800000002, z: 2.697139200000001 },\r\n        { x: 12.309094400000003, y: 7.663078400000002, z: 2.7894656000000015 },\r\n        { x: 12.495257600000002, y: 7.798233600000001, z: 2.9034624000000013 },\r\n        { x: 12.659507200000004, y: 7.911219200000001, z: 3.0400128000000013 },\r\n        { x: 12.8, y: 8, z: 3.2 }\r\n    ];\r\n});\r\ndefine(\"shark\", [\"require\", \"exports\", \"components/path\", \"components/swimSpeed\", \"sharkPath\"], function (require, exports, path_1, swimSpeed_1, sharkPath_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.createShark = void 0;\r\n    createShark();\r\n    function createShark() {\r\n        const shark = engine.addEntity();\r\n        Transform.create(shark, {\r\n            position: { x: 8, y: 3, z: 8 },\r\n            rotation: { x: 0, y: 0, z: 0, w: 1 },\r\n            scale: { x: 0.5, y: 0.5, z: 0.5 }\r\n        });\r\n        GLTFShape.create(shark, {\r\n            src: 'models/shark.glb'\r\n        });\r\n        Animator.create(shark, {\r\n            states: [\r\n                {\r\n                    clip: \"swim\",\r\n                    loop: true,\r\n                    playing: true,\r\n                    speed: 0.5,\r\n                    weight: 0.5,\r\n                    name: \"swim\"\r\n                },\r\n                {\r\n                    clip: \"bite\",\r\n                    loop: true,\r\n                    playing: false,\r\n                    shouldReset: false,\r\n                    name: \"bite\"\r\n                }\r\n            ]\r\n        });\r\n        swimSpeed_1.SpeedComponent.create(shark, {\r\n            speed: 0.5\r\n        });\r\n        path_1.PathDataComponent.create(shark, {\r\n            path: sharkPath_1.cpoints,\r\n            origin: 0,\r\n            target: 1,\r\n            startRot: Quaternion.Zero(),\r\n            endRot: Quaternion.Zero(),\r\n            fraction: 0,\r\n            paused: false\r\n        });\r\n    }\r\n    exports.createShark = createShark;\r\n});\r\ndefine(\"helper/interpolation\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Interpolate = exports.InterpolationType = void 0;\r\n    var InterpolationType;\r\n    (function (InterpolationType) {\r\n        InterpolationType[InterpolationType[\"LINEAR\"] = 0] = \"LINEAR\";\r\n        InterpolationType[InterpolationType[\"EASEINQUAD\"] = 1] = \"EASEINQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEOUTQUAD\"] = 2] = \"EASEOUTQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEQUAD\"] = 3] = \"EASEQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEINSINE\"] = 4] = \"EASEINSINE\";\r\n        InterpolationType[InterpolationType[\"EASEOUTSINE\"] = 5] = \"EASEOUTSINE\";\r\n        InterpolationType[InterpolationType[\"EASESINE\"] = 6] = \"EASESINE\";\r\n        InterpolationType[InterpolationType[\"EASEINEXPO\"] = 7] = \"EASEINEXPO\";\r\n        InterpolationType[InterpolationType[\"EASEOUTEXPO\"] = 8] = \"EASEOUTEXPO\";\r\n        InterpolationType[InterpolationType[\"EASEEXPO\"] = 9] = \"EASEEXPO\";\r\n        InterpolationType[InterpolationType[\"EASEINELASTIC\"] = 10] = \"EASEINELASTIC\";\r\n        InterpolationType[InterpolationType[\"EASEOUTELASTIC\"] = 11] = \"EASEOUTELASTIC\";\r\n        InterpolationType[InterpolationType[\"EASEELASTIC\"] = 12] = \"EASEELASTIC\";\r\n        InterpolationType[InterpolationType[\"EASEINBOUNCE\"] = 13] = \"EASEINBOUNCE\";\r\n        InterpolationType[InterpolationType[\"EASEOUTEBOUNCE\"] = 14] = \"EASEOUTEBOUNCE\";\r\n        InterpolationType[InterpolationType[\"EASEBOUNCE\"] = 15] = \"EASEBOUNCE\";\r\n    })(InterpolationType = exports.InterpolationType || (exports.InterpolationType = {}));\r\n    function Interpolate(type, t) {\r\n        switch (type) {\r\n            case InterpolationType.LINEAR:\r\n                return InterpolateLinear(t);\r\n                break;\r\n            case InterpolationType.EASEINQUAD:\r\n                return InterpolateEaseInQuad(t);\r\n                break;\r\n            case InterpolationType.EASEOUTQUAD:\r\n                return InterpolateEaseOutQuad(t);\r\n                break;\r\n            case InterpolationType.EASEQUAD:\r\n                return InterpolateEaseQuad(t);\r\n                break;\r\n            case InterpolationType.EASEINSINE:\r\n                return InterpolateEaseInSine(t);\r\n                break;\r\n            case InterpolationType.EASEOUTSINE:\r\n                return InterpolateEaseOutSine(t);\r\n                break;\r\n            case InterpolationType.EASESINE:\r\n                return InterpolateEaseInOutSine(t);\r\n                break;\r\n            case InterpolationType.EASEINEXPO:\r\n                return InterpolateEaseInExpo(t);\r\n                break;\r\n            case InterpolationType.EASEOUTEXPO:\r\n                return InterpolateEaseOutExpo(t);\r\n                break;\r\n            case InterpolationType.EASEEXPO:\r\n                return InterpolateEaseInOutExpo(t);\r\n                break;\r\n            case InterpolationType.EASEINELASTIC:\r\n                return InterpolateEaseInElastic(t);\r\n                break;\r\n            case InterpolationType.EASEOUTELASTIC:\r\n                return InterpolateEaseOutElastic(t);\r\n                break;\r\n            case InterpolationType.EASEELASTIC:\r\n                return InterpolateEaseInOutElastic(t);\r\n                break;\r\n            case InterpolationType.EASEINBOUNCE:\r\n                return InterpolateEaseInBounce(t);\r\n                break;\r\n            case InterpolationType.EASEOUTEBOUNCE:\r\n                return InterpolateEaseOutBounce(t);\r\n                break;\r\n            case InterpolationType.EASEBOUNCE:\r\n                return InterpolateEaseInOutBounce(t);\r\n                break;\r\n            default:\r\n                return InterpolateLinear(t);\r\n        }\r\n    }\r\n    exports.Interpolate = Interpolate;\r\n    function InterpolateLinear(t) {\r\n        return t;\r\n    }\r\n    function InterpolateEaseInQuad(t) {\r\n        return t * t;\r\n    }\r\n    function InterpolateEaseOutQuad(t) {\r\n        return t * (2 - t);\r\n    }\r\n    function InterpolateEaseQuad(t) {\r\n        return (t * t) / (2.0 * (t * t - t) + 1.0);\r\n    }\r\n    function InterpolateEaseInSine(t) {\r\n        return 1 - Math.cos((t * Math.PI) / 2);\r\n    }\r\n    function InterpolateEaseOutSine(t) {\r\n        return Math.sin((t * Math.PI) / 2);\r\n    }\r\n    function InterpolateEaseInOutSine(t) {\r\n        return -(Math.cos(Math.PI * t) - 1) / 2;\r\n    }\r\n    function InterpolateEaseInExpo(t) {\r\n        return t === 0 ? 0 : Math.pow(2, 10 * t - 10);\r\n    }\r\n    function InterpolateEaseOutExpo(t) {\r\n        return t === 1 ? 1 : 1 - Math.pow(2, -10 * t);\r\n    }\r\n    function InterpolateEaseInOutExpo(t) {\r\n        return t === 0 ? 0 : t === 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2;\r\n    }\r\n    function InterpolateEaseInElastic(t) {\r\n        const c4 = (2 * Math.PI) / 3;\r\n        return t === 0 ? 0 : t === 1 ? 1 : -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * c4);\r\n    }\r\n    function InterpolateEaseOutElastic(t) {\r\n        const c5 = (2 * Math.PI) / 3;\r\n        return t === 0 ? 0 : t === 1 ? 1 : Math.pow(2, -10 * t) * Math.sin((t * 10 - 0.75) * c5) + 1;\r\n    }\r\n    function InterpolateEaseInOutElastic(t) {\r\n        const c6 = (2 * Math.PI) / 4.5;\r\n        return t === 0\r\n            ? 0\r\n            : t === 1\r\n                ? 1\r\n                : t < 0.5\r\n                    ? -(Math.pow(2, 20 * t - 10) * Math.sin((20 * t - 11.125) * c6)) / 2\r\n                    : (Math.pow(2, -20 * t + 10) * Math.sin((20 * t - 11.125) * c6)) / 2 + 1;\r\n    }\r\n    function InterpolateEaseInBounce(t) {\r\n        return 1 - bounce(1 - t);\r\n    }\r\n    function InterpolateEaseOutBounce(t) {\r\n        return bounce(t);\r\n    }\r\n    function InterpolateEaseInOutBounce(t) {\r\n        return t < 0.5 ? (1 - bounce(1 - 2 * t)) / 2 : (1 + bounce(2 * t - 1)) / 2;\r\n    }\r\n    function bounce(x) {\r\n        const n1 = 7.5625;\r\n        const d1 = 2.75;\r\n        if (x < 1 / d1) {\r\n            return n1 * x * x;\r\n        }\r\n        else if (x < 2 / d1) {\r\n            return n1 * (x -= 1.5 / d1) * x + 0.75;\r\n        }\r\n        else if (x < 2.5 / d1) {\r\n            return n1 * (x -= 2.25 / d1) * x + 0.9375;\r\n        }\r\n        else {\r\n            return n1 * (x -= 2.625 / d1) * x + 0.984375;\r\n        }\r\n    }\r\n});\r\ndefine(\"systems/move\", [\"require\", \"exports\", \"components/path\", \"components/swimSpeed\"], function (require, exports, path_2, swimSpeed_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.UpdateSpeed = exports.PatrolPath = void 0;\r\n    function PatrolPath(dt) {\r\n        for (const [entity] of engine.getEntitiesWith(path_2.PathDataComponent)) {\r\n            const transform = Transform.getMutable(entity);\r\n            const path = path_2.PathDataComponent.getMutable(entity);\r\n            const speed = swimSpeed_2.SpeedComponent.get(entity);\r\n            path.fraction += speed.speed / 10;\r\n            transform.position = Vector3.lerp(path.path[path.origin], path.path[path.target], path.fraction);\r\n            transform.rotation = Quaternion.slerp(path.startRot, path.endRot, path.fraction);\r\n            if (path.fraction > 1) {\r\n                path.origin = path.target;\r\n                path.target += 1;\r\n                if (path.target >= path.path.length - 1) {\r\n                    path.target = 0;\r\n                }\r\n                path.fraction = 0;\r\n                path.startRot = transform.rotation;\r\n                const difference = Vector3.subtract(path.path[path.target], path.path[path.origin]);\r\n                const normalizedDifference = Vector3.normalize(difference);\r\n                path.endRot = Quaternion.lookRotation(normalizedDifference);\r\n                UpdateSpeed();\r\n            }\r\n        }\r\n    }\r\n    exports.PatrolPath = PatrolPath;\r\n    engine.addSystem(PatrolPath);\r\n    function UpdateSpeed() {\r\n        for (const [shark] of engine.getEntitiesWith(swimSpeed_2.SpeedComponent)) {\r\n            const speed = swimSpeed_2.SpeedComponent.getMutable(shark);\r\n            const path = path_2.PathDataComponent.get(shark);\r\n            let depthDiff = (path.path[path.target].y - path.path[path.origin].y);\r\n            if (depthDiff > 1) {\r\n                depthDiff = 1;\r\n            }\r\n            else if (depthDiff < -1) {\r\n                depthDiff = -1;\r\n            }\r\n            depthDiff += 1.5;\r\n            const clipSwim = Animator.getMutable(shark).states[0];\r\n            clipSwim.speed = depthDiff;\r\n            clipSwim.weight = depthDiff;\r\n            speed.speed = depthDiff * -1 + 3;\r\n        }\r\n    }\r\n    exports.UpdateSpeed = UpdateSpeed;\r\n});\r\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "e8d65401dc202c6518712403abbe498e2bb3a3216c19982cba9ba8d8b88992c8"
  }
]